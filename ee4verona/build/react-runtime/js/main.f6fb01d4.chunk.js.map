{"version":3,"sources":["utils/polyfills.js","utils/Utils.js","controller/ServerCalls.js","controller/StandardTaskSequencer.js","controller/Controller.js","state/IndexPathHelper.js","components/PropTypesHelper.js","state/UserDefPathHelper.js","state/StateAttributeAccess.js","state/StateManagerHelper.js","state/RecommendationsManager.js","config/AutoLayoutHelper.js","config/CommonConfigHelper.js","state/PathTranslationHelper.js","components/table/TableHelper.js","components/CbaComboBox.js","eval/PropagationHelper.js","components/SelectGroupHelper.js","state/TraceLogHelper.js","components/RenderingHelper.js","state/ComponentStateHelper.js","components/PageHistoryHelper.js","components/BookmarkHelper.js","components/WebToolbar/WebTab.js","components/WebToolbar/WebToolbarHelper.js","components/MenuItemTree.js","components/WebToolbar/WebToolbar.js","components/PageAreaRenderer.js","components/CbaPageArea.js","dialog/ScoringModalData.js","dialog/StatemachineModalData.js","dialog/TracingModalData.js","dialog/ManageBookmarksData.js","dialog/ModalDialog.js","dialog/ModalManager.js","components/SpecialClickActionsHelper.js","components/MenuBuildHelper.js","dialog/DialogPresenter.js","components/CommonActionsHelper.js","components/CbaRichTextField/PositionCalculationHelper.js","components/CbaRichTextField/EditorStateHelper.js","components/CbaRichTextField/DraftLink.js","components/CbaRichTextField/Media.js","components/CbaRichTextField/DraftBullet.js","components/MathJax/MathJaxTranspiler.js","components/CbaRichTextField/MathJaxEntity.js","components/CbaRichTextField/CbaRichTextField.js","components/CbaRichTextField/SelectionHelper.js","components/CbaRichTextField/TextBlockSelectHelper.js","components/InputComponent.js","components/CbaSingleLineInputField.js","components/table/CbaTableCell.js","components/CbaTree/DataGridRenderers/CbaTreeHeader.js","components/CbaTree/TreeTraceHelper.js","components/CbaTree/TreeContextMenuHelper.js","components/CbaTree/DataGridRenderers/CbaTreeCell.js","components/CbaTree/DataGridRenderers/CbaTreeRow.js","components/CbaTree/TreeUtils.js","components/calculator/ValueFormatter.js","components/CbaTree/CbaTreeChildArea.js","components/media/MediaPreview.js","components/media/CbaMedia.js","eval/TermEvaluator.js","config/DragAndDropHelper.js","components/CbaContainer.js","components/CbaRectangle.js","components/CbaSimpleTextField.js","components/CbaButton.js","components/CbaRadioButton.js","components/CbaCheckbox.js","components/CbaLink.js","components/CbaPolygon.js","components/CbaRegionMap.js","components/CbaInnerHtml.js","components/CbaExternalPageFrame.js","components/CbaTree/CbaTree.js","components/CbaTree/CbaTreeView.js","components/table/CellEvaluator.js","components/table/CbaTable.js","components/table/CbaTableCellEditor.js","components/calculator/CbaCalculatorHistory.js","components/calculator/CbaCalculatorInput.js","components/CbaInputField.js","components/CbaTimer/CbaStopWatch.js","components/variable/CbaScaleValueInput.js","components/variable/CbaSpinnerValueInput.js","components/CbaTimer/CbaTimer.js","components/list/ListItem.js","components/list/CbaList.js","components/CbaInterpreter.js","components/CbaTestPresenter.js","components/HeaderButtons.js","components/TopButtonToolbar.js","components/TaskNavigator.js","components/LoggedInView.js","preamble/Login.js","components/PageEventsObserver.js","preamble/App.js","state/ComponentStateManager.js","state/ComponentDirectory.js","state/IncidentsAccumulator.js","eval/ConditionalLinkHelper.js","config/PageConfigurationsManager.js","config/CalculationsConfigurationManager.js","state/PresenterStateManager.js","eval/ValueMapper.js","state/TaskManager.js","state/TaskResultsManager.js","state/TimedEventsCatalog.js","state/StatemachineEventHistory.js","state/Statemachine.js","state/StatemachinesManager.js","state/TaskNavigatorStateManager.js","state/TraceLogBuffer.js","state/ClipboardManager.js","utils/StringUtils.js","transmit/UserDataUploader.js","transmit/TraceLogUploader.js","transmit/PostMessageReceiver.js","components/calculator/EvaluatorHelper.js","components/calculator/ExpressionEvaluator.js","components/calculator/Evaluator.js","components/calculator/KeyboardHelper.js","components/calculator/Renderer.js","components/calculator/HistoryRenderer.js","components/calculator/CbaCalculatorEngine.js","state/CalculatorsManager.js","state/ActionRegister.js","state/FocusRegister.js","config/CustomDragLayer.js","state/RecordingBuffer.js","transmit/RecordingUploader.js","state/LibraryManager.js","state/VariableManager.js","preamble/ReplayRunner.js","state/ReplayStepMonitor.js","i18n.js","state/TranslationManager.js","preamble/TaskPlayer.js","index.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","String","startsWith","searchString","position","_this","indexOf","Utils","_classCallCheck","this","_createClass","key","value","valueMightBeUndefined","defaultValue","baseObject","propertyName","candidate","constructor","Object","keys","length","array","arrayContainsNonEmptyEntry","some","toString","concat","packageJson","version","name","console","info","getCbaVersion","isMobileForced","getQueryParam","navigator","maxTouchPoints","settings","settingName","defaultMode","configFromWindowGlobal","cba_runtime_config","modeFromWindowGlobal","mode","warn","trim","getEventReceiverConfigurationInternal","location","href","urlString","eventTargetWindow","getParameterValueFromUrlOrConfigStructure","eventDomainUri","startTaskPlayerEvent","getWaitingMessageTextsInternal","primary","secondary","parameterName","urlQuery","UrlLib","parse","query","getUrlWithoutPathFromLocation","protocol","portAddOn","port","hostname","error","paramName","getQueryParams","getQueryParamsFromUrlString","elem","fullscreenEnabled","mozFullScreenEnabled","webkitFullscreenEnabled","msFullscreenEnabled","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","fullscreenElement","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","resources","path","isExternal","map","resource","resourceCopy","safeDeepCopy","expectedType","valueType","Number","isInteger","x","y","sizerElement","scrollingElement","iframe","scrollHeight","scrollWidth","scrollableHeight","clientHeight","scrollableWidth","clientWidth","_Utils$calculateFinal","calculateFinalScrollValue","finalX","finalY","doScroll","top","left","element","scroll","behavior","parseInt","includes","computePercentage","parseFloat","num","percentage","deepCopy","object","JSON","stringify","safeDeepCopyObjects","from","to","Array","Date","RegExp","Function","Boolean","forEach","isMobile","a","check","isMobileModeSetAsParameter","userAgent","vendor","opera","test","substr","keyCodes","Backspace","Tab","Enter","Shift","Ctrl","Alt","Escape","ServerCalls","getControllerMode","username","log","runWithSimplifiedPreviewServer","doGetCourseConfigurationStep","getFirstCourse","then","courseStepResult","doGetTestConfigurationsStep","testsStepResult","doGetItemConfigurationsStep","itemsStepResult","doBuildConfigurationStep","assets","arguments","type","resourcePromises","Promise","resolve","reject","linkTag","createElement","as","rel","size","Math","pow","onload","hadErrors","onerror","head","append","all","getCallingUrlWithoutParams","getCallingUrlWithoutPath","restApiTargets","CONFIGURATION_API","split","substring","lastIndexOf","courseName","getCourse","headerButtons","sessionId","courses","testsToRetrieve","buildArrayWithoutDuplicates","promisesForTests","testName","getTest","axiosAllWrapper","_testsStepResult$cont","contextData","tests","response","flaggedErrors","push","index","isEmptyRetrievedValue","collectedItemNames","filter","reduce","itemNamesArray","items","itemsToRetrieve","promisesForItems","itemName","getItem","_this2","_itemsStepResult$cont","validateJsonResults","success","payload","promisesArray","axios","catch","_toConsumableArray","Set","course","getDataFromServer","typeOfData","nameOfValue","urlPathExtension","addAsParam","instance","get","data","userId","ASSETS_API","TRACE_ENDPOINT","RECORDING_ENDPOINT","create","baseURL","getServerPath","timeout","headers","Content-Type","StandardTaskSequencer","findFirstMatchingTaskInTest","newTestName","newTaskName","withErrorLog","newTest","getTestForName","newTaskEntry","taskCourse","find","theArray","task","item","taskName","getNextTaskInfo","nextTaskAvailable","taskList","getCurrentTaskIndex","getPreviousTaskInfo","previousTaskAvailable","switchCurrentTask","activeTestName","activeItemName","activeTaskName","getCurrentTaskInfo","getConfigurationInfo","result","getIndexForTask","buildTaskList","initialTask","findIndex","entry","testsCourse","taskEntry","Controller","runController","taskPlayer","runPlayer","setHttpTraceTransmission","setHttpRecordingTransmission","showLogin","obtainConfigurationAndRunFirstTask","loginDialogClosedCallback","getJsonsData","processConfigurationAndRunFirstTask","configurationData","digestConfigurationResponse","startFirstTaskInTaskPlayer","sendItemConfigurationToTaskPlayer","setTraceContextId","setRecordingContextId","setUserId","setTaskSequencer","taskSwitchCallback","taskAvailableCallback","setHeaderButtons","_this$taskSequencer$g","taskSequencer","ShowTaskNavigationBars","setMenuCarousels","tasks","activateDebuggingWindows","scoreDebugging","hotKey","traceDebugging","statemachineDebugging","startTask","receivedData","dependenciesUrl","MathJax","prefix","libraryPathsMap","dependencies","dependency","addItem","stopOldTaskAndStartNewTask","stopTask","stopOldTaskLogoutAndShowLogin","logout","clearItems","alert","request","scope","switchTaskNext","switchTaskPrevious","switchFirstMatchingTaskInterTest","missingTaskErrorFeedback","buildCurrentTaskLogString","newTaskInfo","message","isTestSwitch","buildLogString","currentTaskInfo","IndexPathHelper","pageName","pageSegment","withNameInFront","endIndex","segmentIndex","getPageNameFromPageSegment","slice","pathRoot","pageAreaType","pageAreaName","pageSegments","lastPageSlashIndex","firstPageSlashIndex","remainingPath","getLastPageSegmentFromPath","splice","dropPageSegmentFromPath","lastSlashIndex","slashIndex","treePath","childPath","typeKeyIndex","trimmedPath","rootPath","dropAllPageSegments","getPageNameFromPath","appendPageSegmentsToPath","buildPageSegment","replace","PropertyMissingException","PropTypesHelper","propTypesRequirement","props","propName","componentName","PropTypes","checkPropTypes","exception","propTypes","toAdd","componentStateManager","isRequired","componentDirectory","incidentsAccumulator","taskResultsManager","statemachinesManager","presenterStateManager","taskNavigatorStateManager","traceLogBuffer","traceLogUploader","recordingBuffer","recordingUploader","clipboardManager","pageConfigurationsManager","taskManager","number","width","height","string","alignmentHorizontal","oneOf","bold","bool","italic","underlined","default","disabled","oneOfType","visited","selected","text","asOptional","getColorVariantsPropTypes","background","style","radius","color","rotate","transformOrigin","getTransformOriginPropTypes","hidden","label","mouseOver","dynamic","shape","variable","valueMap","displayMode","overlayType","standard","alternate","onFocusIn","onFocusOut","page","pageUrl","conditional","receiver","receiverTab","historyMove","addOn","skipTrace","image","withChildren","positionPropsCheck","font","fontPropsCheck","colorPropsCheck","border","borderPropsCheck","transform","transformPropsCheck","state","statePropsCheck","textPropsCheck","imagePropsCheck","cursor","cursorPropsCheck","eventPropsCheck","classifiers","link","linkPropsCheck","userDefinedId","pageEditId","trace","tracePropsCheck","cbaChildren","selectGroups","arrayOf","blockSelectionChanges","enforceSingleSelect","allowDeselect","initiallySelected","deselectTarget","selectGroupMember","controllerPathId","groupName","selectGroupMemberName","moveable","resizable","cells","expanded","nodes","imagePath","depth","onRowExpandClick","func","onRowSelect","distance","UserDefPathHelper","processor","forEachUserDefIdInPath","dropUserDefIdFromPath","lastId","getLastUserDefIdFromPath","pageAreaNameSlashIndex","pageAreaNameStartIndex","firstIdSlashIndex","firstUserDefId","userDefId","userDefIdPath","segments","segment","_segment$split","_segment$split2","_slicedToArray","output","join","StateAttributeAccess","getStateAttribute","setStateAttribute","componentClassName","selectable","singleSelectStructure","controllerState","highlightable","selectedIds","defaultHighlightColor","editorState","selections","modifiersInEditorState","lastCaretPosition","StateManagerHelper","RecommendationsManager","runtime","setRecommendations","recommendations","oldRecommendations","traceRecommendationChange","taskNavigator","highlightRecommendations","refreshRecommendedComponents","setTaskNavigator","isRecommended","indexPath","getCurrentTestTaskItemNames","absoluteUserDefId","userDefIDPath","PathTranslationHelper","getUserDefPathForIndexPath","processTaskSelected","firstRecommendation","findFirstRecommendationForTask","setSelectedOnRecommendedComponent","doRecommendedPageSwitch","newRecommendations","reportEvent","buildRecommendationListForTrace","recommendation","ComponentStateHelper","updateStateAttributeByUserDefPath","extractSelected","setSelected","targetPageSegment","findPageSegmentForUserDefId","targetComponentConfig","findConfigurationForPageSegment","pathState","findOrBuildStateByUserDefPath","defaultLinkReceiver","extractDefaultLinkReceiver","CommonActionsHelper","doPageSwitch","config","RenderingHelper","triggerRenderingViaUserDefPath","AutoLayoutHelper","configProps","orientation","autoLayoutLayer","assign","CommonConfigHelper","buildAbsoluteStyleFromConfig","buildStyleForAutoLayoutPanel","buildStyleForAutoLayoutCell","buildStyleForAutoLayoutElement","raiseError","keywords","keyword","endsWith","_configProps$autoLayo","autoLayout","rows","columns","blockAlignVertically","blockAlignHorizontally","gap","display","gridTemplateRows","transformTemplateKeywords","gridTemplateColumns","alignContent","justifyContent","rowGap","row","columnGap","column","_configProps$autoLayo2","columnStart","rowStart","columnSpan","rowSpan","alignVertically","alignHorizontally","gridColumnStart","gridRowStart","gridColumnEnd","gridRowEnd","alignItems","transformFlexAlignmentKeyword","alignment","resultStyle","useElementPosition","positionFromState","right","_configProps$autoLayo3","addVerticalElementValues","addHorizontalElementValues","dragAndDrop","getUserDefinedId","positionString","textFromVariable","getDynamicValueFromStatemachineAndMapper","textFromState","extractTextValue","mouseOverFromState","extractMouseOverValue","extraStyle","extractDisabled","extractVisited","defaultImage","extractDefaultImage","imageResource","getProperResourcePath","chooseImageVariant","imageStyle","float","opacity","React","src","alt","findOrBuildStateForPathId","recommended","recommendationsManager","buildStyleByState","_ref","positionInConfig","positionInState","extractPosition","orientationValue","_defineProperty","_Object$assign","paddingValue","padding","checkPosition","checkFont","checkState","buildStyleForAutoLayout","extractHidden","setStyleAttribute","chooseImageOrColorVariant","getCursorValue","setBorderStyleAttributes","setBackgroundStyleAttributes","rotateDegrees","translateX","translateY","fontMappingsArray","css","fontFamilyName","fontFileName","setStyleAttributeWithUnits","pointsArray","accumulated","child","dynamicConfig","variableManager","valueMapper","currentTaskId","getCurrentStatePathRoot","variableValue","getVariable","getMappedValue","propsState","attributes","attributeName","valueOrUndefined","borderProps","north","south","west","east","backgroundImageUrl","imageFromVariable","imageVariant","getRecommendationColor","units","variantsEntry","chosenVariant","pickVariantPropertyFromEntry","isBlockDefaultValue","withDefault","variant","isEmptyObject","resourceFromConfig","getProperResourcePathWithFlag","flag","resourceFolder","getResourcePath","getExternalResourcePath","toLowerCase","aditionalClasses","configClassNames","cssClassNames","buildStyleForMask","wrapperStyle","getPageSegmentArray","getUserDefIdForPageSegment","buildUserDefIdPath","getPageAreaTypeFromPath","getPageAreaNameFromPath","appendUserDefIdToPath","userDefPath","pathId","appendPageSegmentToPathRoot","textBlockNamePath","pageAreasPath","textBlockName","textBlockOwnerPageSegment","findPageSegmentForTextBlockOwner","componentConfig","TableHelper","e","tablePath","isInEditMode","keyCode","which","arrow","ctrlKey","emitAutoFocusAndPreventDefault","eventEmitter","emit","preventDefault","n","isNaN","componentPath","tableCellPath","dropIndexFromPageSegment","tableUserDefIdPath","currentSelected","getStateAttributeByUserDefPath","extractSelectedCell","oldSelected","extractOldSelectedCell","CbaComboBox","_Component","_possibleConstructorReturn","_getPrototypeOf","call","getSelectedIdFromState","foundSelectedId","_this$props","comboBoxPath","stateManager","itemConfig","itemPath","appendIndexToPageSegment","itemState","SelectGroupHelper","extractSelectedState","setSelectedIdInState","newSelectedId","_this$props2","comboBoxState","getState","_assertThisInitialized","selectGroupControllerState","extractSelectGroupControllerState","registerStateByPathId","delegateSetSelectedToController","comboBoxGroup","onChangeHandler","_this$props3","oldSelectedId","hasVisibleItemCount","target","oldSelectedItem","newSelectedItem","updateStateAndTriggerRendering","traceUserInteractionPerConfig","buildTraceDetailsAddOn","sendStandardEvent","getDefaultLinkReceiver","onClickHandler","_this$props4","doBasicOnClick","scrollCurrentOptionIntoViewIfVisibleItemCountOne","onContextMenuHandler","doContextMenuOpen","onKeyDownHandler","_this$props5","handleKeyDown","buildTablePath","onFocusHandler","_this$props6","handleCellFocus","_this$props7","onBlur","triggerRenderingViaPath","checkForInvalidItems","isArray","getComboItemText","_this$props8","optionText","generateOptions","itemsConfig","i","generateOptionsForSelect","options","focus","comboRef","current","visibleItemCount","currentlySelectedId","portalMenuContainerElement","querySelectorAll","el","localName","firstChild","className","portalMenuElement","children","scrollIntoView","onClickFrozenHandler","_this$props9","doStandardOnFrozenInteraction","stopPropagation","createRef","_inherits","onMount","onUnmount","nextProps","onReceiveProps","_this$props10","buildStyleByIndexPath","selectedId","boxShadow","maxHeightSize","customStyles","menu","provided","_objectSpread","marginTop","menuList","backgroundColor","option","isSelected","isFocused","lineHeight","fontSize","fontFamily","whiteSpace","overflow","textOverflow","control","minHeight","borderColor","borderWidth","borderRadius","borderStyle","container","s","valueContainer","singleValue","maxWidth","textAlign","indicatorsContainer","dropdownIndicator",":hover","indicatorSeparator","Fragment","onClick","onContextMenu","Select","styles","title","buildTitle","isDisabled","onChange","onKeyDown","onFocus","maxMenuHeight","menuPortalTarget","body","tabIndex","getCssClassNamesValue","ref","data-cba-id","itemsInConfig","itemInConfig","configOnPathSegment","additionalState","setDisabled","setHidden","setTextValue","getItemType","oldSelectedUserDefId","newSelected","newSelectedUserDefId","Component","defaultProps","PropagationHelper","propagationGroups","memberIndexPaths","setPropagationGroupControllerState","controllerIndexPath","appliedAction","getMatchingPropagationGroups","group","applyActionToGroupMembers","controllerUserDefPath","getter","setter","triggerRendering","getIndexPathForUserDefPath","applyToPropagationGroup","updateStateAttribute","fullControllerState","propagationsGroupsState","extractPropagationGroupControllerState","groupConfiguration","action","memberPathPageSegment","memberIndexPath","controlledPathId","selectGroupMemberInfo","extractSelectGroupMemberInfo","groupState","extractMatchingGroupState","singleSelectActive","currentlySelected","requestedSelectState","controlledPathState","singleSelectWithPageSwitch","overrideNoDeselect","doStandardSelectFlagSetting","selectionChangesBlocked","isSingleSelectControlled","withPageSwitch","handleSelectedChildChanges","component","doPageSwitchForComponent","componentType","selectGroupMemberConfig","getSelectGroupMemberPerConfig","isControlledType","containerPageSegment","setSelectGroupMemberInfo","isComboBoxItem","controlledPageSegment","setSelectGroupControllerState","isComboBox","initiallySelectedIndex","selectedEntry","firstItemPath","setStateAttributeForControllerByUserDefPath","comboItems","selectedItemUdi","childConfig","udi","itemIndex","selectedItemsIndexes","extractSelectedIds","selectedListItems","containerIndexPath","matchingChildrenPaths","containerChildrenArray","childIndexPath","selectionIdentification","getSelectionIdentificationWhenSelected","ret","isSelectGroupMember","matchingGroups","controllerAttributeSetter","setStateAttributeForControllerByIndexPath","controllerSelectGroupsState","oldSingleSelectActive","oldSelectedPageSegment","newSingleSelectActive","applyToMembers","fullMemberState","memberPageSegment","methodToApply","findIndexPathsOfDescendants","memberPath","memberInfo","clickSelectedPathId","controllerPath","newIndexResult","calculateNewSelectedIndex","noChange","newMember","doPageSwitchForSelectedSwitcher","clickedSelectedPageSegment","selectedSwitcherPageSegment","selectedSwitcherPath","selectedSwitcherConfig","TraceLogHelper","calculatorsManager","_taskManager$getCurre","currentStatePathRoot","now","components","buildComponentsSnapshot","presentation","getTaskState","incidents","getAllValuesForTask","getTime","clipboard","getStateForTracing","statemachine","states","getCurrentStateMachineLeafStates","history","getHistoryStatemachineData","calculator","getStateForTask","variables","buildVariablesInfoArrayForTask","getAllTasksState","stateType","stateDelta","replayStepMonitor","replayStepId","getCurrentReplayStepId","menuConfig","shouldOpen","entries","clientX","clientY","scrollLeft","scrollTop","currentScrollValue","currentOrientationValue","traceScroll","scrollTraceDetails","buildScrollTraceDetails","traceUserInteraction","incrementReplayStep","dumpScrollTriggeredToTrace","_TraceLogHelper$compu","computeScrollPosition","horizontal","vertical","traceDetails","direction","horizontalScroll","verticalScroll","lastScrollValue","isVerticalOrientation","round","_event$target","getComponentTypeForIndexPath","oldSelectedValue","oldComboSelectedId","getComboboxSelectedItem","dataBeforeSelection","buildTraceDetailsStructure","traceConfig","extendedValues","extendTraceDetailsObject","details","buildTraceLogDetails","timestamp","buildOldSelectedTraceLogValueObject","subtype","oldSelectedIndex","getComboboxItemIndexByUdi","tableIndexPath","_pageConfigurationsMa4","tableUserDefId","doRegistrations","doDeregistrations","_component$props","registerComponent","getObservedStatemachineVariableNames","variableName","addVariableChangeObserver","applyRegisteredActions","deregisterComponent","dropChangeObserverForPath","receiverComponent","findComponent","_component$props2","dumpRenderTriggeredToTrace","setState","previousState","buildCounterState","oldUpdateCount","updateCount","incrementCount","oldCount","line","hash64","str","hval","charCodeAt","shortHash","hashFnv32a","actionRegister","hasActionsRegisteredForPath","getRegisteredActionsForPath","clearRegisteredActionsForPath","fullState","newValue","registerStateByUserDefPath","formatSnapshotDump","getTaskSnapshot","rootInRuntime","filterExistingPathIds","id","getRootFromPath","parentIndexPath","parentPrefix","taskData","formatEntryForSnapshotDump","_entry","componentState","componentConfiguration","PageHistoryHelper","historyState","getHistoryState","currentCanGoBack","getRelevantPagesState","setHistoryState","currentCanGoForward","isHistoryModeWithTabs","isHistoryModeNoTabs","pagesState","pages","getCurrentPageFromPagesState","isHistoryModeSinglePage","tabName","currentTab","withTabs","noTabs","allTabs","pageInfo","getCurrentPageInfoForTab","currentIndex","getTab","tabConfig","pageImage","historyMode","Modes","withTabsMode","addPageToWithTabsHistory","noTabsMode","addPageToNoTabsHistory","singlePageMode","url","closable","tabWidth","createPagesState","addPageToPagesState","pageIndex","currentPage","pop","tabInfo","getInfoForTab","pageHistory","getFullState","withHistory","getHistoryModeKey","setFullState","BookmarkHelper","pageTab","triggeringType","requestingComponentPath","bookmarkState","getBookmarkState","bookmarks","bookmarkEntries","setBookmarkState","indexToDrop","pageToDrop","initializeBookmarkState","operationType","triggeringIndexPath","ownerIndexPath","tab","triggeringUserDefPath","ownerUserDefPath","triggerType","triggerIndexPath","triggerUserDefIdPath","triggerUserDefId","operation","ownerUserDefIdPath","ownerUserDefId","WebTab","closeTab","isActive","icon","webTabClass","webTabStyle","WebToolbarHelper","displayTabs","isInFirstHalf","leftVisibleTab","leftHiddenIndex","leftTab","rightVisibleTab","rightHiddenIndex","rightTab","hiddenTabs","newTab","displayTabsWidth","newWidth","allTabsInfo","totalWidth","accum","reducer","tabDict","isCurrentInFirstHalf","nextTab","getNextTopUpTab","topUpTabs","totalTabsMaxWidth","lowerLimit","upperLimit","scoreArray","indexOfCurrentTab","accumulatedWidth","currentTabScore","tabScore","showMoreButtonWidth","containerMarginWidth","buildTabDictionary","idx","getAllTabsInfo","parentPath","MenuItemTree","onMenuHide","dumpContextMenuTriggeredToTrace","contextTrigger","staticMenuConfig","handleContextClick","dynamicMenuConfig","persist","staticConfig","transformDynamicEntries","openMenuItemTree","sendEvent","_this3","itemAttributes","MenuItem","handleItemClick","MenuItemTreeIcon","altText","divider","SubMenu","buildEntries","submenu","ContextMenuTrigger","ContextMenu","onHide","nodeName","parentNode","getBoundingClientRect","hideMenu","dynamicEntries","expandDynamicEntry","replacementEntry","transformedCopy","attribute","provider","providerParam","maxHeight","margin","marginRight","WebToolbar","parentWidth","toolbarWidth","getAllTabs","topUpDisplayTabs","switchTab","CbaPageArea","switchHiddenTab","showMoreClickEvent","tabClickEvent","handleShowMoreTabs","buttonBoundingRect","buildTriggerBoundingRect","menuItems","getImageForTab","menuPosition","computeMenuPosition","bottom","contextMenu","openMenuItemTreeWithDynamicConfig","getTabIconResource","iconForTab","renderTabs","firstTab","showMoreTabs","exceedsMaxTabsWidth","containerWidthWithShowMore","_WebToolbarHelper$bui","buildDisplayTabs","tabContainerRef","PageAreaRenderer","_childAreaStyle","embeddedPageName","hasTabs","tabsBar","scrollableAreaRef","findPage","pagePath","isExcessivePageNesting","childAreaStyle","role","onScroll","traceUserScroll","CbaInterpreter","content","bind","doStandardOnClick","scrollElement","doScrollOnHTMLElement","myPath","getEmbeddedPageName","positionOnlyState","setPosition","initialState","initializeHistoryState","hasStateWithoutPageHistory","currentEmbeddedPage","getPage","safeReceiverTab","getSafeReceiverTabDetails","addPage","updatePageIndicators","updatePageHistoryDependents","embeddingIndexPath","indicator","indicatorPath","indicatorIndexPath","buildIndicatorIndexPath","indicatorState","pageIndicators","pageMatchingIndicators","firstVisibleCandidate","isIndicatorNotHidden","currentPageIndicators","indicatorPathRoot","chosenIndicator","findPreferredIndicator","setSelectedForPossiblyControlledComponent","move","goHome","goForward","goBack","newPageName","canGoForward","canGoBack","forwardSwitchers","backwardSwitchers","locationDisplays","myPathWithoutMyPageSegment","switcher","pageEntry","getPropUndefinedSafe","locationDisplay","currentPageEntry","getEmbeddedPageEntry","addBookmark","dropBookmark","getBookmarks","initialPageName","initialPageUrl","initialTabConfig","initialTab","renderHitMissTable","resultsList","firstActiveMode","classToMemberCount","Map","member","oldEntry","class","set","buildClassMemberCountMap","hasActiveSiblings","weight","resultText","renderClassTableBody","classResultsList","hitMissResultsList","sort","compareClassEntryByName","hitMissName","hitMiss","matchingResult","getResultTextForHitMissByName","comment","renderClassTable","renderResultVariablesTable","resultVariablesList","valueHit","valueLabel","renderResultVariablesTableBody","ScoringModalData","scoringDetails","currentModalContent","hitClassFirstActive","classScoringModeHit","missClassFirstActive","classScoringModeMiss","execTime","nbHits","hitWeight","creditClass","reactionTime","nbMisses","missWeight","creditWeight","nbInteractions","hitRows","missRows","hitClassRows","missClassRows","resultVariables","StatemachineModalData","statemachineDetails","visitedStates","raisedEvents","TracingModalData","truncateTraceLog","popEntries","updateTraceLogState","tracingDetails","peekEntries","entryId","rowIndex","dumpAsStringAndTruncate","fullString","ManageBookmarksData","okButtonClicked","pageAreaIndexPath","testPresenter","toBeDeleted","handleClose","cancelButtonClicked","setBookmarkAsToBeDeleted","bookmark","labelConfiguration","deleteColumnHeader","bookmarkColumnHeader","okButton","cancelButton","MenuBuildHelper","provideTranslationSupport","translationManager","getTranslatedTextWithFallback","toBeDeletedAccess","ModalDialog","centerPosition","innerWidth","innerHeight","isOpen","currentModal","currentModalTitle","closeDialog","Dialog","modal","isResizable","isDraggable","hasCloseIcon","closeOnEscape","onClose","ModalManager","SpecialClickActionsHelper","cut","cutEnabled","copy","copyEnabled","paste","pasteEnabled","cancelTask","pageEventsObserver","handleFullScreen","openFullScreen","documentElement","closeFullScreen","dialog","dialogPresenter","actionParam","doHistoryMoveOnAncestor","historyMoveEnabled","pageAreaPath","getPageAreaPath","receiverPath","dialogContent","windowTitle","useTranslation","windowTitleTranslation","openDialog","attachedScale","incrementValue","scaleValueInputPath","buildScaleValueInput","doHistoryMove","actionParamReceiverPath","findPageAreaAncestorPath","requestingComponentPathhWithoutLastPageSegment","displayComponentContextMenuConfig","transformEntries","displayComponentEntries","transformEntry","displayComponentEntry","transformSeparatorEntry","transformSubmenuEntry","transformActionEntry","transformLinkEntry","transformProvidedEntry","orignal","original","getTranslatedImageWithFallback","_runtime$pageConfigur","menuTriggeredByButton","buttonHasBookmarkSubType","originalEntry","getActionTextTranslation","getTranslatedMouseOverWithFallback","buildActionMethod","isActionDisabled","translationKey","actionType","nextTask","backTask","startFullscreen","stopFullscreen","close","back","forward","home","manageBookmark","nextTaskEnabled","backTaskEnabled","backEnabled","forwardEnabled","menuEntries","pageLabel","pageAreaTab","switchEmbeddedPage","DialogPresenter","getDialogsFromPresenterStateManager","findPageForPageName","currentTaskPath","filteredDialogs","dialogs","d","visible","checkAndSetFocus","_page$content$config$","pageWidth","pageHeight","focused","handleFocusAndDrag","getCurrentDialogPosition","updatePositionAndFocusDialog","transformValue","ReactDOM","findDOMNode","refs","buildDialogRefKey","getElementsByClassName","match","buildDialogs","isModal","_page$content$config$2","dialogPath","buildDialogIndexPath","scaleValue","app","dragBounds","getTopLevelConfiguration","itemWidth","itemHeight","Draggable","scale","bounds","hideDialog","closeSpecificPageDialog","hideSpecificPageDialog","taskPath","currentPageAreaType","isDialogParentInPath","currentPageAreaName","traceValues","componentTypeValue","stopEventPropagation","signalFocusChangeToClipboardManager","registerFocus","values","browserEvent","traceUserInteractionPerTraceConfig","eventType","continuingInteractionKey","userInteraction","xPath","isXPageFirst","lastOrientationValue","throttleTraceScrollFunction","throttle","traceScrollWrap","leading","tracePath","getScrollDataFromEvent","isScrollOnPane1","computeScrollOrientation","addMouseEventDetails","detailsObject","valuesToAdd","browserSideEvent","pageX","pageY","screenX","screenY","selectedState","sendAlternateEvent","triggerEvent","defaultReceiver","targetReceiver","buildTargetReceiver","targetPage","conditionalLink","closeParentDialogFromPath","switchPage","targetPageConfig","baseX","baseY","appDivElement","querySelector","buildMenuTreeItemConfiguration","readOnly","cutCallback","cutCallbackObj","selectionStart","selectionEnd","selectedText","deregisterSelection","registerSelection","drop","pathOfLinkRequestor","linkTargetsOtherPageArea","PositionCalculationHelper","targetModifier","configBlocks","blockKeyToIndexMap","configContentModifiers","contentModifiersInEditorState","contentModifierParentPath","actualPositionOffset","calculateCurrentPositionOffset","modifierPosition","actualBlockKey","calculateBlockKey","blockKey","blockOffset","offset","characterOffset","startBlockKey","offsetCounter","contentState","getCurrentContent","movedBlockKey","getKeyAfter","targetModifierBlockKey","blockShiftingModifiers","modifier","stateInEditorState","getModifierStateInEditorState","isEvaluatedInject","injectText","active","inBlock","beforePosition","hasMoreThanOneBlock","total","currentBlockShifter","blocks","lastBlockShifterInSameBlock","getLastModifierPerOffset","characterSwitchersStartOffset","characterSwitchersStartIndex","characterOffsetStartValue","getLastBlockOfFragment","afterPositionInSameBlock","isDynamicFragment","injectedText","candidateModifier","compareModifier","candidatePosition","comparePosition","candidateBlockIndex","compareBlockIndex","compareBlockKey","compareOffset","compareIndex","dynamicFragment","candidateModifiers","isGreaterPositionOffset","contentModifierIndex","fromState","EditorStateHelper","startOffset","endBlockKey","endOffset","toBeInserted","EditorState","Modifier","replaceText","buildDraftSelectionState","rawBlocksArrayToInsert","entityMapToInsert","rawValue","entityMap","blockMap","convertFromRaw","getBlockMap","replaceWithFragment","removeRange","styleNames","modifiedEditorState","targetSelection","styleName","applyInlineStyle","entityNames","entityName","applyEntity","forceSelection","selection","startKey","endKey","highlightKey","newEditorState","RichUtils","toggleInlineStyle","SelectionState","createEmpty","merge","anchorKey","anchorOffset","focusKey","focusOffset","DraftLink","_React$Component","getData","buildMyPath","getEntity","entityKey","linkReceiver","fullRichTextPath","getStateAttributeByPathId","getOrBuildState","persistState","currentTarget","contentEditable","buildStyle","onMouseDown","handleMouseDown","notVisited","findLinkEntities","contentBlock","callback","findEntityRanges","character","getType","Audio","kind","controls","Image","Video","Media","media","entity","block","getEntityAt","_entity$getData","relativePathSrc","DraftBullet","getStyle","getBullet","rawSymbol","bullet","_rawSymbol$split","fromCharCode","suppressContentEditableWarning","findBulletEntities","MathJaxTranspiler","apply","interval","setInterval","prevState","update","clearInterval","setTimeout","tex","texReset","tex2chtml","startup","clear","updateDocument","dangerouslySetInnerHTML","__html","innerHTML","MathJaxEntity","_getPrototypeOf2","_len","args","_key","getPropertyData","property","findMathJaxEntities","CbaRichTextField","editor","onParentClick","checkSelectable","redirectClickEventsReference","fromSecond","toSecond","toggleType","doPageSwitchOrLetTheContainerDoIt","sendStandardOrAlternateEvent","requestingComponentPathWithoutLastPageSegment","redirectClickEventsReferencePath","debouncedDoHighlightActions","debounce","doHighlightActions","oldEditorState","extractEditorState","oldSelections","extractSelections","highlightActive","extractHighlightable","blockKeysList","SelectionHelper","getListOfBlockKeysInBlockOrder","hasContentChanges","contentStateEqual","saveEditorStateInPathState","blur","isSelection","lastUserEvent","clickedSelection","getSelectionHitByClick","getSelection","removeClickedSelection","currentHighlightKey","getHighlightColorKey","processHighlightClick","moveFocusToEnd","removeSelectionFromSelectionsArray","saveSelectionsInPathState","triggerHighlightEvent","currentEditorState","currentSelection","toggleOffOperationsList","oldSelection","intersection","getIntersect","buildSelection","toggleEditorStateStyleOnSelection","calculateSelectionsArray","highlightChangeEvent","saveModifiersStateInPathState","setModifiersInEditorState","setEditorState","calculateTextValue","newSelections","traceHighlightChange","setSelections","myBlockStyleFn","mediaBlockRenderer","editable","getStylesMap","highlightColors","originalStylesMap","findStylesMapInConfig","highlightStyleMap","rgbaColor","convertHighlightValueToKey","getHighlightColor","itemHighlightColor","stylesMap","HIGHLIGHT","currentColor","currentColorKey","generateSelectionStyle","isHighlightActive","highlightColor","wrapperId","selectionColor","isTouchDevice","editorComponent","forEachContentModifier","modifierPath","addListener","onRemoveLastSelection","onCurrentTimeUpdate","onClearFlashTexts","_this$props11","oldConfig","oldPath","newConfig","newPath","currentTime","_this$props12","registerState","finalEditorState","isRemoveSelection","_this$props13","setVisited","_this$props14","getValidCssIdFromPath","styleMap","extractModifiersInEditorState","_CbaRichTextField$app","applyContentModifiers","_CbaRichTextField$app2","newModifiersInEditorState","customDecorators","strategy","addLinkIndex","onTouchStart","Editor","blockStyleFn","blockRendererFn","blockRenderMap","DefaultDraftBlockRenderMap","handleBeforeInput","handlePastedText","keyBindingFn","customStyleMap","decorators","plugins","setDeepCopy","setComponentClassName","buildInitialEditorState","setHighlightable","highlightText","createWithContent","richTextFieldPageSegment","insertLinkConfigurationsFromEntityMap","contentModifiers","resultArray","extractDefaultHighlightColor","rgba","convertedValue","toSnapshotForEditorState","_entry2","fromSnapshotForEditorState","convertToRaw","editorPath","propsConfig","getBlockKeysToBlockIndexMap","modifierInConfig","modifierParentPath","modifierState","buildNonActiveModifierInEditorState","newModifierInEditorState","actualPosition","calculateActualPosition","modifierInEditorState","_CbaRichTextField$app3","applyEvaluatedInjectModifier","_CbaRichTextField$app4","_CbaRichTextField$app5","applyDynamicFragmentModifier","_CbaRichTextField$app6","contentModifierType","modifierConfig","currentInjectText","TermEvaluator","evaluateTerm","insertString","oldInjectText","replaceTextInBlock","applyInlineStyles","inlineStyles","applyEntities","entities","replaceWithBlocks","numberInjectedBlocks","removeBlocks","doForEach","addContentModifierIndex","getPlainText","oldSelectionsRaw","newSelectionsRaw","convertHighlightKeyToValue","TransformSelectionsToTraceSelectionsDTO","_this$compareSelectio","compareSelections","addedInSelections","removedFromSelections","traceOverallHighlightChanges","newSelection","isEqual","getStartKey","getEndKey","getStartOffset","getEndOffset","selection1","selection2","editorContent","rawContent","builtSelection","startKeyIndex","isIntersect","selection1StartKeyIndex","selection2StartKeyIndex","selection1EndKeyIndex","selection2EndKeyIndex","isSameRowEnd","isS1StartSameRowAsS2End","isS1EndSameRowAsS2Start","isSel1StartToLeftOfSel2","isSel1EndToLeftOfSel2","isSel1StartToRightOfSel2","isSel1EndToRightOfSel2","selectionsArray","toRemove","click","keyRowOrder","clickedPosition","rowKey","pos","filteredSelections","isMultipleRow","isSelectionHitByClickOnMultipleRows","isSelectionHitByClickInsideOneRow","isSelectionHitByClickOnOneCharacter","filterConditions","getFocusKey","emptySelection","getIsBackward","keyToIndexMap","traceSelectionsDTO","blockTextLengths","selectionsMergedStepByStep","currentSelectionIndex","nextSelection","isSelectionToEndOfBlock","isNextSelectionFromStart","newMergedSelection","isTopRowClick","isBottomRowClick","isMiddleRowClick","startIndex","oldContentRaw","newContentRaw","calculateSelectionsArrayFromContentState","highlightSelections","rawSelections","blockIndex","inlineStyleRanges","inlineStyle","mergeRowSelections","TextBlockSelectHelper","richTextPathState","richTextConfig","draftBlocks","buildBlockKeyToIndexMap","currentSelections","getSpansFromSelections","spanArrayContainsNonBlank","highlightedSelection","selectionsHighlighted","blockName","partial","textBlocks","getIdentifyingInfoForLogMessage","blockConfig","findBlockConfigForBlockName","spans","span","selectionsCoverANonBlankInSpanWithOptionalHighlight","every","selectionsCoverNonBlanksInSpanWithOptionalHighlight","selectionsCoverNonBlanksInSpan","selectionsCoverSpanWithGivenHighlightColor","spanToCover","selectionCoverSpanWithGivenHighlightColor","selectionCoversANonBlankInSpan","selectionHighlighted","allBlocksConfig","editorSelection","getSpanFromSelection","start","end","overlap","getOverlap","spanContainsNonBlank","uncoveredAreas","calculateUncoveredAreas","calculateUncoveredAreasBySingleSelection","spansToCover","areaIndex","hitFound","punchTarget","remainingAreas","punch","replaceEntryByArray","arrayToModify","indexToReplace","arrayToBeInserted","spanArray","spanIndex","nonBlankFound","endKeyIndex","stringContainsNonBlank","keyIndex","punchSpan","targetSpan","leftPunchBorder","max","rightPunchBorder","min","isLessOrEqual","isLess","isGreater","oneSpan","anotherSpan","leftOverlapBorder","rightOverlapBorder","one","another","leftBorder","rightBorder","isLessBlockKey","leftKey","rightKey","InputComponent","validationPattern","traceType","oldText","newText","nativeEvent","inputTypeValue","inputType","inputDataValue","validationFailEvent","sourceInputPath","newTextIsValid","isValidText","newTextValue","isVariableValueInput","diffIndex","char","oldTextValue","origin","invalidTextValue","inputData","blockedDynamicUpdateText","setVariable","processSelectedTextForCutAndPaste","updateTextValue","registerAsInsertPosition","currentText","currentTextValue","isOldSelected","cellTraceDetails","cellPath","_component$props3","selectionDirection","positionValue","setLastCaretPosition","doStandardOnBlur","doStandardOnFocus","_component$props4","_event$target2","registerInsertPosition","contentToInsert","startPosition","endPosition","replacementText","_component$props5","CbaSingleLineInputField","inputRef","onKeyPressOnInput","isSpreadsheet","onContentUpdate","receivedRow","receivedColumn","textValue","isFormula","cellPathState","cellValue","buildDisplayText","onSelect","onSelectionHandler","onBlurHandler","onKeyPress","onCut","onCutCopyPaste","onCopy","onPaste","spellCheck","CbaTableCell","initializeSpreadsheet","isReadOnly","registerEventListeners","hadFocus","extractCellHadFocus","getPagePath","focusRegister","onCellFocused","setCellHadFocus","updateStateAndTriggerRender","keepHover","buildTableIndexPath","tableState","extractSelectable","isMultiSelectEnabled","keepSelection","selectionValue","onSelectionChange","oldValue","buildLabel","isInt","isFloat","numberOfDecimalPlaces","toFixed","defaultNumberOfDecimalPlaces","extractCellHasError","errorMessage","extractCellTitle","errorProperty","extractCellTitleErrorProperty","hasStandardTooltip","address","buildTableCell","tableCell","imageReference","onDoubleClick","onDoubleClickCaptureHandler","onMouseEnter","onMouseLeave","cellConfig","comboboxCopy","createCellCopy","setCellType","inputCopy","delegates","childCopy","parentTableUserDefId","boxSizing","hasHover","onRowHeaderUpdate","onColumnHeaderUpdate","onCellMouseEnter","onCellMouseLeave","onUpdateValue","onAutoFocus","selectedCell","isNotValidFormula","formula","isInitialization","oldFormula","extractFormula","setCellHasError","setCellTitle","setCellTitleErrorProperty","setFormula","traceCellModified","rowToFocus","columnToFocus","oldEvaluatedValue","newEvaluatedValue","errorInFormula","currentCellType","extractCellType","cellType","oldCellType","oldErrorState","cell","cellCopy","selector","cellState","CbaTreeHeader","headerRef","useRef","_useDrop","useDrop","accept","TreeUtils","handleColumnMove","canDrop","collect","monitor","dragIsOver","isOver","dragCanDrop","_useDrop2","collectedPropsDrop","_useDrag","useDrag","canDrag","drag","DragAndDropHelper","addCanDropStyleAttributes","TreeTraceHelper","columnId","sortDirection","columnName","columnIndex","getTreeDataByPath","treeColumns","getSortDirectionForTrace","rowData","triggeredEvent","isTreeView","treeViewPath","nodeType","nodePathId","nodeTypes","getNodeName","deleteEvent","getNodeType","isTriggeredEventRequired","TreeContextMenuHelper","columnKey","buildContextMenuEntries","actionEntry","buildContextMenuAction","doTreeCut","doTreeCopy","doTreePaste","handlePasteDisabled","doTreeDelete","startRenameOperation","doTreeNew","contextMenuCommands","command","buildContextMenuActionEntry","actionHandler","nodePath","traceNodeAction","nodeTypeName","_TreeUtils$getTreeDat","treeState","copiedNode","currentlyCutNodePath","childTypes","cutNodes","flattenNodes","CbaTreeCell","handleContextMenuClick","updateOnSingleClick","openContextMenu","handleRenameCell","isRenameState","cellEditedValue","getInitialState","treeInstance","extractTreeState","currentRenameNode","setTreeState","handleCellInputFocus","select","handleCellInputBlur","doTreeRename","handleCellInputKeyDown","handleCellInputChange","getCellData","cellData","updateOnClick","_this$state","isLeaf","rowPath","hasSubRows","rowStartStyle","paddingLeft","rowImageStyle","backgroundImage","cellOuterStyle","cellStyle","buildTreeCellStyle","buildCellPath","CbaTreeRow","firstHover","currentNode","selectedClass","cutClass","reactGridClass","rowStyle","c","nodeTypeInstance","treeAction","getTreeDragDropAction","hoverCount","rowRef","ct","hover","deltaTime","doTreeCopyAction","doTreeMoveAction","canNodeTypeDrop","canNodeTypeDrag","begin","CbaTreeRowWrapper","_PureComponent","PureComponent","rootNodes","treeSettings","resetPathsToNodes","parseNodes","node","buildColumnId","isNodeExpandedAtInit","startCollapsed","const","DEFAULT_COLUMN","modifiedColumns","order","displayDroppedColumn","draggedColumnId","getTreePathFromColumnPath","parentInstance","parentPathState","parentTreeState","draggedColumn","droppedColumn","isDraggedToStart","emitTreeEvent","sortable","headerRenderer","sortAscendingByParameter","isDefault","hideLeaves","flatmap","sortAscendingByIndexHierarchy","extractTreeChildPathFromTreePath","treeNodes","filterLeaves","selectedNodePath","allNodes","isRoot","selectedNode","getNode","getParentNode","sortCellFinderFunction","param","sortDescendingByParameter","shouldContinue","treeStartCollapsed","cellInitSettings","contentPage","generateNodePathId","tooltip","searchedNodePath","foundNode","isPrimary","root","fontWeight","fontStyle","textDecoration","setTreeDataByPath","getTreeEventChangeName","getTreeFlatNodesFromUserDefIdPath","_TreeUtils$getTreeDat2","currentNodePath","nodePathIds","columnValues","targetNode","treeActionCurrentNode","_TreeUtils$getTreeDat3","targetNodeInstance","fromPath","toPath","shouldNotClearCut","_TreeUtils$getTreeDat4","collapseNode","_TreeUtils$getTreeDat5","_treeState","_TreeUtils$getTreeDat6","copiedNodeChild","copiedNodeParent","generateNodePathIdChild","isPasted","treeData","deletedNode","deleteEventNodeType","currentParsedNode","deletedNodes","selectedNodeInDeletedNodes","cutNodeInDeleteNodes","_TreeUtils$getTreeDat8","newTreeType","_TreeUtils$getTreeDat9","newNodeType","newNode","createNodeFromNodeType","primaryColumn","mockRowData","selectNodeAction","COLUMN_HEIGHT","ROW_HEIGHT","columnPath","compareLocator","node1","node2","comparator1","comparator2","comparison","path1","path2","indexArray1","indexArray2","commonDepth","checkedDepth","number1","number2","innerNode","canTreeDoIt","dragSource","canNodeTypeDoIt","dropTarget","getTreeInstanceFromChildComponent","treePathId","getTreePathFromChildComponent","getTreeFromUserDefIdPath","extractTreeNodes","extractTreeColumns","extractNodeTypes","treeReadOnly","extractTreeReadOnly","setTreeNodes","setTreeColumns","setNodeTypes","FORMATS","DE","decimal","grouping","EN","CbaTreeChildArea","handleTreeChange","subscription","remove","emptyStyle","MediaPreview","stream","pauseRecording","resumeRecording","shouldPause","mediaRef","useEffect","srcObject","pause","onPause","onPlay","autoPlay","OPERATION_PLAY","OPERATION_PAUSE","OPERATION_STOP","OPERATION_ENDED","CbaMedia","onClickCapture","onPlayHandler","isTaskPlayerPausePlay","saveInStateLastOperation","traceMedia","isStatemachineTriggered","startEvent","onPauseHandler","player","getMediaPlayer","duration","isPauseHandled","pauseEvent","onStopHandler","extractLastOperation","stopEvent","onEndedHandler","increasePlayNumberAndCheckMaxPlay","endEvent","handleTaskPauseOrResume","enterPause","lastOperation","shouldPlayOnResume","play","onVolumeChange","setMediaVolume","volume","onTimeUpdate","newTime","extractCurrentTime","setCurrentTime","endRecording","mediaBlob","recordNumber","extractRecordNumber","setMediaBlob","taskInfo","userDefinedIDPath","reportRecording","startRecordingTime","isRecording","debouncedEndRecording","shouldSendStartRecordingEvent","startRecordingDelayed","recordingStarted","setVolumeFromState","dropVariableChangeObserver","recording","maxRecord","extractMaxRecord","moment","format","setRecordNumber","stopRecording","setLastOperation","extractMediaVolume","newVolume","convertToMediaRefVolume","maxPlay","extractMaxPlay","currentPlayNumber","extractPlayNumber","setPlayNumber","setHideControls","automaticStart","extractAutomaticStart","hideControls","extractHideControls","modifiedTraceConfig","currentPlayNo","volumeLevel","computeVolumeInPercentage","mediaStyle","ReactMediaRecorder","audio","video","onStop","render","status","startRecording","previewStream","mediaBlobUrl","stopRecordingEvent","pauseRecordingEvent","startRecordingEvent","muted","extractMediaBlob","srcFromVariable","mediaReference","altSrc","mediaAlternateRef","extSrc","mediaReferenceExternal","altExtSrc","mediaAlternateRefExternal","poster","someResourceToPlay","createMediaRecorder","controlsList","onEnded","disablePictureInPicture","useAudio","playNumber","delegateComponent","delegatePath","contextSlots","mainEntry","valueIndex","paramsArray","previous","if","else","activeBranch","b","currentMaximumValue","currentMaximumName","candidateName","candidateValue","pattern","floor","ceil","trunc","expression","valuesArray","exp","regexp","cond","candidates","pageType","getCurrentPageNames","standardPage","xPage","pageAreaConfig","trimRootAndPageAreaFromPath","receiverTabInfo","receiverTabName","receiverTabImage","presenter","saveCurrentTaskResults","switchFirstMatchingTaskIntraTest","nbUserInteractions","nbUserInteractionsTotal","firstReactionTime","firstReactionTimeTotal","taskExecutionTime","taskExecutionTimeTotal","findComponentByAbsoluteUserDefId","registerAction","applySimpleSetter","getTraceDataBeforeSetSelection","traceChangesAfterSetSelection","getFormulaOrValue","caluculateTextInsert","insertPosition","dropLength","insertedValue","insertText","pathParameter","absolutePath","blockOwnerPathId","getIndexPathForTextBlockPath","richTextPageSegment","highlightColorValue","isTextBlockSelected","isSelectionContainsNonBlank","roundingMode","valueAsText","parsedValue","integerValueFromString","valueAsString","parseResult","parseDecimalString","whole","wholeValue","fractionClass","wholeUp","dotIndex","wholeString","fractionString","fractionValue","fractionCompareString","stop","logMessage","setAutomaticStart","setMaxPlay","isSender","isReceiver","modeToSet","extractDragAndDrop","setDragAndDrop","setSingleSelectActiveForController","setAllowDeselectForController","setSelectable","setSelectionChangesBlockedForController","currentTaskName","termIdentifiedByName","calculationsConfigurationManager","findCalculationByTaskName","calculationName","useExistingCalculationResults","existingResult","getResult","evaluateNamedCalculation","getStatePathRootForTask","_variableManager$getV","oldValueLeft","oldTypeLeft","_variableManager$getV2","oldValueRight","oldTypeRight","getListSelectedItems","getCurrentNodePathId","getNonSelectGroupSelectedChildren","getSelectGroupSelectedChildren","getSelected","timerEvent","remainingTimeInMillis","getTimerData","remainingTime","getListItemsPerMemberState","getNonSelectGroupSelectedChildrenPerMember","getSelectGroupSelectedChildrenPerMember","setPostponedTaskSwitch","switchCall","deferred","eventName","setTimedEventInterval","setStatePageAssignment","getTotalNbOfRaisedEvents","getRaisedEvents","getVisitedStates","getRaisedEventsInState","getValuesOfVariable","elapsedTimeInState","traceTextInternal","dumpSnapshotToTrace","operator","calcGetMem","calcOp","calcOpnd","displayWidth","withThousandSeparator","includeOperandInHistory","angle","getValueFormatForCalculator","calcSettings","topLevelConfiguration","saveTaskState","findByComponentType","richTextComponent","highlightColorChanged","xPosition","yPosition","xPositionType","yPositionType","componentInstance","isXPage","currentPages","containerRef","CbaContainer","containerRendererRef","minDistance","maxDistance","anchorPointType","groupMembers","checkNonMembers","getIndexPathsForUserDefIds","checkChildhood","_TermEvaluator$getCom","getComparePointSets","memberComparePoints","nonMemberComparePoints","checkLocalGroup","minX","maxX","minY","maxY","rangeMembers","_TermEvaluator$getCom2","checkInRange","pageToLookFor","findIndexPathsInCurrentTaskOfComponentWithType","pageFrameInstance","targetWindow","getFrameWindow","getFrameContentUrl","postMessage","Error","caretPosition","extractLastCaretPosition","language","changeLanguage","term","topLogName","evaluateTermInternal","logContext","typeOfTerm","logCalculation","isTermComplete","operatorName","operatorFunction","operators","evaluatedParams","ifThenElse","ifParamIndex","evaluationResult","evaluateParam","chosenBranch","chosenBranchIndex","ifGuard","branchesIndex","branchesArray","branchInfo","branchIndex","guard","branch","resultValue","index2","parameterValue","ValueFormatter","membersNotKeepingDistance","keepsDistanceToGroup","nonMembersKeepingDistance","excludeIndex","groupMember","keepDistance","pointA","pointB","xDelta","yDelta","sqrt","membersNotInRange","filterInRange","nonMembersInRange","filterOutOfRange","points","point","candidatePath","classifier","nonMemberIndexPaths","getIndexPathsForChildrenWithClassifier","getComparePointsForIndexPaths","userDefIdPaths","indexPaths","getComparePointForIndexPath","getComparePoint","positionFromConfig","getVisitedPathIds","regularExpressions","matchedNodes","getNodePathIds","matches","matchedNodesByPatternId","matchNodes","nodeToColumnValuesMap","getColumnValuesMap","shift","columnsMatch","treeCopyCurrentNode","treeMoveCurrentNode","contextValue","and","or","not","equal","notEqual","greater","greaterEqual","less","lessEqual","maxNamed","arrayLength","union","add","subtract","multiply","divide","modulo","stringFormat","concatenate","boolToString","numberToString","contains","getCurrentTest","getCurrentTask","getCurrentItem","getCurrentPage","getEmbeddedPage","saveTaskResults","previousTask","switchTaskInTest","switchTaskAndTest","recommend","getDisabled","getHidden","getVisited","getTextValue","isSelectedComponentOrTextBlock","isHighlighted","getIntegerValue","setMediaPlayerVolume","setMediaPlayer","initMediaPlayer","setDragAndDropMode","setSingleSelectMode","setAllowDeselect","setSelectChangeBlockMode","getCalculationResult","switchVariables","getImplicitVariable","getInternalImplicitVariable","raiseEvent","postponeTaskSwitch","setStatemachineAssignedPage","getNbStatemachineEventsRaised","getCurrentLeafStates","getRaisedStatemachineEvents","getStatemachineVariableValues","traceText","traceSnapshot","getVisitedNodes","matchNodesWithColumns","treeMove","treeCopy","scrollEmbeddedPage","scrollTopLevelPage","currentTimestamp","consoleLog","setGlobalPropertyHighlightColor","containerMembersFormLocalGroup","containerRangeContainsMembers","isInBookmarksList","callExternalPageFrame","patterns","hasMatch","DndItemTypes","VALUE_DISPLAY","itemType","previewData","senderConfig","getDragAndDrop","sender","statemachineEvent","dragAndDropData","senderData","getInitialClientOffset","triggerStatemachineEvent","isDragAndDropSender","idDragging","isDragging","dropsOfMyChildrenOnly","transferredData","receiverConfig","actionTerms","getClientOffset","lastEvaluationResult","evaluateActionTerms","relocateIfNecessary","logAction","senderIndexPath","isDragAndDropReceiver","shallow","dragAndDropInConfig","translationX","translationY","receiverUserDefIdPath","senderUserDefIdPath","senderUserDefId","receiverIndexPath","receiverUserDefId","sendingType","receivingType","ContainerRenderer","forwardRef","_DragAndDropHelper$ad","addDrop","_DragAndDropHelper$ad2","dropCollectedProps","extendedStyle","containerStyle","CbaRectangle","lineOnClickHandler","containerOnClickHandler","blockEvents","lineWidth","lineWidthString","baseLineStyle","northStyle","eastStyle","southStyle","westStyle","buildLineDiv","SimpleTextFieldRenderer","addDrag","dragCollectedProps","preview","getEmptyImage","captureDraggingState","_DragAndDropHelper$ad3","_DragAndDropHelper$ad4","addIsDraggingStyleAttributes","renderAsDiv","CbaSimpleTextField","onInputFieldUpdate","suppressSelections","textInputReferencePath","additionalCssClass","filteredPaths","CbaButton","onRedirectClickEvent","redirectClickEventTarget","onMouseUp","selectedImage","pressed","getBackgroundImage","isClipboardManagerAction","selectionHandlerType","selectionHandlerParam","increment","switchTaskIntraItem","switchTaskInterTest","getCurrentTaskResults","incrementScale","addFlexTextAlignmentToStyles","styleObject","flexAlignment","removeAllListeners","pressedState","highlight","positonInConfig","displayText","extractMultilineText","backgroundImageStateResult","getImageTag","CbaRadioButton","addFlexAlignmentToStyles","verticalAlign","horizontalAlign","flexDirection","computeFlexAlignment","computeMargins","isTop","marginValue","computeControlIconPosition","controlIconOnly","controlIconSize","controlPosition","rawText","textWrap","labelPosition","leftToRight","textWrapStyle","marginLeft","marginBottom","hasImage","inputStyle","labelPositionDelta","textStyle","paddingRight","radioWrapStyle","forKey","shortid","generate","htmlFor","checked","CbaCheckbox","hasLabel","checkboxLabel","checkBoxWrapStyle","CbaLink","CbaPolygon","renderingSelectedState","polygonStyle","buildStyleSvg","pointsString","buildPointsString","bendPoints","CbaRegionMap","regions","CbaInnerHtml","sanitizeHtml","innerHtml","CbaExternalPageFrame","saveIframeState","iframeWindow","iframeRef","contentWindow","stateToSave","setExternalContentState","reactionMessage","isPermissionDeniedException","restoreIframeState","savedState","extractExternalContentState","currentSaveTimer","clearTimeout","processSaveTimeout","isSaving","userDefIdPathMessage","getProperResourcePathExternalResources","pageAddress","URL","iframeInstance","childDocument","contentDocument","childWindow","uniqueTitle","iframeUrl","buildIframeUrl","setVolatile","stateToRestore","callCount","configPageAddress","postMessageReceiver","registerAcceptableUrlForExternalPageFrameEvent","urlContainsParametersAlready","CbaTree","expandOnly","oldExpandedValue","addRowReferences","hideColumns","isDefaultColumn","displayNodes","getTreeDisplayNodes","displayTreeColumns","getDisplayColumns","ReactDataGrid","headerRowHeight","rowHeight","rowGetter","rowsCount","rowRenderer","onColumnResize","handleColumnResize","initTreeNodes","initTreeColumns","initTreeState","setTreeReadOnly","CbaTreeView","handleGridSort","setTreeViewSort","traceSort","extractTreeViewSort","treeViewState","getTreeViewDisplayNodes","displayColumns","hideColumnsHeader","onGridSort","sortColumn","buildErrorResult","evaluateCell","cellsTable","maxCellCoordinates","cellToEvaluate","evaluatedCellsList","dataCellCoordinates","col","cellContent","extendedCellsList","parser","Parser","on","referredCoordinates","done","recursiveResult","startCellCoordinates","endCellCoordinates","resultRows","resultRow","setFunction","sumUpNestedValues","CbaTable","tableData","extractTableData","_this$executeFormulaI","executeFormulaInternal","cellToUpdate","valueToUpdate","formulaToShow","errorMessageToShow","notifyShowAddress","notifyShowContent","notifyUpdateCellValue","_this$handleHeaderSel","handleHeaderSelection","setOldSelectedCell","notifyRemoveLastSelection","setSelectedCell","runAllAvailableFormulas","onRemoveOldSelection","isAnUpdate","executeFormulaAndNotifyOthers","setTableData","j","_this$executeFormulaI2","dataTable","_this$executeFormulaI3","res","hasError","buildResultString","buildErrorMessage","divByZeroError","naNError","syntaxError","circularError","notifyRowHeaderUpdate","notifyColumnHeaderUpdate","currentColumn","newColumn","currentRow","newRow","buildInitialData","Infinity","CbaTableCellEditor","updateContent","onAddressUpdate","setCellEditorAddress","isNotValid","buildAttachedTableIndexPath","setCellEditorIsNotValid","setCellEditorErrorMessage","setCellEditorErrorProperty","setCellEditorContentIsReadOnly","setCellEditorContent","cellEditorPathWithoutLastPageSegment","attachedTable","adressTitle","contentTitle","extractCellEditorAddress","extractCellEditorContent","extractCellEditorContentIsReadOnly","addressWidth","cellAddressRelWidth","contentWidth","addressrStyle","contentStyle","isError","extractCellEditorIsNotValid","extractCellEditorErrorMessage","extractCellEditorErrorProperty","errorStyle","CbaCalculatorHistory","simpleTextFieldPath","getSimpleTextFieldPath","simpleTextFieldState","simpleTextFieldConfig","myState","CbaCalculatorInput","keydown","keypress","clipboardData","catchKeyboardInputEvents","keyboardShortcutsRegistered","addEventListener","removeEventListener","_CbaCalculatorInput$c","createDelegateComponent","CbaInputField","CbaStopWatch","counterValue","setCounterValueToState","setCounterValue","reinitialiseState","rawInitialCounterValue","extractCounterValue","initialCounterValue","hours","minutes","seconds","startTimer","formatTime","timer","CbaScaleValueInput","onChangeCompleteHandler","validateValue","pageIncrement","minValue","maxValue","onIncrementScale","incrementedValue","numberValue","scaleValueInput","stepIncrement","thumbSize","isHorizontal","Slider","step","onChangeComplete","CbaSpinnerValueInput","onChangeHandlerDebounced","onInvalidHandler","valueAsNumber","onInputHandler","inputValue","NumericInput","wrap","input","onInvalid","onInput","ROW","COLUMN_REVERSE","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","CbaTimer","timerAnimation","runForward","timerData","computeTimerPercentage","setTimerType","verticalOrientation","timerType","computeTimerType","computeTimerValue","time","miliseconds","totalTime","isRunning","showSecondsLabel","timerStyleDirection","animationStyle","timerParsedValue","ListItem","parentTabIndex","itemText","CbaList","getDisabledFromState","getSelectedIdsFromState","isCtrlKeyEvent","setSelectedIds","getListItemText","listPath","mapIndex","listItemText","Delegate","getComponentClass","componentTypeName","CbaTestPresenter","modalType","isDialogOpen","isPaused","resume","generateTaskStyles","cssStyles","_noDividerStyle","_areaStyle","taskId","taskCssStyles","totalHeight","foundPage","isRighToLeft","standardPath","buildPathForPage","withEditContextMenu","itemLayout","isHorizontalDivider","xAreaSize","getXAreaSize","dividerOffset","calculateDividerOffset","dividerThickness","getDividerWidth","isDividerMovable","isDividerHidden","standardPageOrientation","getRtlOrientation","xPageOrientation","pagesAreaDir","getRtlDir","standardPageDir","noDividerStyle","wrapStyle","dividerStyle","getDividerColor","MozBoxSizing","WebkitBoxSizing","MozBackgroundClip","WebkitBackgroundClip","backgroundClip","transition","areaWrapStyle","areaStyle","keyMap","openConfigParams","print","keyHandlers","printCbaVersion","debugScoreHotKey","debugTraceHotKey","debugStatemachineHotKey","openTrace","openScoring","getScoring","openStateMachine","currentStatemachineData","currentVariableData","nullSafeStatemachineData","customFontsCss","buildCustomFontsCss","getCustomFontMappings","HotKeys","handlers","dir","isRightToLeftPage","SplitPane","pane1Style","pane2Style","resizerStyle","minSize","maxSize","defaultSize","allowResize","firstAreaDir","secondAreaDir","isRightToLeft","defaultWidth","getPagePosition","defaultHeight","getDividerConfig","xSize","xPlacement","getXPlacement","HeaderButtons","handleClick","button","oldState","renderHelper","getLargestHeightFromButtons","buttons","largestHeight","isButtonInvalid","buttonConfig","invalid","buildButtons","barWidth","buttonTotalWidth","buttonStyle","buttonWrapStyle","backgroundSize","backgroundPosition","backgroundRepeat","buttonPadding","isNonEmptyArray","TopButtonToolbar","buildSlides","buttonArray","Slide","buildCarouselConfig","buttonHeight","widthRatio","getButtonPadding","buttonWidth","carouselWidth","navButtonsWidth","carouselHeight","slideWidth","slideHeight","leftArrow","rightArrow","carouselWrapStyle","getCarouselMarginBottom","carouselStyle","slides","visibleSlides","arrows","computeCurrentSlideCenter","activeSlide","middlePoint","computeCurrentSlideNotCenter","carousel","carouselStore","getStoreState","currentSlide","buildCurrentSlide","carouselConfig","isCenter","buttonRatio","activateCenterToolbarOnChange","CarouselProvider","naturalSlideWidth","naturalSlideHeight","totalSlides","ButtonBack","ButtonNext","getCarouselHeight","TaskNavigator","verifiedRecommendations","buildTestButton","matchingRecommendation","findFirstRecommendationForTest","targetTaskInfo","selectDefaultTaskForTest","testButtonHeight","currentTest","buttonClickHandler","traceNavigation","navigateToTest","buildButtonStyle","buildButtonClassName","findFirstTaskWithNameForTest","testState","getTestState","defaultTask","findDefaultTaskForTest","buildTestNavigation","buildTaskButton","taskButtonHeight","currentItem","currentTask","navigateToTask","buildTopLayerStyle","assignRatioToButton","minWidth","buildTaskNavigation","activeTest","findTestForName","TopButtonToolBar","growth","testIndexForName","testForName","findFirstTaskInTest","targetTest","isTest","navigationTarget","navigationType","switchTaskIntraTest","getTaskNavigatorHeight","LoggedInView","handleTopLevelPageChange","buildTaskNavigator","shouldBuildNavigator","setTopLevelPageChangeHandler","startAutomaticTransmissions","reactClientLoaded","err","stopAutomaticTransmissions","Notifications","Login","switchToLoginState","handleLogin","loggedUserName","handleLoginClick","updateInputLoginValue","handleKeyPress","titleLabel","fieldLabel","buttonLabel","placeholder","TYPES","pageBlur","pageFocus","enterFullscreen","PageEventsObserver","lastVisibilityTime","lastFullScreenTime","isFullScreen","handleVisibility","newVisibilitytime","getMoment","timeSpent","computeTimeDifference","traceAction","buildTraceDetails","time1","time2","diff","asSeconds","alternateStateDuration","isFullscreenNow","newFullScreenTime","ifvisible","App","resize","computeScalingValue","showWaiting","loginDialogClosedHandler","loginTitleLabel","loginFieldLabel","loginButtonLabel","loginDialogDisabled","showTask","courseForNavigator","testsForNavigator","switchTask","scalingConfig","scalingMode","dumpTasksViewConfigurationToTraceLog","showReplay","setScalingConfig","horizontalScale","verticalScale","getScalingAlignmentCssClass","_this$scalingConfig","alignmentVertical","cssClass","fieldValue","renderWaiting","waitingMessageTexts","renderLogin","renderTask","_this$state2","initObserver","newValues","upperHeaderMenu","lowerHeaderMenu","ComponentStateManager","stateMap","getStateSnapshot","getSnapshot","buildPathRoot","preloadWithStateSnapshot","snapshot","fromSnapshotRepresentation","registerStateChangeFromSnapshot","fromSnapshotRepresentationForSingleEntry","doDeepCopyIfRequired","dumpStateChangeToTrace","toSnapshotRepresentationForSingleEntry","findOrBuildStateForPathIdInternal","filterMethod","registered","rootFromPath","buildStateFromConfig","entryFilter","updateVolatiles","toSnapshotRepresentation","getPosition","setDefaultLinkReceiver","calculateDefaultLinkReceiver","setMouseOverValue","setDefaultImage","addPropagationGroupControllerState","addSelectGroupControllerState","addSelectGroupMemberInfo","addAttributesToInitialState","addTranslationsInState","currentLanguage","cellPathId","cellUserDefIdPath","translatedText","getTranslatedText","setLanguageValue","updateTableCellParentState","translatedMouseOver","getTranslatedMouseOver","translatedImage","getTranslatedImage","imageMapUserDefinedId","tableAbsoluteUserDefPath","isLinkCatcher","linkCatcherConfiguration","catchLinkSetting","catchLinks","extractDeepCopy","extractVolatile","updateStateInComponentStateManager","toSnapshotRepresentationByComponent","_entry3","fromSnapshotRepresentationByComponent","extractComponentClassName","toSnapshot","fromSnapshot","ComponentDirectory","componentList","treeInstnancesUserDefinedIds","pageComponents","findComponentsByPageName","treeComnOnPage","len","lenComp","treeChildAreaIdToIgnore","subTreeViewIds","findSubTreeComponentsWithinAPage","comp","treeViewComnOnPage","IncidentsAccumulator","enterTask","atTime","leaveTask","startTimeOfCurrentTask","startTimeOfCurrentPause","timeSpentPausedInCurrentTask","firstReactionSeen","lastContinuingInteractionKey","getOrInitializeValuesForTask","getNonPausedTimeSpentInCurrentTask","pauseTask","resumeTask","getValuesForTask","taskValuesList","clearTasksState","preloadTasksState","allTasksState","injectStateChangeAtReplay","buildInitialValues","startOfCurrentPause","timeSpentInEarlierPauses","getTimeSpentInPausedState","ConditionalLinkHelper","branches","logUndefinedMessage","condition","actions","PageConfigurationsManager","pagesList","buildMappings","userDefinedIdCatalog","textBlockNameCatalog","supressWarning","pageSegmentCatalog","addMappingsForPage","addMappingsForComponent","addMappings","addMappingsForComponentList","buildComboBoxItemsArray","buildListItemsArray","buildLinkConfigurationsArray","textBlock","_CbaCalculatorInput$c2","CalculationsConfigurationManager","calculationEntry","findAllCalculationsByTaskName","calculation","tasksList","namedCalculations","findScoreResultListByTaskName","listName","list","findAllScoreResultListsByTaskName","elements","scoreResult","lists","findScoreResultAttributesByTaskName","findRelevantVariablesForTask","implicitVariables","targetVariables","excludedVariables","obj","PresenterStateManager","newState","taskEntriesList","removeDialog","taskState","removableDialog","newPosition","currentTaskState","setMainAreaPage","changeOrCreatePageArea","pageAreaList","pageAreaEntry","ValueMapper","valueMapName","valueToMap","valueMapToUse","valueMaps","acceptingGuard","guards","guardTerm","TaskManager","topLevelPageChangeHandler","itemConfiguration","resourcePath","externalResourcePath","itemInfoEntries","setSwitchCallback","switchCallback","setAvailabilityCallback","availabilityCallback","triggerGoToTask","newItemName","triggerTaskSwitch","checkAvailableTask","evaluateConditionalLink","combinedPosition","getTopComponentPosition","switchTopLevelPage","fullReceiverPath","evaluatedPageAreaType","preparePageSwitchInPresenterState","setPageName","calculations","getResultsListForTask","getOldTaskResults","buildScoringHitMissListEvaluationResult","buildScoringClassListEvaluationResult","addScoringAttributesEvaluationResult","addResultVariablesEvaluationResult","activeResourcePath","activeExternalResourcePath","oldTask","oldItem","oldTest","newTask","newItem","taskResult","stopCurrentStatemachine","setTestItemTaskNames","replayMode","itemInfo","getItemInfoForName","getTaskForName","newTaskId","setupTranslation","setOrInitializeCurrentCalculator","switchCurrentStatemachineWithoutStarting","initializeVariablesForTask","traceVariableValues","prepareTaskSwitchInPresenterAndNavigatorState","startOrInitializeCurrentStatemachine","dumpFullStateToTrace","_this$runtime","componentsState","statemachines","getStatemachinesPreloadData","presenterState","taskNavigatorState","taskResults","calculators","_this$runtime2","clearStatemachines","_this$runtime3","preloadStatemachinesData","getItemResources","getItemInfo","usedResources","externalResources","mapResourcePath","internalResources","fontMappings","itemInfoEntry","requestType","scoringListName","scoringList","classResultVariables","computeClassResultVariables","explicitResultVariables","computeExplicitResultVariables","implicitResultVariables","simplifyImplicitVariablesName","computeImplicitResultVariables","sortedClassResultVariables","localeCompare","implicitVariablesResult","implicitVariableResult","simplifyImplicitVariableName","simplifyUserDefIdPath","isFirstActiveMode","hitClass","winnerHit","retrieveWinnerHit","textResult","computeTextResultForClassVariable","nameResult","computeNameResultForClassVariable","labelResult","computeLabelResultForClassVariable","createResultVariable","calculatedValue","flatMap","scoringResultPerMember","createPerMemberImplicitResultVariablesFor","createDefaultImplicitResultVariablesFor","selectGroupNumber","resultVariable","resultVariablesInPageAreas","retrieveImplicitVariablesEmbeddedInPageAreasAsAbsoluteUDI","variableUdi","adaptedCalculatedValue","adaptValueForCalculation","pageAreaVariableName","pageAreaVariableValue","memberState","adaptedIdCalculatedValue","adaptedOpCalculatedValue","nameValue","textResultValue","nameResultValue","labelResultValue","jsonString","implicitVariableAbsoluteUdi","implicitVariablesEmbeddedInPageAreas","implicitVariableUdi","pageAreaAbsoluteUserDefId","pageAreaUserDefId","memberAbsoluteUserDefPath","targetClass","hitName","filteredRows","findWinnerHitForFirstActiveMode","maxObject","currentObject","resultLabel","computeResultVariablesEvaluationResult","currentResults","evaluationStructure","buildHitRowsFromCalculations","buildHitClassRowsFromCalculations","results","suffix","hitRow","firstActiveHit","hitClassRow","defaultPageName","conditionalLinkResult","saveTestState","initialTaskEntry","buildInitialTaskStateObject","initialPage","initialXPage","conditionResult","initRule","afterConditionEvaluationTaskEntry","setPageForPageAreaInTaskState","newPage","TaskResultsManager","resultsForTask","TimedEventsCatalog","putEntry","triggerInterval","acceptingStatesList","getEntry","timedEventsList","buildTimedEventEntry","getTimerIntervals","clearTimeoutHook","handle","setTimeoutHook","argument","stateName","eventEntry","scheduledTimeoutHandle","scheduledTriggerTime","remainingInterval","timedEventEntry","scheduleTimedEvent","setScheduledDataInTimedEventEntry","startInterval","getNow","targetTime","timeoutId","entryToModify","StatemachineEventHistory","getHistoryDataForSnapshot","raisedEventsPerState","totalNbOfRaisedEvents","valuesPerVariable","valuesPerVariableAfterLastArtificialEvent","reportBeforeEvent","activeStates","variableValues","addVisitedStates","isArtificialEvent","addRaisedEvent","addRaisedEventPerStates","addVariableValues","reportAfterEvent","events","matchInHistory","matchInPendingMemory","addRaisedEventPerState","addVisitedState","stateToAdd","addValuePerVariable","isArtificialVariable","variableInfos","variableInfo","initialValues","Statemachine","model","timedEventDefaults","statePageMapDefaults","historySnapshot","running","stopTimedEvents","continue","paused","getCurrentStates","startTimedEvents","pauseTimedEvents","resumeTimedEvents","eventProcessingRuns","enqueueEventLastOut","runSingleEventWithHistoryReports","pendingEventFromQueue","pendingEventQueue","pendingTaskSwitch","switchToExecute","executePendingTaskSwitch","timedEvents","getEventData","setTriggerIntervalInEventEntry","getCurrentTimerIntervals","getStatePageAssignments","statePageMap","areaType","areaName","oldEntryIndex","getCurrentVariableValues","currentVariableValues","getVariableValuesMapForTask","getHistoryData","interpreter","getConfiguration","getFullConfiguration","getAllCurrentStates","getElapsedTimeInState","elapsedTimeStateMap","acc","exitTime","entryTime","buildStateMachine","machineModel","buildTimedEventsCatalog","scxml","scion","Statechart","transformMachineModel","errorInfo","tagname","reason","originalStates","statesCopy","modelCopy","transformStates","stateArray","parentStatePath","hasSubstates","statePath","buildStatePath","transformEntryExitActions","buildInitEventName","transitions","transformTransition","initEventName","onEntry","buildOnEntryFunction","onExit","buildOnExitFunction","putEventOnQueue","enqueueEventFirstOut","startMyTimedEvents","stateToPageMap","assignedPageSwitch","addEntryTimeInStateMap","findScheduledEventsByState","stopTimedEvent","findUnscheduledEventsByState","startTimedEvent","findScheduledEvents","pauseTimedEvent","resumeTimedEvent","buildVariablesInfoArray","gen","unshift","currentArray","newEntry","addExitTimeInStateMap","indexToUpdate","buildStatePageMap","statePageAssignments","modelPageAssignments","dynamicPageAssignments","dynamicAssignment","oldAssignmentIndex","existingAssignment","statesList","catalog","findAcceptingStates","recursionResultState","stateId","buildConditionFunction","onTransition","buildOnTransitionFunction","sourceState","targetState","StatemachinesManager","currentMachine","preInitTriggeredEvents","existingMachine","statemachinesList","statemachineModelsList","newMachine","triggerRerenderForAllChangeObservers","pauseCurrentStatemachine","resumeCurrentStatemachine","taskSwitchCall","existingEntryIndex","statePageMapDefault","machine","timerIntervals","historyData","preloadData","machineData","TaskNavigatorStateManager","testEntriesList","TraceLogBuffer","entryType","entryContent","withReplaySupport","isReplaySupportType","withoutSnapshot","getNextCount","buildTimeString","withExtendedMetaData","traceContextId","withoutItemConfiguration","withoutScoring","logEntriesList","newEntryListener","deliveredEntries","setNewEntryListener","setWithReplaySupport","setWithExtendedMetaData","setWithoutItemConfiguration","setWithoutSnapshot","setWithoutScoring","entryCounter","date","padLeadingZeroes","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","buildTimeZoneOffsetString","getTimezoneOffset","offsetInMinutes","absoluteOffsetInMinutes","abs","minutesOffset","hoursOffset","ClipboardManager","selectionHolderEntry","currentSelectionHolder","isReadOnlyCallback","setClipboardContent","getSelectionCallback","traceCutCopy","currentInsertPosition","insertPositionEntry","clipboardContent","insertCallback","tracePaste","deregisterInsertPosition","selectionHolder","newContent","traceLog","wasPerformed","contentDealerIndexPath","contentUserDefIdPath","contentIndexPath","contentUserDefId","isPerformed","StringUtils","word","charAt","toUpperCase","UserDataUploader","userDataBuffer","buildUserDataPostContentCallback","dataType","setSessionContext","loginTimestamp","sessionContext","getSessionContext","transmitInterval","setNewTimer","setImmediateCallback","stopOldTimer","dropImmediateCallback","collectEntriesAndTriggerTransmission","transmitterPromise","transmitterPromiseIsResolved","collectEntriesAndBuildTransmitPromise","notificationToaster","addUserDataEntries","getUserDataEntriesList","shouldTryAgainToSend","isMaxFailCountErrorDisplayed","notifyErrorMsg","getFailCount","setMaxFailCountErrorDisplayed","show","ex","userDataRequestBody","getTransmittingPromise","updateUserDataEntriesListAfterSuccessfulSend","noOfEntriesTransmitted","increaseNextSentFailCount","setPostMessageTransmissionChannel","targetWindowType","domainUri","transmissionChannel","axiosInstance","transmitCallback","setTransmitInterval","resetMaxFailCount","setCallbackTransmissionChannel","setConsoleTransmissionChannel","setHttpTransmissionChannel","transmitUrl","httpTimeout","setNotificationToaster","toaster","isMaxFailCountError","lastSentFailCount","newTransmitInterval","currentTimer","userDataEntriesList","newUserDataEntries","noOfTransmittedEntries","dataToTransmit","transmitViaPostMessage","transmitViaCallback","transmitViaConsole","transmitViaHttp","notify","targetOriginUri","uploaderInstance","messageToSend","getTargetWindow","getDataType","parent","opener","nbOfEntriesInTransmission","post","dataToLog","entriesList","capitalizedDataType","toFirstUpper","TraceLogUploader","_UserDataUploader","buildTracePostContent","sendTimestamp","metaData","cbaVers","PostMessageReceiver","parsedUrl","tryToParseURL","acceptedExternalPageFrameUrlsList","startReceiving","defaultAcceptedUrl","receiveEvent","sendTaskPlayerReadyEvent","windowType","sendResponseEvent","responder","source","dataInEvent","tryJsonParse","eventTime","eventProcessed","processRuntimeControlEvent","processIfExternalPageFrameEvent","traceMessage","microfinEvent","microfinVariable","isEmptyOrNoValue","isNoValue","safeIndexPath","safeUserDefIdPath","newType","callId","messagePayload","getUserInteractionCount","processAvailabilityMessage","availableTaskSwitches","isTaskSwitchAvailable","existingEntry","sourceWindow","setWaitMessages","setScalingConfiguration","preloadPromise","setPreload","requestId","isSuccess","images","videos","audios","insertMessageInTrace","logStateToTrace","flushTrace","channel","isValidTargetOrigin","targetOrigin","contextId","setTraceContentFilter","replaySupport","getUserId","getTask","responderFunction","getTasksState","replay","story","getScoringResult","getOldScoringResult","sendStatemachineEvent","scopes","scoreHotKey","traceHotKey","statemachineHotKey","eventToSend","triggeringEventOrigin","triggeringEventSourceWindow","messageString","eventOrigin","traceCount","originAsString","host","EvaluatorHelper","frequency","deg","unit","PI","ANGLE_DEGREE","ANGLE_RADIAN","fak","NaN","nthroot","negate","possible","isBigger","ExpressionEvaluator","stack","repeatingRunStatus","restoreState","calc","val","translateKey","updateRepeatingRunStatus","isStackEmpty","repeatingRunIsActive","calcValue","getRepeatingRunKey","getRepeatingRunValue","pushStackEntry","returnValue","newRank","getRankForKey","previousKey","peekStackKey","previousValue","peekStackValue","popStackEntry","resetStack","reset","resetRepeatingRun","o1","o2","setRepeatingRunValue","setRepeatingRunKey","RANK","=","+","-","/","*","yx","x√y","EE","Evaluator","setConfiguration","silentOnErrors","bigger","expressions","expressionNestingDepth","memory","resultBuffer","keysBuffer","getMem","memIdx","initRenderCommands","setCurrentEvaluationResult","sendToRender","getRenderCommands","evalKey","operand","evalKeyInternal","renderCommands","sendToRenderHistory","resetExpressionsStack","pushNestedExpression","popNestedExpression","peekNestedExpression","hasNestedExpression","getCurrentEvaluationResult","resetKeysBuffer","pushKeyToKeysBuffer","getPreviousKey","isKeyAC","popKeyFromKeysBuffer","getKeysBufferLength","getCurrentKey","isKeyC","operations","dispVal","evalOperation","functionForEval","originalResult","resultAsString","evalShouldResetHistoryIfDigitOnNextKey","dispValKeyOperand","shouldResetHistoryIfDigitOnNextKey","evalEndOfTerm","isEndOfTerm","evalsin","_ref2","isMultipleOfPi","sin","getRadiantValue","evalcsc","_ref3","evalsin1","_ref4","getDisplayValueFromRadiant","asin","evalcos","_ref5","cos","evalsec","_ref6","evalcos1","_ref7","acos","evaltan","_ref8","tan","evalcot","_ref9","evaltan1","_ref10","atan","evalsinh","_ref11","E","evalsinh1","_ref12","evalcosh","_ref13","evalcosh1","_ref14","evaltanh","_ref15","e1","e2","evaltanh1","_ref16","evalPI","_ref17","eval1perx","_ref18","evalx2","_ref19","evalx3","_ref20","eval2x","_ref21","evalex","_ref22","evaloperandyx","_ref23","evaloperandex","_ref24","eval2root","_ref25","eval3root","_ref26","evaloperandxrooty","_ref27","evalfactorial","_ref28","evalln","_ref29","evallog2","_ref30","evallog10","_ref31","evaloperandlog","_ref32","evalRandom","_ref33","random","evalLeftBracket","_ref34","evalRightBracket","_ref35","evalPlusMinus","_ref36","displayValue","evalEquals","_ref37","evalDigitOrDecimalPoint","_ref38","_this$getPreviousKey3","willOverflow","isAlreadyDecimalPoint","evalDecimalPoint","_ref39","evalMClear","_ref40","evalMSave","_ref41","evalMAdd","_ref42","doMemoryOperation","evalMMinus","_ref43","evalMRead","_ref44","valueFromMemory","getMemoryValue","evalAC","_ref45","evalC","_ref46","evalBackspace","_ref47","currentValue","evalViaExpressionEvaluator","_ref48","buildHardcodedCommandsList","radiantValue","withThis","buildUnaryOperatorCommand","csc","sin-1","sec","cos-1","cot","tan-1","sinh","sinh-1","cosh","cosh-1","tanh","tanh-1","π","1/x","x2","x3","buildBinaryOperatorCommand","2x","operandyx","operandex","2√","3√","operandx√y","x!","ln","log2","log10","operandlog","Rand","(",")","×","÷","–","+/–","0","1","2","3","4","5","6","7","8","9",".","mc","ms","m+","m-","mr","AC","C","calcFunction","getSupportedOperations","KeyboardHelper","operationsString","calculatorOperation","operationsArray","m","isSupportedOperation","fromKeyStrokeToCalculatorSupportedOperation","pressedKey","lookupForOperation","fromStatemachineToCalculatorSupportedOperation","isDigitKey","Renderer","valueComponents","splitValue","fractionalPart","targetDigitsCount","calculateTargetDigitCount","exponentPart","_Renderer$roundFracti","roundFractionalDigits","reducedFractionalDigits","digits","roundingOverflow","integralPart","sign","_value$split","_value$split2","beforeDecimalPart","postDecimalPart","withExponent","roundedValue","toPrecision","overflowOccured","padEnd","msg","nroot","trailingDot","valueWithoutTrailingDot","shortenedResult","shortenValue","addTrailingDecimalSeparator","parts","limitFractionalDigits","valAbs","toExponential","HistoryRenderer","historyEntries","pushToHistory","recalculateHistoryString","pushToHistoryAC","pushToHistoryC","isKeyOneOperatorAfterAnotherOperator","pushToHistoryOneOperatorAfterAnotherOperator","isKeyBackspace","pushToHistoryBackspace","isKeyEquals","pushKeyToHistoryEquals","isKeyUsingOperand","pushToHistoryKey","prevKey","lastPopped","handleCaseOfEqualsFollowedByAnOperationOrByAnOperand","historyString","brackets","betweenOperatorsStack","recalculateHistoryForStackBetweenOperators","formatAllNumbers","getOperandValue","numberDetectorRegEx","CbaCalculatorEngine","evaluator","historyRenderer","displayingValue","historyDisplayingValue","baseOrExponentOrMemIdx","iMax","calcEngineParams","renderHistory","setDisplayValueInState","triggerHistoryRendering","getTaskPath","CalculatorsManager","currentCalculator","calculatorsStateList","getHistoryDisplayingValue","safeCall","getDisplayingValue","saveState","calculatorTaskPath","newCalculatorState","ActionRegister","actionsMap","has","delete","focusMap","layerStyles","pointerEvents","zIndex","getItemStyles","initialOffset","currentOffset","WebkitTransform","CustomDragLayer","_useDragLayer","useDragLayer","getInitialSourceClientOffset","getSourceClientOffset","clippedStyle","augmentedWidth","augmentedHeight","augmentedFontSize","augmentedStyle","renderItem","RecordingBuffer","recordingNumber","blobUrl","responseType","reader","FileReader","readAsDataURL","onloadend","recordingInfo","sourceComponent","nbOfRecordingOnComponentInstance","recordingStartTime","recordingList","RecordingUploader","buildRecordingPostContent","recordingEntriesList","LibraryManager","librariesUsedMap","itemLibraries","checkLibraryPaths","library","addMathJax","libraryPath","scriptTag","setAttribute","appendChild","VariableManager","variableMap","variablesArray","variableObservers","entryIndex","entryList","clearAllChangeObservers","tracing","variablesConfig","withTrace","variableConfig","getFullData","variableEntry","oldVariable","checkType","traceVariableChangeAttempt","variableType","newValueType","operationStatus","variableValuesMap","ReplayRunner","setNowProvider","nowProvider","setDelayProcessor","delayProcessor","finishedAction","replayFromTaskStartingPoint","fromIndex","appSettings","initializingTriple","grabInitializingTriple","taskSwitchEntry","fullStateEntry","tasksViewVisibleEntry","stateChangeEntries","nextIndex","_step$details","processStateChangeStep","_taskSwitchEntry$deta","initialReplayTick","replayTick","initialTimestamp","continueStoryExecution","nextStepIndex","executeNextReplayStep","stepAction","doneAction","currentStepIndex","currentStep","delayMillis","calculateDelayMillisByNow","dummyEvent","_currentStep$details","closeMenuItemTree","_currentStep$details2","htmlElement","getComputedStyle","parentElement","calculateDelayMillis","stepReplayTick","nowTimestamp","tripleStartFound","nextEntry","ReplayStepMonitor","currentReplayStepId","i18n","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","TranslationManager","translationLanguage","translate","translations","addResources","translation","defaultLanguage","setupLanguageValues","exists","t","getTranslatedText4GivenLanguage","addTranslationChangedListener","_instance$props","onTranslationUpdate","_instance$props2","initializeComponentTypesToExclude","excludedComponentTypes","initializeRenderAfterTranslationComponentTypes","renderAfterTranslationComponentTypes","pagesUdis","componentsToRenderAfterTranslation","containerAbsoluteUserDefId","containerUserDefId","translationData","getTranslationData","translateTable","getImageMapUserDefinedId","hasImageTranslation","translateGenericComponent","memberUserDefinedId","renderComponent","hasTextTranslation","shouldUpdateComponentText","extractLanguageValue","hasMouseOverTranslation","absoluteUserDefPath","retrieveComponentLanguage","componentLanguage","referenceTextTranslation","normalizeString","containerComponent","shouldUpdateTableTexts","tableTranslationData","renderedComponent","filteredTableCells","findRelevantTableCells","cellTranslationData","updatedValue","editMemberPath","updateEditWidgetValue","tableMemberPath","translateTree","treeAbsoluteUserDefPath","treeIndexPath","TaskPlayer","apiState","runtimer","getWaitingMessageTexts","DndProvider","backend","TouchBackend","HTML5Backend","enableMouseEvents","getElementById","sendPlayerReady","checkNotRunning","checkNotLoggedInOrNoTaskRunning","setWaitingMessageTexts","itemConfigVersion","runtimeCompatibilityVersion","isCompatibleVersion","libraryManager","addLibrariesForItem","scalingModes","alignmentHorizontalModes","alignmentVerticalModes","preloadItemResources","checkNoTaskRunningOrTaskRunning","dumpMessageToTraceLog","setCallbackTraceTransmission","checkNotLoggedIn","setConsoleTraceTransmission","_traceLogUploader$get","setCallbackRecordingTransmission","setConsoleRecordingTransmission","_recordingUploader$ge","traceSessionId","recordingSessionId","dumpLoginToTraceLog","checkNoTaskRunning","fieldValueCallback","checkTaskRunning","pauseOrResume","_this$runtime4","dumpStatemachineEventToTraceLog","score","normalizeHotKeySpecification","checkApiState","acceptedList","imagesPromise","videoPromise","audioPromise","preloadResources","buildRuntime","EventEmitter","FocusRegister","hotKeySpecification","windowNameForErrorMessage","withoutCtrl","user","runtimeVersion","webClientUserAgent","enter","versionNumber","getCbaVersionNumber","dumpPauseResumeToTraceLog","_taskManager$getCurre2","startTaskPlayer","eventReceiverConfiguration","getEventReceiverConfiguration","useExternalController","shouldActivateInternalController","startUp"],"mappings":"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","file":"static/js/main.f6fb01d4.chunk.js","sourcesContent":["// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\r\n(() => {\r\n  if (typeof window.CustomEvent === \"function\") return false;\r\n\r\n  function CustomEvent(event, params) {\r\n    params = params || {\r\n      bubbles: false, cancelable: false, detail: undefined\r\n    };\r\n    const evt = document.createEvent('CustomEvent');\r\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n    return evt;\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype;\r\n\r\n  window.CustomEvent = CustomEvent;\r\n  return undefined;\r\n})();\r\n\r\n/**\r\n * IE11 doesn't support yet <b>.startsWith</b> that is why we need to \r\n * define it ourselves in order to make the project run on IE.\r\n * \r\n */\r\nif (!String.prototype.startsWith) {\r\n  // eslint-disable-next-line no-extend-native\r\n  String.prototype.startsWith = (searchString, position) => {\r\n    position = position || 0;\r\n    return this.indexOf(searchString, position) === position;\r\n  };\r\n}\r\n","import UrlLib from 'url';\r\nimport packageJson from '../../package.json';\r\n\r\n/**\r\n * Basic helper methods used by various components.\r\n */\r\nexport default class Utils {\r\n\r\n\r\n  // --------- Java objects, arrays etc. ---------------------------------------------------\r\n\r\n  /**\r\n   * Return the given value if it is defined, return the default value otherwise.\r\n   * \r\n   * @param {*} valueMightBeUndefined The value that might be undefined.\r\n   * @param {*} defaultValue The default value to use as replacement for an undefined value.\r\n   */\r\n  static withDefault(valueMightBeUndefined, defaultValue) {\r\n    return valueMightBeUndefined === undefined ? defaultValue : valueMightBeUndefined;\r\n  }\r\n\r\n  /**\r\n   * Get the value of the given property of the given base object and return the default value \r\n   * if the object is undefined. \r\n   * \r\n   * The method will return undefined if the base object is not undefined but does not bear a property of the given name.\r\n   * \r\n   * @param {*} baseObject The base object bearing the property. This object might be undefined. We will return the given default value in that case.\r\n   * @param {String} propertyName The property of the base object.\r\n   * @param {*} defaultValue The default value to use if the base object is undefined.\r\n   */\r\n  static getPropUndefinedSafe(baseObject, propertyName, defaultValue) {\r\n    return baseObject === undefined ? defaultValue : baseObject[propertyName];\r\n  }\r\n\r\n\r\n  /**\r\n   * Is the given value a 'falsy' value (i.e. null, undefined, empty string, false, 0, NaN) or \r\n   * an Object that does not have any attributes (i.e. properties or methods)?\r\n   * \r\n   * @param {} candidate The value to check.\r\n   */\r\n  static isEmptyObject(candidate) {\r\n    return !!candidate && candidate.constructor === Object && Object.keys(candidate).length === 0;\r\n  }\r\n\r\n  /**\r\n   * Does the given array contain any 'non-empty' value \r\n   * (i.e. something that returns a non-empty string as toString() result)?\r\n   * \r\n   * @param {*} array The array to check; might be undefined or null but must be an array otherwise.\r\n   */\r\n  static isNonEmptyArray(array) {\r\n    return array !== undefined && array !== null && array.length !== 0 && Utils.arrayContainsNonEmptyEntry(array);\r\n  }\r\n\r\n  /**\r\n   * Does the given array contain any 'non-empty' value \r\n   * (i.e. something that returns a non-empty string as toString() result)?\r\n   * \r\n   * @param {*} array The array to check. The array must not be undefined or null.\r\n   */\r\n  static arrayContainsNonEmptyEntry(array) {\r\n    return array.some(value => value !== undefined && value !== null && value.toString() !== '');\r\n  }\r\n\r\n  /**\r\n   * Does the given array contain an 'empty' value \r\n   * (i.e. something that returns an empty string as toString() result)?\r\n   * \r\n   * @param {*} array The array to check. The array must not be undefined or null.\r\n   */\r\n  static arrayContainsEmptyEntry(array) {\r\n    return array.some(value => value === undefined || value === null || value.toString() === '');\r\n  }\r\n\r\n  /**\r\n   * Return a 'deep' copy of the given object.\r\n   * \r\n   * The method uses JSON parse - stringify to create the copy.\r\n   * \r\n   * @param {*} object The object to copy. This must be JSON 'stringifyable'. \r\n   */\r\n  static deepCopy = object => JSON.parse(JSON.stringify(object));\r\n\r\n  /**\r\n   * Return a 'deep' copy of the given object.\r\n   * \r\n   * The method uses JSON parse - stringify to create the copy.\r\n   * If the given object is undefined/null it simply returns undefined/null.\r\n   * \r\n   * @param {*} object The object to copy. This may be undefined or null. \r\n   */\r\n  static safeDeepCopy = (object) => {\r\n    if (object === undefined) {\r\n      return undefined;\r\n    }\r\n    return Utils.deepCopy(object);\r\n  }\r\n\r\n\r\n  /**\r\n   * Extends 'from' object with members from 'to'. If 'to' is null, a deep clone of 'from' is returned.\r\n   * \r\n   * TODO: CKI: The method behavior seems to be more complex than described above: No adding is done if the\r\n   * from value is not an Object or Array. -> Properly describe and test it or try to drop it. \r\n   * Currently there is no call with a to value given!\r\n   */\r\n  static safeDeepCopyObjects = (from, to) => {\r\n    if (from == null || typeof from !== \"object\") return from;\r\n    if (from.constructor !== Object && from.constructor !== Array) return from;\r\n    if (from.constructor === Date\r\n      || from.constructor === RegExp\r\n      || from.constructor === Function\r\n      || from.constructor === String\r\n      || from.constructor === Number\r\n      || from.constructor === Boolean) {\r\n      return new from.constructor(from);\r\n    }\r\n\r\n    to = to || new from.constructor();\r\n\r\n    Object.keys(from).forEach((name) => {\r\n      to[name] = typeof to[name] === \"undefined\" ? Utils.safeDeepCopyObjects(from[name], null) : to[name];\r\n    });\r\n\r\n    return to;\r\n  }\r\n\r\n  // --------- Mode and feature decisions ------------------------------------------------\r\n\r\n  /**\r\n   * Get a version number string.\r\n   */\r\n  static getCbaVersionNumber() {\r\n    return `${packageJson.version}`;\r\n  }\r\n\r\n  /**\r\n   * Get a version string.\r\n   */\r\n  static getCbaVersion() {\r\n    return `${packageJson.name} ${packageJson.version}`;\r\n  }\r\n\r\n  /**\r\n   * Print the version string to the browser console.\r\n   */\r\n  static printCbaVersion() {\r\n    console.info(`Running ${Utils.getCbaVersion()}`);\r\n  }\r\n\r\n  /**\r\n   * Should we run in 'mobile mode' ?\r\n   * \r\n   * We check an optional epxlicit flag in our calling URL \r\n   * and try some heuristic to find out ourselves.\r\n   */\r\n  static isMobile = () => {\r\n    let check = Utils.isMobileModeSetAsParameter();\r\n    // eslint-disable-next-line\r\n    (function (a) { if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);\r\n    return check;\r\n  };\r\n\r\n  /**\r\n   * Private helper: Is there a parameter in our URL that forces 'mobile mode'?\r\n   */\r\n  static isMobileModeSetAsParameter() {\r\n    const isMobileForced = Utils.getQueryParam('forceMobileMode');\r\n    return (`${isMobileForced}` === 'true');\r\n  }\r\n\r\n  /**\r\n   * Does the device use a touch screen?\r\n   */\r\n  static isTouchDevice() {\r\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\r\n  }\r\n\r\n  /**\r\n   * Internal helper: If the requested field in the given settings object exists return it's value, \r\n   * return an empty string otherwise.\r\n   * \r\n   * @param {*} settings Object to investigate.\r\n   * @param {*} settingName Field to look for.\r\n   */\r\n  static getSettingsValueByNameSafe(settings, settingName) {\r\n    if (settings && settings[settingName] !== undefined) {\r\n      return settings[settingName];\r\n    }\r\n    return '';\r\n  }\r\n\r\n\r\n  /**\r\n   * Determine the controller to use and its operation mode.\r\n   * \r\n   * The method returns on of three values:\r\n   *  - preview: Run with the internal controller; use the simplified server interactions (see class comments in ServerCalls and Controller for details).\r\n   *  - rest-api: Run with the internal controller; use the REST API server interactions (see class comments in ServerCalls and Controller for details).\r\n   *  - external-controller: Do not run the internal controller - wait for an external controller to take over.\r\n   */\r\n  static getControllerMode() {\r\n    const defaultMode = 'external-controller';\r\n    const configFromWindowGlobal = window.cba_runtime_config;\r\n    if (configFromWindowGlobal === undefined || configFromWindowGlobal === null) {\r\n      return defaultMode;\r\n    }\r\n    const modeFromWindowGlobal = configFromWindowGlobal.mode;\r\n    if (modeFromWindowGlobal === undefined || modeFromWindowGlobal === null) {\r\n      return defaultMode;\r\n    }\r\n    if ((typeof modeFromWindowGlobal) !== 'string') {\r\n      console.warn(`Invalid controller mode ignored, switching to external-controller mode.`, modeFromWindowGlobal);\r\n      return defaultMode;\r\n    }\r\n\r\n    const trimmedMode = modeFromWindowGlobal.trim();\r\n    switch (trimmedMode) {\r\n      case 'preview':\r\n        return 'preview';\r\n      case 'rest-api':\r\n        return 'rest-api';\r\n      case 'external-controller':\r\n        return 'external-controller';\r\n      default:\r\n        return defaultMode;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Get configuration details for the TaskPlayer's post message API.\r\n   */\r\n  static getEventReceiverConfiguration() {\r\n    return Utils.getEventReceiverConfigurationInternal(window.cba_runtime_config, window.location.href);\r\n  }\r\n\r\n  /**\r\n   * Internal helper: Kernel of getEventReceiverConfiguration providing a test entry point.\r\n   */\r\n  static getEventReceiverConfigurationInternal(configFromWindowGlobal, urlString) {\r\n    return {\r\n      eventTargetWindow: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'eventTargetWindow', undefined),\r\n      eventDomainUri: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'eventDomainUri', undefined),\r\n      startTaskPlayerEvent: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'startTaskPlayerEvent', undefined),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the initial texts for the 'We are waiting for an item configuration...' page\r\n   * displayed by our app while waiting for configurations coming in via the TaskPlayer API.\r\n   * \r\n   * These texts can be given in the window.cba_runtime_config structure (prevailing)\r\n   * or as URL parameters (if config structure does not specify them). \r\n   */\r\n  static getWaitingMessageTexts() {\r\n    return Utils.getWaitingMessageTextsInternal(window.cba_runtime_config, window.location.href)\r\n  }\r\n\r\n\r\n  /**\r\n   * Internal helper: Kernel of getWaitingMessageTexts providing a test entry point.\r\n   */\r\n  static getWaitingMessageTextsInternal(configFromWindowGlobal, urlString) {\r\n    return {\r\n      primary: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'initialWaitingMessagePrimary', 'We are waiting to receive the test configuration...'),\r\n      secondary: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'initialWaitingMessageSecondary', 'If this waiting takes more than a few seconds inform your test administrator.'),\r\n    }\r\n  }\r\n\r\n  static getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, parameterName, defaultValue) {\r\n    // try configuration structure first:\r\n    if (configFromWindowGlobal !== undefined && configFromWindowGlobal !== null\r\n      && configFromWindowGlobal[parameterName] !== undefined) {\r\n      return configFromWindowGlobal[parameterName];\r\n    }\r\n\r\n    // look for configuration parameter in the URL calling our code:\r\n    const urlQuery = UrlLib.parse(urlString, true).query;\r\n    if (urlQuery !== undefined && urlQuery !== null && urlQuery[parameterName] !== undefined) {\r\n      return urlQuery[parameterName];\r\n    }\r\n\r\n    // fall back to default value\r\n    return defaultValue;\r\n  }\r\n\r\n\r\n  // --------- calling URL details -------------------------------------------------------\r\n\r\n  /**\r\n   * Get the protocol + hostname + port of the URL that called our code.\r\n   * \r\n   * The method supports the protocols http, https, file and atom. For other \r\n   * protocols it logs an error and returns undefined.\r\n   * \r\n   * The method does not include the path and parameters given in the URL.\r\n   * \r\n   * Examples: \r\n   *  http://www.example.com:8080/some/path?withParameter=value is trimmed to\r\n   *  http://www.example.com:8080\r\n   * \r\n   *  file:///D:/develop/directory is trimmed to\r\n   *  file:\r\n   * \r\n   *  atom://... is trimmed to \r\n   *  atom:\r\n   * \r\n   */\r\n  static getCallingUrlWithoutPath() {\r\n    return this.getUrlWithoutPathFromLocation(window.location)\r\n  }\r\n\r\n  static getUrlWithoutPathFromLocation(location) {\r\n    switch (location.protocol) {\r\n      case 'http:':\r\n      case 'https:': {\r\n        const portAddOn = location.port ? `:${location.port}` : '';\r\n        return `${location.protocol}//${location.hostname}${portAddOn}`;\r\n      }\r\n      case 'file:':\r\n        return location.protocol;\r\n      case 'atom:':\r\n        return location.protocol;\r\n      default:\r\n        console.error('Unknown protocol', location.protocol);\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the value of the specified parameter given in the URL calling our code.\r\n   * \r\n   * The method returns undefined if there is no parameter with the specified name. \r\n   *\r\n   * @param {*} paramName The name of the parameter to find a value for.\r\n   */\r\n  static getQueryParam(paramName) {\r\n    const query = Utils.getQueryParams();\r\n    return query[paramName];\r\n  }\r\n\r\n  /**\r\n   * Build an object representing all parameters given in the URL calling our code.\r\n   * \r\n   * Parameter names and values are properly URL-decoded.\r\n   */\r\n  static getQueryParams() {\r\n    return Utils.getQueryParamsFromUrlString(window.location.href);\r\n  }\r\n\r\n  /**\r\n   * Build an object representing all parameters in the given URL string.\r\n   * \r\n   * Parameter names and values are properly URL-decoded.\r\n   */\r\n  static getQueryParamsFromUrlString(urlString) {\r\n    return UrlLib.parse(urlString, true).query;\r\n  }\r\n\r\n  /**\r\n   * Makes a request to the browser to set the element to fullscreen mode\r\n   * \r\n   * @param {*} elem the element requested to go fullscreen\r\n   * \r\n   */\r\n  static openFullScreen(elem) {\r\n    const fullscreenEnabled = document.fullscreenEnabled /* Standard syntax */\r\n      || document.mozFullScreenEnabled /* Firefox */\r\n      || document.webkitFullscreenEnabled /* Chrome, Safari and Opera */\r\n      || document.msFullscreenEnabled /* IE/Edge */\r\n\r\n    if (fullscreenEnabled) {\r\n      if (elem.requestFullscreen) { /* Standard syntax */\r\n        elem.requestFullscreen();\r\n      } else if (elem.mozRequestFullScreen) { /* Firefox */\r\n        elem.mozRequestFullScreen();\r\n      } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\r\n        elem.webkitRequestFullscreen();\r\n      } else if (elem.msRequestFullscreen) { /* IE/Edge */\r\n        elem.msRequestFullscreen();\r\n      }\r\n    } else {\r\n      console.warn(\"Current browser does not allow for fullscreen\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Makes a request to the browser to exit fullscreen mode\r\n   */\r\n  static closeFullScreen() {\r\n    if (document.fullscreenElement) {\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n      } else if (document.mozCancelFullScreen) { /* Firefox */\r\n        document.mozCancelFullScreen();\r\n      } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\r\n        document.webkitExitFullscreen();\r\n      } else if (document.msExitFullscreen) { /* IE/Edge */\r\n        document.msExitFullscreen();\r\n      }\r\n    }\r\n  }\r\n\r\n  static keyCodes = {\r\n    Backspace: 8,\r\n    Tab: 9,\r\n    Enter: 13,\r\n    Shift: 16,\r\n    Ctrl: 17,\r\n    Alt: 18,\r\n    Escape: 27\r\n  }\r\n\r\n  static mapResourcePath(resources, path, isExternal) {\r\n    return resources.map((resource) => {\r\n      const resourceCopy = Utils.safeDeepCopy(resource);\r\n      resourceCopy.path = `${path}/${resourceCopy.name}`;\r\n      resourceCopy.isExternal = isExternal;\r\n      return resourceCopy;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * check the type of a variable to match a certain type.\r\n   * @param {*} value \r\n   * @param {*} expectedType \r\n   */\r\n  static checkType(value, expectedType) {\r\n    const valueType = typeof value;\r\n\r\n    if (expectedType === \"integer\" && valueType === \"number\") {\r\n      return Number.isInteger(value);\r\n    } else {\r\n      return expectedType === valueType;\r\n    }\r\n  }\r\n\r\n  static doScrollOnHTMLElement(x, y, sizerElement, scrollingElement, iframe) {\r\n    const { scrollHeight, scrollWidth } = sizerElement;\r\n\r\n    const clientHeight = iframe ? iframe.clientHeight : scrollingElement.clientHeight;\r\n    const clientWidth = iframe ? iframe.clientWidth : scrollingElement.clientWidth;\r\n\r\n    const scrollableHeight = scrollHeight - clientHeight;\r\n    const scrollableWidth = scrollWidth - clientWidth;\r\n\r\n    const { finalX, finalY } = Utils.calculateFinalScrollValue(x, y, scrollableHeight, scrollableWidth);\r\n\r\n    Utils.doScroll(finalY, finalX, scrollingElement);\r\n  }\r\n\r\n  /**\r\n   * Do scroll on an HTML element\r\n   * @param {*} top \r\n   * @param {*} left \r\n   * @param {*} element \r\n   */\r\n  static doScroll(top, left, element) {\r\n    if (!element) {\r\n      return;\r\n    }\r\n    element.scroll({\r\n      top,\r\n      left,\r\n      behavior: 'smooth'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Computes the percentage if necessary on a scrollable container\r\n   * @param {*} x px/% value\r\n   * @param {*} y px/% value\r\n   * @param {*} scrollableHeight \r\n   * @param {*} scrollableWidth \r\n   * @returns { finalX, finalY }\r\n   */\r\n  static calculateFinalScrollValue(x, y, scrollableHeight, scrollableWidth) {\r\n    let finalX = x ? parseInt(x, 10) : undefined;\r\n    let finalY = y ? parseInt(y, 10) : undefined;\r\n\r\n    if (x && x.includes(\"%\")) {\r\n      finalX = Utils.computePercentage(scrollableWidth, parseFloat(x))\r\n    }\r\n\r\n    if (y && y.includes(\"%\")) {\r\n      finalY = Utils.computePercentage(scrollableHeight, parseFloat(y))\r\n    }\r\n\r\n    return {\r\n      finalX,\r\n      finalY\r\n    }\r\n  }\r\n\r\n  /**\r\n   * finds the percentage value of a number \r\n   * @param {Number} num \r\n   * @param {Number} percentage \r\n   * @returns {Number} value\r\n   */\r\n  static computePercentage(num, percentage) {\r\n    return num * (percentage / 100);\r\n  }\r\n\r\n}\r\n","import axios from 'axios';\r\nimport Utils from '../utils/Utils';\r\n\r\n/**\r\n * Interaction with the server providing configuration data and resources.\r\n * \r\n * We support two running modes:\r\n *  - The standard mode expecting a REST API on the server to obtain configuration data.\r\n *  - A simplified mode expecting a plain static content server. This mode is meant to \r\n *  support item authoring tools that do not embed a dynamic content server. \r\n * \r\n *   Action              | Preview mode                                      | Rest-API mode\r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Config file         | <WindowURLWithPath>/courses/previewcourse.json    | <WindowURLNoPath>/ee4cba-api/courses?userId=<username>&<URLParams>\r\n *   retrieval           | <WindowURLWithPath>/tests/<testname>.json         | <WindowURLNoPath>/ee4cba-api/tests/<testname>/?<URLParams>\r\n *                       | <WindowURLWithPath>/items/<itemname>.json         | <WindowURLNoPath>/ee4cba-api/items/<itemname>/?<URLParams>\r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Resource            | ./resources                                       | <WindowURLNoPath>/ee4cba_assets/<itemname>/resources\r\n *   retrieval           | ./external-resources                              | <WindowURLNoPath>/ee4cba_assets/<itemname>/external-resources\r\n *                       |                                                   |\r\n */\r\nexport default class ServerCalls {\r\n\r\n  // --------- public API --------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * The URL path components used to access the server's API.\r\n   */\r\n  static restApiTargets = {\r\n    CONFIGURATION_API: 'ee4cba-api',\r\n    ASSETS_API: 'ee4cba_assets',\r\n    TRACE_ENDPOINT: 'trace',\r\n    RECORDING_ENDPOINT: 'recording'\r\n  }\r\n\r\n  /**\r\n   * Do we run with a simplified server interactions protocol\r\n   * specifically designed to support a preview in an item authoring tool?\r\n   * \r\n   * See class comment for more details.\r\n   */\r\n  static runWithSimplifiedPreviewServer() {\r\n    const controllerMode = Utils.getControllerMode();\r\n    switch (controllerMode) {\r\n      case 'preview':\r\n        return true;\r\n      case 'rest-api':\r\n        return false;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the complete configuration (i.e. test course, tests and items) from the server.\r\n   */\r\n  static getJsonsData(username) {\r\n    console.log(`Getting configuration data in ${ServerCalls.runWithSimplifiedPreviewServer() ? \"preview\" : \"rest-api\"} mode.`);\r\n    return (ServerCalls.doGetCourseConfigurationStep(ServerCalls.getFirstCourse(), username)\r\n      .then(courseStepResult => ServerCalls.doGetTestConfigurationsStep(courseStepResult))\r\n      .then(testsStepResult => ServerCalls.doGetItemConfigurationsStep(testsStepResult))\r\n      .then(itemsStepResult => ServerCalls.doBuildConfigurationStep(itemsStepResult))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Build a promise that puts the given assets to the CBA cache.\r\n   * \r\n   * This is used by the ServiceWorker to cache assets.\r\n   * \r\n   * @param {*} assets \r\n   */\r\n  static cacheAssets(assets = []) {\r\n    console.log(assets);\r\n  }\r\n\r\n  static preloadResources(resources, type) {\r\n    const resourcePromises = resources.map(resource => new Promise((resolve, reject) => {\r\n      const linkTag = document.createElement('link');\r\n      linkTag.as = type;\r\n      linkTag.href = resource.path;\r\n      linkTag.rel = \"preload\";\r\n\r\n\r\n      if (type === \"video\" || type === \"audio\") {\r\n        linkTag.type = \"media\";\r\n        linkTag.rel = \"prefetch\";\r\n      }\r\n\r\n\r\n      if (resource.size > 5 * (10 ** 6) && (type === \"video\" || type === \"audio\")) {\r\n        linkTag.as = \"fetch\";\r\n      }\r\n\r\n      linkTag.onload = () => {\r\n        resource.hadErrors = false;\r\n        resolve(resource);\r\n      }\r\n\r\n      linkTag.onerror = () => {\r\n        console.error(\"Error while loading resource: \", resource);\r\n        resource.hadErrors = true;\r\n        resolve(resource);\r\n      }\r\n      document.head.append(linkTag);\r\n    }));\r\n\r\n\r\n    return Promise.all(resourcePromises);\r\n\r\n  }\r\n\r\n  // --------- private stuff ----------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Create the axios instance that we will use to fetch data from the server.\r\n   */\r\n  static instance = axios.create({\r\n    baseURL: ServerCalls.getServerPath(),\r\n    timeout: 30000,\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Build the base of the URLs that we use to access the server to obtain data.\r\n   * \r\n   * We use the origin of our window as a starting point and modify the URL as follows:\r\n   * If we do not run in a simplifying preview context we return our origin URL but replace the path \r\n   * (and all parameters) with the plain REST API endpoint. \r\n   *   Example: For the origin URL http://127.0.0.1/app?param=value we return http://127.0.0.1/ee4cba-api\r\n   * If we run in a simplifying preview context we return the origin URL but drop all parameters. \r\n   *   Example: For the origin URL http://127.0.0.1/app?param=value we return http://127.0.0.1/app\r\n   */\r\n  static getServerPath() {\r\n    return ServerCalls.runWithSimplifiedPreviewServer()\r\n      ? ServerCalls.getCallingUrlWithoutParams()\r\n      : `${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.CONFIGURATION_API}/`;\r\n  }\r\n\r\n  /**\r\n   * Get the URL that called our code and strip all params.\r\n   * \r\n   * The method retains the path part of the URL.\r\n   */\r\n  static getCallingUrlWithoutParams() {\r\n    const href = window.location.href.split('?')[0];\r\n    return `${href.substring(0, href.lastIndexOf('/'))}/`;\r\n  }\r\n\r\n  /**\r\n   * Get the path of the initial course configuration.\r\n   * \r\n   *  In a simplifying preview mode we return 'previewcourses' as file name. (Another method \r\n   *  will append the .json extension later.)\r\n   *  In full REST API mode we don't specify a specific file name: A username parameter\r\n   *  will be added in this case by another method.\r\n   */\r\n  static getFirstCourse() {\r\n    return ServerCalls.runWithSimplifiedPreviewServer() ? 'previewcourses' : '';\r\n  }\r\n\r\n\r\n  static doGetCourseConfigurationStep(courseName, username) {\r\n    return ServerCalls.getCourse(courseName, username);\r\n  }\r\n\r\n  static doGetTestConfigurationsStep(courseStepResult) {\r\n    const { settings, headerButtons, sessionId, courses } = courseStepResult;\r\n\r\n    // Remove all duplicates from the array of test names: \r\n    // Don't retrieve the same test configuration more than once.\r\n    const testsToRetrieve = ServerCalls.buildArrayWithoutDuplicates(courses);\r\n\r\n    // Get the array of promises that retrieve all tests \r\n    const promisesForTests = testsToRetrieve.map(testName => ServerCalls.getTest(testName));\r\n\r\n    // Return a promise that will execute all test retrieval promises and return the results together with the courses step result\r\n    return ServerCalls.axiosAllWrapper(\r\n      {\r\n        settings,\r\n        headerButtons,\r\n        sessionId,\r\n        courses,\r\n        testsToRetrieve\r\n      },\r\n      promisesForTests\r\n    );\r\n  }\r\n\r\n  static isEmptyRetrievedValue(value) {\r\n    return value === undefined || value === null || value.toString() === '';\r\n  }\r\n\r\n  static doGetItemConfigurationsStep(testsStepResult) {\r\n    const { settings, headerButtons, sessionId, courses, testsToRetrieve } = testsStepResult.contextData;\r\n    const tests = testsStepResult.response;\r\n\r\n    const flaggedErrors = [];\r\n    if (tests.length === 0) {\r\n      flaggedErrors.push('no tests to execute found in course configuration');\r\n    }\r\n    tests.forEach((value, index) => { if (this.isEmptyRetrievedValue(value)) flaggedErrors.push(`could not retrieve test ${testsToRetrieve[index]}`); });\r\n\r\n    // get all item names mentioned in the tests\r\n    const collectedItemNames = tests\r\n      .filter(value => !this.isEmptyRetrievedValue(value))\r\n      .reduce((itemNamesArray, test) => itemNamesArray.concat(test.items), []);\r\n\r\n    // remove duplicates from item names\r\n    const itemsToRetrieve = ServerCalls.buildArrayWithoutDuplicates(collectedItemNames);\r\n\r\n    // get array of item promises\r\n    const promisesForItems = itemsToRetrieve.map(itemName => ServerCalls.getItem(itemName));\r\n\r\n    // get all items data\r\n    return ServerCalls.axiosAllWrapper(\r\n      {\r\n        settings,\r\n        headerButtons,\r\n        sessionId,\r\n        courses,\r\n        tests,\r\n        itemsToRetrieve,\r\n        flaggedErrors\r\n      },\r\n      promisesForItems\r\n    );\r\n\r\n  }\r\n\r\n  static doBuildConfigurationStep(itemsStepResult) {\r\n    const { settings, headerButtons, sessionId, courses, tests, itemsToRetrieve, flaggedErrors } = itemsStepResult.contextData;\r\n    const items = itemsStepResult.response;\r\n\r\n    if (items.length === 0) {\r\n      flaggedErrors.push('no required items found in test specifications')\r\n    }\r\n    items.forEach((value, index) => { if (this.isEmptyRetrievedValue(value)) flaggedErrors.push(`could not retrieve item ${itemsToRetrieve[index]}`); });\r\n\r\n    return (ServerCalls.validateJsonResults(flaggedErrors, courses, tests, items.filter(value => !this.isEmptyRetrievedValue(value)))\r\n      ? {\r\n        success: true,\r\n        payload: {\r\n          settings,\r\n          headerButtons,\r\n          sessionId,\r\n          courses,\r\n          tests,\r\n          items,\r\n        }\r\n      }\r\n      : {\r\n        success: false\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a promise that runs an array of promises and returns an array of results.\r\n   * \r\n   *  @param {*} contextData Some arbitrary context data that we will include in the result.\r\n   *  @param {[*]} promisesArray The promises to run.\r\n   * \r\n   *  @returns A promise that will return an object with two fields: \r\n   *    - contextData: the given context data\r\n   *    - response: the array of promise results\r\n   */\r\n  static axiosAllWrapper(contextData, promisesArray) {\r\n    return axios.all(promisesArray)\r\n      .then((response) => {\r\n        const result = {\r\n          contextData,\r\n          response\r\n        };\r\n        return result;\r\n      })\r\n      .catch((error) => {\r\n        console.info(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Build an array that contains the entries of the given array\r\n   * but drops all duplicates.\r\n   */\r\n  static buildArrayWithoutDuplicates(array) {\r\n    return [...new Set(array)];\r\n  }\r\n\r\n  /**\r\n   * Validate the configuration obtained from the server\r\n   * \r\n   * @param {*} flaggedErrors An array of errors that were detected during data retrieval.\r\n   * @param {*} course The list of the names of the tests to be executed.\r\n   * @param {*} tests An array of test configurations.\r\n   * @param {*} items An array of item configurations.\r\n   */\r\n  static validateJsonResults(flaggedErrors, course, tests, items) {\r\n    if (flaggedErrors.length !== 0) {\r\n      console.info('Errors during data retrieval:', flaggedErrors);\r\n      console.info('loaded course:', course);\r\n      console.info('loaded tests:', tests);\r\n      console.info('loaded items:', items);\r\n    }\r\n    return flaggedErrors.length === 0\r\n      && (course !== undefined || course.length > 0)\r\n      && (tests !== undefined || tests.length > 0)\r\n      && (items !== undefined || items.length > 0)\r\n  }\r\n\r\n  /**\r\n   * Get a test course configuration from the server.\r\n   * \r\n   * @param {*} courseName \r\n   */\r\n  static getCourse(courseName, username) {\r\n    return ServerCalls.getDataFromServer('courses', courseName, username);\r\n  }\r\n\r\n  /**\r\n   * Get a test configuration from the server.\r\n   * \r\n   * @param {*} testName\r\n   */\r\n  static getTest(testName) {\r\n    return ServerCalls.getDataFromServer('tests', testName, undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get an item configuration from the server.\r\n   * \r\n   * @param itemName \r\n   */\r\n  static getItem(itemName) {\r\n    return ServerCalls.getDataFromServer('items', itemName, undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get configuration data from the server.\r\n   * \r\n   * - If we run in the simplifying preview mode we add a file extension .json at the end of the request URL path. \r\n   *   This assumes a static content server serving static configuration data files from the file system.\r\n   * - If we run in in full REST-API mode we don't append a file extension since we assume a service API to respond.\r\n   * \r\n   * The method log a message and returns an empty array if any error occurs.\r\n   * \r\n   * @param {String} typeOfData The type of configuration data to retrieve: 'courses', 'tests', 'items'.\r\n   * @param {String} nameOfValue The name of the data item to retrieve, e.g. the test name of the test to retrieve or the item name of the item to retrieve.\r\n   * @param {String} username The name of the user for whom we retrieve configuration data. We add this as query parameter to the request URL.\r\n   */\r\n  static getDataFromServer(typeOfData, nameOfValue, username) {\r\n    const urlPathExtension = `/${typeOfData}/${nameOfValue}${ServerCalls.runWithSimplifiedPreviewServer() ? '.json' : ''}`;\r\n    const params = (\r\n      ServerCalls.runWithSimplifiedPreviewServer()\r\n        ? {}\r\n        : {\r\n          params: ServerCalls.addAsParam(Utils.getQueryParams(), username)\r\n        }\r\n    );\r\n    return ServerCalls.instance.get(urlPathExtension, params)\r\n      .then(response => response.data)\r\n      .catch((error) => {\r\n        console.info(error);\r\n        return [];\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Add a userId parameter to the query parameter object.\r\n   */\r\n  static addAsParam(params, username) {\r\n    if (username !== undefined) {\r\n      params.userId = username;\r\n    }\r\n    return params;\r\n  }\r\n\r\n}\r\n","/**\r\n * Provide the 'standard' sequence for a given list of tests.\r\n */\r\nexport default class StandardTaskSequencer {\r\n\r\n  constructor(course, tests) {\r\n    this.course = course;\r\n    this.tests = tests;\r\n    this.taskList = StandardTaskSequencer.buildTaskList(course, tests);\r\n\r\n    const initialTask = this.taskList[0];\r\n    if (initialTask === undefined) {\r\n      console.error(\"No task found in standard task sequencer.\");\r\n      this.activeTestName = undefined;\r\n      this.activeItemName = undefined;\r\n      this.activeTaskName = undefined;\r\n    } else {\r\n      const { testName, itemName, taskName } = initialTask;\r\n      this.activeTestName = testName;\r\n      this.activeItemName = itemName;\r\n      this.activeTaskName = taskName;\r\n    }\r\n  }\r\n\r\n  // ---------- public API -----------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Find the first task with the given name inside a specific test (i.e. we ignore the source item).\r\n   * \r\n   * We return undefined if no matching task is available. \r\n   * We log the reason for not finding a task as error if the error log flag is set.\r\n   */\r\n  findFirstMatchingTaskInTest = (newTestName, newTaskName, withErrorLog) => {\r\n    const newTest = StandardTaskSequencer.getTestForName(this.tests, newTestName);\r\n    if (newTest === undefined) {\r\n      if (withErrorLog) {\r\n        console.error(`Test ${newTestName} is not defined in the test course`);\r\n      }\r\n      return undefined;\r\n    }\r\n\r\n    const newTaskEntry = newTest.taskCourse.find((value, index, theArray) => value.task === newTaskName);\r\n\r\n    if (newTaskEntry === undefined) {\r\n      if (withErrorLog) {\r\n        console.error(`Task ${newTaskName} is not defined in test ${newTestName}`);\r\n      }\r\n      return undefined;\r\n    }\r\n    return ({\r\n      testName: newTestName,\r\n      itemName: newTaskEntry.item,\r\n      taskName: newTaskEntry.task\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the task info for the next task in our task sequence.\r\n   * \r\n   * The method silently returns undefined if not next taskk is available.\r\n   */\r\n  getNextTaskInfo = () => (this.nextTaskAvailable() ? this.taskList[this.getCurrentTaskIndex() + 1] : undefined);\r\n\r\n  /**\r\n   * Get the task info for the previous task in our task sequence.\r\n   * \r\n   * The method silently returns undefined if not previous taskk is available.\r\n   */\r\n  getPreviousTaskInfo = () => (this.previousTaskAvailable() ? this.taskList[this.getCurrentTaskIndex() - 1] : undefined);\r\n\r\n  /**\r\n   * Could we currently perform a switch to the next task?\r\n   */\r\n  nextTaskAvailable = () => this.taskList.length > this.getCurrentTaskIndex() + 1;\r\n\r\n  /**\r\n   * Could we currently perform a switch to the previous task?\r\n   */\r\n  previousTaskAvailable = () => this.getCurrentTaskIndex() > 0;\r\n\r\n  /**\r\n   * Switch the current task in our internal structures.\r\n   */\r\n  switchCurrentTask = (test, item, task) => {\r\n    this.activeTestName = test;\r\n    this.activeItemName = item;\r\n    this.activeTaskName = task;\r\n  }\r\n\r\n  /**\r\n   * Get info about the currently active task. \r\n   */\r\n  getCurrentTaskInfo = () => ({\r\n    testName: this.activeTestName,\r\n    itemName: this.activeItemName,\r\n    taskName: this.activeTaskName\r\n  });\r\n\r\n  /**\r\n   * Get the course/tests configuration.\r\n   */\r\n  getConfigurationInfo = () => ({\r\n    course: this.course,\r\n    tests: this.tests\r\n  });\r\n\r\n  // -------------- private stuff ----------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the index of the currently active task in our task list.\r\n   */\r\n  getCurrentTaskIndex = () => {\r\n    const result = StandardTaskSequencer.getIndexForTask(this.taskList, this.activeTestName, this.activeItemName, this.activeTaskName);\r\n    if (result < 0) {\r\n      console.error(\"Cannot find task in task list\");\r\n      return undefined;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the index of the specified task in the given task list.\r\n   */\r\n  static getIndexForTask(taskList, testName, itemName, taskName) {\r\n    return taskList.findIndex((entry, index, all) => entry.testName === testName && entry.itemName === itemName && entry.taskName === taskName);\r\n  }\r\n\r\n  /**\r\n   * Get the test configuration object for the specified test.\r\n   * \r\n   * The method returns the test configuration object, i.e. an object with attributes \r\n   *  - name\r\n   *  - items\r\n   *  - taskCourse\r\n   */\r\n  static getTestForName(tests, testName) {\r\n    const result = tests.find((value, index, theArray) => value.name === testName);\r\n    if (result === undefined) {\r\n      console.error(`Could not find test ${testName}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Build a list of all tasks in the given tests course.\r\n   * \r\n   * The method returns an array of objects where each object describes one task:\r\n   * - testName\r\n   * - itemName\r\n   * - taskName\r\n   */\r\n  static buildTaskList(testsCourse, tests) {\r\n    const result = [];\r\n    testsCourse.forEach((testName) => {\r\n      const test = StandardTaskSequencer.getTestForName(tests, testName);\r\n      test.taskCourse.forEach((taskEntry) => {\r\n        result.push({\r\n          testName,\r\n          itemName: taskEntry.item,\r\n          taskName: taskEntry.task\r\n        })\r\n      })\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n}\r\n","import ServerCalls from './ServerCalls';\r\nimport Utils from '../utils/Utils';\r\nimport StandardTaskSequencer from './StandardTaskSequencer';\r\n\r\n/**\r\n * Implementation of controller layer.\r\n * \r\n * This implementation uses the 'direct JavaScript' TaskPlayer API.\r\n * \r\n * We support two running modes:\r\n *  - The standard mode expecting a REST API on the server to obtain configuration data.\r\n *  - A simplified mode expecting a plain static content server. This mode is meant to \r\n *  support item authoring tools that do not embed a dynamic content server. \r\n * \r\n *   Action              | Preview mode                                      | Rest-API mode\r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Trace log target    | console.log                                       | <WindowURLNoPath>/ee4cba-api/trace\r\n *                       |                                                   | \r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Show Login Box      | no                                                | yes\r\n *                       |                                                   | \r\n * \r\n */\r\nexport default class Controller {\r\n\r\n  constructor() {\r\n    this.taskPlayer = undefined;\r\n    this.taskSequencer = undefined;\r\n\r\n    this.items = [];\r\n\r\n    this.settings = [];\r\n    this.headerButtons = [];\r\n\r\n    this.sessionId = undefined;\r\n    this.userId = undefined;\r\n\r\n    this.activeTestName = undefined;\r\n    this.activeItemName = undefined;\r\n    this.activeTaskName = undefined;\r\n  }\r\n\r\n  // ---------- public API -----------------------------------------------------------------\r\n\r\n  /**\r\n   * Let the controller drive the given task player. \r\n   */\r\n  runController = (taskPlayer) => {\r\n\r\n    this.taskPlayer = taskPlayer;\r\n\r\n    taskPlayer.runPlayer();\r\n\r\n    // Redirect the trace log stream to the trace endpoint of the server REST-API.\r\n    // If running as preview in an item authoring tool we let the trace logger write to the console instead.\r\n    if (!ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      taskPlayer.setHttpTraceTransmission(`${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.CONFIGURATION_API}/${ServerCalls.restApiTargets.TRACE_ENDPOINT}`, 20000, 10000);\r\n      taskPlayer.setHttpRecordingTransmission(`${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.CONFIGURATION_API}/${ServerCalls.restApiTargets.RECORDING_ENDPOINT}`);\r\n    }\r\n\r\n    // Do not show a login box if running as preview in an item authoring tool:\r\n    if (ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      const startWithLogin = Utils.getQueryParam('showLogin');\r\n      if (startWithLogin === 'true') {\r\n        this.showLogin();\r\n      } else {\r\n        this.obtainConfigurationAndRunFirstTask('PreviewUser');\r\n      }\r\n    } else {\r\n      this.showLogin();\r\n    }\r\n  }\r\n\r\n  // ---------- private stuff -----------------------------------------------------------------\r\n\r\n  /**\r\n   * Show the login dialog via the task player.\r\n   */\r\n  showLogin = () => {\r\n    this.taskPlayer.showLogin('Login', 'Username: ', 'Ok', this.loginDialogClosedCallback);\r\n  }\r\n\r\n  /**\r\n   * Callback for the task player to run once the user filled in the login dialog.\r\n   * \r\n   * We don't authenticate the user. The server will pick an appropriate test configuration\r\n   * for the given user.\r\n   */\r\n  loginDialogClosedCallback = (username) => {\r\n    this.obtainConfigurationAndRunFirstTask(username);\r\n  }\r\n\r\n  /**\r\n   * Obtain the full configuration for the given user from the server \r\n   * and start the first task in the task player.\r\n   */\r\n  obtainConfigurationAndRunFirstTask = (username) => {\r\n    ServerCalls.getJsonsData(username)\r\n      .then((data) => {\r\n        this.processConfigurationAndRunFirstTask(username, data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Failure during task start in task player.', error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Process the full configuration given by the server for the given user\r\n   * and start the first task in the task player.\r\n   */\r\n  processConfigurationAndRunFirstTask = (username, configurationData) => {\r\n    this.userId = username;\r\n    if (configurationData.success) {\r\n      this.digestConfigurationResponse(configurationData.payload);\r\n      this.startFirstTaskInTaskPlayer();\r\n    } else {\r\n      console.error(`Server failed to send test configuration for user ${username}`);\r\n    }\r\n\r\n  }\r\n\r\n  startFirstTaskInTaskPlayer = () => {\r\n    this.sendItemConfigurationToTaskPlayer();\r\n\r\n    this.taskPlayer.setTraceContextId(this.sessionId);\r\n    this.taskPlayer.setRecordingContextId(this.sessionId);\r\n    this.taskPlayer.setUserId(this.userId);\r\n    this.taskPlayer.setTaskSequencer(this.taskSwitchCallback, this.taskAvailableCallback);\r\n    this.taskPlayer.setHeaderButtons(this.headerButtons);\r\n    const { course, tests } = this.taskSequencer.getConfigurationInfo();\r\n\r\n    if (this.settings.ShowTaskNavigationBars === true) {\r\n      this.taskPlayer.setMenuCarousels(course, tests.map(test => ({\r\n        // TODO: CKI clean up these attribute name inconsistencies in config files\r\n        name: test.name,\r\n        tasks: test.taskCourse\r\n      })));\r\n    } else {\r\n      this.taskPlayer.setMenuCarousels([], []);\r\n    }\r\n\r\n    this.taskPlayer.activateDebuggingWindows(\r\n      this.settings.scoreDebugging.hotKey,\r\n      this.settings.traceDebugging.hotKey,\r\n      this.settings.statemachineDebugging.hotKey\r\n    );\r\n    const initialTask = this.taskSequencer.getCurrentTaskInfo();\r\n    if (initialTask.taskName === undefined) {\r\n      console.error(\"No task found.\");\r\n    } else {\r\n      this.taskSequencer.switchCurrentTask(initialTask.testName, initialTask.itemName, initialTask.taskName);\r\n      this.taskPlayer.startTask(initialTask.testName, initialTask.itemName, initialTask.taskName);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Digest the configuration data that we got from the server.\r\n   */\r\n  digestConfigurationResponse = (receivedData) => {\r\n    this.taskSequencer = new StandardTaskSequencer(receivedData.courses, receivedData.tests);\r\n    this.items = receivedData.items;\r\n    this.settings = receivedData.settings;\r\n    this.headerButtons = receivedData.headerButtons;\r\n    this.sessionId = receivedData.sessionId;\r\n    console.log(\"courses:\", this.taskSequencer.getConfigurationInfo().course);\r\n    console.log(\"tests\", this.taskSequencer.getConfigurationInfo().tests);\r\n    console.log(\"items\", this.items);\r\n    console.log(\"settings\", this.settings);\r\n    console.log(\"headerButtons\", this.headerButtons);\r\n    console.log(\"sessionId\", this.sessionId);\r\n  }\r\n\r\n  /**\r\n   * Send all item configurations to the task player.\r\n   */\r\n  sendItemConfigurationToTaskPlayer = () => {\r\n    const dependenciesUrl = {\r\n      MathJax: \"./MathJax-local-server/mathjax@3.1.2-tex-mml-chtml.js\"\r\n    };\r\n\r\n    this.items.forEach((item) => {\r\n      const prefix = ServerCalls.runWithSimplifiedPreviewServer()\r\n        ? './'\r\n        : `${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.ASSETS_API}/${item.name}/`;\r\n      const libraryPathsMap = {};\r\n\r\n      if (item.dependencies && item.dependencies.length > 0) {\r\n        item.dependencies.forEach((dependency) => {\r\n          libraryPathsMap[dependency.name] = dependenciesUrl[dependency.name]\r\n        })\r\n      }\r\n\r\n      this.taskPlayer.addItem(item, `${prefix}resources`, `${prefix}external-resources`, libraryPathsMap);\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch the task player to the given task\r\n   * and update our internal structures accordingly.\r\n   * \r\n   * The method assumes that the task player is running another task already. \r\n   */\r\n  stopOldTaskAndStartNewTask = (test, item, task) => {\r\n    this.taskSequencer.switchCurrentTask(test, item, task);\r\n    this.taskPlayer.stopTask();\r\n    this.taskPlayer.startTask(test, item, task);\r\n  }\r\n\r\n\r\n  /**\r\n   * Stop the currently running task and return to the login dialog.\r\n   */\r\n  stopOldTaskLogoutAndShowLogin = () => {\r\n    this.taskPlayer.stopTask();\r\n    this.taskPlayer.logout();\r\n    this.taskPlayer.clearItems();\r\n    if (ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      // eslint-disable-next-line no-alert\r\n      alert(\"Session finished.\");\r\n    }\r\n    this.showLogin();\r\n  }\r\n\r\n  /**\r\n   * Callback for task player to trigger a task switch.\r\n   * \r\n   * @param {String} request The type of switch request. Valid types are: 'nextTask', 'previousTask', 'cancelTask' and 'goToTask'.\r\n   * @param {String} scope For request type 'goToTask' only: The scope (i.e. test) of the task to switch to.\r\n   * @param {String} item For request type 'goToTask' only: The item of the task to switch to. If no item is given we will switch to the first task with matching name in the given scope.\r\n   * @param {String} task For request type 'goToTask' only: The the task to switch to. \r\n   */\r\n  taskSwitchCallback = (request, scope, item, task) => {\r\n    switch (request) {\r\n      case 'nextTask':\r\n        this.switchTaskNext();\r\n        break;\r\n      case 'previousTask':\r\n        this.switchTaskPrevious();\r\n        break;\r\n      case 'cancelTask':\r\n        this.stopOldTaskLogoutAndShowLogin();\r\n        break;\r\n      case 'goToTask':\r\n        if (item === undefined) {\r\n          this.switchFirstMatchingTaskInterTest(scope, task);\r\n        } else {\r\n          this.stopOldTaskAndStartNewTask(scope, item, task);\r\n        }\r\n        break;\r\n      default:\r\n        console.error(`Unknown switch task callback type: ${request}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback for task player to ask for the availability of a task switch.\r\n   * \r\n   * @param {String} request The type of switch request. Valid types are: 'nextTask', 'previousTask', 'cancelTask' and 'goToTask'.\r\n   * @param {String} scope For request type 'goToTask' only: The scope (i.e. test) of the task to switch to.\r\n   * @param {String} item For request type 'goToTask' only: The item of the task to switch to. If no item is given we will switch to the first task with matching name in the given scope.\r\n   * @param {String} task For request type 'goToTask' only: The the task to switch to. \r\n   */\r\n  taskAvailableCallback = (request, scope, item, task) => {\r\n    switch (request) {\r\n      case 'nextTask':\r\n        return this.taskSequencer.nextTaskAvailable();\r\n      case 'previousTask':\r\n        return this.taskSequencer.previousTaskAvailable();\r\n      case 'goToTask':\r\n        if (item === undefined) {\r\n          return this.taskSequencer.findFirstMatchingTaskInTest(scope, task, false) !== undefined;\r\n        } else {\r\n          return true;\r\n        }\r\n      default:\r\n        console.error(`Unknown switch task callback type: ${request}`);\r\n        return false;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to the first task with the given name inside a specific test (i.e. we ignore the source item).\r\n   */\r\n  switchFirstMatchingTaskInterTest = (newTestName, newTaskName) => {\r\n    const newTaskEntry = this.taskSequencer.findFirstMatchingTaskInTest(newTestName, newTaskName, true);\r\n    if (newTaskEntry !== undefined) {\r\n      this.stopOldTaskAndStartNewTask(newTaskEntry.testName, newTaskEntry.itemName, newTaskEntry.taskName);\r\n    } else {\r\n      this.missingTaskErrorFeedback(`Task ${newTaskName} in test ${newTestName} is unknown. We are in ${this.buildCurrentTaskLogString()}`, newTestName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch to the next task in our test course.\r\n   */\r\n  switchTaskNext = () => {\r\n    const newTaskInfo = this.taskSequencer.getNextTaskInfo();\r\n    if (newTaskInfo !== undefined) {\r\n      this.stopOldTaskAndStartNewTask(newTaskInfo.testName, newTaskInfo.itemName, newTaskInfo.taskName, false);\r\n    } else {\r\n      this.missingTaskErrorFeedback(`There is no next task. We are in ${this.buildCurrentTaskLogString()}`, undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch to the previous task in our test course.\r\n   */\r\n  switchTaskPrevious = () => {\r\n    const newTaskInfo = this.taskSequencer.getPreviousTaskInfo();\r\n    if (newTaskInfo !== undefined) {\r\n      this.stopOldTaskAndStartNewTask(newTaskInfo.testName, newTaskInfo.itemName, newTaskInfo.taskName);\r\n    } else {\r\n      this.missingTaskErrorFeedback(`There is no previous task. We are in ${this.buildCurrentTaskLogString()}`, undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Give feedback on missing task errors:\r\n   *  - If we are in 'preview' controller mode raise an alert box with the message. \r\n   *  - In any case write a warning to the console.\r\n   */\r\n  missingTaskErrorFeedback = (message, newTestName) => {\r\n    if (ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      const isTestSwitch = newTestName !== undefined && this.taskSequencer.getCurrentTaskInfo().testName !== newTestName;\r\n      // eslint-disable-next-line no-alert\r\n      alert(`The preview failed to do a task switch for this reason: ${message} ${isTestSwitch ? \". Task switches with explicit test names are not supported by the preview.\" : \". If the missing task exists in your item consider running a project preview.\"}`);\r\n    }\r\n    console.warn(message);\r\n  }\r\n\r\n\r\n  /**\r\n   * Build a string describing our current task.\r\n   */\r\n  buildCurrentTaskLogString = () => Controller.buildLogString(this.taskSequencer.getCurrentTaskInfo());\r\n\r\n  /**\r\n   * Build a string representation of the task described by the given task info.\r\n   * \r\n   * @param { test, item, task} currentTaskInfo \r\n   */\r\n  static buildLogString(currentTaskInfo) {\r\n    return (ServerCalls.runWithSimplifiedPreviewServer()\r\n      ? `task ${currentTaskInfo.taskName}`\r\n      : `task ${currentTaskInfo.taskName} from item ${currentTaskInfo.itemName} in test ${currentTaskInfo.testName}`);\r\n  }\r\n\r\n}\r\n","/**\r\n * Helper methods to work with index paths.\r\n * \r\n * See PathTranslationHelper for translation between user defined ID path and index path.\r\n */\r\nexport default class IndexPathHelper {\r\n\r\n  /**\r\n   * Build an index path root, i.e. test and item and task.\r\n   */\r\n  static buildPathRoot(testName, itemName, taskName) {\r\n    return `/test=${testName}/item=${itemName}/task=${taskName}`;\r\n  }\r\n\r\n  /**\r\n   * Build a page segment from a bare page name, i.e. without any navigation into a children list.\r\n   * \r\n   * Use the appendIndexToPageSegment method to add navigations into children lists.\r\n   */\r\n  static buildPageSegment(pageName) {\r\n    return `/page=${pageName}`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the page name from the given page segment.\r\n   */\r\n  static getPageNameFromPageSegment(pageSegment) {\r\n    if (!pageSegment.startsWith(\"/page=\")) {\r\n      console.warn(`Cannot get page name from invalid page segment: ${pageSegment}`);\r\n      return undefined;\r\n    }\r\n    const withNameInFront = pageSegment.substring(6);\r\n    const endIndex = withNameInFront.indexOf('/');\r\n    return endIndex === -1 ? withNameInFront : withNameInFront.substring(0, endIndex);\r\n  }\r\n\r\n  /**\r\n   * Get the page name from the given path.\r\n   * @param path - path of the component\r\n   */\r\n  static getPageNameFromPath(path) {\r\n    const segmentIndex = path.indexOf(\"/page=\");\r\n    const hasValidPageSegment = segmentIndex !== -1;\r\n    if (!hasValidPageSegment) {\r\n      console.warn(`Cannot get page segment from invalid path: ${path}`);\r\n      return undefined;\r\n    }\r\n\r\n    return IndexPathHelper.getPageNameFromPageSegment(path.slice(segmentIndex));\r\n  }\r\n\r\n  /**\r\n   * Append the top level page segment to a path root.\r\n   *\r\n   * \r\n   * @param {*} pathRoot The path root (i.e. test/item/task) to be extended. \r\n   * @param {*} pageAreaType The type of page area (main, dialog or modal) to attach the page to.\r\n   * @param {*} pageAreaName The name of the page area (standard or Xpage for main type, an arbitrary name for dialog/modal types) to attach the page to.\r\n   * @param {*} pageSegment The page segment to attach to the page area.\r\n   */\r\n  static appendPageSegmentToPathRoot(pathRoot, pageAreaType, pageAreaName, pageSegment) {\r\n    return `${pathRoot}/pageAreaType=${pageAreaType}/pageAreaName=${pageAreaName}${pageSegment}`;\r\n  }\r\n\r\n  /**\r\n   * Append a string of page segments to the given path.\r\n   * \r\n   * @param {*} path The path to be extended.\r\n   * @param {*} pageSegments The string containing one or more page segments to be appended.\r\n   */\r\n  static appendPageSegmentsToPath(path, pageSegments) {\r\n    return path + pageSegments;\r\n  }\r\n\r\n  /**\r\n   * Drop the last page segment from a path.\r\n   * \r\n   * The method returns 'undefined' if the path does not contain any page segment.\r\n   */\r\n  static dropPageSegmentFromPath(path) {\r\n    const lastPageSlashIndex = path.lastIndexOf('/page=');\r\n    return lastPageSlashIndex === -1 ? undefined : path.substring(0, lastPageSlashIndex);\r\n  }\r\n\r\n  /**\r\n   * Drop all page segments from a path.\r\n   * \r\n   * The method returns the path if it does not contain any page segment.\r\n   */\r\n  static dropAllPageSegments(path) {\r\n    const firstPageSlashIndex = path.indexOf('/page=');\r\n    return firstPageSlashIndex === -1 ? path : path.substring(0, firstPageSlashIndex);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the last page segment from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain any page segment.\r\n   */\r\n  static getLastPageSegmentFromPath(path) {\r\n    const lastPageSlashIndex = path.lastIndexOf('/page=');\r\n    return lastPageSlashIndex === -1 ? undefined : path.substring(lastPageSlashIndex);\r\n  }\r\n\r\n  /**\r\n   * Get an array of all page segments in a path.\r\n   * \r\n   * The top level page segment is the first element in the array. \r\n   */\r\n  static getPageSegmentArray(path) {\r\n    const result = [];\r\n    let remainingPath = path;\r\n    let pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\r\n    while (pageSegment !== undefined) {\r\n      result.splice(0, 0, pageSegment);\r\n      remainingPath = IndexPathHelper.dropPageSegmentFromPath(remainingPath);\r\n      pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get a reversed array of all page segments in a path.\r\n   * \r\n   * The top level page segment is the last element in the array. \r\n   */\r\n  static getReversedPageSegmentArray(path) {\r\n    const result = [];\r\n    let remainingPath = path;\r\n    let pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\r\n    while (pageSegment !== undefined) {\r\n      result.push(pageSegment);\r\n      remainingPath = IndexPathHelper.dropPageSegmentFromPath(remainingPath);\r\n      pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Append the index of a child in a children array to a page segment. \r\n   */\r\n  static appendIndexToPageSegment(pageSegment, index) {\r\n    return `${pageSegment}/index=${index}`;\r\n  }\r\n\r\n  /**\r\n   * Drop the last index of a child from a page segment. \r\n   */\r\n  static dropIndexFromPageSegment(pageSegment) {\r\n    const lastSlashIndex = pageSegment.lastIndexOf('/index=');\r\n    return lastSlashIndex === -1 ? undefined : pageSegment.substring(0, lastSlashIndex);\r\n  }\r\n\r\n  /**\r\n   * Get the index of the last child from a page segment. \r\n   * \r\n   * The method returns the bare index as a number. \r\n   */\r\n  static getLastIndexFromPageSegment(pageSegment) {\r\n    const lastSlashIndex = pageSegment.lastIndexOf('/index=');\r\n    return lastSlashIndex === -1 ? undefined : pageSegment.substring(lastSlashIndex + 7);\r\n  }\r\n\r\n\r\n  /**\r\n   * Trim the leading test specification from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain an item specification.\r\n   * Otherwise it returns a path fragment starting with the item specification.\r\n   */\r\n  static trimTestFromPath(path) {\r\n    const slashIndex = path.indexOf('/item=');\r\n    return slashIndex === -1 ? undefined : path.substring(slashIndex);\r\n  }\r\n\r\n  /**\r\n   * Trim the path root (i.e. the test/item/task) and page area specification (i.e. pageAreaType/pageAreaName) from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain a page segment.\r\n   * Otherwise it returns the page segments string from the path.\r\n   */\r\n  static trimRootAndPageAreaFromPath(path) {\r\n    const slashIndex = path.indexOf('/page=');\r\n    return slashIndex === -1 ? undefined : path.substring(slashIndex);\r\n  }\r\n\r\n  /**\r\n   * Extract the path root (i.e. the test/item/task) from a path (without page type specification).\r\n   * \r\n   * The method returns the full path if the path does not contain a pageType specification.\r\n   * Otherwise it returns the path root up to (but not including) the pageType specification.\r\n   */\r\n  static getRootFromPath(path) {\r\n    const endIndex = path.indexOf('/pageAreaType=');\r\n    return endIndex === -1 ? path : path.substring(0, endIndex);\r\n  }\r\n\r\n  /**\r\n   * Extract the path of a tree node inside a tree from the full index path of the tree node and the index path of the tree.\r\n   * \r\n   * The method returns the 'inner' path of the tree node given (leading from the tree to the node) \r\n   * if the given node path contains the given index path of the tree. \r\n   * Otherwise it returns null\r\n   */\r\n  static extractTreeChildPathFromTreePath(treePath, childPath) {\r\n    const endIndex = childPath.indexOf(treePath);\r\n    return endIndex === -1 ? null : childPath.substr(treePath.length);\r\n  }\r\n\r\n  /**\r\n   * Extract the page area type from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain a page area type specification.\r\n   */\r\n  static getPageAreaTypeFromPath(path) {\r\n    const typeKeyIndex = path.indexOf('/pageAreaType=');\r\n    const endIndex = path.indexOf('/pageAreaName=');\r\n    return (typeKeyIndex === -1 || endIndex === -1) ? undefined : path.substring(typeKeyIndex + 14, endIndex);\r\n  }\r\n\r\n  /**\r\n   * Extract the page area name from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain a page area name specification.\r\n   */\r\n  static getPageAreaNameFromPath(path) {\r\n    const typeKeyIndex = path.indexOf('/pageAreaName=');\r\n    if (typeKeyIndex === -1) return undefined;\r\n\r\n    const endIndex = path.indexOf('/page=');\r\n    if (endIndex === -1) return path.substring(typeKeyIndex + 14);\r\n\r\n    return path.substring(typeKeyIndex + 14, endIndex);\r\n  }\r\n\r\n\r\n  /**\r\n   * Find the index path of the CbaPageArea that is the first CbaPageArea ancestor of the given component.\r\n   * \r\n   * @param {String} path The index path of the child component of the CbaPageArea.\r\n   */\r\n  static findPageAreaAncestorPath(path) {\r\n    const trimmedPath = IndexPathHelper.dropPageSegmentFromPath(path);\r\n    if (IndexPathHelper.getLastPageSegmentFromPath(trimmedPath) === undefined) {\r\n      return undefined;\r\n    }\r\n    return trimmedPath;\r\n  }\r\n\r\n  /**\r\n   * Extract the page path from a component path.\r\n   * @param {String} path The index path of the child component of the page.\r\n   */\r\n  static getPagePath(path) {\r\n    const rootPath = IndexPathHelper.dropAllPageSegments(path);\r\n    const pageName = IndexPathHelper.getPageNameFromPath(path);\r\n    return IndexPathHelper.appendPageSegmentsToPath(rootPath, IndexPathHelper.buildPageSegment(pageName));\r\n  }\r\n\r\n  /**\r\n   * Replaces al special characters from an index path so it can be used as a valid css id or selector\r\n   * \r\n   * @param {String} path The index path\r\n   */\r\n\r\n  static getValidCssIdFromPath(path) {\r\n    return path.replace(/[&/\\\\#, +()$~%.'\":*?<>{}=]/g, '');\r\n  }\r\n\r\n\r\n}\r\n","import PropTypes from 'prop-types';\r\n\r\nclass PropertyMissingException {\r\n\r\n  constructor(message) {\r\n    this.name = 'PropertyMissingException';\r\n    this.message = message;\r\n  }\r\n\r\n  toString = () => `${this.name}: ${this.message}`;\r\n\r\n}\r\n\r\nexport default class PropTypesHelper {\r\n\r\n  static asOptional(propTypesRequirement) {\r\n    return (props, propName, componentName) => {\r\n      if (props[propName] === undefined) return undefined;\r\n      return PropTypes.checkPropTypes(propTypesRequirement, props[propName], propName, componentName);\r\n    }\r\n  }\r\n\r\n\r\n  static raiseError(message) {\r\n    const exception = new PropertyMissingException(message);\r\n    console.error(exception.toString());\r\n  }\r\n\r\n  static addPropTypes(propTypes, toAdd) {\r\n    Object.keys(toAdd).forEach((key) => {\r\n      propTypes[key] = toAdd[key]\r\n    });\r\n    return propTypes;\r\n  }\r\n\r\n  // common config property checking\r\n\r\n  static getStandardRuntimePropTypes() {\r\n    const result = {\r\n      componentStateManager: PropTypes.object.isRequired,\r\n      componentDirectory: PropTypes.object.isRequired,\r\n      incidentsAccumulator: PropTypes.object.isRequired,\r\n      taskResultsManager: PropTypes.object.isRequired,\r\n      statemachinesManager: PropTypes.object.isRequired,\r\n      presenterStateManager: PropTypes.object.isRequired,\r\n      taskNavigatorStateManager: PropTypes.object.isRequired,\r\n      traceLogBuffer: PropTypes.object.isRequired,\r\n      traceLogUploader: PropTypes.object.isRequired,\r\n      recordingBuffer: PropTypes.object.isRequired,\r\n      recordingUploader: PropTypes.object.isRequired,\r\n      clipboardManager: PropTypes.object.isRequired,\r\n      pageConfigurationsManager: PropTypes.object.isRequired,\r\n      taskManager: PropTypes.object.isRequired,\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  static positionPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n      width: PropTypes.number.isRequired,\r\n      height: PropTypes.number.isRequired,\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static fontPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      name: PropTypes.string.isRequired,\r\n      size: PropTypes.number.isRequired,\r\n      alignmentHorizontal: PropTypes.oneOf(['left', 'center', 'right']).isRequired,\r\n      bold: PropTypes.bool.isRequired,\r\n      italic: PropTypes.bool.isRequired,\r\n      underlined: PropTypes.bool.isRequired,\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static getColorVariantsPropTypes() {\r\n    return {\r\n      // Note: manage transparency with rgba(..., ..., ..., 0) for the background color\r\n      default: PropTypes.string.isRequired,\r\n      // An empty object as value will not fall back to default color but display no color at all:\r\n      disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      visited: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      selected: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    };\r\n  }\r\n\r\n  static colorPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      text: PropTypesHelper.asOptional(PropTypesHelper.getColorVariantsPropTypes()),\r\n      background: PropTypesHelper.asOptional(PropTypesHelper.getColorVariantsPropTypes())\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static borderPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      style: PropTypes.oneOf(['none', 'solid', 'outset', 'inset']).isRequired,\r\n      width: PropTypes.number,\r\n      radius: PropTypes.number,\r\n      color: PropTypesHelper.asOptional(PropTypesHelper.getColorVariantsPropTypes())\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static getTransformOriginPropTypes() {\r\n    return {\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired\r\n    };\r\n  }\r\n\r\n  static transformPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      rotate: PropTypes.number,\r\n      transformOrigin: PropTypesHelper.asOptional(PropTypesHelper.getTransformOriginPropTypes())\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static statePropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      disabled: PropTypes.bool.isRequired,\r\n      selected: PropTypes.bool.isRequired,\r\n      hidden: PropTypes.bool.isRequired,\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static textPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      // TODO: maybe we should drop the number type here as it may lead to unexpected situation \r\n      label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n      mouseOver: PropTypes.string,\r\n      dynamic: PropTypes.shape({\r\n        variable: PropTypes.string.isRequired,\r\n        valueMap: PropTypes.string\r\n      })\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static imagePropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      displayMode: PropTypes.oneOf(['none', 'left', 'right', 'initial', 'overlay']).isRequired,\r\n      overlayType: PropTypes.oneOf(['stretch', 'center', 'default', 'left']),\r\n      default: PropTypes.string,\r\n      // An empty object as value will not fall back to default image but display no image at all:\r\n      disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      visited: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      selected: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      dynamic: PropTypes.shape({\r\n        variable: PropTypes.string.isRequired,\r\n        valueMap: PropTypes.string\r\n      })\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static eventPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      standard: PropTypes.string,\r\n      alternate: PropTypes.string,\r\n      onFocusIn: PropTypes.string,\r\n      onFocusOut: PropTypes.string\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static linkPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      page: PropTypes.string,\r\n      pageUrl: PropTypes.string,\r\n      conditional: PropTypes.object,\r\n      pageAreaType: PropTypes.oneOf(['main', 'dialog', 'modal']),\r\n      pageAreaName: PropTypes.string,\r\n      receiver: PropTypes.string,\r\n      receiverTab: PropTypes.object,\r\n      historyMove: PropTypes.oneOf(['home', 'forward', 'back']),\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static tracePropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      type: PropTypes.string.isRequired,\r\n      addOn: PropTypes.object,\r\n      skipTrace: PropTypes.bool.isRequired\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static cursorPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      standard: PropTypes.string,\r\n      image: PropTypes.string\r\n    }\r\n\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static getStandardConfigPropTypes(withChildren) {\r\n    const result = {\r\n      position: PropTypesHelper.positionPropsCheck,\r\n      font: PropTypesHelper.fontPropsCheck,\r\n      color: PropTypesHelper.colorPropsCheck,\r\n      border: PropTypesHelper.borderPropsCheck,\r\n      transform: PropTypesHelper.transformPropsCheck,\r\n      state: PropTypesHelper.statePropsCheck,\r\n      text: PropTypesHelper.textPropsCheck,\r\n      image: PropTypesHelper.imagePropsCheck,\r\n      cursor: PropTypesHelper.cursorPropsCheck,\r\n      event: PropTypesHelper.eventPropsCheck,\r\n      classifiers: PropTypes.array.isRequired,\r\n      link: PropTypesHelper.linkPropsCheck,\r\n      userDefinedId: PropTypes.string,\r\n      pageEditId: PropTypes.string,\r\n      trace: PropTypesHelper.tracePropsCheck,\r\n    };\r\n    if (withChildren) {\r\n      result.cbaChildren = PropTypes.array.isRequired;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Add prop checking for controller configuration.\r\n   */\r\n  static addSelectGroupControllerConfigPropTypes(propTypes) {\r\n    propTypes.selectGroups = PropTypes.arrayOf(PropTypes.shape({\r\n      blockSelectionChanges: PropTypes.bool.isRequired,\r\n      enforceSingleSelect: PropTypes.bool.isRequired,\r\n      allowDeselect: PropTypes.bool.isRequired,\r\n      initiallySelected: PropTypes.string,\r\n      deselectTarget: PropTypes.string\r\n    }));\r\n    return propTypes;\r\n  }\r\n\r\n  /**\r\n   * Add prop checking for possibly controlled component configuration.\r\n   */\r\n  static addSelectGroupMemberConfigPropTypes(propTypes) {\r\n    propTypes.selectGroupMember = PropTypes.shape({\r\n      controllerPathId: PropTypes.string.isRequired,\r\n      groupName: PropTypes.string.isRequired,\r\n      selectGroupMemberName: PropTypes.string\r\n    });\r\n    return propTypes;\r\n  }\r\n\r\n  static getCbaTreeColumnConfig() {\r\n    return {\r\n      mouseOver: PropTypes.string,\r\n      label: PropTypes.string,\r\n      moveable: PropTypes.bool,\r\n      resizable: PropTypes.bool,\r\n      width: PropTypes.number\r\n    }\r\n  }\r\n\r\n  static getCbaTreeRowConfig() {\r\n    return {\r\n      cells: PropTypes.array.isRequired,\r\n      expanded: PropTypes.bool.isRequired,\r\n      nodes: PropTypes.array.isRequired,\r\n      imagePath: PropTypes.string,\r\n      depth: PropTypes.number.isRequired,\r\n      onRowExpandClick: PropTypes.func,\r\n      onRowSelect: PropTypes.func.isRequired,\r\n      path: PropTypes.string.isRequired\r\n    }\r\n  }\r\n\r\n  /**\r\n   * gets the standard radio/checkbox label config proptypes\r\n   */\r\n  static getInputLabelConfig() {\r\n    return PropTypes.shape({\r\n      distance: PropTypes.number.isRequired,\r\n      position: PropTypes.string.isRequired\r\n    })\r\n\r\n  }\r\n\r\n\r\n}\r\n","/**\r\n * Helper methods to work with user defined ID paths.\r\n * \r\n * See PathTranslationHelper for translation between user defined ID path and index path.\r\n */\r\nexport default class UserDefPathHelper {\r\n\r\n  static forEachUserDefIdInPath(path, processor) {\r\n    if (path === undefined || path.lastIndexOf('/id=') === -1) return;\r\n    UserDefPathHelper.forEachUserDefIdInPath(UserDefPathHelper.dropUserDefIdFromPath(path), processor);\r\n    const lastId = UserDefPathHelper.getLastUserDefIdFromPath(path);\r\n    if (lastId !== undefined) {\r\n      processor(lastId);\r\n    }\r\n  }\r\n\r\n  static dropUserDefIdFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const lastSlashIndex = path.lastIndexOf('/id=');\r\n    if (lastSlashIndex === -1) {\r\n      return undefined;\r\n    }\r\n    return path.substring(0, lastSlashIndex);\r\n  }\r\n\r\n  static getLastUserDefIdFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const lastSlashIndex = path.lastIndexOf('/id=');\r\n    if (lastSlashIndex === -1) {\r\n      return undefined;\r\n    }\r\n    return path.substring(lastSlashIndex + 4);\r\n  }\r\n\r\n  static getPageAreaTypeFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const pageAreaNameSlashIndex = path.indexOf('/pageAreaName=');\r\n    return path.substring(14, pageAreaNameSlashIndex);\r\n  }\r\n\r\n  static getPageAreaNameFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const pageAreaNameStartIndex = path.indexOf('/pageAreaName=') + 14;\r\n    const firstIdSlashIndex = path.indexOf('/id=');\r\n    if (firstIdSlashIndex === -1) {\r\n      return path.substring(pageAreaNameStartIndex);\r\n    }\r\n    return path.substring(pageAreaNameStartIndex, firstIdSlashIndex);\r\n  }\r\n\r\n  static buildUserDefIdPath(pageAreaType, pageAreaName, firstUserDefId) {\r\n    if (pageAreaType === undefined || pageAreaName === undefined || firstUserDefId === undefined) {\r\n      return undefined;\r\n    }\r\n    return `/pageAreaType=${pageAreaType}/pageAreaName=${pageAreaName}/id=${firstUserDefId}`;\r\n  }\r\n\r\n  static appendUserDefIdToPath(path, userDefId) {\r\n    if (path === undefined || userDefId === undefined) {\r\n      return undefined;\r\n    }\r\n    return `${path}/id=${userDefId}`;\r\n  }\r\n\r\n  static simplifyUserDefIdPath(userDefIdPath) {\r\n    if (userDefIdPath === \"\" || userDefIdPath === undefined) return \"\";\r\n    // Split the userDefIdPath string into segments\r\n    const segments = userDefIdPath.split('/').filter(Boolean);\r\n\r\n    // Extract pageAreaType and pageAreaName values\r\n    let pageAreaType = '';\r\n    let pageAreaName = '';\r\n    segments.forEach((segment) => {\r\n      const [key, value] = segment.split('=');\r\n      if (key === 'pageAreaType') {\r\n        pageAreaType = value;\r\n      } else if (key === 'pageAreaName') {\r\n        pageAreaName = value;\r\n      }\r\n    });\r\n\r\n    // Construct the output based on pageAreaType and pageAreaName values\r\n    let output = '';\r\n    if (pageAreaType === 'main' && pageAreaName === 'standard') {\r\n      // If pageAreaType is main and pageAreaName is standard, provide only the ids separated by dots\r\n      const ids = segments.filter(segment => segment.startsWith('id=')).map(segment => segment.split('=')[1]).join('.');\r\n      output = ids;\r\n    } else {\r\n      // Otherwise, provide the [pageAreaType.pageAreaName].ids separated by dots\r\n      output = `[${pageAreaType}.${pageAreaName}]${segments.filter(segment => segment.startsWith('id=')).map(segment => segment.split('=')[1]).join('.')}`;\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n}\r\n","/**\r\n * Encapsulate the structure of the 'common' area in the component's registered state.\r\n * Be carefully to name the getter/setter as you the attribute \r\n * e.g. attribute name: myData \r\n * getter name: extractMyData\r\n * setter name: setMyData\r\n * We have a test covering this in StateAttributeAccess.test.js; \r\n * When adding new methods please add the property name in the array of the test\r\n*/\r\nexport default class StateAttributeAccess {\r\n\r\n  // generic methods (for internal use mostly) ------------------------------------\r\n  static getStateAttribute(state, name) {\r\n    if (state === undefined) return undefined;\r\n    return state[name];\r\n  }\r\n\r\n  static setStateAttribute(state, name, value) {\r\n    state[name] = value;\r\n  }\r\n\r\n\r\n  // direct state access methods: --------------------------------------------------\r\n\r\n  // deep copy decision for state storing/retrieving operations\r\n  static extractDeepCopy(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"deepCopy\");\r\n  }\r\n\r\n  static setDeepCopy(state, deepCopy) {\r\n    StateAttributeAccess.setStateAttribute(state, \"deepCopy\", deepCopy);\r\n  }\r\n\r\n  // volatile marker for state storing/retrieving operations\r\n  static extractVolatile(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"volatile\");\r\n  }\r\n\r\n  static setVolatile(state, deepCopy) {\r\n    StateAttributeAccess.setStateAttribute(state, \"volatile\", deepCopy);\r\n  }\r\n\r\n  // component class name (for snapshot transformer method access)\r\n  static extractComponentClassName(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"componentClassName\");\r\n  }\r\n\r\n  static setComponentClassName(state, componentClassName) {\r\n    StateAttributeAccess.setStateAttribute(state, \"componentClassName\", componentClassName);\r\n  }\r\n\r\n  // disabled state of any component\r\n  static extractDisabled(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"disabled\");\r\n  }\r\n\r\n  static setDisabled(state, disabled) {\r\n    StateAttributeAccess.setStateAttribute(state, \"disabled\", disabled);\r\n  }\r\n\r\n  // hidden state of any component\r\n  static extractHidden(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"hidden\");\r\n  }\r\n\r\n  static setHidden(state, hidden) {\r\n    StateAttributeAccess.setStateAttribute(state, \"hidden\", hidden);\r\n  }\r\n\r\n  // visited state of any component\r\n  static extractVisited(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"visited\");\r\n  }\r\n\r\n  static setVisited(state, visited) {\r\n    StateAttributeAccess.setStateAttribute(state, \"visited\", visited);\r\n  }\r\n\r\n  // position of any component\r\n  static extractPosition(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"position\");\r\n  }\r\n\r\n  static setPosition(state, position) {\r\n    StateAttributeAccess.setStateAttribute(state, \"position\", position);\r\n  }\r\n\r\n\r\n  // default link receiver of any component\r\n  static extractDefaultLinkReceiver(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"defaultLinkReceiver\");\r\n  }\r\n\r\n  static setDefaultLinkReceiver(state, pageSegments) {\r\n    StateAttributeAccess.setStateAttribute(state, \"defaultLinkReceiver\", pageSegments);\r\n  }\r\n\r\n  // selectable state for table components\r\n  static extractSelectable(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectable\");\r\n  }\r\n\r\n  static setSelectable(state, selectable) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectable\", selectable);\r\n  }\r\n\r\n  // select state for components that are not controlled by a select-group controller in single-select mode\r\n  static extractSelected(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selected\");\r\n  }\r\n\r\n  static setSelected(state, selected) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selected\", selected);\r\n  }\r\n\r\n  // membership info for components that are under control of a select-group controller\r\n  static extractSelectGroupMemberInfo(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectGroupMemberInfo\");\r\n  }\r\n\r\n  static setSelectGroupMemberInfo(state, singleSelectStructure) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectGroupMemberInfo\", singleSelectStructure);\r\n  }\r\n\r\n  // select-group controller state in a select-group controller\r\n  static extractSelectGroupControllerState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectGroupControllerState\");\r\n  }\r\n\r\n  static setSelectGroupControllerState(state, controllerState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectGroupControllerState\", controllerState);\r\n  }\r\n\r\n\r\n  // propagation-group controller state in a propagation-group controller\r\n  static extractPropagationGroupControllerState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"propagationGroupControllerState\");\r\n  }\r\n\r\n  static setPropagationGroupControllerState(state, controllerState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"propagationGroupControllerState\", controllerState);\r\n  }\r\n\r\n\r\n  // text value of any component\r\n  static extractTextValue(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"textValue\");\r\n  }\r\n\r\n  static setTextValue(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"textValue\", value);\r\n  }\r\n\r\n  // mouseOver value of any component\r\n  static extractMouseOverValue(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"mouseOverValue\");\r\n  }\r\n\r\n  static setMouseOverValue(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"mouseOverValue\", value);\r\n  }\r\n\r\n  // default image value of any component\r\n  static extractDefaultImage(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"defaultImage\");\r\n  }\r\n\r\n  static setDefaultImage(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"defaultImage\", value);\r\n  }\r\n\r\n  // language value of any component\r\n  static extractLanguageValue(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"languageValue\");\r\n  }\r\n\r\n  static setLanguageValue(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"languageValue\", value);\r\n  }\r\n\r\n  // highlightable state of any component\r\n  static extractHighlightable(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"highlightable\");\r\n  }\r\n\r\n  static setHighlightable(state, highlightable) {\r\n    StateAttributeAccess.setStateAttribute(state, \"highlightable\", highlightable);\r\n  }\r\n\r\n  // media player // invalid naming convention. refactor ?\r\n  static extractMediaVolume(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"volume\");\r\n  }\r\n\r\n  // invalid naming convention. refactor ?\r\n  static setMediaVolume(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"volume\", value);\r\n  }\r\n\r\n  static extractLastOperation(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"lastOperation\");\r\n  }\r\n\r\n  static setLastOperation(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"lastOperation\", value);\r\n  }\r\n\r\n  static extractCurrentTime(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"currentTime\");\r\n  }\r\n\r\n  static setCurrentTime(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"currentTime\", value);\r\n  }\r\n\r\n  static extractPlayNumber(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"playNumber\");\r\n  }\r\n\r\n  static setPlayNumber(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"playNumber\", value);\r\n  }\r\n\r\n  static extractMaxPlay(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"maxPlay\");\r\n  }\r\n\r\n  static setMaxPlay(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"maxPlay\", value);\r\n  }\r\n\r\n  static extractRecordNumber(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"recordNumber\");\r\n  }\r\n\r\n  static setRecordNumber(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"recordNumber\", value);\r\n  }\r\n\r\n  static extractMaxRecord(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"maxRecord\");\r\n  }\r\n\r\n  static setMaxRecord(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"maxRecord\", value);\r\n  }\r\n\r\n  static extractHideControls(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"hideControls\");\r\n  }\r\n\r\n  static setHideControls(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"hideControls\", value);\r\n  }\r\n\r\n  static extractAutomaticStart(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"automaticStart\");\r\n  }\r\n\r\n  static setAutomaticStart(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"automaticStart\", value);\r\n  }\r\n\r\n  static extractMediaBlob(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"mediaBlob\");\r\n  }\r\n\r\n  static setMediaBlob(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"mediaBlob\", value);\r\n  }\r\n\r\n  // external page frame\r\n  static extractExternalContentState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"externalContentState\");\r\n  }\r\n\r\n  static setExternalContentState(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"externalContentState\", value);\r\n  }\r\n\r\n  // selected cell for the table\r\n  static extractSelectedCell(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectedCell\");\r\n  }\r\n\r\n  static setSelectedCell(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectedCell\", value);\r\n  }\r\n\r\n  static extractOldSelectedCell(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"oldSelectedCell\");\r\n  }\r\n\r\n  static setOldSelectedCell(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"oldSelectedCell\", value);\r\n  }\r\n\r\n  static extractTableData(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"tableData\");\r\n  }\r\n\r\n  static setTableData(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"tableData\", value);\r\n  }\r\n\r\n  // table cell value, hadFocus,\r\n  static extractFormula(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"formula\");\r\n  }\r\n\r\n  static setFormula(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"formula\", value);\r\n  }\r\n\r\n  static extractCellHadFocus(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellHadFocus\");\r\n  }\r\n\r\n  static setCellHadFocus(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellHadFocus\", value);\r\n  }\r\n\r\n  static extractCellTitle(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellTitle\");\r\n  }\r\n\r\n  static setCellTitle(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellTitle\", value);\r\n  }\r\n\r\n  static extractCellTitleErrorProperty(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellTitleErrorProperty\");\r\n  }\r\n\r\n  static setCellTitleErrorProperty(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellTitleErrorProperty\", value);\r\n  }\r\n\r\n  static extractCellHasError(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellHasError\");\r\n  }\r\n\r\n  static setCellHasError(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellHasError\", value);\r\n  }\r\n\r\n  static extractCellType(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellType\");\r\n  }\r\n\r\n  static setCellType(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellType\", value);\r\n  }\r\n\r\n  // address and content for the table cell editor \r\n  static extractCellEditorAddress(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorAddress\");\r\n  }\r\n\r\n  static setCellEditorAddress(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorAddress\", value);\r\n  }\r\n\r\n  static extractCellEditorContent(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorContent\");\r\n  }\r\n\r\n  static setCellEditorContent(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorContent\", value);\r\n  }\r\n\r\n  static extractCellEditorIsNotValid(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorIsNotValid\");\r\n  }\r\n\r\n  static setCellEditorIsNotValid(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorIsNotValid\", value);\r\n  }\r\n\r\n  static extractCellEditorContentIsReadOnly(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorContentIsReadOnly\");\r\n  }\r\n\r\n  static setCellEditorContentIsReadOnly(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorContentIsReadOnly\", value);\r\n  }\r\n\r\n  static extractCellEditorErrorMessage(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorErrorMessage\");\r\n  }\r\n\r\n  static setCellEditorErrorMessage(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorErrorMessage\", value);\r\n  }\r\n\r\n  static extractCellEditorErrorProperty(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorErrorProperty\");\r\n  }\r\n\r\n  static setCellEditorErrorProperty(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorErrorProperty\", value);\r\n  }\r\n\r\n  // drag and drop\r\n  static extractDragAndDrop(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"dragAndDrop\");\r\n  }\r\n\r\n  static setDragAndDrop(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"dragAndDrop\", value);\r\n  }\r\n\r\n  // stopWatch\r\n  static extractCounterValue(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"counterValue\");\r\n  }\r\n\r\n  static setCounterValue(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"counterValue\", value);\r\n  }\r\n\r\n\r\n  // Tree\r\n  static extractTreeNodes(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeNodes\");\r\n  }\r\n\r\n  static setTreeNodes(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeNodes\", value);\r\n  }\r\n\r\n  static extractTreeColumns(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeColumns\");\r\n  }\r\n\r\n  static setTreeColumns(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeColumns\", value);\r\n  }\r\n\r\n  static extractTreeState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeState\");\r\n  }\r\n\r\n  static setTreeState(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeState\", value);\r\n  }\r\n\r\n  static extractNodeTypes(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"nodeTypes\");\r\n  }\r\n\r\n  static setNodeTypes(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"nodeTypes\", value);\r\n  }\r\n\r\n  static extractTreeReadOnly(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeReadOnly\");\r\n  }\r\n\r\n  static setTreeReadOnly(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeReadOnly\", value);\r\n  }\r\n\r\n  // Tree View\r\n  static extractTreeViewSort(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeViewSort\");\r\n  }\r\n\r\n  static setTreeViewSort(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeViewSort\", value);\r\n  }\r\n\r\n  static extractSelectedIds(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectedIds\");\r\n  }\r\n\r\n  static setSelectedIds(state, selectedIds) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectedIds\", selectedIds);\r\n  }\r\n\r\n  static extractDefaultHighlightColor(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"defaultHighlightColor\");\r\n  }\r\n\r\n  static setDefaultHighlightColor(state, defaultHighlightColor) {\r\n    StateAttributeAccess.setStateAttribute(state, \"defaultHighlightColor\", defaultHighlightColor);\r\n  }\r\n\r\n  static extractEditorState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"editorState\");\r\n  }\r\n\r\n  static setEditorState(state, editorState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"editorState\", editorState);\r\n  }\r\n\r\n  static extractSelections(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selections\");\r\n  }\r\n\r\n  static setSelections(state, selections) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selections\", selections);\r\n  }\r\n\r\n  static extractModifiersInEditorState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"modifiersInEditorState\");\r\n  }\r\n\r\n  static setModifiersInEditorState(state, modifiersInEditorState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"modifiersInEditorState\", modifiersInEditorState);\r\n  }\r\n\r\n  // input components\r\n  static extractLastCaretPosition(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"lastCaretPosition\");\r\n  }\r\n\r\n  static setLastCaretPosition(state, lastCaretPosition) {\r\n    StateAttributeAccess.setStateAttribute(state, \"lastCaretPosition\", lastCaretPosition);\r\n  }\r\n\r\n}\r\n","export default class StateManagerHelper {\r\n\r\n  static deepCopy(state) {\r\n    if (state === undefined) return undefined;\r\n    return JSON.parse(JSON.stringify(state));\r\n  }\r\n\r\n}\r\n","import StateAttributeAccess from './StateAttributeAccess';\r\nimport ComponentStateHelper from './ComponentStateHelper';\r\nimport CommonActionsHelper from '../components/CommonActionsHelper';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\n/**\r\n * Coordinate processing of recommendations, e.g. \r\n * - highlight the test in the TaskNavigator, \r\n * - jump to the recommended task once the recommended test is selected, \r\n * - activate the recommended control once the recommended task is selected\r\n */\r\nexport default class RecommendationsManager {\r\n\r\n  constructor(runtime) {\r\n    this.runtime = runtime;\r\n\r\n    this.recommendations = [];\r\n    this.taskNavigator = undefined;\r\n  }\r\n\r\n  // public API -------------------------------------------------------------------\r\n\r\n  /**\r\n   * The method expects an array of recommendation objects. \r\n   * Each recommendation object has the attributes\r\n   *  - testName\r\n   *  - taskName\r\n   *  - absoluteUserDefId (a UserDefinedIDPath like /pageType=standard/id=myPageAreaId/id=myComponentId)\r\n   */\r\n  setRecommendations = (recommendations) => {\r\n    const oldRecommendations = this.recommendations;\r\n    this.recommendations = StateManagerHelper.deepCopy(recommendations);\r\n\r\n    RecommendationsManager.traceRecommendationChange(oldRecommendations, this.recommendations, this.runtime);\r\n\r\n    if (this.taskNavigator !== undefined) {\r\n      this.taskNavigator.highlightRecommendations(this.recommendations);\r\n    }\r\n\r\n    // refresh display components affected by dropping the old recommendations \r\n    // and by setting the new recommendations.\r\n    // Note: Do this after setting the new recommendations to our this.recommendations member!\r\n    RecommendationsManager.refreshRecommendedComponents(oldRecommendations, this.runtime)\r\n    RecommendationsManager.refreshRecommendedComponents(this.recommendations, this.runtime)\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Initialize our reference to the TaskNavigator. \r\n   */\r\n  setTaskNavigator = (taskNavigator) => {\r\n    this.taskNavigator = taskNavigator;\r\n  }\r\n\r\n  /**\r\n   * Is the given display component instance (which must belong to the current running task)\r\n   * recommended currently?\r\n   * \r\n   * The method obtains the currently running test/task from the task manager.\r\n   * It translates the given index path to a userDefID path via PathTranslationHelper\r\n   * (which works for the currently running task only).\r\n   * \r\n   * For each recommendation the method checks the test/task match and the existence of a userDefIdPath specification \r\n   * first and only for a successful match it will run the path translation. \r\n   * Since we expect short recommendation lists the effort for checking the recommendations for each \r\n   * display component instance all the time should be small.\r\n   */\r\n  isRecommended = (indexPath) => {\r\n    const { runtime } = this;\r\n    const currentTaskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\r\n    let result = false;\r\n    this.recommendations.forEach((value, index, array) => {\r\n      if (value.testName === currentTaskInfo.test && value.taskName === currentTaskInfo.task && value.absoluteUserDefId !== undefined) {\r\n        const userDefIDPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\r\n        if (userDefIDPath !== undefined && value.absoluteUserDefId === userDefIDPath) {\r\n          result = true;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Do further processing for a task that was chosen by the\r\n   * user in the task navigator.\r\n   * \r\n   * The method will look for recommendations on this task and\r\n   *  - for each recommendation it will set the background color of the display component instance specified to the 'recommendation' color.\r\n   *  - for the display component instance specified in the first matching recommendation it will\r\n   *    + set the selected state to true and\r\n   *    + do the page switch according to the display component's configuration. \r\n   */\r\n  processTaskSelected = (testName, itemName, taskName) => {\r\n    const { runtime } = this;\r\n    const firstRecommendation = RecommendationsManager.findFirstRecommendationForTask(this.recommendations, testName, taskName);\r\n    RecommendationsManager.setSelectedOnRecommendedComponent(firstRecommendation, runtime);\r\n    RecommendationsManager.doRecommendedPageSwitch(firstRecommendation, runtime);\r\n  }\r\n\r\n  /**\r\n   * Find the first recommendation that applies to the given test name.\r\n   */\r\n  static findFirstRecommendationForTest(recommendations, testName) {\r\n    return recommendations.find((value, index, theArray) => value.testName === testName);\r\n  }\r\n\r\n  /**\r\n   * Find the first recommendation that applies to the given test name and task name.\r\n   */\r\n  static findFirstRecommendationForTask(recommendations, testName, taskName) {\r\n    return recommendations.find((value, index, theArray) => (value.testName === testName) && (value.taskName === taskName));\r\n  }\r\n\r\n  /**\r\n   * Get the standard background color for recommended items.\r\n   */\r\n  static getRecommendationColor() {\r\n    return \"rgba(206, 239, 253, 1)\";\r\n  }\r\n\r\n  // private stuff --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Report a recommendations change in the trace log.\r\n   */\r\n  static traceRecommendationChange(oldRecommendations, newRecommendations, runtime) {\r\n    const { traceLogBuffer } = runtime;\r\n    traceLogBuffer.reportEvent('Recommend', new Date(), {\r\n      oldRecommendations: RecommendationsManager.buildRecommendationListForTrace(oldRecommendations),\r\n      newRecommendations: RecommendationsManager.buildRecommendationListForTrace(newRecommendations),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Transform the recommendations objects in the recommendations list \r\n   * to the form used in the trace log.\r\n   */\r\n  static buildRecommendationListForTrace(recommendations) {\r\n    return recommendations.map(recommendation => (\r\n      {\r\n        testName: recommendation.testName,\r\n        taskName: recommendation.taskName,\r\n        userDefIdPath: recommendation.absoluteUserDefId,\r\n        userDefId: UserDefPathHelper.getLastUserDefIdFromPath(recommendation.absoluteUserDefId)\r\n      }\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * Set the selected status of the display component specified in the given recommendation to true. \r\n   */\r\n  static setSelectedOnRecommendedComponent(recommendation, runtime) {\r\n    if (recommendation !== undefined && recommendation.absoluteUserDefId !== undefined) {\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractSelected, StateAttributeAccess.setSelected, true, recommendation.absoluteUserDefId, runtime, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the page switch specified in the link configuration of the display component \r\n   * \r\n   */\r\n  static doRecommendedPageSwitch(recommendation, runtime) {\r\n    if (recommendation !== undefined && recommendation.absoluteUserDefId !== undefined) {\r\n      const { pageConfigurationsManager } = runtime;\r\n      const userDefinedId = UserDefPathHelper.getLastUserDefIdFromPath(recommendation.absoluteUserDefId);\r\n      const targetPageSegment = pageConfigurationsManager.findPageSegmentForUserDefId(userDefinedId);\r\n      if (targetPageSegment === undefined) {\r\n        console.warn(`Recommendation switch could not find page segment for user defined ID ${userDefinedId}`);\r\n        return;\r\n      }\r\n      const targetComponentConfig = pageConfigurationsManager.findConfigurationForPageSegment(targetPageSegment);\r\n      const pathState = runtime.componentStateManager.findOrBuildStateByUserDefPath(recommendation.absoluteUserDefId, runtime);\r\n      const defaultLinkReceiver = StateAttributeAccess.extractDefaultLinkReceiver(pathState);\r\n      CommonActionsHelper.doPageSwitch(targetComponentConfig.config.link, runtime, defaultLinkReceiver, undefined);\r\n    }\r\n  }\r\n\r\n  static refreshRecommendedComponents(recommendations, runtime) {\r\n    const currentTaskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\r\n    recommendations.forEach((value, index, array) => {\r\n      if (value.testName === currentTaskInfo.test && value.taskName === currentTaskInfo.task && value.absoluteUserDefId !== undefined) {\r\n        RenderingHelper.triggerRenderingViaUserDefPath(value.absoluteUserDefId, runtime);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import PropTypesHelper from '../components/PropTypesHelper';\r\nimport CommonConfigHelper from './CommonConfigHelper';\r\n\r\n// TODO: add constant values for attributes\r\n\r\nexport default class AutoLayoutHelper {\r\n\r\n  static buildStyleForAutoLayout(configProps, orientation, pathState) {\r\n\r\n    const { autoLayoutLayer } = configProps;\r\n\r\n    // split after the autoLayout keywords\r\n    let result = {};\r\n\r\n    switch (autoLayoutLayer) {\r\n      case \"panel\": result = Object.assign(\r\n        CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState),\r\n        AutoLayoutHelper.buildStyleForAutoLayoutPanel(configProps, orientation, pathState)\r\n      );\r\n        break;\r\n      case \"cell\": result = AutoLayoutHelper.buildStyleForAutoLayoutCell(configProps);\r\n        break;\r\n      case \"element\": result = AutoLayoutHelper.buildStyleForAutoLayoutElement(configProps, orientation, pathState);\r\n        break;\r\n      case \"panel-element\": result = Object.assign(\r\n        AutoLayoutHelper.buildStyleForAutoLayoutPanel(configProps, orientation, pathState),\r\n        AutoLayoutHelper.buildStyleForAutoLayoutElement(configProps, orientation, pathState)\r\n      );\r\n        break;\r\n      case \"none\":\r\n        result = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n        break;\r\n      default:\r\n        // missing autoLayout value, probably using old/manual config. Using \"none\" case;\r\n        result = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n        PropTypesHelper.raiseError(\"autoLayoutLayer value missing\");\r\n        break;\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  static transformTemplateKeywords(keywords) {\r\n    return keywords.map((keyword) => {\r\n\r\n      if (keyword === \"fill\") return \"auto\";\r\n      if (keyword.endsWith(\"%\") || keyword.endsWith(\"px\")) return keyword;\r\n      if (keyword === \"auto\") return \"min-content\";\r\n\r\n      return null;\r\n    }).join(\" \");\r\n  }\r\n\r\n  static buildStyleForAutoLayoutPanel(configProps, orientation, pathState) {\r\n\r\n    const { rows, columns, blockAlignVertically, blockAlignHorizontally, gap } = configProps.autoLayout;\r\n\r\n    return {\r\n      display: \"grid\",\r\n      gridTemplateRows: AutoLayoutHelper.transformTemplateKeywords(rows),\r\n      gridTemplateColumns: AutoLayoutHelper.transformTemplateKeywords(columns),\r\n      alignContent: blockAlignVertically,\r\n      justifyContent: blockAlignHorizontally,\r\n      rowGap: gap.row,\r\n      columnGap: gap.column,\r\n      // border: \"1px solid tomato\"\r\n    };\r\n  }\r\n\r\n  static buildStyleForAutoLayoutCell(configProps) {\r\n\r\n    const { columnStart, rowStart, columnSpan, rowSpan, alignVertically, alignHorizontally } = configProps.autoLayout;\r\n\r\n    return {\r\n      position: \"relative\",\r\n      gridColumnStart: columnStart,\r\n      gridRowStart: rowStart,\r\n      gridColumnEnd: `span ${columnSpan}`,\r\n      gridRowEnd: `span ${rowSpan}`,\r\n      alignItems: AutoLayoutHelper.transformFlexAlignmentKeyword(alignVertically),\r\n      justifyContent: AutoLayoutHelper.transformFlexAlignmentKeyword(alignHorizontally),\r\n      display: \"flex\",\r\n      // border: \"1px dashed blue\"\r\n    }\r\n  }\r\n\r\n  static transformFlexAlignmentKeyword(alignment) {\r\n    switch (alignment) {\r\n      case \"start\": return \"flex-start\";\r\n      case \"end\": return \"flex-end\";\r\n      case \"center\":\r\n      case \"none\":\r\n      case \"stretch\":\r\n        return alignment;\r\n      default: return PropTypesHelper.raiseError(\"autoLayoutLayer -> cell alignment value invalid\");\r\n    }\r\n  }\r\n\r\n  static addHorizontalElementValues(resultStyle, configProps, useElementPosition, orientation, pathState) {\r\n    const positionFromState = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n\r\n    if (useElementPosition) {\r\n      resultStyle.left = positionFromState.left;\r\n      resultStyle.right = positionFromState.right;\r\n    }\r\n\r\n    resultStyle.width = positionFromState.width;\r\n  }\r\n\r\n  static addVerticalElementValues(resultStyle, configProps, useElementPosition, orientation, pathState) {\r\n    const positionFromState = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n\r\n    if (useElementPosition) {\r\n      resultStyle.top = positionFromState.top;\r\n    }\r\n\r\n    resultStyle.height = positionFromState.height;\r\n  }\r\n\r\n  static buildStyleForAutoLayoutElement(configProps, orientation, pathState) {\r\n\r\n    const { alignVertically, alignHorizontally } = configProps.autoLayout;\r\n\r\n    const result = {\r\n      position: \"relative\"\r\n    };\r\n\r\n    switch (alignVertically) {\r\n      case \"start\":\r\n      case \"center\":\r\n      case \"end\": AutoLayoutHelper.addVerticalElementValues(result, configProps, false, orientation, pathState);\r\n        break;\r\n      case \"none\": AutoLayoutHelper.addVerticalElementValues(result, configProps, true, orientation, pathState);\r\n        break;\r\n      case \"stretch\": result.height = \"100%\";\r\n        break;\r\n      default: PropTypesHelper.raiseError(\"autoLayoutLayer -> alignVertically value invalid\")\r\n\r\n    }\r\n\r\n    switch (alignHorizontally) {\r\n      case \"start\":\r\n      case \"center\":\r\n      case \"end\": AutoLayoutHelper.addHorizontalElementValues(result, configProps, false, orientation, pathState);\r\n        break;\r\n      case \"none\": AutoLayoutHelper.addHorizontalElementValues(result, configProps, true, orientation, pathState);\r\n        result.position = \"relative\";\r\n        break;\r\n      case \"stretch\": result.width = \"100%\";\r\n        break;\r\n      default: PropTypesHelper.raiseError(\"autoLayoutLayer -> alignHorizontally value invalid\")\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport PropTypesHelper from '../components/PropTypesHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport RecommendationsManager from '../state/RecommendationsManager';\r\nimport Utils from \"../utils/Utils\";\r\nimport AutoLayoutHelper from './AutoLayoutHelper';\r\n\r\nexport default class CommonConfigHelper {\r\n\r\n\r\n  // property checking ----------------------------------------------------------------------\r\n\r\n  static checkPosition(position) {\r\n    const message = (\r\n      (position.x === undefined ? 'x value missing' : '')\r\n      + (position.y === undefined ? 'y value missing' : '')\r\n      + (position.width === undefined ? 'width value missing' : '')\r\n      + (position.height === undefined ? 'height value missing' : '')\r\n    );\r\n    if (message !== '') {\r\n      PropTypesHelper.raiseError(message);\r\n    }\r\n  }\r\n\r\n  static checkFont(font) {\r\n    const message = (\r\n      (font.name === undefined ? 'font name missing' : '')\r\n      + (font.size === undefined ? 'font size missing' : '')\r\n    );\r\n    if (message !== '') {\r\n      PropTypesHelper.raiseError(message);\r\n    }\r\n  }\r\n\r\n  static checkState(state) {\r\n    const message = (\r\n      (state.disabled === undefined ? 'disabled status missing' : '')\r\n      + (state.selected === undefined ? 'selected status missing' : '')\r\n      + (state.hidden === undefined ? 'hidden status missing' : '')\r\n    );\r\n    if (message !== '') {\r\n      PropTypesHelper.raiseError(message);\r\n    }\r\n  }\r\n\r\n\r\n  // methods to access common config values: -----------------------------\r\n\r\n  static getDisabled(configProps) {\r\n    return configProps.state.disabled;\r\n  }\r\n\r\n  static getSelected(configProps) {\r\n    return configProps.state.selected;\r\n  }\r\n\r\n  static getHidden(configProps) {\r\n    return configProps.state.hidden;\r\n  }\r\n\r\n  static getPosition(configProps) {\r\n    return configProps.position;\r\n  }\r\n\r\n  static getUserDefinedId(configProps) {\r\n    return configProps.userDefinedId;\r\n  }\r\n\r\n  static getDragAndDrop(configProps) {\r\n    return configProps.dragAndDrop;\r\n  }\r\n\r\n  static getIdentifyingInfoForLogMessage(configProps) {\r\n    const userDefinedId = CommonConfigHelper.getUserDefinedId(configProps);\r\n    const positionString = `at (${configProps.position.x},${configProps.position.y})`;\r\n    return (userDefinedId !== undefined ? `${userDefinedId} ` : \"\") + positionString;\r\n  }\r\n\r\n  static getObservedStatemachineVariableNames(configProps) {\r\n    const result = [];\r\n    if (configProps.text !== undefined\r\n      && configProps.text.dynamic !== undefined\r\n      && !result.includes(configProps.text.dynamic.variable)) {\r\n      result.push(configProps.text.dynamic.variable);\r\n    }\r\n    if (configProps.image !== undefined\r\n      && configProps.image.dynamic !== undefined\r\n      && !result.includes(configProps.image.dynamic.variable)) {\r\n      result.push(configProps.image.dynamic.variable);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // helper methods for rendering step -------------------------------------------------------\r\n\r\n  /**\r\n   * Calculate the text to be displayed as main content of a component. \r\n   * \r\n   * The method considers (with decreasing priority):\r\n   *  - a 'dynamic' text setting in the configProps that binds the component to a state machine variable\r\n   *  - the textValue attribute in the dynamic state of the component\r\n   *  - the default value text.label given in the configProps as text.label\r\n   *  - the empty string as default value if everything else fails\r\n   * \r\n   * @param {*} configProps The standard component config properties (i.e. sibling to the type attribute).\r\n   * @param {*} state The state of the component instance in the ComponentStateManager\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static buildDisplayText(configProps, state, runtime) {\r\n\r\n    if (configProps.text !== undefined && configProps.text.dynamic !== undefined) {\r\n      const textFromVariable = CommonConfigHelper.getDynamicValueFromStatemachineAndMapper(configProps.text.dynamic, runtime);\r\n      if (textFromVariable !== undefined) {\r\n        return textFromVariable;\r\n      }\r\n    }\r\n\r\n    const textFromState = StateAttributeAccess.extractTextValue(state);\r\n    if (textFromState !== undefined) {\r\n      return textFromState;\r\n    }\r\n\r\n    if (configProps.text !== undefined && configProps.text.label !== undefined) {\r\n      return configProps.text.label;\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  static buildTitle(props, state) {\r\n    if (state !== undefined) {\r\n      const mouseOverFromState = StateAttributeAccess.extractMouseOverValue(state);\r\n      if (mouseOverFromState !== undefined) {\r\n        return mouseOverFromState;\r\n      }\r\n    }\r\n    return props.text && props.text.mouseOver !== undefined ? props.text.mouseOver : '';\r\n  }\r\n\r\n  static getImageTag(pathState, configProps, selected, runtime, extraStyle = {}) {\r\n    const { displayMode } = configProps.image;\r\n    if (displayMode !== 'left' && displayMode !== 'right' && displayMode !== 'initial') {\r\n      return undefined;\r\n    }\r\n\r\n    const disabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const visited = StateAttributeAccess.extractVisited(pathState);\r\n    const defaultImage = StateAttributeAccess.extractDefaultImage(pathState);\r\n    const imageResource = CommonConfigHelper.getProperResourcePath(CommonConfigHelper.chooseImageVariant(configProps.image, disabled, selected, visited, defaultImage), runtime);\r\n    if (imageResource === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const imageStyle = Object.assign({\r\n      float: displayMode,\r\n      opacity: disabled ? 0.3 : 1\r\n    }, extraStyle);\r\n    return <img src={imageResource} alt=\"\" style={imageStyle} />;\r\n  }\r\n\r\n  static buildStyleByIndexPath(indexPath, configProps, selected, orientation, runtime) {\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const recommended = runtime.recommendationsManager.isRecommended(indexPath);\r\n    return CommonConfigHelper.buildStyleByState(pathState, configProps, selected, orientation, recommended, runtime);\r\n  }\r\n\r\n  static buildAbsoluteStyleFromConfig(configProps, orientation, pathState) {\r\n    const { position: positionInConfig } = configProps;\r\n    const positionInState = StateAttributeAccess.extractPosition(pathState);\r\n    const orientationValue = orientation || \"left\";\r\n\r\n    return {\r\n      position: 'absolute',\r\n      [orientationValue]: `${positionInState.x}px`,\r\n      top: `${positionInState.y}px`,\r\n      width: `${positionInConfig.width}px`,\r\n      height: `${positionInConfig.height}px`,\r\n    }\r\n  }\r\n\r\n  static buildStyleByState(pathState, configProps, selected, orientation, recommended, runtime) {\r\n\r\n    // set strictly required attributes:\r\n    const { position: positionInConfig, font, state, cursor } = configProps;\r\n    const paddingValue = positionInConfig.padding === undefined ? undefined : \"padding\"\r\n\r\n    CommonConfigHelper.checkPosition(positionInConfig);\r\n    CommonConfigHelper.checkFont(font);\r\n    CommonConfigHelper.checkState(state);\r\n\r\n    const result = Object.assign(\r\n      AutoLayoutHelper.buildStyleForAutoLayout(configProps, orientation, pathState),\r\n      {\r\n        [paddingValue]: `${positionInConfig.padding}px`,\r\n        outline: 'none',\r\n        visibility: StateAttributeAccess.extractHidden(pathState) ? 'hidden' : 'visible',\r\n        fontFamily: `'${font.name}', Geneva, sans-serif`,\r\n        fontSize: font.size,\r\n        fontWeight: font.bold ? 'bold' : 'normal',\r\n        fontStyle: font.italic ? 'italic' : 'normal',\r\n        textDecoration: font.underlined ? 'underline' : 'none',\r\n        textAlign: font.alignmentHorizontal\r\n      }\r\n    );\r\n\r\n    // set optional attributes\r\n    const disabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const visited = StateAttributeAccess.extractVisited(pathState);\r\n    const defaultImage = StateAttributeAccess.extractDefaultImage(pathState);\r\n\r\n    CommonConfigHelper.setStyleAttribute(result, \"color\", CommonConfigHelper.chooseImageOrColorVariant(configProps.color.text, disabled, selected, visited));\r\n\r\n    CommonConfigHelper.setStyleAttribute(result, \"cursor\", CommonConfigHelper.getCursorValue(cursor, runtime));\r\n\r\n    CommonConfigHelper.setBorderStyleAttributes(result, configProps.border, disabled, selected, visited);\r\n\r\n    CommonConfigHelper.setBackgroundStyleAttributes(result, configProps, disabled, selected, visited, defaultImage, recommended, runtime);\r\n\r\n    const rotateDegrees = configProps.transform.rotate;\r\n    const translateX = configProps.transform.translateX !== undefined ? configProps.transform.translateX : 0;\r\n    const translateY = configProps.transform.translateY !== undefined ? configProps.transform.translateY : 0;\r\n\r\n    if (rotateDegrees !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(result, \"transform\", `translate( ${translateX}px, ${translateY}px) rotate(  ${rotateDegrees}deg)`)\r\n    }\r\n\r\n    const { transformOrigin } = configProps.transform;\r\n    if (transformOrigin !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(result, \"transformOrigin\", `${transformOrigin.x}% ${transformOrigin.y}%`)\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // builds CSS required in order for the custom web fonts to work \r\n  static buildCustomFontsCss(fontMappingsArray, runtime) {\r\n    let css = '';\r\n\r\n    fontMappingsArray.forEach((font) => {\r\n      css += `@font-face {\r\n                font-family: '${font.fontFamilyName}';\r\n                src: url('${CommonConfigHelper.getProperResourcePath(font.fontFileName, runtime)}');\r\n      }`;\r\n    });\r\n\r\n    return css; \r\n  }\r\n\r\n  // helper methods for SVG \r\n  static buildStyleSvg(pathState, configProps, selected) {\r\n    const disabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const visited = StateAttributeAccess.extractVisited(pathState);\r\n    const result = {};\r\n    CommonConfigHelper.setStyleAttribute(result, \"fill\", CommonConfigHelper.chooseImageOrColorVariant(configProps.color.background, disabled, selected, visited));\r\n    CommonConfigHelper.setStyleAttribute(result, \"stroke\", CommonConfigHelper.chooseImageOrColorVariant(configProps.border.color, disabled, selected, visited));\r\n    CommonConfigHelper.setStyleAttributeWithUnits(result, \"strokeWidth\", configProps.border.width, 'px');\r\n    return result;\r\n  }\r\n\r\n  static buildPointsString(pointsArray) {\r\n    return pointsArray.reduce((accumulated, child, index) => `${accumulated} ${child.x},${child.y}`, \"\");\r\n  }\r\n\r\n\r\n\r\n\r\n  // internal helper methods ------------------------------------------------------------------------------------------------------\r\n\r\n  static getDynamicValueFromStatemachineAndMapper(dynamicConfig, runtime) {\r\n    const { taskManager, variableManager, valueMapper } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n    const variableValue = variableManager.getVariable(currentTaskId, dynamicConfig.variable);\r\n\r\n    if (variableValue === undefined) {\r\n      return undefined;\r\n    }\r\n    if (dynamicConfig.valueMap === undefined) {\r\n      return `${variableValue}`;\r\n    }\r\n    return valueMapper.getMappedValue(dynamicConfig.valueMap, variableValue);\r\n  }\r\n\r\n  static combine(pathState, propsState, defaultValue) {\r\n    if (pathState !== undefined) return pathState;\r\n    if (propsState !== undefined) return propsState;\r\n    return defaultValue;\r\n  }\r\n\r\n  static setStyleAttribute(attributes, attributeName, valueOrUndefined) {\r\n    if (valueOrUndefined !== undefined) {\r\n      attributes[attributeName] = valueOrUndefined;\r\n    }\r\n  }\r\n\r\n  static setBorderStyleAttributes(attributes, borderProps, disabled, selected, visited) {\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"borderStyle\", borderProps.style);\r\n    CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderWidth\", borderProps.width, 'px');\r\n    CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderRadius\", borderProps.radius, 'px');\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"borderColor\", CommonConfigHelper.chooseImageOrColorVariant(borderProps.color, disabled, selected, visited));\r\n\r\n    if (borderProps.north !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderTopStyle\", borderProps.north.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderTopColor\", borderProps.north.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderTopWidth\", borderProps.north.width, 'px');\r\n    }\r\n    if (borderProps.south !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderBottomStyle\", borderProps.south.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderBottomColor\", borderProps.south.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderBottomWidth\", borderProps.south.width, 'px');\r\n    }\r\n    if (borderProps.west !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderLeftStyle\", borderProps.west.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderLeftColor\", borderProps.west.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderLeftWidth\", borderProps.west.width, 'px');\r\n    }\r\n    if (borderProps.east !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderRightStyle\", borderProps.east.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderRightColor\", borderProps.east.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderRightWidth\", borderProps.east.width, 'px');\r\n    }\r\n  }\r\n\r\n  static setBackgroundStyleAttributes(attributes, configProps, disabled, selected, visited, defaultImage, recommended, runtime) {\r\n    const { displayMode } = configProps.image;\r\n\r\n    const imageFromVariable = (configProps.image !== undefined && configProps.image.dynamic !== undefined)\r\n      ? CommonConfigHelper.getDynamicValueFromStatemachineAndMapper(configProps.image.dynamic, runtime)\r\n      : undefined;\r\n\r\n    const imageVariant = (imageFromVariable === undefined || imageFromVariable.length === 0)\r\n      ? CommonConfigHelper.chooseImageVariant(configProps.image, disabled, selected, visited, defaultImage)\r\n      : imageFromVariable;\r\n\r\n    let backgroundImageUrl;\r\n    if (displayMode === 'overlay') {\r\n      backgroundImageUrl = (imageVariant === undefined) ? \"none\" : `url(${CommonConfigHelper.getProperResourcePath(imageVariant, runtime)})`;\r\n    }\r\n    const overlayType = backgroundImageUrl ? configProps.image.overlayType : undefined;\r\n\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"backgroundColor\",\r\n      ((recommended === true) ? RecommendationsManager.getRecommendationColor() : CommonConfigHelper.chooseImageOrColorVariant(configProps.color.background, disabled, selected, visited)));\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"backgroundImage\", backgroundImageUrl);\r\n\r\n    if (!backgroundImageUrl && !overlayType) return;\r\n\r\n    switch (overlayType) {\r\n      case \"stretch\":\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundRepeat\", \"no-repeat\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundPosition\", \"center\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundSize\", \"100% 100%\");\r\n        break;\r\n      case \"center\":\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundRepeat\", \"no-repeat\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundPosition\", \"center\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundSize\", \"contain\");\r\n        break;\r\n      case \"left\":\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundRepeat\", \"no-repeat\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundPosition\", \"left\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundSize\", \"contain\");\r\n        break;\r\n      default: break;\r\n    }\r\n\r\n  }\r\n\r\n  static setStyleAttributeWithUnits(attributes, attributeName, valueOrUndefined, units) {\r\n    if (valueOrUndefined !== undefined) {\r\n      attributes[attributeName] = valueOrUndefined + units;\r\n    }\r\n  }\r\n\r\n  static chooseImageVariant(variantsEntry, disabled, selected, visited, defaultImage) {\r\n    if (variantsEntry === undefined) return undefined;\r\n    const chosenVariant = CommonConfigHelper.pickVariantPropertyFromEntry(variantsEntry, disabled, selected, visited, defaultImage);\r\n    return CommonConfigHelper.isBlockDefaultValue(chosenVariant) ? undefined : Utils.withDefault(chosenVariant, (defaultImage !== undefined) ? defaultImage : variantsEntry.default);\r\n  }\r\n\r\n  static chooseImageOrColorVariant(variantsEntry, disabled, selected, visited) {\r\n    if (variantsEntry === undefined) return undefined;\r\n    const chosenVariant = CommonConfigHelper.pickVariantPropertyFromEntry(variantsEntry, disabled, selected, visited);\r\n    return CommonConfigHelper.isBlockDefaultValue(chosenVariant) ? undefined : Utils.withDefault(chosenVariant, variantsEntry.default);\r\n  }\r\n\r\n  static pickVariantPropertyFromEntry(variantsEntry, disabled, selected, visited, defaultImage) {\r\n    if (disabled) return variantsEntry.disabled;\r\n    if (selected) return variantsEntry.selected;\r\n    if (visited) return variantsEntry.visited;\r\n    if (defaultImage !== undefined) return defaultImage;\r\n    return variantsEntry.default;\r\n  }\r\n\r\n  static isBlockDefaultValue(variant) {\r\n    return variant !== undefined && Utils.isEmptyObject(variant);\r\n  }\r\n\r\n  static getCursorValue(cursor, runtime) {\r\n    if (cursor === undefined) return undefined;\r\n    if (cursor.standard !== undefined) return cursor.standard;\r\n    if (cursor.image !== undefined) return `url(${this.getProperResourcePath(cursor.image, runtime)}), auto`;\r\n    return undefined;\r\n  }\r\n\r\n\r\n  static getProperResourcePath(resourceFromConfig, runtime) {\r\n    return CommonConfigHelper.getProperResourcePathWithFlag(resourceFromConfig, 'resource', runtime);\r\n  }\r\n\r\n  static getProperResourcePathWithFlag(resourceFromConfig, flag, runtime) {\r\n    if (resourceFromConfig === undefined || resourceFromConfig.length === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    const { taskManager } = runtime;\r\n    let resourceFolder = '';\r\n    switch (flag) {\r\n      case 'resource':\r\n        resourceFolder = taskManager.getResourcePath();\r\n        break;\r\n      case 'external':\r\n        resourceFolder = taskManager.getExternalResourcePath();\r\n        break;\r\n      default:\r\n        console.error(`Unknown resource path flag ${flag}, defaulting to 'resource'`);\r\n        resourceFolder = taskManager.getResourcePath();\r\n        break;\r\n    }\r\n\r\n    return `${resourceFolder}/${resourceFromConfig}`;\r\n  }\r\n\r\n  /**\r\n   * Add a local path for an external resource so that an iframe can use it as internal or external url.\r\n   * \r\n   * @param {*} resourceFromConfig \r\n   */\r\n  static getProperResourcePathExternalResources(resourceFromConfig, runtime) {\r\n    if (resourceFromConfig === undefined) {\r\n      return undefined;\r\n    } else if (resourceFromConfig.toLowerCase().startsWith(\"http\")) {\r\n      return resourceFromConfig;\r\n    } else {\r\n      return CommonConfigHelper.getProperResourcePathWithFlag(resourceFromConfig, 'external', runtime);\r\n    }\r\n  }\r\n\r\n  static getCssClassNamesValue(config, aditionalClasses) {\r\n    const configClassNames = config.cssClassNames || [];\r\n    return [...configClassNames, aditionalClasses].join(\" \");\r\n  }\r\n\r\n  static buildStyleForMask = (wrapperStyle) => {\r\n    const { width, height, top, left, right } = wrapperStyle;\r\n    return {\r\n      position: \"absolute\",\r\n      width,\r\n      height,\r\n      top,\r\n      left,\r\n      right\r\n    }\r\n  }\r\n\r\n}\r\n","import IndexPathHelper from \"./IndexPathHelper\";\r\nimport UserDefPathHelper from \"./UserDefPathHelper\";\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\n\r\n/**\r\n * Helper methods to work translate user defined ID paths to index paths and vice versa.\r\n */\r\nexport default class PathTranslationHelper {\r\n\r\n  // ----- public API --------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the userDefPath for an index path. \r\n   * \r\n   * The method obtains the necessary userDefPathID from the currently loaded item configuration.\r\n   * If there are CbaPageAreas in the index path without a user defined ID the method returns undefined.\r\n   */\r\n  static getUserDefPathForIndexPath(indexPath, runtime) {\r\n    if (indexPath === undefined) {\r\n      return undefined;\r\n    }\r\n    const pageSegments = IndexPathHelper.getPageSegmentArray(indexPath);\r\n    if (pageSegments.length === 0) {\r\n      return undefined;\r\n    }\r\n    const firstUserDefId = PathTranslationHelper.getUserDefIdForPageSegment(pageSegments[0], runtime);\r\n\r\n    let userDefIdPath = UserDefPathHelper.buildUserDefIdPath(\r\n      IndexPathHelper.getPageAreaTypeFromPath(indexPath),\r\n      IndexPathHelper.getPageAreaNameFromPath(indexPath),\r\n      firstUserDefId\r\n    );\r\n\r\n    for (let index = 1; index < pageSegments.length; index += 1) {\r\n      const userDefinedId = PathTranslationHelper.getUserDefIdForPageSegment(pageSegments[index], runtime);\r\n      if (userDefinedId === undefined) {\r\n        return undefined;\r\n      }\r\n      userDefIdPath = UserDefPathHelper.appendUserDefIdToPath(userDefIdPath, userDefinedId);\r\n    }\r\n\r\n    return userDefIdPath;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the index path for a userDefPath.\r\n   * A userDefPath consists of the UserDefIds of the page areas leading to a page instance and the \r\n   * userDefId of a component that is part of the page. \r\n   * The method will use the path root currently loaded in the given runtime.\r\n   */\r\n  static getIndexPathForUserDefPath(userDefPath, runtime) {\r\n    let pathId = IndexPathHelper.appendPageSegmentToPathRoot(\r\n      runtime.taskManager.getCurrentStatePathRoot(),\r\n      UserDefPathHelper.getPageAreaTypeFromPath(userDefPath), UserDefPathHelper.getPageAreaNameFromPath(userDefPath),\r\n      ''\r\n    );\r\n    UserDefPathHelper.forEachUserDefIdInPath(userDefPath, (userDefId) => {\r\n      const pageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(userDefId);\r\n      pathId = IndexPathHelper.appendPageSegmentsToPath(pathId, pageSegment);\r\n    });\r\n    return pathId;\r\n  }\r\n\r\n  /**\r\n   * Get the index path for textBlockNamePath (i.e. the index path of the component owning the text block).\r\n   * A textBlockNamePath consists of the UserDefIds of the page areas leading to a page instance and the \r\n   * name of a text block in a rich text field that is part of the page. \r\n   * The method will use the path root currently loaded in the given runtime.\r\n   */\r\n  static getIndexPathForTextBlockPath(textBlockNamePath, runtime) {\r\n    let pathId = IndexPathHelper.appendPageSegmentToPathRoot(\r\n      runtime.taskManager.getCurrentStatePathRoot(),\r\n      UserDefPathHelper.getPageAreaTypeFromPath(textBlockNamePath), UserDefPathHelper.getPageAreaNameFromPath(textBlockNamePath),\r\n      ''\r\n    );\r\n\r\n\r\n    // drop last id from path and process this after the loop\r\n    const pageAreasPath = UserDefPathHelper.dropUserDefIdFromPath(textBlockNamePath);\r\n    const textBlockName = UserDefPathHelper.getLastUserDefIdFromPath(textBlockNamePath);\r\n\r\n    const textBlockOwnerPageSegment = runtime.pageConfigurationsManager.findPageSegmentForTextBlockOwner(textBlockName);\r\n    if (textBlockOwnerPageSegment === undefined) {\r\n      // the block name path does not match any block name \r\n      return undefined;\r\n    }\r\n\r\n    if (pageAreasPath !== undefined) {\r\n      UserDefPathHelper.forEachUserDefIdInPath(pageAreasPath, (userDefId) => {\r\n        const pageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(userDefId);\r\n        pathId = IndexPathHelper.appendPageSegmentsToPath(pathId, pageSegment);\r\n      });\r\n    }\r\n    pathId = IndexPathHelper.appendPageSegmentsToPath(pathId, textBlockOwnerPageSegment);\r\n    return pathId;\r\n  }\r\n\r\n\r\n  // ----- private stuff --------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the user defined ID from the component specified by the given page segment.\r\n   * \r\n   * The method returns undefined if it cannot find a matching component or the matching component\r\n   * does not have a user defined ID.\r\n   * \r\n   * @param {*} pageSegment A page segments from an index path specifying the display component.\r\n   * @param {*} runtime  The common runtime\r\n   */\r\n  static getUserDefIdForPageSegment(pageSegment, runtime) {\r\n    const componentConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (componentConfig === undefined) {\r\n      return undefined;\r\n    }\r\n    return CommonConfigHelper.getUserDefinedId(componentConfig.config);\r\n  }\r\n\r\n}\r\n","import IndexPathHelper from \"../../state/IndexPathHelper\";\r\nimport ComponentStateHelper from \"../../state/ComponentStateHelper\";\r\nimport StateAttributeAccess from \"../../state/StateAttributeAccess\";\r\n\r\n/**\r\n * Helper methods for table specific actions.\r\n */\r\nexport default class TableHelper {\r\n\r\n  /**\r\n   * This method will be used to handle table navigation via arrows. \r\n   * More specific will trigger table cell auto focus events.\r\n   * \r\n   * @param {*} e The keyboard event received.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {Object} config The common config structure.\r\n   * @param {boolean} isInEditMode Flag to know that we are in a table cell.\r\n   */\r\n  static handleKeyDown(e, runtime, config, tablePath, isInEditMode) {\r\n    e = e || window.event;\r\n    const keyCode = e.keyCode || e.which;\r\n    const arrow = {\r\n      left: 37,\r\n      up: 38,\r\n      right: 39,\r\n      down: 40\r\n    };\r\n\r\n    if (isInEditMode) {\r\n      const { row, column } = config;\r\n      if (e.ctrlKey) {\r\n        switch (keyCode) {\r\n          case arrow.left:\r\n            // TODO: extract this in a method to avoid redundance \r\n            TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row, column - 1, e);\r\n            break;\r\n          case arrow.right:\r\n            TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row, column + 1, e);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      switch (keyCode) {\r\n        case arrow.up:\r\n          TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row - 1, column, e);\r\n          break;\r\n        case arrow.down:\r\n          TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row + 1, column, e);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method will emit an autoFocus event and stop propagation.\r\n   * \r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {*} parentTableUserDefId The user defined id of the table.\r\n   * @param {*} row Row to focus\r\n   * @param {*} column Columns to focus\r\n   * @param {*} e \r\n   */\r\n  static emitAutoFocusAndPreventDefault(runtime, tablePath, row, column, e) {\r\n    runtime.eventEmitter.emit(`${tablePath}-autoFocus`, row, column);\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * This method will be used to cleanup the last selection when a new cell get focus.\r\n   * \r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {*} config The common config structure.\r\n   * @param {*} isInEditMode Flag to know that we are in a table cell.\r\n   */\r\n  static handleCellFocus(runtime, tablePath, isInEditMode) {\r\n    if (isInEditMode) {\r\n      runtime.eventEmitter.emit(`${tablePath}-removeOldSelection`);\r\n    }\r\n  }\r\n\r\n  static isInt(n) {\r\n    return Number(n) === n && n % 1 === 0;\r\n  }\r\n\r\n  static isFloat(n) {\r\n    n = Number.parseFloat(n);\r\n    if (n === undefined || Number.isNaN(n)) {\r\n      return false;\r\n    }\r\n    return Number(n) === n && n % 1 !== 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the table index path.\r\n   * @param {*} componentPath The path for edit mode component of a spreadsheet table cell \r\n   * or the path of a RichTextField child for standard table cell.\r\n   *      \r\n   */\r\n  static buildTablePath(componentPath) {\r\n    const tableCellPath = IndexPathHelper.dropIndexFromPageSegment(componentPath);\r\n    return IndexPathHelper.dropIndexFromPageSegment(tableCellPath);\r\n  }\r\n\r\n  static isFormula(value) {\r\n    return value !== undefined && value !== null && value.slice(0, 1) === '=';\r\n  }\r\n\r\n  /**\r\n   * Returns true if the current selected cell has same row/column as the old selected one.\r\n   * @param {*} tableUserDefIdPath The user defined id path of the table.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static isOldSelected(tableUserDefIdPath, runtime) {\r\n    const currentSelected = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractSelectedCell, tableUserDefIdPath, runtime);\r\n    const oldSelected = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractOldSelectedCell, tableUserDefIdPath, runtime);\r\n    return (currentSelected.row === oldSelected.row && currentSelected.column === oldSelected.column);\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Select from \"react-select\";\r\nimport PropTypesHelper from './PropTypesHelper';\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport StateManagerHelper from '../state/StateManagerHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport RenderingHelper from './RenderingHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess'\r\nimport SelectGroupHelper from './SelectGroupHelper';\r\nimport CommonActionsHelper from './CommonActionsHelper';\r\nimport TableHelper from './table/TableHelper';\r\n\r\n/**\r\n * A display component that displays a combo box.\r\n * \r\n * This component manages the items in the combo box as children of its own \r\n * in the display component instances tree.\r\n */\r\nexport default class CbaComboBox extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.comboRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { isInEditMode } = this.props;\r\n    if (isInEditMode) {\r\n      this.focus();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  // basic state management --------------------------------------------------------------\r\n\r\n  static getItemType() {\r\n    return 'ComboBoxItem';\r\n  }\r\n\r\n  /**\r\n   * Build an array of 'standard' configuration structures for the items in the items list.\r\n   * The page configurations manager expects a structure with the attributes 'type' and 'config'. \r\n   * When accessing this structure the state manager expects a config.state object as a minimum. \r\n   */\r\n  static buildComboBoxItemsArray(itemsInConfig) {\r\n    return itemsInConfig.map((itemInConfig, index, all) => {\r\n      const configOnPathSegment = StateManagerHelper.deepCopy(itemInConfig);\r\n      const additionalState = {}\r\n      StateAttributeAccess.setSelected(additionalState, parseInt(index, 10) === 0);\r\n      StateAttributeAccess.setDisabled(additionalState, false);\r\n      StateAttributeAccess.setHidden(additionalState, false);\r\n      StateAttributeAccess.setTextValue(additionalState, itemInConfig.text);\r\n      configOnPathSegment.state = additionalState;\r\n      return {\r\n        type: CbaComboBox.getItemType(),\r\n        config: configOnPathSegment\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Calculate the index of the currently selected item by looking at the state \r\n   * of all items in the state manager:\r\n   */\r\n  getSelectedIdFromState = () => {\r\n    const { runtime, path: comboBoxPath, config } = this.props;\r\n    const stateManager = runtime.componentStateManager;\r\n    let foundSelectedId;\r\n    config.items.forEach((itemConfig, index, all) => {\r\n      const itemPath = IndexPathHelper.appendIndexToPageSegment(comboBoxPath, index);\r\n      const itemState = stateManager.findOrBuildStateForPathId(itemPath, runtime);\r\n      if (SelectGroupHelper.extractSelectedState(itemState, itemPath, runtime)) {\r\n        // in case of multiple selections we display the first selected item in the closed combo box:\r\n        if (foundSelectedId === undefined) {\r\n          foundSelectedId = parseInt(index, 10);\r\n        } else {\r\n          console.warn(\"Multiple selections in a combo box are not supported yet!\");\r\n        }\r\n      }\r\n    })\r\n    return foundSelectedId;\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the selected setting for all combo box items to reflect\r\n   * the currently selected item. \r\n   */\r\n  setSelectedIdInState = (newSelectedId) => {\r\n    const { runtime, path: comboBoxPath } = this.props;\r\n    const stateManager = runtime.componentStateManager;\r\n    const comboBoxState = ComponentStateHelper.getState(this);\r\n    const selectGroupControllerState = StateAttributeAccess.extractSelectGroupControllerState(comboBoxState);\r\n    const itemPath = IndexPathHelper.appendIndexToPageSegment(comboBoxPath, newSelectedId);\r\n    const itemState = stateManager.findOrBuildStateForPathId(itemPath, runtime);\r\n\r\n    if (selectGroupControllerState === undefined) {\r\n      console.warn(\"Multiple select combo boxes are not supported yet!\");\r\n      // just set the selected state of the additionally selected item:\r\n      StateAttributeAccess.setSelected(itemState, true);\r\n      stateManager.registerStateByPathId(itemPath, itemState, runtime);\r\n    } else {\r\n      SelectGroupHelper.delegateSetSelectedToController(true, SelectGroupHelper.comboBoxGroup(), comboBoxPath, itemPath, itemState, true, false, runtime);\r\n    }\r\n  }\r\n\r\n  // handle user triggered events ----------------------------------------------------------------\r\n\r\n  onChangeHandler = (event) => {\r\n    const { runtime, config, path, isInEditMode } = this.props;\r\n    const oldSelectedId = this.getSelectedIdFromState();\r\n    const newSelectedId = parseInt(this.hasVisibleItemCount() ? event.value : event.target.value, 10);\r\n    const oldSelectedItem = config.items[oldSelectedId];\r\n    const newSelectedItem = config.items[newSelectedId];\r\n\r\n    this.updateStateAndTriggerRendering(newSelectedId);\r\n\r\n    // CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    if (!isInEditMode) {\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, CbaComboBox.buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId), event, runtime);\r\n    }\r\n    CommonActionsHelper.sendStandardEvent(newSelectedItem, runtime);\r\n    const defaultLinkReceiver = CommonActionsHelper.getDefaultLinkReceiver(this);\r\n    CommonActionsHelper.doPageSwitch(newSelectedItem.link, runtime, defaultLinkReceiver, path);\r\n\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    // Catch on click events to avoid trace logs on the container of the combo box.\r\n    const { runtime, path } = this.props;\r\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    this.scrollCurrentOptionIntoViewIfVisibleItemCountOne();\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    this.scrollCurrentOptionIntoViewIfVisibleItemCountOne();\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  // ------------- Table specific handlers -------------------------------------//\r\n  onKeyDownHandler = (e) => {\r\n    const { config, path, runtime, isInEditMode } = this.props;\r\n    TableHelper.handleKeyDown(e, runtime, config, TableHelper.buildTablePath(path), isInEditMode);\r\n  }\r\n\r\n  onFocusHandler = () => {\r\n    const { path, runtime, isInEditMode } = this.props;\r\n    TableHelper.handleCellFocus(runtime, TableHelper.buildTablePath(path), isInEditMode);\r\n  }\r\n\r\n  static buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId) {\r\n    return {\r\n      oldSelected: oldSelectedId,\r\n      oldSelectedUserDefId: oldSelectedItem.userDefinedId,\r\n      newSelected: newSelectedId,\r\n      newSelectedUserDefId: newSelectedItem.userDefinedId\r\n    };\r\n  }\r\n\r\n  updateStateAndTriggerRendering = (newSelectedId) => {\r\n    const { runtime, config, path: comboBoxPath, isInEditMode, onBlur } = this.props;\r\n\r\n    this.setSelectedIdInState(newSelectedId);\r\n\r\n    // specific behavior for table cell usage of this component\r\n    if (isInEditMode) {\r\n      const { row, column } = config;\r\n      runtime.eventEmitter.emit(`${TableHelper.buildTablePath(comboBoxPath)}-contentUpdate`, config.items[newSelectedId].text, row, column, true);\r\n      onBlur();\r\n    }\r\n\r\n    // trigger rendering of the combo box itself:\r\n    RenderingHelper.triggerRenderingViaPath(comboBoxPath, runtime);\r\n  }\r\n\r\n\r\n  // rendering ---------------------------------------------------------------------------------------\r\n\r\n  checkForInvalidItems = () => {\r\n    const { config } = this.props;\r\n    const { items } = config;\r\n    return !Array.isArray(items) || (Array.isArray(items) && items.length === 0);\r\n  }\r\n\r\n  getComboItemText = (itemConfig, index) => {\r\n    const { runtime, path: comboBoxPath } = this.props;\r\n    const stateManager = runtime.componentStateManager;\r\n    let optionText = itemConfig.text;\r\n    const itemPath = IndexPathHelper.appendIndexToPageSegment(comboBoxPath, index);\r\n    const itemState = stateManager.findOrBuildStateForPathId(itemPath, runtime);\r\n    if (StateAttributeAccess.extractTextValue(itemState)) {\r\n      optionText = StateAttributeAccess.extractTextValue(itemState);\r\n    }\r\n    return optionText;\r\n  }\r\n\r\n  generateOptions = itemsConfig => (\r\n    // disabled because we don't have a unique id to use as key and also the array does not change.\r\n    // eslint-disable-next-line react/no-array-index-key\r\n    itemsConfig.map((itemConfig, i) => (<option key={i} value={i}>{this.getComboItemText(itemConfig, i)}</option>))\r\n  )\r\n\r\n  generateOptionsForSelect = (itemsConfig) => {\r\n    // disabled because we don't have a unique id to use as key and also the array does not change.\r\n    // eslint-disable-next-line react/no-array-index-key\r\n    const options = [];\r\n    itemsConfig.map((itemConfig, i) => (options.push({\r\n      value: i, label: this.getComboItemText(itemConfig, i)\r\n    })));\r\n    return options;\r\n  }\r\n\r\n  focus = () => {\r\n    this.comboRef.current.focus();\r\n  }\r\n\r\n  hasVisibleItemCount = () => {\r\n    const { config } = this.props;\r\n    const { visibleItemCount, items } = config;\r\n\r\n    return visibleItemCount !== undefined && visibleItemCount > 0 && visibleItemCount < items.length\r\n  }\r\n\r\n  /**\r\n   * Specific fix for issue #5394\r\n   */\r\n  scrollCurrentOptionIntoViewIfVisibleItemCountOne = () => {\r\n    const { config } = this.props;\r\n    const { visibleItemCount } = config;\r\n\r\n    if (visibleItemCount !== 1) return;\r\n\r\n    try {\r\n      const currentlySelectedId = this.getSelectedIdFromState();\r\n      const allPotentialElementsList = [...document.querySelectorAll('[class^=\"css-\"]')].filter(el => el.localName === 'div');\r\n      const portalMenuContainerElement = allPotentialElementsList.find(el => el.firstChild.className.includes('-menu'));\r\n\r\n      if (portalMenuContainerElement.firstChild.className.includes('-menu')) {\r\n\r\n        const portalMenuElement = portalMenuContainerElement.firstChild.firstChild;\r\n\r\n        if (portalMenuElement) {\r\n          portalMenuElement.children[currentlySelectedId].scrollIntoView()\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log('Something went wrong on CBAComboBox', error)\r\n    }\r\n  }\r\n\r\n  onClickFrozenHandler = (event) => {\r\n    const { runtime, path } = this.props;\r\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, 'ComboBox');\r\n    event.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    if (this.checkForInvalidItems()) {\r\n      return React.createElement(\r\n        'div',\r\n        null,\r\n        `Invalid item configuration in combo box.`\r\n      );\r\n    }\r\n\r\n\r\n    const { config, path, runtime, orientation, onBlur, isInEditMode } = this.props;\r\n    const { visibleItemCount, position } = config;\r\n    const wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n\r\n    const selectedId = this.getSelectedIdFromState();\r\n    let options = this.generateOptions(config.items);\r\n\r\n    if (isInEditMode) {\r\n      Object.assign(wrapperStyle, {\r\n        boxShadow: \"inset rgb(79, 124, 177) 0px 0px 4px\"\r\n      })\r\n    }\r\n\r\n    // do this only when visible item count was set properly\r\n    if (this.hasVisibleItemCount()) {\r\n      options = this.generateOptionsForSelect(config.items);\r\n      const maxHeightSize = visibleItemCount * position.height;\r\n\r\n      const customStyles = {\r\n        menu: provided => ({\r\n          ...provided,\r\n          marginTop: 2\r\n        }),\r\n        menuList: provided => ({\r\n          ...provided,\r\n          padding: 0,\r\n          width: wrapperStyle.width,\r\n          backgroundColor: wrapperStyle.backgroundColor\r\n        }),\r\n        option: (provided, state) => {\r\n          let backgroundColor\r\n          if (state.isSelected) {\r\n            backgroundColor = 'blue';\r\n          } else if (state.isFocused) {\r\n            backgroundColor = 'grey';\r\n          } else {\r\n            backgroundColor = 'inherit';\r\n          }\r\n\r\n          return {\r\n            ...provided,\r\n            width: 'auto',\r\n            height: wrapperStyle.height,\r\n            padding: 0,\r\n            lineHeight: wrapperStyle.height,\r\n            color: state.isSelected ? 'white' : wrapperStyle.color,\r\n            fontSize: wrapperStyle.fontSize,\r\n            fontFamily: wrapperStyle.fontFamily,\r\n            whiteSpace: 'nowrap',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            backgroundColor,\r\n          }\r\n        },\r\n        control: (provided, state) => ({\r\n          ...provided,\r\n          // none of react-select's styles are passed to <Control />\r\n          backgroundColor: wrapperStyle.backgroundColor,\r\n          minHeight: \"auto\",\r\n          boxShadow: 'rgb(79, 124, 177) 0px 0px 0px',\r\n          // draw the border around the control:\r\n          borderColor: wrapperStyle.borderColor,\r\n          borderWidth: wrapperStyle.borderWidth,\r\n          borderRadius: wrapperStyle.borderRadius,\r\n          borderStyle: wrapperStyle.borderStyle,\r\n          // extend the control to the full size of the container\r\n          height: wrapperStyle.height,\r\n          cursor: wrapperStyle.cursor\r\n        }),\r\n        container: (provided, s) => ({\r\n          ...provided,\r\n          ...wrapperStyle,\r\n          // we draw the border around the control -> don't draw a border around the container \r\n          borderWidth: \"0px\",\r\n        }),\r\n        valueContainer: provided => ({\r\n          ...provided,\r\n          padding: \"0 3px\",\r\n          height: \"100%\",\r\n          position: \"static\"\r\n        }),\r\n        singleValue: (provided, state) => ({\r\n          ...provided,\r\n          maxWidth: \"calc(100% - 21px)\",\r\n          width: \"100%\",\r\n          textAlign: wrapperStyle.textAlign,\r\n          color: wrapperStyle.color\r\n        }),\r\n        indicatorsContainer: provided => ({\r\n          ...provided,\r\n          height: \"100%\",\r\n        }),\r\n        dropdownIndicator: provided => ({\r\n          ...provided,\r\n          color: \"#808080\",\r\n          \":hover\": {\r\n            color: \"#000\"\r\n          },\r\n          padding: 0,\r\n        }),\r\n        indicatorSeparator: provided => ({\r\n          ...provided,\r\n          display: \"none\"\r\n        })\r\n      }\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <div onClick={this.onClickHandler} onContextMenu={this.onContextMenuHandler} className=\"overflow-hidden\">\r\n            <Select\r\n              styles={customStyles}\r\n              title={CommonConfigHelper.buildTitle(config, pathState)}\r\n              value={options[selectedId]}\r\n              isDisabled={StateAttributeAccess.extractDisabled(pathState)}\r\n              onChange={this.onChangeHandler}\r\n              onBlur={e => onBlur(e, config.items[selectedId].text, true)}\r\n              onKeyDown={this.onKeyDownHandler}\r\n              onFocus={this.onFocusHandler}\r\n              options={options}\r\n              maxMenuHeight={maxHeightSize}\r\n              menuPortalTarget={document.body}\r\n              tabIndex={config.tabIndex}\r\n              className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaComboBox overflow-hidden\")}\r\n            />\r\n          </div>\r\n          {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaCombobox-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(wrapperStyle)} />}\r\n        </React.Fragment>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <select\r\n          ref={this.comboRef}\r\n          style={wrapperStyle}\r\n          data-cba-id={config.pageEditId}\r\n          title={CommonConfigHelper.buildTitle(config, pathState)}\r\n          value={selectedId}\r\n          disabled={StateAttributeAccess.extractDisabled(pathState)}\r\n          onChange={this.onChangeHandler}\r\n          onBlur={e => onBlur(e, config.items[selectedId].text, true)}\r\n          onContextMenu={this.onContextMenuHandler}\r\n          onKeyDown={this.onKeyDownHandler}\r\n          onFocus={this.onFocusHandler}\r\n          onClick={this.onClickHandler}\r\n          tabIndex={config.tabIndex}\r\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaComboBox\")}\r\n        >\r\n          {options}\r\n        </select>\r\n        {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaCombobox-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(wrapperStyle)} />}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nCbaComboBox.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\r\n      {\r\n        items: PropTypes.array.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  isInEditMode: PropTypes.bool,\r\n  orientation: PropTypes.string.isRequired,\r\n  onBlur: PropTypes.func\r\n}\r\n\r\nCbaComboBox.defaultProps = {\r\n  isInEditMode: false,\r\n  onBlur: () => { }\r\n}\r\n","import StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\n\r\n/**\r\n * Helper methods to implement the 'propagation group' mechanism.\r\n * \r\n * A component can carry a list of 'propagation groups':\r\n *  - Each group is identified by a group name and contains a list of index paths to components that are members of the group.\r\n * \r\n * Some operators in the TermEvaluator support an optional group name parameter.\r\n * Specifying such a group name will propagate the operator call to all members of the specified group then:\r\n *  - The absoluteUserDefinedId in the parameters identifies the component bearing the propagation group list.\r\n *  - The groupName parameter selects the group from the list of propagation groups. \r\n *  - The operator's action is applied to all members of the selected group instead of the component bearing the group list.\r\n *  - The operator's action is not applied to the component bearing the group list itself. \r\n * \r\n */\r\n\r\nexport default class PropagationHelper {\r\n\r\n  /**\r\n   * Build the select-group controller settings for a potential propagation-group controller component.\r\n   */\r\n  static addPropagationGroupControllerState(pathState, configProps) {\r\n    const config = configProps.propagationGroups;\r\n    if (config !== undefined) {\r\n      const controllerState = config.map((value, index, all) => ({\r\n        name: value.name,\r\n        memberIndexPaths: value.memberIndexPaths === undefined ? [] : [...value.memberIndexPaths]\r\n      }));\r\n      StateAttributeAccess.setPropagationGroupControllerState(pathState, controllerState);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply the given action to the members of the given propagation group of the given propagation group controller component.\r\n   * \r\n   * The action must accept one parameter: the index path of the component to apply the action to.\r\n   */\r\n  static applyToPropagationGroup(controllerIndexPath, groupName, appliedAction, runtime) {\r\n    const matchingGroups = PropagationHelper.getMatchingPropagationGroups(controllerIndexPath, groupName, runtime);\r\n    matchingGroups.forEach((group) => {\r\n      PropagationHelper.applyActionToGroupMembers(controllerIndexPath, group, appliedAction);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Convenience method: Apply an attribute setting to the component itself or to the propagation group members if a group name is given.\r\n   */\r\n  static applySimpleSetter(controllerUserDefPath, groupName, getter, setter, value, triggerRendering, runtime) {\r\n    if (groupName === undefined) {\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(getter, setter, value, controllerUserDefPath, runtime, true);\r\n    } else {\r\n      const controllerPathId = PathTranslationHelper.getIndexPathForUserDefPath(controllerUserDefPath, runtime);\r\n      PropagationHelper.applyToPropagationGroup(controllerPathId, groupName,\r\n        (componentPath) => {\r\n          ComponentStateHelper.updateStateAttribute(getter, setter, value, componentPath, runtime, triggerRendering)\r\n        },\r\n        runtime);\r\n    }\r\n  }\r\n\r\n  // --------------- private stuff ----------------------------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Private helper method: Get matching propagation group configuration for given propagation group controller and group name.\r\n   */\r\n  static getMatchingPropagationGroups(controllerIndexPath, groupName, runtime) {\r\n    const { componentStateManager } = runtime;\r\n    const fullControllerState = componentStateManager.findOrBuildStateForPathId(controllerIndexPath, runtime);\r\n    const propagationsGroupsState = StateAttributeAccess.extractPropagationGroupControllerState(fullControllerState);\r\n    if (propagationsGroupsState === undefined) {\r\n      console.log(`Ignored request to propagate some action for a component that isn't a propagation-group controller: ${controllerIndexPath}`);\r\n      return [];\r\n    }\r\n    return propagationsGroupsState.filter(group => group.name === groupName);\r\n  }\r\n\r\n  /** \r\n   * Private helper method: Apply the given action to the member paths in the given group configuration.\r\n  */\r\n  static applyActionToGroupMembers(controllerIndexPath, groupConfiguration, action) {\r\n    groupConfiguration.memberIndexPaths.forEach((memberPathPageSegment) => {\r\n      const memberIndexPath = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(controllerIndexPath), memberPathPageSegment);\r\n      action(memberIndexPath);\r\n    })\r\n  }\r\n\r\n}\r\n","import StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport CommonActionsHelper from './CommonActionsHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport RenderingHelper from './RenderingHelper';\r\nimport CbaComboBox from './CbaComboBox';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\nimport Utils from '../utils/Utils';\r\nimport PropagationHelper from '../eval/PropagationHelper';\r\n\r\n/**\r\n * Helper methods to implement the 'select-group' mechanism.\r\n * \r\n * The select-group mechanism is based on two state structures kept in the index path state in the ComponentStateManager:\r\n * \r\n * A container managing select-groups for its descendants (the 'controller') keeps an array of structures configuring these select-groups:\r\n * selectGroupControllerState: [\r\n *  {\r\n *    name: String (The name of the select-group, unique among all select-groups of this controller)\r\n *    selectionChangesBlocked: bool (Do we block changes to the selection state of our group members currently?)\r\n *    singleSelectActive: bool (Is the single-select restriction active, i.e. do we enforce a single select behavior for participating members?)\r\n *    allowDeselect: bool (Do we allow the currently selected member to be deselected by a click? If not the selected member can change only by clicking on a currently not selected member.)\r\n *    currentlySelected: string (The last page segment of the index path of the currently selected member of the select-group.)\r\n *    deselectTarget: string (The last page segment of the index path of the member to select if the currently selected member is deselected.)\r\n *  },\r\n *  ...\r\n * ]\r\n * \r\n * \r\n * Each descendant participating in the select-group keeps this structure:\r\n * selectGroupMemberInfo: {\r\n *  contollerPathId: String (The full index path of the controller managing the select-group.)\r\n *  groupName: String (The name of the select-group.)\r\n * }\r\n * \r\n * For children participating in a select-group in 'single-select-mode' the 'selected' attribute in the index path state is not relevant. \r\n * It is 'shadowed' by the data kept in the selectGroupControllerState structure. \r\n * \r\n * For components participating in a select-group in 'single-select' mode the 'select-group' mechanism runs the following actions on behalf of the onClick handler of the component:\r\n *  - Set the 'selected' status of the component: The controller might decide to select another component than the one that runs the onClick handler.\r\n *  - Do the appropriate page switch: The controller will execute the page switch specified for the component that becomes actually selected.\r\n * \r\n * For components participating in a select-group in 'single-select' mode the setSelected operator in the TermEvaluator will trigger the page switch configured for the actually selected component. \r\n * (For other components the operator will not trigger a page switch configured for the component.) \r\n * \r\n */\r\nexport default class SelectGroupHelper {\r\n\r\n  // methods for select group members:  ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Calculate the select flag for a member component by investigating the path state.\r\n   * \r\n   * The method uses the select-group structures to determine the select status if the member component is controlled by a select-group controller in 'single-select' mode. \r\n   * Otherwise it falls back to the plain 'selected' flag in the path state of the child component. \r\n   */\r\n  static extractSelectedState(pathState, controlledPathId, runtime) {\r\n    const selectGroupMemberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(pathState);\r\n    if (selectGroupMemberInfo === undefined) {\r\n      return StateAttributeAccess.extractSelected(pathState);\r\n    }\r\n\r\n    const controllerState = StateAttributeAccess.extractSelectGroupControllerState(runtime.componentStateManager.findOrBuildStateForPathId(selectGroupMemberInfo.controllerPathId, runtime));\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(controllerState, selectGroupMemberInfo.groupName);\r\n    if (groupState === undefined || !groupState.singleSelectActive) {\r\n      return StateAttributeAccess.extractSelected(pathState);\r\n    }\r\n\r\n    return IndexPathHelper.getLastPageSegmentFromPath(controlledPathId) === groupState.currentlySelected;\r\n  }\r\n\r\n\r\n  /**\r\n   * Is the component member of a select-group (i.e. it is controlled by a select-group controller)?\r\n   */\r\n  static isSelectGroupMember(pathState) {\r\n    return StateAttributeAccess.extractSelectGroupMemberInfo(pathState) !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Is the component controlled by a select-group controller in 'single-select' mode?\r\n   */\r\n  static isSingleSelectControlled(pathState, runtime) {\r\n    const selectGroupMemberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(pathState);\r\n    if (selectGroupMemberInfo === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const controllerState = StateAttributeAccess.extractSelectGroupControllerState(runtime.componentStateManager.findOrBuildStateForPathId(selectGroupMemberInfo.controllerPathId, runtime));\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(controllerState, selectGroupMemberInfo.groupName);\r\n    return groupState !== undefined && groupState.singleSelectActive;\r\n  }\r\n\r\n\r\n  /**\r\n   * Handle a request to set the 'selected' status for a component that might be controlled by a select-group controller in 'single-select' mode: \r\n   * Update the controller's state and the component's state in the ComponentStateManager and trigger rendering on an appropriate scope.\r\n   * \r\n   * For components that are in fact controlled by a select-group controller in 'single-select' mode\r\n   * the method also does the page switch for the actually selected component if the 'singleSelectWithPageSwitch' parameter is set to true.\r\n   * \r\n   * Components control themselves which page switch they do if they happen to be not controlled by a select-group controller in 'single-select' mode: \r\n   * They should use doPageSwitchOrLetTheContainerDoIt(...) to trigger a page switch.\r\n   * \r\n   * @param {boolean} requestedSelectState The 'selected' state that is requested for the component that might be controlled by a select-group controller in 'single-select' mode.\r\n   * @param {*} controlledPathId The index path of the component that might be controlled by a select-group controller in 'single-select' mode.\r\n   * @param {*} controlledPathState The path state of the component that might be controlled by a select-group controller in 'single-select' mode.\r\n   * @param {boolean} singleSelectWithPageSwitch Should we do the page switches of the actually selected component (for single-select mode case only)?\r\n   * @param {boolean} overrideNoDeselect Should we override a allowDeselect=false setting when trying to deselect the currently selected component?\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static setSelectedForPossiblyControlledComponent(requestedSelectState, controlledPathId, controlledPathState, singleSelectWithPageSwitch, overrideNoDeselect, runtime) {\r\n    const selectGroupMemberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(controlledPathState);\r\n    if (selectGroupMemberInfo === undefined) {\r\n      // do standard selection flag setting for non-members:\r\n      SelectGroupHelper.doStandardSelectFlagSetting(requestedSelectState, controlledPathId, controlledPathState, runtime);\r\n    } else {\r\n      const controllerState = StateAttributeAccess.extractSelectGroupControllerState(runtime.componentStateManager.findOrBuildStateForPathId(selectGroupMemberInfo.controllerPathId, runtime));\r\n      const groupState = SelectGroupHelper.extractMatchingGroupState(controllerState, selectGroupMemberInfo.groupName);\r\n      // do nothing for members of a blocked group:\r\n      if (groupState !== undefined && !groupState.selectionChangesBlocked) {\r\n        if (SelectGroupHelper.isSingleSelectControlled(controlledPathState, runtime)) {\r\n          // notify parent container and let it trigger the new rendering:\r\n          const { controllerPathId, groupName } = selectGroupMemberInfo;\r\n          SelectGroupHelper.delegateSetSelectedToController(\r\n            requestedSelectState,\r\n            groupName,\r\n            controllerPathId,\r\n            controlledPathId,\r\n            controlledPathState,\r\n            singleSelectWithPageSwitch,\r\n            overrideNoDeselect,\r\n            runtime\r\n          );\r\n        } else {\r\n          // do standard selection flag setting for members in a non-blocked multiple-select mode group:\r\n          SelectGroupHelper.doStandardSelectFlagSetting(requestedSelectState, controlledPathId, controlledPathState, runtime);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the currently selected component in a select-group in 'single-select' mode.\r\n   * \r\n   * The method manages the controller's state in the ComponentStateManager and registers the given state for the controlled component in the ComponentStateManager.\r\n   * Finally it triggers a rendering on the controller level. \r\n   */\r\n  static delegateSetSelectedToController(requestedSelectState, groupName, controllerPathId, controlledPathId, controlledPathState, withPageSwitch, overrideNoDeselect, runtime) {\r\n\r\n    const controllerState = runtime.componentStateManager.findOrBuildStateForPathId(controllerPathId, runtime);\r\n\r\n    SelectGroupHelper.handleSelectedChildChanges(requestedSelectState, groupName, controlledPathId, controllerState, controllerPathId, withPageSwitch, overrideNoDeselect, runtime);\r\n\r\n    runtime.componentStateManager.registerStateByPathId(controllerPathId, controllerState, runtime);\r\n    // We should register the given controlled state in any case to have a consistent contract with the caller:\r\n    if (controlledPathId !== undefined && controlledPathState !== undefined) {\r\n      runtime.componentStateManager.registerStateByPathId(controlledPathId, controlledPathState, runtime);\r\n    }\r\n    RenderingHelper.triggerRenderingViaPath(controllerPathId, runtime);\r\n\r\n  }\r\n\r\n  /**\r\n   * Do the standard page switch for a component if the component is not controlled by a select-group controller in 'single-select' mode. \r\n   */\r\n  static doPageSwitchOrLetTheContainerDoIt(component, pathState) {\r\n    if (!SelectGroupHelper.isSingleSelectControlled(pathState, component.props.runtime)) {\r\n      CommonActionsHelper.doPageSwitchForComponent(component);\r\n    }\r\n  }\r\n\r\n  // methods for state initialization ------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build the select settings in the initial state for a possibly controlled component. \r\n   */\r\n  static addSelectGroupMemberInfo(pathState, componentType, pathId, runtime) {\r\n\r\n    const selectGroupMemberConfig = SelectGroupHelper.getSelectGroupMemberPerConfig(pathId, runtime);\r\n\r\n    if (\r\n      (SelectGroupHelper.isControlledType(componentType) && selectGroupMemberConfig !== undefined)\r\n    ) {\r\n\r\n      const containerPageSegment = selectGroupMemberConfig.controllerPathId;\r\n      const containerConfiguration = runtime.pageConfigurationsManager.findConfigurationForPageSegment(containerPageSegment).config;\r\n      if (containerConfiguration.selectGroups !== undefined) {\r\n        const containerPathId = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(pathId), containerPageSegment);\r\n        const selectGroupMemberInfo = {\r\n          controllerPathId: containerPathId,\r\n          groupName: selectGroupMemberConfig.groupName,\r\n          selectGroupMemberName: selectGroupMemberConfig.selectGroupMemberName\r\n        };\r\n        StateAttributeAccess.setSelectGroupMemberInfo(pathState, selectGroupMemberInfo);\r\n      }\r\n    } else if (SelectGroupHelper.isComboBoxItem(componentType)) {\r\n      // combo box is pseudo select group controller -> use immediate parent (= combo box) if we are not a member of a real select-group\r\n      const controlledPageSegment = IndexPathHelper.getLastPageSegmentFromPath(pathId);\r\n      const containerPageSegment = IndexPathHelper.dropIndexFromPageSegment(controlledPageSegment);\r\n      const containerPathId = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(pathId), containerPageSegment);\r\n      const selectGroupMemberInfo = {\r\n        controllerPathId: containerPathId,\r\n        groupName: SelectGroupHelper.comboBoxGroup()\r\n      };\r\n      StateAttributeAccess.setSelectGroupMemberInfo(pathState, selectGroupMemberInfo);\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build the select-group controller settings for a potential select-group controller component.\r\n   */\r\n  static addSelectGroupControllerState(pathState, componentType, pathId, configProps) {\r\n    const config = configProps.selectGroups;\r\n    if (config !== undefined) {\r\n      const controllerState = config.map((value, index, all) => ({\r\n        name: value.name,\r\n        selectionChangesBlocked: value.blockSelectionChanges,\r\n        singleSelectActive: value.enforceSingleSelect,\r\n        currentlySelected: value.initiallySelected,\r\n        allowDeselect: value.allowDeselect,\r\n        deselectTarget: value.deselectTarget\r\n      }));\r\n      StateAttributeAccess.setSelectGroupControllerState(pathState, controllerState);\r\n    } else if (SelectGroupHelper.isComboBox(componentType)) {\r\n      const initiallySelectedIndex = configProps.selectedEntry === undefined ? 0 : configProps.selectedEntry;\r\n      const firstItemPath = IndexPathHelper.appendIndexToPageSegment(IndexPathHelper.getLastPageSegmentFromPath(pathId), initiallySelectedIndex);\r\n      const controllerState = [{\r\n        name: SelectGroupHelper.comboBoxGroup(),\r\n        selectionChangesBlocked: false,\r\n        singleSelectActive: true,\r\n        currentlySelected: firstItemPath,\r\n        allowDeselect: true,\r\n        deselectTarget: firstItemPath\r\n      }]\r\n      StateAttributeAccess.setSelectGroupControllerState(pathState, controllerState);\r\n    }\r\n  }\r\n\r\n  // methods for term evaluator ----------------------------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Set the 'blockSelectionChanges' attribute in the select-group configuration for the group controller specified by the user defined id path.\r\n   */\r\n  static setSelectionChangesBlockedForController(controllerUserDefPath, groupName, value, runtime) {\r\n    SelectGroupHelper.setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, (groupState) => { groupState.selectionChangesBlocked = value; }, runtime);\r\n  }\r\n\r\n  /**\r\n   * Set the 'singleSelectActive' attribute in the select-group configuration for the group controller specified by the user defined id path.\r\n   */\r\n  static setSingleSelectActiveForController(controllerUserDefPath, groupName, value, runtime) {\r\n    SelectGroupHelper.setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, (groupState) => { groupState.singleSelectActive = value; }, runtime);\r\n  }\r\n\r\n  /**\r\n   * Set the 'allowDeselect' attribute in the select-group configuration for the group controller specified by the user defined id path.\r\n   */\r\n  static setAllowDeselectForController(controllerUserDefPath, groupName, value, runtime) {\r\n    SelectGroupHelper.setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, (groupState) => { groupState.allowDeselect = value; }, runtime);\r\n  }\r\n\r\n  /**\r\n   * Computes the selected item from a combobox component identified by the given indexPath.\r\n   */\r\n  static getComboboxSelectedItem(indexPath, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const comboItems = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config.items;\r\n    let selectedItemUdi = '';\r\n    comboItems.forEach((childConfig, index) => {\r\n      const itemPath = IndexPathHelper.appendIndexToPageSegment(indexPath, index);\r\n      const itemState = runtime.componentStateManager.findOrBuildStateForPathId(itemPath, runtime);\r\n      if (SelectGroupHelper.extractSelectedState(itemState, itemPath, runtime)) {\r\n        const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(itemPath, runtime);\r\n        selectedItemUdi = UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath);\r\n      }\r\n    });\r\n    return selectedItemUdi;\r\n  }\r\n\r\n  /**\r\n   * Computes the combobox item index identified by the given combobox indexPath and item udi.\r\n   */\r\n  static getComboboxItemIndexByUdi(indexPath, udi, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const comboItems = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config.items;\r\n    let itemIndex = -1;\r\n    comboItems.forEach((childConfig, index) => {\r\n      const itemPath = IndexPathHelper.appendIndexToPageSegment(indexPath, index);\r\n      const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(itemPath, runtime);\r\n      if (UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath) === udi) itemIndex = index;\r\n    });\r\n    return itemIndex;\r\n  }\r\n\r\n  /**\r\n   * Computes a comma separated String with the selected items from a list component identified by the given indexPath.\r\n   */\r\n  static getListSelectedItems(indexPath, runtime) {\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const selectedItemsIndexes = StateAttributeAccess.extractSelectedIds(pathState) || [];\r\n    const selectedListItems = [];\r\n    selectedItemsIndexes.forEach((itemIndex) => {\r\n      const itemPath = IndexPathHelper.appendIndexToPageSegment(indexPath, itemIndex);\r\n      const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(itemPath, runtime);\r\n      selectedListItems.push(UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath));\r\n    });\r\n    return selectedListItems.join(',');\r\n  }\r\n\r\n  /**\r\n   * Computes a comma separated String with the selected items from a radio group component identified by the given containerIndexPath.\r\n   * A selected item in the list is represented by its memberName if defined or the user defined id if not.\r\n   */\r\n  static getNonSelectGroupSelectedChildren(containerIndexPath, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const matchingChildrenPaths = [];\r\n    const containerChildrenArray = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(containerIndexPath)).config.cbaChildren;\r\n    if (containerChildrenArray !== undefined) {\r\n      containerChildrenArray.forEach((childConfig, index) => {\r\n        const childIndexPath = IndexPathHelper.appendIndexToPageSegment(containerIndexPath, index);\r\n        const selectionIdentification = SelectGroupHelper.getSelectionIdentificationWhenSelected(childIndexPath, runtime);\r\n        if (selectionIdentification !== '' && !matchingChildrenPaths.includes(selectionIdentification)) {\r\n          matchingChildrenPaths.push(selectionIdentification);\r\n        }\r\n      });\r\n    }\r\n    return matchingChildrenPaths.join(',');\r\n  }\r\n\r\n  /**\r\n   * Computes a comma separated String with the selected items from a frame select group component identified by the given containerIndexPath and the groupName.\r\n   * A selected item in the list is represented by its memberName if defined or the user defined id if not.\r\n   */\r\n  static getSelectGroupSelectedChildren(containerIndexPath, groupName, runtime) {\r\n    const matchingChildrenPaths = [];\r\n    const matchingGroups = PropagationHelper.getMatchingPropagationGroups(containerIndexPath, groupName, runtime);\r\n    matchingGroups.forEach((group) => {\r\n      group.memberIndexPaths.forEach((memberPathPageSegment) => {\r\n        const childIndexPath = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(containerIndexPath), memberPathPageSegment);\r\n        const selectionIdentification = SelectGroupHelper.getSelectionIdentificationWhenSelected(childIndexPath, runtime);\r\n        if (selectionIdentification !== '' && !matchingChildrenPaths.includes(selectionIdentification)) {\r\n          matchingChildrenPaths.push(selectionIdentification);\r\n        }\r\n      })\r\n    });\r\n    return matchingChildrenPaths.join(',');\r\n  }\r\n\r\n  /**\r\n  * Computes a collection of objects with the following structure: list item UDI / selected state. \r\n  * Used to compile ResultVariables for scoring result structure -> 'per member'.\r\n  */\r\n  static getListItemsPerMemberState(indexPath, runtime) {\r\n    const ret = [];\r\n    const { pageConfigurationsManager } = runtime;\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const selectedItemsIndexes = StateAttributeAccess.extractSelectedIds(pathState) || [];\r\n    const containerChildrenArray = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config.items;\r\n    if (containerChildrenArray !== undefined) {\r\n      containerChildrenArray.forEach((childConfig, index) => {\r\n        ret.push({\r\n          userDefIdPath: childConfig.userDefinedId,\r\n          selected: selectedItemsIndexes.includes(index).toString()\r\n        })\r\n      });\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n  * Computes a collection of objects with the following structure: (here radio) item UDI / selected state. \r\n  * Used to compile ResultVariables for scoring result structure when 'scoringResultPerMember' attribute is enabled.\r\n  */\r\n  static getNonSelectGroupSelectedChildrenPerMember(containerIndexPath, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const ret = [];\r\n    const containerChildrenArray = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(containerIndexPath)).config.cbaChildren;\r\n    if (containerChildrenArray !== undefined) {\r\n      containerChildrenArray.forEach((childConfig, index) => {\r\n        const childIndexPath = IndexPathHelper.appendIndexToPageSegment(containerIndexPath, index);\r\n        const pathState = runtime.componentStateManager.findOrBuildStateForPathId(childIndexPath, runtime);\r\n        ret.push({\r\n          userDefIdPath: UserDefPathHelper.getLastUserDefIdFromPath(PathTranslationHelper.getUserDefPathForIndexPath(childIndexPath, runtime)),\r\n          selected: SelectGroupHelper.extractSelectedState(pathState, childIndexPath, runtime).toString()\r\n        })\r\n      });\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n  * Computes a collection of objects with the following structure: select group member UDI / selected state. \r\n  * Used to compile ResultVariables for scoring result structure when 'scoringResultPerMember' attribute is enabled.\r\n  */\r\n  static getSelectGroupSelectedChildrenPerMember(containerIndexPath, groupName, runtime) {\r\n    const ret = [];\r\n    const matchingGroups = PropagationHelper.getMatchingPropagationGroups(containerIndexPath, groupName, runtime);\r\n    matchingGroups.forEach((group) => {\r\n      group.memberIndexPaths.forEach((memberPathPageSegment) => {\r\n        const childIndexPath = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(containerIndexPath), memberPathPageSegment);\r\n        const pathState = runtime.componentStateManager.findOrBuildStateForPathId(childIndexPath, runtime);\r\n        ret.push({\r\n          userDefIdPath: UserDefPathHelper.getLastUserDefIdFromPath(PathTranslationHelper.getUserDefPathForIndexPath(childIndexPath, runtime)),\r\n          selected: SelectGroupHelper.extractSelectedState(pathState, childIndexPath, runtime).toString()\r\n        })\r\n      })\r\n    });\r\n    return ret;\r\n  }\r\n\r\n\r\n  // private stuff ----------------------------------------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Helper method to retrieve the selection identification: memberName if defined or the userDefinedId.\r\n   */\r\n  static getSelectionIdentificationWhenSelected(indexPath, runtime) {\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    if (SelectGroupHelper.extractSelectedState(pathState, indexPath, runtime)) {\r\n      if (SelectGroupHelper.isSelectGroupMember(pathState)) {\r\n        const selectGroupMemberConfig = SelectGroupHelper.getSelectGroupMemberPerConfig(indexPath, runtime);\r\n        const selectGroupMemberName = Utils.withDefault(selectGroupMemberConfig.selectGroupMemberName, '');\r\n        if (selectGroupMemberName !== '') return selectGroupMemberName;\r\n      }\r\n      return UserDefPathHelper.getLastUserDefIdFromPath(PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime));\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Helper method to find the select-group configuration for the group with the given name.\r\n   */\r\n  static extractMatchingGroupState(controllerState, groupName) {\r\n    const matchingGroups = controllerState.filter(value => (value.name === groupName));\r\n    return matchingGroups.length > 0 ? matchingGroups[0] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, controllerAttributeSetter, runtime) {\r\n    const controllerIndexPath = PathTranslationHelper.getIndexPathForUserDefPath(controllerUserDefPath, runtime);\r\n    SelectGroupHelper.setStateAttributeForControllerByIndexPath(controllerIndexPath, groupName, controllerAttributeSetter, runtime);\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static setStateAttributeForControllerByIndexPath(controllerIndexPath, groupName, controllerAttributeSetter, runtime) {\r\n    const { componentStateManager } = runtime;\r\n    const fullControllerState = componentStateManager.findOrBuildStateForPathId(controllerIndexPath, runtime);\r\n    const controllerSelectGroupsState = StateAttributeAccess.extractSelectGroupControllerState(fullControllerState);\r\n    if (controllerSelectGroupsState === undefined) {\r\n      console.log(`Ignored request to set controller mode for a component that isn't a select-group controller: ${controllerIndexPath}`);\r\n      return;\r\n    }\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(controllerSelectGroupsState, groupName);\r\n    const oldSingleSelectActive = groupState.singleSelectActive;\r\n    const oldSelectedPageSegment = groupState.currentlySelected;\r\n\r\n    controllerAttributeSetter(groupState);\r\n\r\n    // Rearrange select flags of members and currentlySelected index in controller if we switch between single-select and multi-select mode:\r\n    const newSingleSelectActive = groupState.singleSelectActive;\r\n    if (newSingleSelectActive !== oldSingleSelectActive) {\r\n      if (newSingleSelectActive === false) {\r\n        // Set select flags to false for all members except the currently selected one according to the old selected page segment.\r\n        SelectGroupHelper.applyToMembers(\r\n          controllerIndexPath,\r\n          (fullMemberState, memberPageSegment) => {\r\n            StateAttributeAccess.setSelected(fullMemberState, oldSelectedPageSegment === memberPageSegment);\r\n          },\r\n          runtime\r\n        );\r\n      } else {\r\n        // Set selected flags to false for all members.\r\n        groupState.currentlySelected = undefined;\r\n        SelectGroupHelper.applyToMembers(\r\n          controllerIndexPath,\r\n          (fullMemberState, memberPageSegment) => {\r\n            StateAttributeAccess.setSelected(fullMemberState, false);\r\n          },\r\n          runtime\r\n        );\r\n      }\r\n    }\r\n    componentStateManager.registerStateByPathId(controllerIndexPath, fullControllerState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static applyToMembers(controllerIndexPath, methodToApply, runtime) {\r\n    const { componentStateManager } = runtime;\r\n    const memberPaths = ComponentStateHelper.findIndexPathsOfDescendants(controllerIndexPath, runtime);\r\n    memberPaths\r\n      .forEach((memberPath) => {\r\n        const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(memberPath);\r\n        const { pageConfigurationsManager } = runtime;\r\n        const memberConfiguration = pageConfigurationsManager.findConfigurationForPageSegment(pageSegment, true);\r\n\r\n        if (memberConfiguration !== undefined) {\r\n          const fullMemberState = componentStateManager.findOrBuildStateForPathId(memberPath, runtime);\r\n          const memberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(fullMemberState);\r\n          if (memberInfo !== undefined && memberInfo.controllerPathId === controllerIndexPath) {\r\n            methodToApply(fullMemberState, pageSegment);\r\n            componentStateManager.registerStateByPathId(memberPath, fullMemberState, runtime);\r\n          }\r\n        }\r\n\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Private helper method.\r\n   * \r\n   */\r\n  static handleSelectedChildChanges(requestedSelectState, groupName, clickSelectedPathId, controllerState, controllerPath, withPageSwitch, overrideNoDeselect, runtime) {\r\n    const selectGroupControllerState = StateAttributeAccess.extractSelectGroupControllerState(controllerState);\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(selectGroupControllerState, groupName);\r\n    const newIndexResult = SelectGroupHelper.calculateNewSelectedIndex(requestedSelectState, groupState, IndexPathHelper.getLastPageSegmentFromPath(clickSelectedPathId), overrideNoDeselect);\r\n\r\n    if (newIndexResult.noChange === false) {\r\n      groupState.currentlySelected = newIndexResult.newMember;\r\n      StateAttributeAccess.setSelectGroupControllerState(controllerState, selectGroupControllerState);\r\n    }\r\n\r\n    // We have to do the page switches since we sometimes select another button \r\n    // than the one clicked on by the user. In such a case the button's onClick handler \r\n    // would do the wrong page switch.\r\n    if (groupState.currentlySelected !== undefined && withPageSwitch) {\r\n      SelectGroupHelper.doPageSwitchForSelectedSwitcher(controllerPath, groupState.currentlySelected, runtime);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   * \r\n   * Calculate the page segment of the currently selected component. \r\n   * The method returns 'undefined' if the currently selected component does not change.\r\n   */\r\n  static calculateNewSelectedIndex(requestedSelectState, groupState, clickedSelectedPageSegment, overrideNoDeselect) {\r\n    if (requestedSelectState === true) {\r\n      if (groupState.currentlySelected === clickedSelectedPageSegment) {\r\n        // Component was selected and selected is requested -> signal no change:\r\n        return {\r\n          noChange: true\r\n        }\r\n      } else {\r\n        // Switching selection to another component is always possible:\r\n        return {\r\n          noChange: false,\r\n          newMember: clickedSelectedPageSegment\r\n        };\r\n      }\r\n    } else if (groupState.currentlySelected !== clickedSelectedPageSegment) {\r\n      // Component was not selected and not selected is requested -> signal no change:\r\n      return {\r\n        noChange: true\r\n      };\r\n    } else {\r\n      // Component was selected and not selected is requested.\r\n      const { allowDeselect, deselectTarget } = groupState;\r\n      if (!allowDeselect && !overrideNoDeselect) {\r\n        // Deselect is not allowed -> signal no change:\r\n        return {\r\n          noChange: true\r\n        };\r\n      } else if (deselectTarget !== undefined) {\r\n        // Jump to deselect target if we aren't there anyhow:\r\n        if (deselectTarget === clickedSelectedPageSegment) {\r\n          return {\r\n            noChange: true\r\n          }\r\n        } else {\r\n          return {\r\n            noChange: false,\r\n            newMember: deselectTarget\r\n          }\r\n        }\r\n      } else {\r\n        // No deselect target defined -> set currently selected to undefined\r\n        return {\r\n          noChange: false,\r\n          newMember: undefined\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static doPageSwitchForSelectedSwitcher(controllerPath, selectedSwitcherPageSegment, runtime) {\r\n    // We don't do any switch if no switcher is selected:\r\n    if (selectedSwitcherPageSegment !== undefined) {\r\n      const selectedSwitcherPath = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(controllerPath), selectedSwitcherPageSegment);\r\n\r\n      const pathState = runtime.componentStateManager.findOrBuildStateForPathId(selectedSwitcherPath, runtime);\r\n      const defaultLinkReceiver = StateAttributeAccess.extractDefaultLinkReceiver(pathState);\r\n      const selectedSwitcherConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(selectedSwitcherPageSegment);\r\n\r\n      CommonActionsHelper.doPageSwitch(selectedSwitcherConfig.config.link, runtime, defaultLinkReceiver, controllerPath);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static doStandardSelectFlagSetting(requestedSelectState, controlledPathId, controlledPathState, runtime) {\r\n    StateAttributeAccess.setSelected(controlledPathState, requestedSelectState);\r\n    runtime.componentStateManager.registerStateByPathId(controlledPathId, controlledPathState, runtime);\r\n    RenderingHelper.triggerRenderingViaPath(controlledPathId, runtime);\r\n  }\r\n\r\n  static isControlledType(componentType) {\r\n    return componentType === 'CbaRadioButton'\r\n      || componentType === 'CbaCheckbox'\r\n      || componentType === 'CbaButton'\r\n      || componentType === 'CbaLink'\r\n      || componentType === 'CbaRichTextField'\r\n      || componentType === 'CbaPolygon'\r\n      || componentType === 'CbaRegionMap';\r\n  }\r\n\r\n  static isComboBoxItem(componentType) {\r\n    return componentType === CbaComboBox.getItemType();\r\n  }\r\n\r\n  static isComboBox(componentType) {\r\n    return componentType === 'CbaComboBox';\r\n  }\r\n\r\n  static comboBoxGroup() {\r\n    return 'comboGroup';\r\n  }\r\n\r\n  static getSelectGroupMemberPerConfig(pathId, runtime) {\r\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(pathId);\r\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    return config.selectGroupMember;\r\n  }\r\n\r\n}\r\n","import CommonActionsHelper from '../components/CommonActionsHelper';\r\nimport SelectGroupHelper from '../components/SelectGroupHelper';\r\nimport ComponentStateHelper from './ComponentStateHelper';\r\nimport IndexPathHelper from './IndexPathHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\n\r\n/**\r\n * Helper methods to create trace log entries.\r\n*/\r\nexport default class TraceLogHelper {\r\n\r\n  /**\r\n   * Dump the state stored in all relevant state managers (ComponentStateManager, PresenterStateManager, IncidentsAccumulator etc.) to the trace log.\r\n   * \r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static dumpSnapshotToTrace(runtime) {\r\n    const {\r\n      taskManager,\r\n      presenterStateManager,\r\n      incidentsAccumulator,\r\n      clipboardManager,\r\n      statemachinesManager,\r\n      calculatorsManager,\r\n      variableManager\r\n    } = runtime;\r\n    const { test, item, task } = taskManager.getCurrentTestTaskItemNames();\r\n    const currentStatePathRoot = taskManager.getCurrentStatePathRoot();\r\n\r\n    const now = new Date();\r\n    runtime.traceLogBuffer.reportEvent('Snapshot', now, {\r\n      components: ComponentStateHelper.buildComponentsSnapshot(test, item, task, runtime),\r\n      presentation: presenterStateManager.getTaskState(currentStatePathRoot),\r\n      incidents: incidentsAccumulator.getAllValuesForTask(currentStatePathRoot, now.getTime()),\r\n      clipboard: clipboardManager.getStateForTracing(),\r\n      statemachine: {\r\n        current: {\r\n          states: statemachinesManager.getCurrentStateMachineLeafStates()\r\n        },\r\n        history: statemachinesManager.getHistoryStatemachineData()\r\n      },\r\n      calculator: calculatorsManager.getStateForTask(currentStatePathRoot),\r\n      variables: variableManager.buildVariablesInfoArrayForTask(currentStatePathRoot)\r\n    });\r\n\r\n    // return the time of the dump for testing purposes:\r\n    return now;\r\n  }\r\n\r\n  /**\r\n   * Dump our full state (i.e. all state from all our state memories) wrapped in trace log entry \r\n   * to the trace log. \r\n   */\r\n  static dumpFullStateToTrace(runtime) {\r\n    const { taskManager, traceLogBuffer } = runtime;\r\n    traceLogBuffer.reportEvent('FullState', new Date(), taskManager.getAllTasksState());\r\n  }\r\n\r\n  /**\r\n   * Dump a state change to the trace log.\r\n   */\r\n  static dumpStateChangeToTrace(stateType, stateDelta, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('StateChange', new Date(), {\r\n      stateType,\r\n      stateDelta\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dump a render call to the trace log.\r\n   */\r\n  static dumpRenderTriggeredToTrace(indexPath, traceLogBuffer, replayStepMonitor) {\r\n    traceLogBuffer.reportEvent('RenderTriggered', new Date(), {\r\n      indexPath,\r\n      replayStepId: replayStepMonitor.getCurrentReplayStepId()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dump a context menu open/close call to the trace log.\r\n   */\r\n  static dumpContextMenuTriggeredToTrace(menuConfig, shouldOpen, traceLogBuffer, replayStepMonitor) {\r\n    const entries = shouldOpen ? menuConfig.entries : undefined;\r\n    const event = shouldOpen ? {\r\n      clientX: menuConfig.event.clientX,\r\n      clientY: menuConfig.event.clientY,\r\n      type: menuConfig.event.type\r\n    } : undefined;\r\n\r\n    traceLogBuffer.reportEvent('ContextMenu', new Date(), {\r\n      event,\r\n      entries,\r\n      shouldOpen,\r\n      replayStepId: replayStepMonitor.getCurrentReplayStepId()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dump a scroll triggered call to the tracelog\r\n   * @param {*} path \r\n   * @param {*} scrollLeft \r\n   * @param {*} scrollTop \r\n   * @param {*} traceLogBuffer \r\n   */\r\n  static dumpScrollTriggeredToTrace(path, scrollLeft, scrollTop, traceLogBuffer, replayStepMonitor) {\r\n    traceLogBuffer.reportEvent('ScrollTriggered', new Date(), {\r\n      path,\r\n      scrollLeft,\r\n      scrollTop,\r\n      replayStepId: replayStepMonitor.getCurrentReplayStepId()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wrapper function for throttling/debouncing \r\n   * \r\n   * \r\n   * @returns {Function(currentScrollValue, currentOrientationValue, path, runtime)}\r\n   */\r\n  static traceScrollWrap() {\r\n    return (currentScrollValue, currentOrientationValue, path, runtime) => {\r\n      TraceLogHelper.traceScroll(path, runtime, currentScrollValue, currentOrientationValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traces the scroll interaction\r\n   * \r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} currentOrientationValue The current orientation of the scrolling component\r\n   * \r\n   */\r\n  static traceScroll(path, runtime, currentScrollValue, currentOrientationValue) {\r\n    const scrollTraceDetails = TraceLogHelper.buildScrollTraceDetails(currentScrollValue, currentOrientationValue);\r\n    if (scrollTraceDetails) {\r\n      CommonActionsHelper.traceUserInteraction(\"ScrollbarMove\", path, scrollTraceDetails, undefined, undefined, runtime);\r\n      runtime.replayStepMonitor.incrementReplayStep();\r\n      TraceLogHelper.dumpScrollTriggeredToTrace(path, currentScrollValue.scrollLeft, currentScrollValue.scrollTop, runtime.traceLogBuffer, runtime.replayStepMonitor);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that builds the trace details needed for scrolling\r\n   * \r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} currentOrientationValue The current orientation of the scrolling component\r\n   * \r\n   * @returns {Object} the trace log details\r\n   */\r\n  static buildScrollTraceDetails(currentScrollValue, currentOrientationValue) {\r\n    const { horizontal, vertical } = TraceLogHelper.computeScrollPosition(currentScrollValue);\r\n    const traceDetails = {\r\n      orientation: currentOrientationValue.orientation,\r\n      direction: currentOrientationValue.direction\r\n    }\r\n\r\n    if (horizontal || horizontal === 0) {\r\n      traceDetails.horizontalScroll = horizontal;\r\n    }\r\n\r\n    if (vertical || vertical === 0) {\r\n      traceDetails.verticalScroll = vertical;\r\n    }\r\n\r\n    if (currentOrientationValue.orientation || currentOrientationValue.direction) {\r\n      return traceDetails;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Helper function that computs the scroll orientation\r\n   * \r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} lastScrollValue The last known scroll values of the component\r\n   * \r\n   * @returns {Object} the scroll orientation\r\n   */\r\n  static computeScrollOrientation(currentScrollValue, lastScrollValue) {\r\n    if (!currentScrollValue || !lastScrollValue) {\r\n      return {\r\n        direction: null,\r\n        orientation: null\r\n      };\r\n    }\r\n\r\n    const isVerticalOrientation = currentScrollValue.scrollTop !== lastScrollValue.scrollTop;\r\n    const orientation = isVerticalOrientation ? \"vertical\" : \"horizontal\";\r\n    let direction;\r\n\r\n    if (isVerticalOrientation) {\r\n      direction = currentScrollValue.scrollTop < lastScrollValue.scrollTop ? \"up\" : \"down\";\r\n    } else {\r\n      direction = currentScrollValue.scrollLeft < lastScrollValue.scrollLeft ? \"left\" : \"right\";\r\n    }\r\n\r\n    return {\r\n      direction,\r\n      orientation\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that computs the scroll position\r\n   * \r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} lastScrollValue The last known scroll values of the component\r\n   * \r\n   * @returns {Object} the scroll position\r\n   */\r\n  static computeScrollPosition(currentScrollValue) {\r\n    const { scrollTop, scrollLeft, scrollHeight, scrollWidth, clientHeight, clientWidth } = currentScrollValue;\r\n\r\n    return {\r\n      vertical: Math.round(100 * (scrollTop / (scrollHeight - clientHeight))),\r\n      horizontal: Math.round(100 * (scrollLeft / (scrollWidth - clientWidth))),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that gets scroll information from a browser event\r\n   * \r\n   * @param {*} event The browser event\r\n   * \r\n   * @returns {Object} the scroll data\r\n   */\r\n  static getScrollDataFromEvent(event) {\r\n    const { scrollTop, scrollLeft, scrollHeight, scrollWidth, clientHeight, clientWidth } = event.target;\r\n\r\n    return {\r\n      scrollTop,\r\n      scrollLeft,\r\n      scrollHeight,\r\n      scrollWidth,\r\n      clientHeight,\r\n      clientWidth\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that retrieves useful trace information before the setActive operator is applied.\r\n   * \r\n   * @param {string} absoluteUserDefId The UDI of the component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * \r\n   * @returns {Object} \r\n   *    oldSelectedValue: if the component is in a selected state\r\n   *    oldComboSelectedId: the current combo selection\r\n   */\r\n  static getTraceDataBeforeSetSelection(absoluteUserDefId, runtime) {\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const componentType = ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime);\r\n    return {\r\n      oldSelectedValue: SelectGroupHelper.extractSelectedState(pathState, indexPath, runtime),\r\n      oldComboSelectedId:\r\n        (componentType === 'ComboBoxItem') ? SelectGroupHelper.getComboboxSelectedItem(IndexPathHelper.dropIndexFromPageSegment(indexPath), runtime) : ''\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that generates state change specific component traces for setActive operator.\r\n   * \r\n   * @param {string} absoluteUserDefId The UDI of the component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {Object} \r\n   *    oldSelectedValue: if the component is in a selected state\r\n   *    oldComboSelectedId: the current combo selection\r\n   */\r\n  static traceChangesAfterSetSelection(absoluteUserDefId, runtime, dataBeforeSelection) {\r\n    const { oldSelectedValue } = dataBeforeSelection;\r\n    let indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const newSelectedValue = SelectGroupHelper.extractSelectedState(pathState, indexPath, runtime);\r\n\r\n    // state change\r\n    if (oldSelectedValue !== newSelectedValue) {\r\n      const { pageConfigurationsManager } = runtime;\r\n      const componentType = ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime);\r\n      let { config } = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath));\r\n      if (componentType === 'ComboBoxItem') {\r\n        indexPath = IndexPathHelper.dropIndexFromPageSegment(indexPath);\r\n        ({ config } = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)));\r\n      }\r\n\r\n      const traceDetails = TraceLogHelper.buildTraceDetailsStructure(absoluteUserDefId, runtime, dataBeforeSelection);\r\n      if (traceDetails !== undefined) {\r\n        const traceConfig = config.trace;\r\n        if (traceConfig.skipTrace === undefined || traceConfig.skipTrace !== true) {\r\n          const extendedValues = {};\r\n          CommonActionsHelper.extendTraceDetailsObject(extendedValues, traceConfig.addOn);\r\n          CommonActionsHelper.extendTraceDetailsObject(extendedValues, traceDetails);\r\n\r\n          const details = CommonActionsHelper.buildTraceLogDetails(indexPath, extendedValues, undefined, runtime);\r\n          const timestamp = new Date();\r\n          runtime.traceLogBuffer.reportEvent(traceConfig.type, timestamp, details);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that generates specific component trace details for setActive operator.\r\n   * \r\n   * @param {string} absoluteUserDefId The UDI of the component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {Object} \r\n   *    oldSelectedValue: if the component is in a selected state\r\n   *    oldComboSelectedId: the current combo selection\r\n   */\r\n  static buildTraceDetailsStructure(absoluteUserDefId, runtime, dataBeforeSelection) {\r\n    const { oldSelectedValue, oldComboSelectedId } = dataBeforeSelection;\r\n    const { pageConfigurationsManager } = runtime;\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const componentType = ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime);\r\n    switch (componentType) {\r\n      case 'CbaCheckbox':\r\n      case 'CbaRadioButton':\r\n      case 'CbaPolygon':\r\n      case 'CbaRichTextField':\r\n      case 'CbaLink':\r\n        return CommonActionsHelper.buildOldSelectedTraceLogValueObject(oldSelectedValue);\r\n      case 'CbaButton': {\r\n        const traceDetails = CommonActionsHelper.buildOldSelectedTraceLogValueObject(oldSelectedValue);\r\n        const { config } = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath));\r\n        if (config.subtype !== undefined) {\r\n          traceDetails.subtype = config.subtype;\r\n        }\r\n        return traceDetails;\r\n      }\r\n      case 'ComboBoxItem': {\r\n        const oldSelectedIndex = SelectGroupHelper.getComboboxItemIndexByUdi(IndexPathHelper.dropIndexFromPageSegment(indexPath), oldComboSelectedId, runtime);\r\n        const newSelectedId = SelectGroupHelper.getComboboxSelectedItem(IndexPathHelper.dropIndexFromPageSegment(indexPath), runtime);\r\n        const newSelectedIndex = SelectGroupHelper.getComboboxItemIndexByUdi(IndexPathHelper.dropIndexFromPageSegment(indexPath), newSelectedId, runtime);\r\n        return {\r\n          oldSelected: oldSelectedIndex,\r\n          oldSelectedUserDefId: oldComboSelectedId,\r\n          newSelected: newSelectedIndex,\r\n          newSelectedUserDefId: newSelectedId\r\n        }\r\n      }\r\n      case 'CbaTableCell': {\r\n        const tableIndexPath = IndexPathHelper.dropIndexFromPageSegment(indexPath);\r\n        const { row, column } = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config;\r\n        const tableUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(tableIndexPath, runtime);\r\n        return {\r\n          tableUserDefIdPath,\r\n          tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\r\n          row,\r\n          column,\r\n          oldSelectedValue\r\n        }\r\n      }\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\n/**\r\n * Helper methods to manage the currently rendered components and trigger them to render.\r\n*/\r\nexport default class RenderingHelper {\r\n\r\n  // registration of currently rendered components ----------------------------------------------------\r\n\r\n  /* not used methods work done for #5249\r\n  static initialiseStateForComponents(aditionalState = {}) {\r\n    return Object.assign(aditionalState, {\r\n      componentPath: \"\"\r\n    })\r\n  }\r\n  */\r\n\r\n  static onMount(component) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot register component without index path', component.props);\r\n      return;\r\n    }\r\n    RenderingHelper.doRegistrations(component, component.props.path);\r\n  }\r\n\r\n  static onUnmount(component) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot deregister component without index path', component.props);\r\n      return;\r\n    }\r\n    RenderingHelper.doDeregistrations(component, component.props.path);\r\n  }\r\n\r\n  /* Depracted see #5249 */\r\n  static onReceiveProps(component, nextProps) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot update from props without index path', component.props);\r\n      return;\r\n    }\r\n    if (nextProps.path === undefined) {\r\n      console.warn('Rendering helper cannot update to props without index path', nextProps);\r\n      return;\r\n    }\r\n    if (!(component.props.path === nextProps.path)) {\r\n      // component.props.runtime.componentDirectory.deregisterComponent(component.props.path);\r\n      RenderingHelper.doDeregistrations(component, component.props.path);\r\n      RenderingHelper.doRegistrations(component, nextProps.path);\r\n    }\r\n  }\r\n\r\n  /* not used methods work done for #5249\r\n  static onGetDerivedStateFromProps(nextProps, prevState) {\r\n    if (prevState && prevState.componentPath !== \"\" && nextProps.path !== prevState.componentPath) {\r\n      console.log(\"in get derived state from props\", prevState)\r\n\r\n      const { runtime } = nextProps;\r\n      const component = runtime.componentDirectory.findComponent(prevState.componentPath);\r\n\r\n      if (prevState.componentPath) {\r\n        console.warn('Rendering helper cannot update to props without index path', prevState.componentPath);\r\n        return null;\r\n      }\r\n\r\n      if (nextProps.path) {\r\n        console.warn('Rendering helper cannot update to props without index path', nextProps.path);\r\n        return null;\r\n      }\r\n\r\n      RenderingHelper.deregisterComponent(prevState.componentPath);\r\n      RenderingHelper.registerComponent(nextProps.path, component);\r\n\r\n      return Object.assign({}, prevState, {\r\n        componentPath: nextProps.path\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static onComponentDidUpdate(component, prevProps, prevState) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot update from props without index path', component.props);\r\n      return;\r\n    }\r\n    if (prevProps.path === undefined) {\r\n      console.warn('Rendering helper cannot update to props without index path', prevProps);\r\n      return;\r\n    }\r\n\r\n    if (prevProps.path !== component.props.path) {\r\n      console.log(\"in update\");\r\n      component.setState({\r\n        componentPath: component.props.path,\r\n      });\r\n    }\r\n  }\r\n  */\r\n\r\n  static doRegistrations(component, path) {\r\n    const { runtime, config } = component.props;\r\n    runtime.componentDirectory.registerComponent(path, component);\r\n    CommonConfigHelper.getObservedStatemachineVariableNames(config).forEach((variableName) => {\r\n      runtime.variableManager.addVariableChangeObserver(path, variableName);\r\n    })\r\n    RenderingHelper.applyRegisteredActions(component, path, runtime);\r\n  }\r\n\r\n  static doDeregistrations(component, path) {\r\n    const { runtime } = component.props;\r\n    runtime.componentDirectory.deregisterComponent(path);\r\n    runtime.variableManager.dropChangeObserverForPath(path);\r\n  }\r\n\r\n  // trigger rendering mechanism using the React state ----------------------------------------------------\r\n  static triggerRenderingViaUserDefPath(userDefPath, runtime) {\r\n    RenderingHelper.triggerRenderingViaPath(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime), runtime);\r\n  }\r\n\r\n  static triggerRenderingViaPath(path, runtime) {\r\n    const receiverComponent = runtime.componentDirectory.findComponent(path);\r\n    if (receiverComponent !== undefined) {\r\n      RenderingHelper.triggerRendering(receiverComponent);\r\n    } else {\r\n      console.log(`Receiver not mounted: ${path}`);\r\n    }\r\n  }\r\n\r\n  static triggerRendering(component) {\r\n    const { path, runtime } = component.props;\r\n    TraceLogHelper.dumpRenderTriggeredToTrace(path, runtime.traceLogBuffer, runtime.replayStepMonitor);\r\n    component.setState(previousState => RenderingHelper.buildCounterState(previousState));\r\n  }\r\n\r\n  static buildCounterState(previousState) {\r\n    const oldUpdateCount = previousState === null ? 0 : previousState.updateCount;\r\n    return {\r\n      updateCount: RenderingHelper.incrementCount(oldUpdateCount)\r\n    };\r\n  }\r\n\r\n  static incrementCount(oldCount) {\r\n    return oldCount === undefined || oldCount > 10000 ? 1 : (oldCount + 1);\r\n  }\r\n\r\n  /**\r\n   * Split a text containing line breaks into an array of spans separated with breaks.\r\n   * \r\n   * @param {*} text Text containing line breaks.\r\n   */\r\n  static extractMultilineText(text) {\r\n    return text.split('\\r\\n').map((line, index) => (\r\n      // Use the index plus the text of the line to be displayed as key. If the text is too long just use the index and and a hash of the line.\r\n      <span key={line.length > 32 ? `${index}_${RenderingHelper.hash64(line)}` : `${index}_${line}`}>\r\n        {line}\r\n        <br />\r\n      </span>\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * Calculate a 32 bit FNV-1a hash\r\n   * Found here: https://gist.github.com/vaiorabbit/5657561\r\n   * Ref.: http://isthe.com/chongo/tech/comp/fnv/\r\n   *\r\n   * @param {string} str the input value\r\n   * @returns {string}\r\n  */\r\n  static hashFnv32a(str) {\r\n    let hval = 0x811c9dc5;\r\n\r\n    for (let i = 0; i < str.length; i += 1) {\r\n      // eslint-disable-next-line no-bitwise\r\n      hval ^= str.charCodeAt(i);\r\n      // eslint-disable-next-line no-bitwise\r\n      hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);\r\n    }\r\n    // Convert to 8 digit hex string\r\n    // eslint-disable-next-line no-bitwise\r\n    return (`0000000${(hval >>> 0).toString(16)}`).substr(-8);\r\n  }\r\n\r\n  /**\r\n   * Calculate a simple 64 bit hash to reduce collision probability.\r\n   * \r\n   * @param {String} string to be hashed \r\n   */\r\n  static hash64(str) {\r\n    const shortHash = RenderingHelper.hashFnv32a(str);\r\n    return shortHash + RenderingHelper.hashFnv32a(shortHash + str);\r\n  }\r\n\r\n  /**\r\n   * Checks for registered actions and applies them to the component.\r\n   * Once the actions were applied we clear them from the register.\r\n   * @param {*} component the component instance \r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure\r\n   */\r\n  static applyRegisteredActions(component, indexPath, runtime) {\r\n    if (runtime.actionRegister.hasActionsRegisteredForPath(indexPath)) {\r\n      runtime.actionRegister.getRegisteredActionsForPath(indexPath).forEach(action => component[action].call());\r\n      runtime.actionRegister.clearRegisteredActionsForPath(indexPath);\r\n    }\r\n  }\r\n\r\n}\r\n","import RenderingHelper from '../components/RenderingHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport IndexPathHelper from './IndexPathHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\n\r\n/**\r\n * General helper methods to manage the component's registered state.\r\n*/\r\nexport default class ComponentStateHelper {\r\n\r\n  // ----------- public API ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the 'path' state of the given component.\r\n   */\r\n  static getState(component) {\r\n    return component.props.runtime.componentStateManager.findOrBuildStateForPathId(component.props.path, component.props.runtime);\r\n  }\r\n\r\n  /**\r\n   * Register the 'path' state for the given component.\r\n   */\r\n  static registerState(component, fullState) {\r\n    const { runtime } = component.props;\r\n    runtime.componentStateManager.registerStateByPathId(component.props.path, fullState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Get an attribute from the 'path' state of the component specified by a user defined path (without path root).\r\n   */\r\n  static getStateAttributeByUserDefPath(getter, userDefPath, runtime) {\r\n    const fullState = runtime.componentStateManager.findOrBuildStateByUserDefPath(userDefPath, runtime);\r\n    return getter(fullState);\r\n  }\r\n\r\n  /**\r\n   * Get an attribute from the 'path' state of the component specified by a  path id.\r\n   */\r\n  static getStateAttributeByPathId(getter, indexPath, runtime) {\r\n    const fullState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    return getter(fullState);\r\n  }\r\n\r\n  /**\r\n   * Update an attribute in the 'path' state of the component specified by a path (with path root).\r\n   */\r\n  static updateStateAttribute(getter, setter, newValue, pathId, runtime, triggerRendering) {\r\n    const stateManager = runtime.componentStateManager;\r\n    const fullState = stateManager.findOrBuildStateForPathId(pathId, runtime);\r\n    const oldValue = getter(fullState);\r\n    if (oldValue !== newValue) {\r\n      setter(fullState, newValue);\r\n      stateManager.registerStateByPathId(pathId, fullState, runtime);\r\n      if (triggerRendering) {\r\n        RenderingHelper.triggerRenderingViaPath(pathId, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an attribute in the 'path' state of the component specified by a user defined path (without path root).\r\n   */\r\n  static updateStateAttributeByUserDefPath(getter, setter, newValue, userDefPath, runtime, triggerRendering) {\r\n    const stateManager = runtime.componentStateManager;\r\n    const fullState = stateManager.findOrBuildStateByUserDefPath(userDefPath, runtime);\r\n    const oldValue = getter(fullState);\r\n    if (oldValue !== newValue) {\r\n      setter(fullState, newValue);\r\n      stateManager.registerStateByUserDefPath(userDefPath, fullState, runtime);\r\n      if (triggerRendering) {\r\n        RenderingHelper.triggerRenderingViaUserDefPath(userDefPath, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build an array describing the state of all components in the specified task.\r\n   */\r\n  static buildComponentsSnapshot(test, item, task, runtime) {\r\n    const { componentStateManager, componentDirectory } = runtime;\r\n    return ComponentStateHelper.formatSnapshotDump(componentStateManager.getTaskSnapshot(test, item, task, componentDirectory), runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Return all indexPath keys in the current task that already exist in the ComponentStateManager\r\n   * and belong to a component instance that has the given component type.\r\n   * \r\n   * @param {String} componentType : The component type that must match.\r\n   * @param {*} runtime The common runtime context structure. \r\n   * @return {[String]} The matching indexPath keys.\r\n   */\r\n  static findIndexPathsInCurrentTaskOfComponentWithType(componentType, runtime) {\r\n    const { componentStateManager, taskManager } = runtime;\r\n    const rootInRuntime = taskManager.getCurrentStatePathRoot();\r\n    return componentStateManager.filterExistingPathIds(id => IndexPathHelper.getRootFromPath(id) === rootInRuntime\r\n      && ComponentStateHelper.getComponentTypeForIndexPath(id, runtime) === componentType);\r\n  }\r\n\r\n  /**\r\n   * Return all indexPath keys that already exist in the ComponentStateManager \r\n   * and are descendants of the given parent index path key.\r\n   * \r\n   * @param {String} parentIndexPath The indexPath key of the parent component.\r\n   * @param {*} runtime The common runtime context structure. \r\n   * @return {[String]} The matching indexPath keys.\r\n   */\r\n  static findIndexPathsOfDescendants(parentIndexPath, runtime) {\r\n    const parentPrefix = `${parentIndexPath}/`;\r\n    return runtime.componentStateManager.filterExistingPathIds(id => id.startsWith(parentPrefix));\r\n  }\r\n\r\n  // ----------- private stuff ----------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Enrich and restructure the data from the component state manager to be useful in the trace log. \r\n   * \r\n   * @param {*} taskData The task's data from the component state manager to be 'formatted' for dumping it to the trace log.\r\n   */\r\n  static formatSnapshotDump(taskData, runtime) {\r\n    return Object.entries(taskData).map(entry => ComponentStateHelper.formatEntryForSnapshotDump(entry, runtime));\r\n  }\r\n\r\n  static formatEntryForSnapshotDump(entry, runtime) {\r\n    const [indexPath, componentState] = entry;\r\n\r\n    // drop deepCopy state\r\n    componentState.deepCopy = undefined;\r\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\r\n\r\n    return {\r\n      indexPath,\r\n      userDefIdPath,\r\n      userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\r\n      componentType: ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime),\r\n      componentState\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find the display component type of the component specified by the given index path.\r\n   * \r\n   * The method assumes that the index path belongs to the currently loaded task (and therefore to the currently loaded item).\r\n   * Otherwise it will match the page segment with a wrong page in the page configurations manager. \r\n   * \r\n   * We return the type name specified in the item configuration \r\n   * (i.e. not necessarily the component's class name).\r\n   */\r\n  static getComponentTypeForIndexPath(indexPath, runtime) {\r\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(indexPath);\r\n    if (pageSegment === undefined) {\r\n      return undefined;\r\n    }\r\n    const componentConfiguration = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    return componentConfiguration === undefined ? undefined : componentConfiguration.type;\r\n  }\r\n\r\n}\r\n","export default class PageHistoryHelper {\r\n\r\n  static goBack(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.currentCanGoBack(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      pagesState.current -= 1;\r\n      PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n    }\r\n  }\r\n\r\n  static goForward(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.currentCanGoForward(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      pagesState.current += 1;\r\n      PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n    }\r\n  }\r\n\r\n  static canGoBack(path, runtime) {\r\n    return PageHistoryHelper.currentCanGoBack(PageHistoryHelper.getHistoryState(path, runtime));\r\n  }\r\n\r\n  static canGoForward(path, runtime) {\r\n    return PageHistoryHelper.currentCanGoForward(PageHistoryHelper.getHistoryState(path, runtime));\r\n  }\r\n\r\n  static currentCanGoBack(historyState) {\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      return pagesState !== undefined && pagesState.current !== undefined && PageHistoryHelper.getRelevantPagesState(historyState).current > 0;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static currentCanGoForward(historyState) {\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      return pagesState !== undefined && pagesState.current !== undefined && pagesState.current < pagesState.pages.length -1;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static goHome(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      if (pagesState !== undefined && pagesState.current !== undefined) {\r\n        pagesState.current = 0;\r\n        PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  static getPage(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      return PageHistoryHelper.getCurrentPageFromPagesState(PageHistoryHelper.getRelevantPagesState(historyState));\r\n    } else if (PageHistoryHelper.isHistoryModeSinglePage(historyState)) {\r\n      return historyState.history.page;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  static getCurrentPageFromPagesState(pagesState) {\r\n    return (pagesState === undefined || pagesState.current === undefined) ? undefined : pagesState.pages[pagesState.current];\r\n  }\r\n\r\n  static getRelevantPagesState(historyState) {\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      const tabName = historyState.history.currentTab;\r\n      if (tabName === undefined) {\r\n        return undefined;\r\n      } else {\r\n        return historyState.history.withTabs[tabName];\r\n      }\r\n    } else if (PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      return historyState.history.noTabs;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  static getTab(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    return PageHistoryHelper.isHistoryModeWithTabs(historyState) ? historyState.history.currentTab : undefined;\r\n  }\r\n\r\n  static getAllTabs(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    return PageHistoryHelper.isHistoryModeWithTabs(historyState) ? historyState.history.allTabs : [];\r\n  }\r\n\r\n  static getImageForTab(tabName, path, runtime) {\r\n    const pageInfo = PageHistoryHelper.getCurrentPageInfoForTab(tabName, path, runtime);\r\n    return pageInfo === undefined ? undefined : pageInfo.image;\r\n  }\r\n\r\n  static switchTab(tabName, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      if (historyState.history.withTabs[tabName] !== undefined) {\r\n        historyState.history.currentTab = tabName;\r\n        PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  static closeTab(tabName, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      if (historyState.history.withTabs[tabName] !== undefined) {\r\n        const currentIndex = historyState.history.allTabs.indexOf(tabName);\r\n        if (currentIndex !== 0) {\r\n          const currentTab = PageHistoryHelper.getTab(path, runtime);\r\n          if (currentTab === tabName) {\r\n            historyState.history.currentTab = historyState.history.allTabs[currentIndex - 1];\r\n          }\r\n\r\n          historyState.history.allTabs.splice(currentIndex, 1);\r\n          delete historyState.history.withTabs[tabName];\r\n          PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n        } else {\r\n          console.log(\"Closing first tab not possible\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static addPage(pageName, pageUrl, tabConfig, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    const { image: pageImage } = tabConfig;\r\n    if (historyState === undefined) {\r\n      console.error(`History state missing when trying to add page ${pageName} to state of ${path}`);\r\n    }\r\n    switch (historyState.historyMode) {\r\n      case PageHistoryHelper.Modes.withTabsMode:\r\n        PageHistoryHelper.addPageToWithTabsHistory(pageName, pageUrl, tabConfig, historyState);\r\n        break;\r\n      case PageHistoryHelper.Modes.noTabsMode:\r\n        PageHistoryHelper.addPageToNoTabsHistory(pageName, pageUrl, pageImage, historyState);\r\n        break;\r\n      case PageHistoryHelper.Modes.singlePageMode:\r\n        historyState.history.page = {\r\n          name: pageName,\r\n          url: pageUrl,\r\n          image: pageImage\r\n        };\r\n        break;\r\n      default:\r\n        console.error(`Invalid mode type ${historyState.historyMode}`);\r\n        break;\r\n    }\r\n\r\n    PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n  }\r\n\r\n  static addPageToWithTabsHistory(pageName, pageUrl, tabConfig, historyState) {\r\n    const { history } = historyState;\r\n    const { name: tabName, image: pageImage, closable, width: tabWidth } = tabConfig;\r\n    history.currentTab = tabName;\r\n    if (history.withTabs === undefined) {\r\n      history.withTabs = {};\r\n    }\r\n    if (history.allTabs === undefined) {\r\n      history.allTabs = [];\r\n    }\r\n    const { withTabs } = history;\r\n    if (withTabs[tabName] === undefined) {\r\n      withTabs[tabName] = PageHistoryHelper.createPagesState(pageName, pageUrl, pageImage, closable, tabWidth);\r\n      history.allTabs.push(tabName);\r\n    } else {\r\n      withTabs[tabName].closable = closable;\r\n      withTabs[tabName].tabWidth = tabWidth;\r\n      PageHistoryHelper.addPageToPagesState(pageName, pageUrl, pageImage, withTabs[tabName]);\r\n    }\r\n  }\r\n\r\n  static addPageToNoTabsHistory(pageName, pageUrl, pageImage, historyState) {\r\n    if (historyState.history.noTabs === undefined) {\r\n      historyState.history.noTabs = PageHistoryHelper.createPagesState(pageName, pageUrl, pageImage, false, 0);\r\n    } else {\r\n      PageHistoryHelper.addPageToPagesState(pageName, pageUrl, pageImage, historyState.history.noTabs);\r\n    }\r\n  }\r\n\r\n  static createPagesState(pageName, pageUrl, pageImage, closable = true, tabWidth = 100) {\r\n    return {\r\n      current: 0,\r\n      closable,\r\n      tabWidth,\r\n      pages: [{\r\n        name: pageName,\r\n        url: pageUrl,\r\n        image: pageImage\r\n      }]\r\n    }\r\n  }\r\n\r\n  static addPageToPagesState(pageName, pageUrl, pageImage, pagesState) {\r\n\r\n    // do not change our history if the currently selected page is to be added once more\r\n    const currentPage = PageHistoryHelper.getCurrentPageFromPagesState(pagesState);\r\n    if (currentPage !== undefined\r\n      && currentPage.name === pageName\r\n      && currentPage.url === pageUrl\r\n      && currentPage.image === pageImage) {\r\n      return;\r\n    }\r\n\r\n    if (pagesState.current === undefined) {\r\n      pagesState.current = -1;\r\n    }\r\n    if (pagesState.pages === undefined) {\r\n      pagesState.pages = [];\r\n    }\r\n\r\n    pagesState.current += 1;\r\n    pagesState.pages[pagesState.current] = {\r\n      name: pageName,\r\n      url: pageUrl,\r\n      image: pageImage\r\n    };\r\n\r\n    let pageIndex;\r\n    for (pageIndex = pagesState.pages.length - 1; pageIndex > pagesState.current; pageIndex -= 1) {\r\n      pagesState.pages.pop();\r\n    }\r\n  }\r\n\r\n  static getInfoForTab(tabName, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n\r\n    if (!PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      return undefined;\r\n    }\r\n\r\n    return historyState.history.withTabs[tabName];\r\n  }\r\n\r\n  static getCurrentPageInfoForTab(tabName, path, runtime) {\r\n    const tabInfo = PageHistoryHelper.getInfoForTab(tabName, path, runtime);\r\n    return tabInfo === undefined ? undefined : tabInfo.pages[tabInfo.current];\r\n  }\r\n\r\n  static isHistoryModeSinglePage(historyState) {\r\n    return historyState !== undefined && historyState.historyMode === PageHistoryHelper.Modes.singlePageMode;\r\n  }\r\n\r\n  static isHistoryModeNoTabs(historyState) {\r\n    return historyState !== undefined && historyState.historyMode === PageHistoryHelper.Modes.noTabsMode;\r\n  }\r\n\r\n  static isHistoryModeWithTabs(historyState) {\r\n    return historyState !== undefined && historyState.historyMode === PageHistoryHelper.Modes.withTabsMode;\r\n  }\r\n\r\n  static hasStateWithoutPageHistory(path, runtime) {\r\n    const fullState = runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n    return fullState !== undefined && fullState.pageHistory === undefined;\r\n  }\r\n\r\n  static getHistoryState(path, runtime) {\r\n    const fullState = PageHistoryHelper.getFullState(path, runtime);\r\n    return fullState.pageHistory\r\n  }\r\n\r\n  static initializeHistoryState(withHistory, withTabs, fullState) {\r\n    const historyMode = PageHistoryHelper.getHistoryModeKey(withHistory, withTabs);\r\n    const pageHistory = {\r\n      historyMode,\r\n    }\r\n\r\n    switch (historyMode) {\r\n      case PageHistoryHelper.Modes.withTabsMode:\r\n        pageHistory.history = {\r\n          currentTab: undefined,\r\n          allTabs: [],\r\n          withTabs: {}\r\n        };\r\n        break;\r\n      case PageHistoryHelper.Modes.noTabsMode:\r\n        pageHistory.history = {\r\n          noTabs: {}\r\n        };\r\n        break;\r\n      case PageHistoryHelper.Modes.singlePageMode:\r\n        pageHistory.history = {\r\n          page: undefined,\r\n        };\r\n        break;\r\n      default:\r\n        console.error(`Invalid mode type ${historyMode}`);\r\n    }\r\n\r\n    fullState.pageHistory = pageHistory;\r\n  }\r\n\r\n  static getHistoryModeKey(withHistory, withTabs) {\r\n    if (withHistory) {\r\n      return withTabs ? PageHistoryHelper.Modes.withTabsMode : PageHistoryHelper.Modes.noTabsMode;\r\n    }\r\n    return PageHistoryHelper.Modes.singlePageMode;\r\n  }\r\n\r\n  static Modes = {\r\n    withTabsMode: 'withTabs',\r\n    noTabsMode: 'noTabs',\r\n    singlePageMode: 'singlePage',\r\n  }\r\n\r\n  static setHistoryState(state, path, runtime) {\r\n    const fullState = PageHistoryHelper.getFullState(path, runtime);\r\n    fullState.pageHistory = state;\r\n    PageHistoryHelper.setFullState(fullState, path, runtime);\r\n  }\r\n\r\n\r\n  static getFullState(path, runtime) {\r\n    return runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n  }\r\n\r\n  static setFullState(state, path, runtime) {\r\n    return runtime.componentStateManager.registerStateByPathId(path, state, runtime);\r\n  }\r\n\r\n}\r\n","import PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\n\r\n/**\r\n * Manage the list of bookmarks maintained by a CbaPageArea display component instance.\r\n */\r\nexport default class BookmarkHelper {\r\n\r\n  // ------- public API ------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Add a page as bookmark to the list of bookmarks maintained by a CbaPageArea.\r\n   * \r\n   * The method will silently ignore the call if a bookmark with the given page name already exists.\r\n   * \r\n   * @param {String} path The index path of the CbaPageArea hosting the bookmarks list.\r\n   * @param {String} pageName The name of the page to add to the bookmarks list.\r\n   * @param {String} pageUrl The URL of the page to add to the bookmarks list.\r\n   * @param {String} pageTab The tab of the page to add to the bookmarks list.\r\n   * @param {String} pageImage The image of the page to add to the bookmarks list.\r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the component requesting to add the bookmark (for tracing purposes).\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static addBookmark(path, pageName, pageUrl, pageTab, pageImage, triggeringType, requestingComponentPath, runtime) {\r\n    const bookmarkState = BookmarkHelper.getBookmarkState(path, runtime);\r\n    const bookmarks = bookmarkState.bookmarkEntries;\r\n    if (bookmarks.find(value => value.pageName === pageName) === undefined) {\r\n      bookmarks.push({\r\n        pageName,\r\n        pageUrl,\r\n        pageTab,\r\n        pageImage\r\n      });\r\n      BookmarkHelper.setBookmarkState(bookmarkState, path, runtime);\r\n      BookmarkHelper.trace(triggeringType, 'add', requestingComponentPath, path, pageName, pageUrl, pageTab, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop a bookmark from the list of bookmarks maintained by a CbaPageArea.\r\n   * \r\n   * The method will silently ignore the call if no bookmark with the given page name exists.\r\n   * \r\n   * @param {*} path The index path of the CbaPageArea hosting the bookmarks list.\r\n   * @param {*} pageName The name of the page to drop from the bookmarks list.\r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {*} requestingComponentPath The index path of the component requesting to drop the bookmark (for tracing purposes).\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static dropBookmark(path, pageName, triggeringType, requestingComponentPath, runtime) {\r\n    const bookmarkState = BookmarkHelper.getBookmarkState(path, runtime);\r\n    const { bookmarkEntries } = bookmarkState;\r\n    const indexToDrop = bookmarkEntries.findIndex(entry => entry.pageName === pageName);\r\n    if (indexToDrop !== -1) {\r\n      const pageToDrop = bookmarkEntries[indexToDrop];\r\n      bookmarkEntries.splice(indexToDrop, 1);\r\n      BookmarkHelper.setBookmarkState(bookmarkState, path, runtime);\r\n      BookmarkHelper.trace(triggeringType, 'drop', requestingComponentPath, path, pageToDrop.pageName, pageToDrop.pageUrl, pageToDrop.pageTab, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the list of bookmarks maintained by a CbaPageArea.\r\n   * \r\n   * @param {*} path The index path of the CbaPageArea hosting the bookmarks list.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @return {[*]} A copy of the list of bookmarks maintained by CbaPageArea.\r\n   */\r\n  static getBookmarks(path, runtime) {\r\n    const bookmarkState = BookmarkHelper.getBookmarkState(path, runtime);\r\n    return bookmarkState.bookmarkEntries.map(entry => entry);\r\n  }\r\n\r\n  // ------- internal stuff ------------------------------------------------------------------------\r\n\r\n  static getBookmarkState(path, runtime) {\r\n    const fullState = BookmarkHelper.getFullState(path, runtime);\r\n    if (fullState.bookmarkState === undefined) {\r\n      BookmarkHelper.initializeBookmarkState(fullState);\r\n    }\r\n    return fullState.bookmarkState;\r\n  }\r\n\r\n  static initializeBookmarkState(fullState) {\r\n    fullState.bookmarkState = {\r\n      bookmarkEntries: []\r\n    }\r\n  }\r\n\r\n  static setBookmarkState(state, path, runtime) {\r\n    const fullState = BookmarkHelper.getFullState(path, runtime);\r\n    fullState.bookmarkState = state;\r\n    BookmarkHelper.setFullState(fullState, path, runtime);\r\n  }\r\n\r\n  static getFullState(path, runtime) {\r\n    return runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n  }\r\n\r\n  static setFullState(state, path, runtime) {\r\n    return runtime.componentStateManager.registerStateByPathId(path, state, runtime);\r\n  }\r\n\r\n  /**\r\n   * Create a trace log entry.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu'\r\n   * @param {String} operationType The operation type to trace: add, drop\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance.\r\n   * @param {String} ownerIndexPath The index path of the display component owining the bookmarks.\r\n   * @param {String} pageName The name pf the page of the bookmark.\r\n   * @param {String} pageUrl The URL pf the page of the bookmark.\r\n   * @param {String} tab The browser tab the bookmark operates on.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static trace(triggeringType, operationType, triggeringIndexPath, ownerIndexPath, pageName, pageUrl, tab, runtime) {\r\n    const triggeringUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(triggeringIndexPath, runtime);\r\n    const ownerUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(ownerIndexPath, runtime);\r\n    runtime.traceLogBuffer.reportEvent(\r\n      'Bookmark',\r\n      new Date(),\r\n      {\r\n        triggerType: triggeringType,\r\n        triggerIndexPath: triggeringIndexPath,\r\n        triggerUserDefIdPath: triggeringUserDefPath,\r\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggeringUserDefPath),\r\n        operation: operationType,\r\n        ownerIndexPath,\r\n        ownerUserDefIdPath: ownerUserDefPath,\r\n        ownerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(ownerUserDefPath),\r\n        pageName,\r\n        pageUrl,\r\n        tab\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './WebTab.css';\r\n\r\nconst WebTab = (props) => {\r\n  const { tabName, closeTab, isActive, onClick, icon, width, closable } = props;\r\n\r\n  const webTabClass = `webTab ${isActive ? \"active\" : \"\"}`;\r\n  const webTabStyle = {\r\n    width\r\n  };\r\n\r\n  return (\r\n    <div title={tabName} className={webTabClass} onClick={onClick} style={webTabStyle}>\r\n      {icon === undefined ? undefined : <img src={icon} alt=\"\" height=\"100%\" width=\"auto\" />}\r\n      <span>{tabName}</span>\r\n      <i className={closable ? \"show\" : \"hide\"} onClick={closeTab} />\r\n    </div>\r\n  )\r\n}\r\n\r\nWebTab.propTypes = {\r\n  tabName: PropTypes.string.isRequired,\r\n  closeTab: PropTypes.func.isRequired,\r\n  isActive: PropTypes.bool.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  closable: PropTypes.bool.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  icon: PropTypes.string,\r\n}\r\n\r\nWebTab.defaultProps = {\r\n  icon: undefined\r\n};\r\n\r\nexport default WebTab;\r\n","import PageHistoryHelper from \"../PageHistoryHelper\";\r\n\r\nexport default class WebToolbarHelper {\r\n\r\n  static showMoreButtonWidth = 40;\r\n\r\n  static containerMarginWidth = 10;\r\n\r\n  /**\r\n   * Method continaing logic for top up, returns the next hidden tab to be displayed\r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String[]} displayTabs All tabs being displayed \r\n   * @param {Boolean} isInFirstHalf The fact that the tab is in the first half\r\n   * \r\n   * @returns {String} Tab name\r\n   */\r\n  static getNextTopUpTab(allTabs, displayTabs, isInFirstHalf) {\r\n    const leftVisibleTab = displayTabs[0];\r\n    const leftHiddenIndex = allTabs.indexOf(leftVisibleTab) - 1;\r\n    const leftTab = leftHiddenIndex !== -1 ? allTabs[leftHiddenIndex] : undefined;\r\n\r\n    const rightVisibleTab = displayTabs[displayTabs.length - 1];\r\n    const rightHiddenIndex = allTabs.indexOf(rightVisibleTab) + 1;\r\n    const rightTab = rightHiddenIndex === 0 ? undefined : allTabs[rightHiddenIndex];\r\n\r\n    const tab = isInFirstHalf\r\n      ? (leftTab || rightTab)\r\n      : (rightTab || leftTab);\r\n\r\n    return tab || null;\r\n  }\r\n\r\n  /**\r\n   * Method determining if the current tab is in the first part of the spectrum\r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String} currentTab Current tab of the toolbar\r\n   * \r\n   * @returns {Boolean} true/false\r\n   */\r\n  static isCurrentInFirstHalf(allTabs, currentTab) {\r\n    const indexOfCurrentTab = allTabs.indexOf(currentTab);\r\n    return indexOfCurrentTab < allTabs.length / 2;\r\n  }\r\n\r\n  /**\r\n   * Method implementing the top up operation\r\n   * @param {String[]} displayTabs All tabs being displayed \r\n   * @param {String[]} hiddenTabs All tabs being hidden \r\n   * @param {String} newTab The new tab to be topped up\r\n   * @param {Number} tabWidth The new tab width\r\n   * @param {Number} displayTabsWidth Width of display tabs\r\n   * @param {String} operation Operation to be implemented on the array (unshift/push)\r\n   * \r\n   * @returns {Number} New width of the display tabs\r\n   */\r\n  static topUpTabs(displayTabs, hiddenTabs, newTab, tabWidth, displayTabsWidth, operation) {\r\n    const newWidth = displayTabsWidth + tabWidth;\r\n\r\n    hiddenTabs.splice(hiddenTabs.indexOf(newTab), 1);\r\n    displayTabs[operation](newTab);\r\n\r\n    return newWidth;\r\n  }\r\n\r\n  /**\r\n   * Method handling overflow of tabs\r\n   * @param {String[]} allTabsInfo All toolbar tabs\r\n   * @param {Number} totalWidth Total width of the rendered toolbar\r\n   * \r\n   * @returns {Boolean} true/false\r\n   */\r\n  static exceedsMaxTabsWidth(allTabsInfo, totalWidth) {\r\n    const totalTabsWidth = allTabsInfo.reduce((accum, reducer) => reducer.tabWidth + accum, 0);\r\n\r\n    return totalTabsWidth > totalWidth;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {String[]} displayTabs All tabs being displayed \r\n   * @param {String[]} hiddenTabs All tabs being hidden \r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String} currentTab Current tab of the toolbar\r\n   * @param {Object} tabDict The current tab dictionary\r\n   * @param {Number} totalWidth Total width of the rendered toolbar\r\n   * \r\n   * \r\n   * @returns {Object} Object of the form { displayTabs, hiddenTabs }\r\n   */\r\n  static topUpDisplayTabs(displayTabs, hiddenTabs, allTabs, currentTab, tabDict, totalWidth) {\r\n    let displayTabsWidth = displayTabs.reduce((accum, reducer) => accum + tabDict[reducer].width, 0);\r\n    const isInFirstHalf = WebToolbarHelper.isCurrentInFirstHalf(allTabs, currentTab);\r\n\r\n    while (totalWidth > displayTabsWidth && hiddenTabs.length > 0) {\r\n      const nextTab = WebToolbarHelper.getNextTopUpTab(allTabs, displayTabs, isInFirstHalf);\r\n      const tabWidth = nextTab && tabDict[nextTab].width;\r\n\r\n      if (nextTab && hiddenTabs.indexOf(nextTab) !== -1 && totalWidth > tabWidth + displayTabsWidth) {\r\n        const operation = allTabs.indexOf(nextTab) < allTabs.indexOf(displayTabs[0]) ? \"unshift\" : \"push\";\r\n        displayTabsWidth = WebToolbarHelper.topUpTabs(displayTabs, hiddenTabs, nextTab, tabWidth, displayTabsWidth, operation);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return {\r\n      displayTabs,\r\n      hiddenTabs\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String} currentTab Current tab of the toolbar\r\n   * @param {Object} tabDict The current tab dictionary\r\n   * @param {Number} totalTabsMaxWidth Total width of the rendered toolbar\r\n   * \r\n   * @returns {Object} Object of the form { displayTabs, hiddenTabs }\r\n   */\r\n  static buildDisplayTabs(allTabs, currentTab, tabDict, totalTabsMaxWidth) {\r\n    const displayTabs = [];\r\n    const hiddenTabs = [];\r\n    const scoreArray = [];\r\n    const indexOfCurrentTab = allTabs.indexOf(currentTab);\r\n\r\n    // build score array representing the total width accumulated until the end of the tab\r\n    allTabs.reduce((accum, reducer) => {\r\n      const accumulatedWidth = accum + tabDict[reducer].width;\r\n      scoreArray.push(accumulatedWidth);\r\n      return accumulatedWidth;\r\n    }, 0);\r\n\r\n    let lowerLimit;\r\n    let upperLimit;\r\n    const currentTabScore = scoreArray[indexOfCurrentTab];\r\n\r\n    if (WebToolbarHelper.isCurrentInFirstHalf(allTabs, currentTab)) {\r\n      lowerLimit = currentTabScore - tabDict[currentTab].width;\r\n      upperLimit = lowerLimit + totalTabsMaxWidth;\r\n    } else {\r\n      upperLimit = currentTabScore;\r\n      lowerLimit = currentTabScore - totalTabsMaxWidth;\r\n    }\r\n\r\n    scoreArray.forEach((tabScore, index) => {\r\n      const tabWidth = tabDict[allTabs[index]].width;\r\n      if (tabScore - tabWidth < lowerLimit || tabScore > upperLimit) {\r\n        hiddenTabs.push(allTabs[index]);\r\n      } else {\r\n        displayTabs.push(allTabs[index]);\r\n      }\r\n    });\r\n\r\n    return {\r\n      hiddenTabs,\r\n      displayTabs\r\n    };\r\n  }\r\n\r\n  static buildTabDictionary = (allTabs, allTabsInfo) => {\r\n    const tabDict = {};\r\n    allTabs.forEach((tabName, idx) => {\r\n      tabDict[tabName] = {\r\n        width: allTabsInfo[idx].tabWidth,\r\n        index: idx\r\n      }\r\n    });\r\n\r\n    return tabDict;\r\n  }\r\n\r\n  static getAllTabsInfo = (allTabs, parentPath, runtime) => allTabs.map(tabName => PageHistoryHelper.getInfoForTab(tabName, parentPath, runtime));\r\n\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ContextMenuTrigger, ContextMenu, MenuItem, SubMenu, hideMenu } from 'react-contextmenu';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\n\nimport './MenuItemTree.css';\nimport TraceLogHelper from '../state/TraceLogHelper';\n\n/**\n * Display a context menu with optional sub menues.\n * \n * Other components will create instances of this component explicitly by calling one of the static factory methods.\n * We don't use this component as component type in the page config structure, it is not known to the CbaInterpreter etc.\n * \n * The component does not keep state in the ComponentStateManager and does not register in the ComponentDirectory.\n * The component is registered by the LoggedInView as a runtime global component beacuase it is a singleton and is available with different configurations throughout the app\n */\nexport default class MenuItemTree extends Component {\n\n  constructor() {\n    super();\n    this.contextTrigger = React.createRef();\n  }\n\n  // ----- public API ----------------------------------------------------------------------\n\n  /**\n   * Logic for getting the bounding element of the menu trigger\n   * \n   * @param {*} event The event which triggers the menu \n   */\n  static buildTriggerBoundingRect(event) {\n    const buttonElement = event.target.nodeName === \"SPAN\" ? event.target.parentNode.parentNode : event.target;\n    return buttonElement.getBoundingClientRect();\n  }\n\n  /**\n   * closes the context menu if it is open.\n   */\n  static closeMenuItemTree() {\n    hideMenu();\n  }\n\n  /**\n   * Open a menu item tree instance for a static menu configuration. \n   * \n   * @param {*} staticMenuConfig The configuration for the menu item tree.\n   */\n  openMenuItemTree(staticMenuConfig) {\n    const { runtime } = this.props;\n\n    this.setState({\n      entries: staticMenuConfig.entries\n    }, () => {\n      this.contextTrigger.current.handleContextClick(staticMenuConfig.event);\n    });\n    TraceLogHelper.dumpContextMenuTriggeredToTrace(staticMenuConfig, true, runtime.traceLogBuffer, runtime.replayStepMonitor);\n  }\n\n  /**\n   * Open a menu item tree instance for a menu configuration that might\n   * contain entries with type 'dynamicItems'. \n   * \n   * @param {*} staticMenuConfig The configuration for the menu item tree.\n   */\n  openMenuItemTreeWithDynamicConfig(dynamicMenuConfig) {\n    dynamicMenuConfig.event.persist();\n    const staticConfig = {\n      event: dynamicMenuConfig.event,\n      entries: MenuItemTree.transformDynamicEntries(dynamicMenuConfig.entries)\n    }\n    this.openMenuItemTree(staticConfig);\n  }\n\n  // ----- private stuff --------------------------------------------------------------------\n  /**\n   * Transform a list of item entries by expanding each entry of type 'dynamicItems'\n   * in a list of entry items without type 'dynmicItems'.\n   */\n  static transformDynamicEntries(dynamicEntries) {\n    const result = [];\n    dynamicEntries.forEach((entry) => {\n      switch (entry.type) {\n        case 'dynamicItems':\n          MenuItemTree.expandDynamicEntry(entry).forEach((replacementEntry) => { result.push(replacementEntry) });\n          break;\n        case 'submenu':\n        {\n          const transformedCopy = {};\n          Object.keys(entry).forEach((attribute) => {\n            transformedCopy[attribute] = entry[attribute];\n          })\n          transformedCopy.submenu = MenuItemTree.transformDynamicEntries(entry.submenu);\n          result.push(transformedCopy);\n          break;\n        }\n        default:\n          result.push(entry);\n      }\n    });\n    return result;\n  }\n\n\n  /**\n   * Transform an entry of type 'dynamicItems' in a list of entries that are not\n   * of type 'dynamicItems'.\n   */\n  static expandDynamicEntry(entry) {\n    return entry.provider(entry.providerParam);\n  }\n\n  state = {\n    entries: []\n  }\n\n  handleItemClick(entry, event) {\n    const { runtime } = this.props;\n    entry.action(event);\n    CommonActionsHelper.sendEvent(entry.event, runtime);\n  }\n\n  buildEntries(entries) {\n    const { runtime } = this.props;\n    return entries.map((entry, i) => {\n      const key = `${entry.type}-${entry.label}-${i}`;\n      const wrapStyle = {\n        display: \"flex\",\n        alignItems: \"center\",\n        minHeight: \"15px\"\n      };\n      const itemAttributes = {\n        title: entry.mouseOver,\n        style: wrapStyle\n      };\n      const imagePath = entry.icon ? CommonConfigHelper.getProperResourcePath(entry.icon, runtime) : null;\n\n      switch (entry.type) {\n        case \"action\":\n          return (\n            <MenuItem key={key} onClick={event => this.handleItemClick(entry, event)} attributes={itemAttributes} disabled={entry.disabled}>\n              <MenuItemTreeIcon disabled={entry.disabled} imagePath={imagePath} altText={`${entry.label}-icon`} />\n              {entry.label}\n            </MenuItem>\n          );\n        case \"separator\":\n          return <MenuItem key={key} divider />;\n        case \"submenu\":\n          return (\n            <SubMenu key={key} title={entry.label} disabled={entry.disabled}>\n              {this.buildEntries(entry.submenu)}\n            </SubMenu>\n          )\n        default: return null;\n      }\n    })\n  }\n\n  onMenuHide = () => {\n    const { runtime } = this.props;\n    runtime.replayStepMonitor.incrementReplayStep();\n    TraceLogHelper.dumpContextMenuTriggeredToTrace({}, false, runtime.traceLogBuffer, runtime.replayStepMonitor);\n  }\n\n  render() {\n    const { entries } = this.state;\n\n    return (\n      <div className={`contextMenu ${entries.length === 0 ? 'hidden' : ''}`}>\n        <ContextMenuTrigger id=\"contextMenu\" ref={this.contextTrigger}>\n          <div />\n        </ContextMenuTrigger>\n        <ContextMenu id=\"contextMenu\" onHide={this.onMenuHide}>\n          {this.buildEntries(entries)}\n        </ContextMenu>\n      </div>\n    );\n  }\n\n}\n\nMenuItemTree.propTypes = {\n  runtime: PropTypes.object.isRequired\n}\n\nfunction MenuItemTreeIcon(props) {\n  const { imagePath, disabled, altText } = props;\n\n  if (!imagePath) return null;\n\n  const imageWrapStyle = {\n    width: \"25px\",\n    height: \"25px\",\n    marginRight: \"5px\",\n    display: \"flex\",\n    alignItems: \"center\"\n  };\n  const imageStyle = {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n    margin: \"auto\",\n    opacity: disabled ? 0.5 : 1\n  };\n\n  return (\n    <div style={imageWrapStyle}>\n      <img src={imagePath} style={imageStyle} alt={altText} />\n    </div>\n  );\n}\n\nMenuItemTreeIcon.propTypes = {\n  imagePath: PropTypes.string,\n  disabled: PropTypes.bool.isRequired,\n  altText: PropTypes.string.isRequired\n}\n\nMenuItemTreeIcon.defaultProps = {\n  imagePath: \"\"\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WebTab from './WebTab';\r\n\r\nimport './WebToolbar.css';\r\nimport PageHistoryHelper from '../PageHistoryHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport WebToolbarHelper from './WebToolbarHelper';\r\nimport MenuItemTree from '../MenuItemTree';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport CbaPageArea from '../CbaPageArea';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\nexport default class WebToolbar extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.displayTabs = [];\r\n    this.hiddenTabs = [];\r\n  }\r\n\r\n  closeTab = (event, tabName) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const { parentPath, runtime, parentWidth } = this.props;\r\n    PageHistoryHelper.closeTab(tabName, parentPath, runtime);\r\n\r\n    const toolbarWidth = parentWidth - WebToolbarHelper.containerMarginWidth;\r\n    const currentTab = PageHistoryHelper.getTab(parentPath, runtime);\r\n    const allTabs = PageHistoryHelper.getAllTabs(parentPath, runtime);\r\n    const allTabsInfo = WebToolbarHelper.getAllTabsInfo(allTabs, parentPath, runtime);\r\n    const tabDict = WebToolbarHelper.buildTabDictionary(allTabs, allTabsInfo);\r\n\r\n\r\n    this.displayTabs.splice(this.displayTabs.indexOf(tabName), 1);\r\n    WebToolbarHelper.topUpDisplayTabs(this.displayTabs, this.hiddenTabs, allTabs, currentTab, tabDict, toolbarWidth);\r\n    this.triggerRendering();\r\n  }\r\n\r\n  switchTab = (event, tabName) => {\r\n    const { parentPath, runtime } = this.props;\r\n    const currentTab = PageHistoryHelper.getTab(parentPath, runtime);\r\n\r\n    if (currentTab !== tabName) {\r\n      CbaPageArea.switchTab(parentPath, tabName, event, runtime);\r\n      this.triggerRendering();\r\n    }\r\n  }\r\n\r\n  switchHiddenTab = (showMoreClickEvent, tab) => (tabClickEvent) => {\r\n    this.switchTab(tabClickEvent, tab);\r\n  }\r\n\r\n  handleShowMoreTabs = (event) => {\r\n    const { runtime, parentPath } = this.props;\r\n    const buttonBoundingRect = MenuItemTree.buildTriggerBoundingRect(event);\r\n\r\n    const menuItems = this.hiddenTabs.map(tab => ({\r\n      type: 'action',\r\n      label: tab,\r\n      action: this.switchHiddenTab(event, tab),\r\n      disabled: false,\r\n      icon: PageHistoryHelper.getImageForTab(tab, parentPath, runtime)\r\n    }));\r\n\r\n    const menuPosition = CommonActionsHelper.computeMenuPosition(runtime, buttonBoundingRect.left, buttonBoundingRect.bottom);\r\n    event.clientX = menuPosition.clientX;\r\n    event.clientY = menuPosition.clientY;\r\n\r\n    runtime.contextMenu.openMenuItemTreeWithDynamicConfig({\r\n      entries: menuItems,\r\n      event\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper function to trigger rendering on both this component and it's parent (content update)\r\n   */\r\n  triggerRendering = () => {\r\n    const { parentPath, runtime } = this.props;\r\n    RenderingHelper.triggerRendering(this);\r\n    RenderingHelper.triggerRenderingViaPath(parentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Get the optional icon resource to be displayed on the tab.\r\n   */\r\n  getTabIconResource = (tabName) => {\r\n    const { parentPath, runtime } = this.props;\r\n    const iconForTab = PageHistoryHelper.getImageForTab(tabName, parentPath, runtime);\r\n    return CommonConfigHelper.getProperResourcePath(iconForTab, runtime);\r\n  }\r\n\r\n  renderTabs = (currentTab, renderTabs) => {\r\n    const { parentPath, runtime } = this.props;\r\n    const allTabs = PageHistoryHelper.getAllTabs(parentPath, runtime);\r\n    const firstTab = allTabs[0];\r\n\r\n    return renderTabs.map((tab) => {\r\n      const tabInfo = PageHistoryHelper.getInfoForTab(tab, parentPath, runtime);\r\n      const { tabWidth } = tabInfo;\r\n      let { closable } = tabInfo;\r\n\r\n      if (tab === firstTab) {\r\n        closable = false;\r\n      }\r\n\r\n      return (\r\n        <WebTab\r\n          key={tab}\r\n          tabName={tab}\r\n          isActive={tab === currentTab}\r\n          closeTab={event => this.closeTab(event, tab)}\r\n          onClick={event => this.switchTab(event, tab)}\r\n          icon={this.getTabIconResource(tab)}\r\n          closable={closable}\r\n          width={tabWidth}\r\n        />\r\n      );\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { parentPath, runtime, parentWidth } = this.props;\r\n    const currentTab = PageHistoryHelper.getTab(parentPath, runtime);\r\n    const allTabs = PageHistoryHelper.getAllTabs(parentPath, runtime);\r\n    const allTabsInfo = WebToolbarHelper.getAllTabsInfo(allTabs, parentPath, runtime);\r\n    const toolbarWidth = parentWidth - WebToolbarHelper.containerMarginWidth;\r\n    const showMoreTabs = WebToolbarHelper.exceedsMaxTabsWidth(allTabsInfo, toolbarWidth);\r\n    const tabDict = WebToolbarHelper.buildTabDictionary(allTabs, allTabsInfo);\r\n\r\n    if (showMoreTabs) {\r\n      if (!this.displayTabs.includes(currentTab)) {\r\n        const containerWidthWithShowMore = toolbarWidth - WebToolbarHelper.showMoreButtonWidth;\r\n        ({\r\n          displayTabs: this.displayTabs,\r\n          hiddenTabs: this.hiddenTabs\r\n        } = WebToolbarHelper.buildDisplayTabs(allTabs, currentTab, tabDict, containerWidthWithShowMore));\r\n\r\n        WebToolbarHelper.topUpDisplayTabs(this.displayTabs, this.hiddenTabs, allTabs, currentTab, tabDict, containerWidthWithShowMore);\r\n      }\r\n    } else {\r\n      this.displayTabs = allTabs;\r\n    }\r\n\r\n    return (\r\n      <div className=\"webtoolbar-wrap\">\r\n        <div className=\"webtoolbar-inner\">\r\n          <div ref={this.tabContainerRef} className=\"webtoolbar-tab-container\">\r\n            {this.renderTabs(currentTab, this.displayTabs)}\r\n            <div className=\"webtoolbar-show-more\">\r\n              <i className={showMoreTabs ? \"show\" : \"\"} onClick={this.handleShowMoreTabs} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nWebToolbar.propTypes = {\r\n  parentPath: PropTypes.string.isRequired,\r\n  runtime: PropTypes.object.isRequired,\r\n  parentWidth: PropTypes.number.isRequired\r\n}\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaInterpreter from './CbaInterpreter';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\n\nexport function isExcessivePageNesting(pagePath) {\n  return IndexPathHelper.getPageSegmentArray(pagePath).length >= 15;\n}\n\nexport default function PageAreaRenderer({\n  onClick,\n  onContextMenu,\n  orientation,\n  embeddedPageName,\n  hasTabs,\n  tabsBar,\n  position,\n  title,\n  config,\n  scrollableAreaRef,\n  path,\n  runtime\n}) {\n\n  // get the page configuration:\n  const page = runtime.pageConfigurationsManager.findPage(embeddedPageName);\n  if (page === undefined) {\n    return (\n      <div\n        style={CommonConfigHelper.buildStyleByState(position, config, false, orientation, false, runtime)}\n      >\n        {`Cannot find page with name ${embeddedPageName}`}\n      </div>\n    );\n  }\n\n  // bail out if we nest too deep:\n  if (isExcessivePageNesting(path)) {\n    return (\n      <div\n        style={CommonConfigHelper.buildStyleByState(position, config, false, orientation, false, runtime)}\n      >\n        Page nesting exceeds maximum nesting depth.\n      </div>\n    );\n  }\n\n\n  const childAreaStyle = {\n    position: \"absolute\",\n    [orientation]: 0,\n    top: (hasTabs ? 30 : 0),\n    width: \"100%\",\n    height: \"100%\",\n    overflow: \"auto\"\n  }\n\n  const pagePath = IndexPathHelper.appendPageSegmentsToPath(path, IndexPathHelper.buildPageSegment(embeddedPageName));\n\n  return (\n    <div\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      title={title}\n      style={CommonConfigHelper.buildStyleByState(position, config, false, orientation, false, runtime)}\n      data-cba-id={config.pageEditId}\n      role=\"presentation\"\n      className={CommonConfigHelper.getCssClassNamesValue(config)}\n    >\n      {hasTabs && tabsBar}\n      <div\n        style={childAreaStyle}\n        onScroll={CommonActionsHelper.traceUserScroll(pagePath, runtime)}\n        ref={scrollableAreaRef}\n      >\n        <CbaInterpreter config={page.content} path={pagePath} runtime={runtime} orientation={orientation} />\n      </div>\n    </div>\n  );\n\n}\n\nPageAreaRenderer.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  onContextMenu: PropTypes.func.isRequired,\n  orientation: PropTypes.string.isRequired,\n  embeddedPageName: PropTypes.string.isRequired,\n  hasTabs: PropTypes.bool.isRequired,\n  tabsBar: PropTypes.object.isRequired,\n  path: PropTypes.string.isRequired,\n  position: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  config: PropTypes.shape(PropTypesHelper.getStandardConfigPropTypes(false)).isRequired,\n  scrollableAreaRef: PropTypes.object.isRequired,\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport PageHistoryHelper from './PageHistoryHelper';\nimport BookmarkHelper from './BookmarkHelper';\nimport RenderingHelper from './RenderingHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport WebToolbar from './WebToolbar/WebToolbar';\nimport Utils from '../utils/Utils';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport UserDefPathHelper from '../state/UserDefPathHelper';\nimport PageAreaRenderer from './PageAreaRenderer';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\n\nexport default class CbaPageArea extends Component {\n\n  constructor(props) {\n    super(props);\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.scrollableAreaRef = React.createRef();\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n\n  onClickHandler(event) {\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  static addAttributesToInitialState(initialState, configProps) {\n    const { historyMode, page } = configProps;\n    initialState.pageName = page;\n    PageHistoryHelper.initializeHistoryState(historyMode !== \"singlePage\", historyMode === \"withTabs\", initialState);\n  }\n\n  static setPageName(path, receiverTab, pageName, pageUrl, runtime) {\n    if (PageHistoryHelper.hasStateWithoutPageHistory(path, runtime)) {\n      // The component for the path seems not to be a CbaPageArea....\n      console.warn(`Set page name call for a component that is not a CbaPageArea: ${path}`);\n      return;\n    }\n\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n\n    const currentEmbeddedPage = PageHistoryHelper.getPage(path, runtime);\n\n    if (currentEmbeddedPage === undefined || currentEmbeddedPage.name !== pageName) {\n\n      // update the component's state in state manager:\n      const safeReceiverTab = CbaPageArea.getSafeReceiverTabDetails(receiverTab);\n      PageHistoryHelper.addPage(pageName, pageUrl, safeReceiverTab, path, runtime);\n\n      // update the button (i.e. tab or taskbar button) that is linked to the new page:\n      CbaPageArea.updatePageIndicators(path, config, pageName, runtime);\n\n      // update the browser toolbar components that depend on the page history (i.e. forward/back buttons and URL display):\n      CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n    }\n\n  }\n\n  static buildIndicatorIndexPath(embeddingIndexPath, indicator) {\n    return IndexPathHelper.appendPageSegmentsToPath(embeddingIndexPath, indicator.indicatorPath);\n  }\n\n  static getSafeReceiverTabDetails(receiverTab) {\n    if (receiverTab === undefined) {\n      return {\n        name: '',\n        image: undefined,\n        width: 100,\n        closable: true\n      }\n    }\n    return {\n      name: receiverTab.name === undefined ? '' : receiverTab.name,\n      width: receiverTab.width === undefined ? 100 : receiverTab.width,\n      image: receiverTab.image,\n      closable: !!receiverTab.closable\n    }\n  }\n\n\n  /**\n   * Get the 'hidden' state of the component specified by the given indicator info. \n   * \n   * @param {{ pageName: String, indicatorPath: String}} indicator The indicator info entry from the config structure. The path is a single plain page segment without path root.\n   * @param {*} embeddingIndexPath The index path where we append the indicatorPath to obatin the full component index path.\n   * @param {*} runtime The common runtime structure. \n   */\n  static isIndicatorNotHidden(indicator, embeddingIndexPath, runtime) {\n    const indicatorIndexPath = CbaPageArea.buildIndicatorIndexPath(embeddingIndexPath, indicator);\n    const indicatorState = runtime.componentStateManager.findOrBuildStateForPathId(indicatorIndexPath, runtime);\n    return StateAttributeAccess.extractHidden(indicatorState) === false;\n  }\n\n  /**\n   * Select a 'best matching' page indicator from the given candidates list. \n   * \n   * The method selects the first page indicator that is linked to the given page\n   * and is currently not hidden. If there is no such indicator it choses the first \n   * indicator linked to the given page. If there is no indicator linked to \n   * the given page it silently returns undefined.\n   * \n   * @param {*} pageName The page name that the page indicator must be linked to.\n   * @param {[*]} pageIndicators The list of page indicator candidates.\n   * @param {String} embeddingIndexPath The path that we will prepend to the path given by the candidate entry to obtain the indicator's full index path.\n   * @param {*} runtime The common runtime structure.\n   */\n  static findPreferredIndicator(pageName, pageIndicators, embeddingIndexPath, runtime) {\n    if (pageIndicators === undefined) {\n      return undefined;\n    }\n    const pageMatchingIndicators = pageIndicators.filter(indicator => indicator.pageName === pageName);\n    if (pageMatchingIndicators.length === 0) {\n      return undefined;\n    }\n    if (pageMatchingIndicators.length === 1) {\n      return pageMatchingIndicators[0];\n    }\n    const firstVisibleCandidate = pageMatchingIndicators.find(indicator => CbaPageArea.isIndicatorNotHidden(indicator, embeddingIndexPath, runtime));\n    return firstVisibleCandidate === undefined ? pageMatchingIndicators[0] : firstVisibleCandidate;\n  }\n\n  /**\n   * Switch the 'selected' status to true for the 'page indicating' button component that links to the given page.\n   * \n   * We have to do this explicitly since the page switch might be triggered by a state machine operator or a button \n   * that is not member of our 'page indicating' buttons set. \n   * \n   * Examples for 'page indicating' buttons are the 'tabs' in a tabfolder page or the taskbar buttons in a taskbar page. \n   * \n   * \n   * @param {*} path The full index path of the CbaPageArea component that switches the embedded page.\n   * @param {*} config The configuration structure for the CbaPageArea that contains the list of info pairs for the 'page indicating' components. \n   * @param {*} pageName The name of the page we switch to. \n   * @param {*} runtime The common runtime structure.\n   */\n  static updatePageIndicators(path, config, pageName, runtime) {\n    const { currentPageIndicators } = config;\n    const indicatorPathRoot = IndexPathHelper.dropPageSegmentFromPath(path);\n    const chosenIndicator = CbaPageArea.findPreferredIndicator(pageName, currentPageIndicators, indicatorPathRoot, runtime);\n    if (chosenIndicator !== undefined) {\n      const indicatorIndexPath = CbaPageArea.buildIndicatorIndexPath(indicatorPathRoot, chosenIndicator);\n      const indicatorState = runtime.componentStateManager.findOrBuildStateForPathId(indicatorIndexPath, runtime);\n      SelectGroupHelper.setSelectedForPossiblyControlledComponent(true, indicatorIndexPath, indicatorState, false, false, runtime);\n    }\n  }\n\n\n  static doHistoryMove(path, move, runtime) {\n    if (PageHistoryHelper.hasStateWithoutPageHistory(path, runtime)) {\n      // The component for the path seems not to be a CbaPageArea....\n      console.warn(`Do history move call for a component that is not a CbaPageArea: ${path}`);\n      return;\n    }\n\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime)\n\n    // update the component's state in state manager:\n    switch (move) {\n      case 'home':\n        PageHistoryHelper.goHome(path, runtime);\n        CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n        break;\n      case 'forward':\n        PageHistoryHelper.goForward(path, runtime);\n        CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n        break;\n      case 'back':\n        PageHistoryHelper.goBack(path, runtime);\n        CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n        break;\n      default:\n        console.warn(`Unknown type of history move : ${move} for component path ${path}`);\n        break;\n    }\n\n    runtime.traceLogBuffer.reportEvent('PageSwitchEmbedded', new Date(),\n      {\n        indexPath: path,\n        userDefIdPath,\n        userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\n        newPageName: PageHistoryHelper.getPage(path, runtime).name,\n        tab: PageHistoryHelper.getTab(path, runtime),\n        historyMove: move\n      });\n\n  }\n\n  static historyMoveEnabled(path, move, runtime) {\n    if (PageHistoryHelper.hasStateWithoutPageHistory(path, runtime)) {\n      // The component for the path seems not to be a CbaPageArea....\n      console.warn(`Enabled history move inquiry for a component that is not a CbaPageArea: ${path}`);\n      return false;\n    }\n\n    switch (move) {\n      case 'home':\n        return true;\n      case 'forward':\n        return PageHistoryHelper.canGoForward(path, runtime);\n      case 'back':\n        return PageHistoryHelper.canGoBack(path, runtime);\n      default:\n        console.warn(`Unknown type of history move : ${move} for component path ${path}`);\n        return false;\n    }\n\n  }\n\n  static switchTab(path, newTab, event, runtime) {\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n    event.stopPropagation();\n    PageHistoryHelper.switchTab(newTab, path, runtime);\n    CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n\n    CommonActionsHelper.traceUserInteraction(\n      'BrowserTab',\n      path,\n      {\n        page: PageHistoryHelper.getPage(path, runtime).name,\n        tab: PageHistoryHelper.getTab(path, runtime)\n      },\n      event,\n      null,\n      runtime\n    );\n\n  }\n\n  scroll(x, y) {\n    const scrollElement = this.scrollableAreaRef.current;\n    if (!scrollElement) return;\n    Utils.doScrollOnHTMLElement(x, y, scrollElement, scrollElement);\n  }\n\n  static updatePageHistoryDependents(path, config, runtime) {\n    const { forwardSwitchers, backwardSwitchers, locationDisplays } = config;\n    const myPathWithoutMyPageSegment = IndexPathHelper.dropPageSegmentFromPath(path);\n\n    if (forwardSwitchers !== undefined) {\n      const canGoForward = PageHistoryHelper.canGoForward(path, runtime);\n      forwardSwitchers.forEach((switcher) => {\n        const pathId = IndexPathHelper.appendPageSegmentsToPath(myPathWithoutMyPageSegment, switcher);\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractDisabled, StateAttributeAccess.setDisabled, !canGoForward, pathId, runtime, true);\n      });\n    }\n    if (backwardSwitchers !== undefined) {\n      const canGoBack = PageHistoryHelper.canGoBack(path, runtime);\n      backwardSwitchers.forEach((switcher) => {\n        const pathId = IndexPathHelper.appendPageSegmentsToPath(myPathWithoutMyPageSegment, switcher);\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractDisabled, StateAttributeAccess.setDisabled, !canGoBack, pathId, runtime, true);\n      });\n    }\n    if (locationDisplays !== undefined) {\n      const pageEntry = PageHistoryHelper.getPage(path, runtime);\n      const newValue = Utils.getPropUndefinedSafe(pageEntry, 'url', '');\n      locationDisplays.forEach((locationDisplay) => {\n        const pathId = IndexPathHelper.appendPageSegmentsToPath(myPathWithoutMyPageSegment, locationDisplay);\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractTextValue, StateAttributeAccess.setTextValue, newValue, pathId, runtime, true);\n      });\n    }\n  }\n\n\n  /**\n   * Add the page currently embedded as bookmark to our bookmarks list.\n   * \n   * @param {String} path The index path of the CbaPageArea to operate on.\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\n   * @param {String} requestingComponentPath The index path of the component requesting to add the bookmark (for tracing purposes).\n   * @param {*} runtime The common runtime context structure.\n   */\n  static addBookmark(path, triggeringType, requestingComponentPath, runtime) {\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n    const currentPageEntry = CbaPageArea.getEmbeddedPageEntry(path, config, runtime);\n    if (currentPageEntry !== undefined) {\n      const currentTab = PageHistoryHelper.getTab(path, runtime);\n      BookmarkHelper.addBookmark(path, currentPageEntry.name, currentPageEntry.url, currentTab, currentPageEntry.image, triggeringType, requestingComponentPath, runtime);\n    }\n  }\n\n  /**\n   * Drop the specified page from our bookmarks list.\n   * \n   * @param {String} path The index path of the CbaPageArea to operate on.\n   * @param {String} pageName The name of the page to drop from the bookmarks list.\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\n   * @param {String} requestingComponentPath The index path of the component requesting to drop the bookmark (for tracing purposes).\n   * @param {*} runtime The common runtime context structure.\n   */\n  static dropBookmark(path, pageName, triggeringType, requestingComponentPath, runtime) {\n    BookmarkHelper.dropBookmark(path, pageName, triggeringType, requestingComponentPath, runtime);\n  }\n\n  /**\n   * Get the list of page names in our bookmarks list.\n   */\n  static getBookmarks(path, runtime) {\n    return BookmarkHelper.getBookmarks(path, runtime);\n  }\n\n  static getEmbeddedPageName(path, config, runtime) {\n    const pageEntry = CbaPageArea.getEmbeddedPageEntry(path, config, runtime);\n    return pageEntry === undefined ? undefined : pageEntry.name;\n  }\n\n  static getEmbeddedPageEntry(path, config, runtime) {\n    const { historyMode } = config;\n    // fail fast if config param is invalid (don't mess up initialization of history structure!)\n    if (historyMode === undefined) {\n      console.error(`Invalid config structure for CbaPageArea: ${path}`, config);\n      return undefined;\n    }\n\n    let pageEntry = PageHistoryHelper.getPage(path, runtime);\n\n    // Use initial page from my config if nobody did set another page yet.\n    // Don't forget to set it in the page history helper. Otherwise goHome will not work properly!\n    if (pageEntry === undefined) {\n      const initialPageName = config.page;\n      const initialPageUrl = config.pageUrl;\n      const initialTabConfig = CbaPageArea.getSafeReceiverTabDetails(config.initialTab);\n      PageHistoryHelper.addPage(initialPageName, initialPageUrl, initialTabConfig, path, runtime);\n      pageEntry = PageHistoryHelper.getPage(path, runtime);\n    }\n    return pageEntry;\n  }\n\n  render() {\n    const { config, runtime, path: myPath, orientation } = this.props;\n\n    // get the page configuration:\n    const pageName = CbaPageArea.getEmbeddedPageName(myPath, config, runtime);\n\n    const pathState = ComponentStateHelper.getState(this);\n    const positionOnlyState = {};\n    StateAttributeAccess.setPosition(positionOnlyState, StateAttributeAccess.extractPosition(pathState));\n\n    const { historyMode } = config;\n    const hasTabs = historyMode === \"withTabs\";\n    const title = CommonConfigHelper.buildTitle(config, pathState);\n\n    return (\n      <PageAreaRenderer\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        orientation={orientation}\n        embeddedPageName={pageName}\n        hasTabs={hasTabs}\n        tabsBar={<WebToolbar parentPath={myPath} runtime={runtime} parentWidth={config.position.width} />}\n        path={myPath}\n        position={positionOnlyState}\n        title={title}\n        config={config}\n        scrollableAreaRef={this.scrollableAreaRef}\n        runtime={runtime}\n      />\n    );\n  }\n\n}\n\n\nCbaPageArea.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        page: PropTypes.string.isRequired,\n        pageUrl: PropTypes.string.isRequired,\n        catchLinks: PropTypes.bool.isRequired,\n        historyMode: PropTypes.oneOf([\"singlePage\", \"noTabs\", \"withTabs\"]),\n        initialTab: PropTypes.object,\n        currentPageIndicators: PropTypes.arrayOf(PropTypes.shape({\n          pageName: PropTypes.string.isRequired,\n          indicatorPath: PropTypes.string.isRequired,\n        })),\n        forwardSwitchers: PropTypes.arrayOf(PropTypes.string),\n        backwardSwitchers: PropTypes.arrayOf(PropTypes.string),\n        locationDisplays: PropTypes.arrayOf(PropTypes.string),\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction buildBooleanResultString(result) {\r\n  if (result === undefined) return \"\";\r\n  return result ? \"true\" : \"false\";\r\n}\r\n\r\nfunction compareClassEntryByName(left, right) {\r\n  if (left.name < right.name) return -1;\r\n  if (left.name > right.name) return 1;\r\n  return 0;\r\n}\r\n\r\nfunction sortClassEntriesByName(entries) {\r\n  return entries.sort((left, right) => compareClassEntryByName(left, right));\r\n}\r\n\r\nfunction buildClassMemberCountMap(resultsList) {\r\n  const classToMemberCount = new Map();\r\n  resultsList.forEach((member) => {\r\n    const oldEntry = classToMemberCount.get(member.class);\r\n    const newValue = oldEntry === undefined ? 1 : oldEntry + 1;\r\n    classToMemberCount.set(member.class, newValue);\r\n  });\r\n  return classToMemberCount;\r\n}\r\n\r\nfunction buildAlertStyle(alert) {\r\n  return alert ? {\r\n    color: 'red'\r\n  } : {}\r\n}\r\n\r\nfunction renderHitMissTable(title, resultsList, firstActiveMode) {\r\n  const classToMemberCount = buildClassMemberCountMap(resultsList);\r\n\r\n  if (firstActiveMode || resultsList.length === 0) return \"\";\r\n  return (\r\n    <div>\r\n      {title}\r\n      <table className=\"details\">\r\n        <thead>\r\n          <tr>\r\n            <th>!</th>\r\n            <th>Name</th>\r\n            <th>Weight</th>\r\n            <th>Class</th>\r\n            <th>Result text</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {resultsList.map((row, i) => {\r\n            const hasActiveSiblings = classToMemberCount.get(row.class) > 1;\r\n            return (\r\n              <tr key={row.name} style={buildAlertStyle(hasActiveSiblings)}>\r\n                <td className=\"cbaColWidth05\">{ hasActiveSiblings ? \"!\" : \"\"}</td>\r\n                <td className=\"cbaColWidth25\">{row.name}</td>\r\n                <td className=\"cbaColWidth05\">{row.weight}</td>\r\n                <td className=\"cbaColWidth30\">{row.class}</td>\r\n                <td className=\"cbaColWidth35\">{row.resultText}</td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getResultTextForHitMissByName(hitMissName, hitMissResultsList) {\r\n  console.log(`hitMissName is ${hitMissName}, hitMissResultsList contains names ${hitMissResultsList.map(hitMiss => hitMiss.name).join()}`)\r\n  const matchingResult = hitMissResultsList.find(hitMiss => hitMiss.name === hitMissName);\r\n  return matchingResult === undefined ? '' : matchingResult.resultText;\r\n}\r\n\r\nfunction renderClassTableBody(classResultsList, hitMissResultsList, firstActiveMode) {\r\n  return sortClassEntriesByName(classResultsList).map((row, i) => (\r\n    <tr key={row.name}>\r\n      <td className=\"cbaColWidth25\">{row.name}</td>\r\n      <td className={firstActiveMode ? \"cbaColWidth30\" : \"cbaColWidth05\"}>{row.value}</td>\r\n      { !firstActiveMode && <td className=\"cbaColWidth05\">{buildBooleanResultString(row.result)}</td> }\r\n      { firstActiveMode && <td className=\"cbaColWidth30\">{getResultTextForHitMissByName(row.value, hitMissResultsList)}</td> }\r\n      <td className=\"cbaColWidth30\">{row.comment}</td>\r\n    </tr>\r\n  ));\r\n}\r\n\r\n\r\nfunction renderClassTable(title, classResultsList, hitMissResultsList, firstActiveMode) {\r\n  if (classResultsList.length === 0) return \"\";\r\n  return (\r\n    <div>\r\n      {`${title} (${firstActiveMode ? \"first active member\" : \"accumulated weights\"}):`}\r\n      <table className=\"details\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>{ firstActiveMode ? 'First Active' : 'Weight'}</th>\r\n            <th>{ firstActiveMode ? 'Result Text' : 'Result'}</th>\r\n            <th>Comment</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {renderClassTableBody(classResultsList, hitMissResultsList, firstActiveMode)}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction renderResultVariablesTableBody(resultVariablesList) {\r\n  return resultVariablesList.map((row, i) => (\r\n    <tr key={row.name}>\r\n      <td className=\"cbaColWidth25\">{row.name}</td>\r\n      <td className=\"cbaColWidth25\">{row.value}</td>\r\n      <td className=\"cbaColWidth25\">{row.valueHit}</td>\r\n      <td className=\"cbaColWidth25\">{row.valueLabel}</td>\r\n    </tr>\r\n  ));\r\n}\r\n\r\nfunction renderResultVariablesTable(title, resultVariablesList) {\r\n  if (resultVariablesList.length === 0) return \"\";\r\n  return (\r\n    <div>\r\n      {`${title}:`}\r\n      <table className=\"details\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Value</th>\r\n            <th>Value Hit</th>\r\n            <th>Value Label</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {renderResultVariablesTableBody(resultVariablesList)}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ScoringModalData = (props) => {\r\n  const { currentModalContent: scoringDetails } = props;\r\n  const hitClassFirstActive = scoringDetails.classScoringModeHit === 'firstActive';\r\n  const missClassFirstActive = scoringDetails.classScoringModeMiss === 'firstActive';\r\n\r\n  return (\r\n    <div className=\"cba-modal-content\">\r\n      <table className=\"summary\">\r\n        <thead>\r\n          <tr>\r\n            <th>Score result:</th>\r\n            <td>{scoringDetails.result ? 'true' : 'false'}</td>\r\n            <th>Execution Time:</th>\r\n            <td>{scoringDetails.execTime}</td>\r\n            <th>Total hits/Total Weight:</th>\r\n            <td>{`${scoringDetails.nbHits}/${scoringDetails.hitWeight}`}</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <th>Credit Class:</th>\r\n            <td>{scoringDetails.creditClass}</td>\r\n            <th>Reaction Time:</th>\r\n            <td>{scoringDetails.reactionTime}</td>\r\n            <th>Total misses/Total Weight:</th>\r\n            <td>{`${scoringDetails.nbMisses}/${scoringDetails.missWeight}`}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Credit Weight:</th>\r\n            <td>{scoringDetails.creditWeight}</td>\r\n            <th>Nb. of Interactions:</th>\r\n            <td>{scoringDetails.nbInteractions}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Result text:</th>\r\n            <td>{scoringDetails.resultText}</td>\r\n            <th />\r\n            <td />\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <br />\r\n      <div className=\"detailsWrapper\">\r\n        {renderHitMissTable(\"Hits:\", scoringDetails.hitRows, hitClassFirstActive)}\r\n        {renderHitMissTable(\"Misses:\", scoringDetails.missRows, missClassFirstActive)}\r\n        {renderClassTable(\"Hit Classes\", scoringDetails.hitClassRows, scoringDetails.hitRows, hitClassFirstActive)}\r\n        {renderClassTable(\"Miss Classes\", scoringDetails.missClassRows, scoringDetails.missRows, missClassFirstActive)}\r\n        {renderResultVariablesTable(\"Result Variables\", scoringDetails.resultVariables)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nScoringModalData.propTypes = {\r\n  currentModalContent: PropTypes.object.isRequired\r\n}\r\n\r\nexport default ScoringModalData;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst StatemachineModalData = (props) => {\r\n\r\n  const { currentModalContent: statemachineDetails } = props;\r\n  return (\r\n    <div className=\"cba-modal-content\">\r\n      <div className=\"detailsWrapper\">\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Variable Name</th>\r\n              <th>Current Value</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.variables.map(row => (\r\n              <tr key={row.name}>\r\n                <td>{row.name}</td>\r\n                <td>{row.value}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <p />\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Current State Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.states.map(row => (\r\n              <tr key={row}>\r\n                <td>{row}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <p />\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Visited State Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.visitedStates.map(row => (\r\n              <tr key={row}>\r\n                <td>{row}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <p />\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Raised Event Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.raisedEvents.map(row => (\r\n              <tr key={row}>\r\n                <td>{row}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatemachineModalData.propTypes = {\r\n  currentModalContent: PropTypes.shape(\r\n    {\r\n      variables: PropTypes.array.isRequired,\r\n      states: PropTypes.array.isRequired,\r\n      visitedStates: PropTypes.array.isRequired,\r\n      raisedEvents: PropTypes.array.isRequired,\r\n    }\r\n  ).isRequired\r\n}\r\n\r\nexport default StatemachineModalData;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class TracingModalData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { currentModalContent: traceLogBuffer } = this.props;\r\n    this.state = {\r\n      tracingDetails: traceLogBuffer.peekEntries()\r\n    };\r\n  }\r\n\r\n  static dumpAsStringAndTruncate(object) {\r\n    const maxLen = 1000;\r\n    const fullString = JSON.stringify(object);\r\n    return fullString.length > maxLen ? `${fullString.substring(0, maxLen)}...` : fullString;\r\n  }\r\n\r\n  /**\r\n   * Clean logs from traceLogBuffer and updates the tracing details accordingly\r\n   */\r\n  truncateTraceLog = () => {\r\n    const { currentModalContent: traceLogBuffer } = this.props;\r\n    traceLogBuffer.popEntries();\r\n    this.updateTraceLogState();\r\n  }\r\n\r\n  /**\r\n   * Updates the tracing details with data from the source of truth\r\n   */\r\n  updateTraceLogState = () => {\r\n    const { currentModalContent: traceLogBuffer } = this.props;\r\n    this.setState({\r\n      tracingDetails: traceLogBuffer.peekEntries()\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const { tracingDetails } = this.state;\r\n    return (\r\n      <div className=\"cba-modal-content\">\r\n        Tracing data not transferred to server yet:\r\n        <div className=\"detailsWrapper\">\r\n          <table className=\"details\">\r\n            <thead />\r\n            <tbody>\r\n              {[...tracingDetails].map(row => (\r\n                <tr key={`${row.entryId} - ${row.timestamp}`}>\r\n                  <td>{row.entryId}</td>\r\n                  <td>{row.timestamp}</td>\r\n                  <td>{row.type}</td>\r\n                  {Object.keys(row.details).map((key, rowIndex) => (\r\n                    <td key={key}>\r\n                      {`${key}:${TracingModalData.dumpAsStringAndTruncate(row.details[key])}`}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"cba-trace-modal-buttons\">\r\n          <button type=\"button\" onClick={this.truncateTraceLog}> Truncate Log </button>\r\n          <button type=\"button\" onClick={this.updateTraceLogState}> Refresh </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nTracingModalData.propTypes = {\r\n  currentModalContent: PropTypes.object.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\nimport MenuBuildHelper from '../components/MenuBuildHelper';\r\n\r\nexport default class ManageBookmarksData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.toBeDeleted = [];\r\n  }\r\n\r\n  okButtonClicked = () => {\r\n    const { content } = this.props;\r\n    const { pageAreaIndexPath, requestingComponentPath, testPresenter, runtime } = content;\r\n    console.info(`delete called for bookmarks ${this.toBeDeleted.join()}`)\r\n    this.toBeDeleted.forEach((value) => { CbaPageArea.dropBookmark(pageAreaIndexPath, value, 'contextMenu', requestingComponentPath, runtime); });\r\n    testPresenter.handleClose();\r\n  }\r\n\r\n  cancelButtonClicked = () => {\r\n    const { content } = this.props;\r\n    const { testPresenter } = content;\r\n    testPresenter.handleClose();\r\n  }\r\n\r\n  setBookmarkAsToBeDeleted = (bookmark) => {\r\n    this.toBeDeleted.push(bookmark);\r\n  }\r\n\r\n  render() {\r\n    const { content } = this.props;\r\n    const { pageAreaIndexPath, labelConfiguration, runtime, requestingComponentPath } = content;\r\n    let { deleteColumnHeader, bookmarkColumnHeader, okButton, cancelButton } = labelConfiguration;\r\n\r\n    const useTranslation = MenuBuildHelper.provideTranslationSupport(requestingComponentPath, runtime);\r\n    if (useTranslation) {\r\n      deleteColumnHeader = runtime.translationManager.getTranslatedTextWithFallback('bookmarkDeleteText', deleteColumnHeader);\r\n      bookmarkColumnHeader = runtime.translationManager.getTranslatedTextWithFallback('bookmarkHeaderText', bookmarkColumnHeader);\r\n      okButton = runtime.translationManager.getTranslatedTextWithFallback('bookmarkOkText', okButton);\r\n      cancelButton = runtime.translationManager.getTranslatedTextWithFallback('bookmarkCancelText', cancelButton);\r\n    }\r\n\r\n    const bookmarks = CbaPageArea.getBookmarks(pageAreaIndexPath, runtime);\r\n    const toBeDeletedAccess = this.toBeDeleted;\r\n\r\n    const fontStyle = {\r\n      fontSize: '12px'\r\n    }\r\n\r\n    return (\r\n      <div className=\"cba-modal-content\" style={fontStyle}>\r\n        <div className=\"detailsWrapper\">\r\n          <table className=\"details\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"cbaColWidth15\">{deleteColumnHeader}</th>\r\n                <th className=\"cbaColWidth85\">{bookmarkColumnHeader}</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {bookmarks.map(bookmark => (\r\n                <tr key={bookmark.pageName}>\r\n                  <td className=\"cbaColWidth15\">\r\n                    <input\r\n                      id={bookmark.pageName}\r\n                      type=\"checkbox\"\r\n                      onChange={() => toBeDeletedAccess.push(bookmark.pageName)}\r\n                    />\r\n                  </td>\r\n                  <td className=\"cbaColWidth85\">\r\n                    {bookmark.pageUrl ? bookmark.pageUrl : \"\"}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"cba-bookmarks-modal-buttons\">\r\n          <button type=\"button\" onClick={this.okButtonClicked}>{okButton}</button>\r\n          <button type=\"button\" onClick={this.cancelButtonClicked}>{cancelButton}</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nManageBookmarksData.propTypes = {\r\n  content: PropTypes.shape(\r\n    {\r\n      pageAreaIndexPath: PropTypes.string.isRequired,\r\n      requestingComponentPath: PropTypes.string.isRequired,\r\n      runtime: PropTypes.object.isRequired,\r\n      labelConfiguration: PropTypes.shape(\r\n        {\r\n          windowTitle: PropTypes.string.isRequired,\r\n          deleteColumnHeader: PropTypes.string.isRequired,\r\n          bookmarkColumnHeader: PropTypes.string.isRequired,\r\n          okButton: PropTypes.string.isRequired,\r\n          cancelButton: PropTypes.string.isRequired,\r\n        }\r\n      ).isRequired,\r\n      testPresenter: PropTypes.object.isRequired,\r\n    }\r\n  ).isRequired\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from \"react-dialog\";\r\nimport ModalManager from \"./ModalManager\";\r\n\r\nconst ModalDialog = (props) => {\r\n  const width = 600;\r\n  const height = 500;\r\n  const centerPosition = {\r\n    x: window.innerWidth / 2 - width/2,\r\n    y: window.innerHeight / 2 - height/2\r\n  }\r\n  const { isOpen, currentModal, currentModalTitle, closeDialog } = props;\r\n  return (\r\n    <div className=\"cba-modal-container cba-modal cba-system-modal\">\r\n      {isOpen && (\r\n        <Dialog\r\n          title={currentModalTitle}\r\n          modal\r\n          isResizable\r\n          isDraggable\r\n          hasCloseIcon\r\n          closeOnEscape\r\n          width={width}\r\n          height={height}\r\n          position={centerPosition}\r\n          onClose={closeDialog}\r\n        >\r\n          <ModalManager currentModal={currentModal} {...props} />\r\n        </Dialog>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalDialog;\r\n\r\nModalDialog.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  currentModal: PropTypes.string.isRequired,\r\n  currentModalTitle: PropTypes.string.isRequired,\r\n  closeDialog: PropTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ScoringModalData from './ScoringModalData';\r\nimport StatemachineModalData from './StatemachineModalData';\r\nimport TracingModalData from './TracingModalData';\r\nimport ManageBookmarksData from './ManageBookmarksData';\r\nimport ModalDialog from './ModalDialog';\r\n\r\nexport { ModalDialog };\r\nexport const SCORING = 'Scoring';\r\nexport const TRACING = 'Tracing';\r\nexport const STATE_MACHINE = 'State Machine';\r\nexport const BOOKMARKS = 'ManageBookmarks';\r\n\r\nconst ModalManager = (props) => {\r\n  const { currentModalContent: content } = props;\r\n  switch (props.currentModal) {\r\n    case SCORING:\r\n      return <ScoringModalData {...props} />;\r\n    case TRACING:\r\n      return <TracingModalData {...props} />;\r\n    case STATE_MACHINE:\r\n      return <StatemachineModalData {...props} />;\r\n    case BOOKMARKS:\r\n      return <ManageBookmarksData content={content} />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default ModalManager;\r\n\r\nModalManager.propTypes = {\r\n  currentModalContent: PropTypes.object.isRequired,\r\n  currentModal: PropTypes.oneOf([SCORING, TRACING, STATE_MACHINE, BOOKMARKS]).isRequired\r\n}\r\n","import CbaPageArea from \"./CbaPageArea\";\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport { BOOKMARKS } from '../dialog/ModalManager';\r\nimport UserDefPathHelper from \"../state/UserDefPathHelper\";\r\nimport Utils from \"../utils/Utils\";\r\nimport MenuBuildHelper from \"./MenuBuildHelper\";\r\n\r\n/**\r\n * Helper methods to implement special actions triggered by clicks on buttons or menu items.\r\n */\r\nexport default class SpecialClickActionsHelper {\r\n\r\n  /**\r\n   * Cut the current selection to our global clipboard.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the calling display component instance.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static cut(triggeringType, requestingComponentPath, runtime) {\r\n    runtime.clipboardManager.cut(triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a cut operation currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static cutEnabled(runtime) {\r\n    return runtime.clipboardManager.cutEnabled();\r\n  }\r\n\r\n\r\n  /**\r\n   * Copy the current selection to our global clipboard.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the calling display component instance.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static copy(triggeringType, requestingComponentPath, runtime) {\r\n    runtime.clipboardManager.copy(triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a copy operation currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static copyEnabled(runtime) {\r\n    return runtime.clipboardManager.copyEnabled();\r\n  }\r\n\r\n  /**\r\n   * Paste the content of the global clipboard at the current caret position.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the calling display component instance.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static paste(triggeringType, requestingComponentPath, runtime) {\r\n    runtime.clipboardManager.paste(triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a paste operation currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static pasteEnabled(runtime) {\r\n    return runtime.clipboardManager.pasteEnabled();\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to the next task in the global test course.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static nextTask(runtime) {\r\n    runtime.taskManager.switchTaskNext();\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch to the next task currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static nextTaskEnabled(runtime) {\r\n    return runtime.taskManager.nextTaskAvailable();\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to the previous task in the global test course.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static backTask(runtime) {\r\n    runtime.taskManager.switchTaskPrevious();\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch to the previous task currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static backTaskEnabled(runtime) {\r\n    return runtime.taskManager.previousTaskAvailable();\r\n  }\r\n\r\n  /**\r\n   * Cancel the current task.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static cancelTask(runtime) {\r\n    runtime.taskManager.cancelTask();\r\n  }\r\n\r\n  /**\r\n   * Switch to fullscreen mode.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static startFullscreen(runtime) {\r\n    runtime.pageEventsObserver.handleFullScreen(true);\r\n    Utils.openFullScreen(document.documentElement);\r\n  }\r\n\r\n  /**\r\n   * Leave fullscreen mode.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static stopFullscreen(runtime) {\r\n    runtime.pageEventsObserver.handleFullScreen(false);\r\n    Utils.closeFullScreen();\r\n  }\r\n\r\n  /**\r\n   * Close the dialog window that is the parent of the given display component instance.\r\n   * \r\n   * The method silently ignores the call if the parent is not a dialog window.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the close operation.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static close(requestingComponentPath, runtime) {\r\n    const pageAreaType = IndexPathHelper.getPageAreaTypeFromPath(requestingComponentPath);\r\n    if (pageAreaType === 'main') {\r\n      console.log('Cannot close a non-dialog page area.', requestingComponentPath);\r\n      return;\r\n    }\r\n\r\n    const dialog = {\r\n      pageAreaName: IndexPathHelper.getPageAreaNameFromPath(requestingComponentPath),\r\n      type: pageAreaType\r\n    }\r\n\r\n    runtime.dialogPresenter.closeDialog(dialog);\r\n  }\r\n\r\n  /**\r\n   * Switch the parent CbaPageArea's page one page back in page history.\r\n   * \r\n   * The method silently ignores the call if there is no CbaPageArea in the component's ancestors path.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n    * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static back(requestingComponentPath, actionParam, runtime) {\r\n    SpecialClickActionsHelper.doHistoryMoveOnAncestor(requestingComponentPath, 'back', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch back in the page history currently? \r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static backEnabled(requestingComponentPath, actionParam, runtime) {\r\n    return SpecialClickActionsHelper.historyMoveEnabled(requestingComponentPath, 'back', actionParam, runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch the parent CbaPageArea's page one page forward in page history.\r\n   * \r\n   * The method silently ignores the call if there is no CbaPageArea in the component's ancestors path.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n    * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static forward(requestingComponentPath, actionParam, runtime) {\r\n    SpecialClickActionsHelper.doHistoryMoveOnAncestor(requestingComponentPath, 'forward', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch forward in the page history currently? \r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static forwardEnabled(requestingComponentPath, actionParam, runtime) {\r\n    return SpecialClickActionsHelper.historyMoveEnabled(requestingComponentPath, 'forward', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Switch the parent CbaPageArea's page to the home page in page history.\r\n   * \r\n   * The method silently ignores the call if there is no CbaPageArea in the component's ancestors path.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static home(requestingComponentPath, actionParam, runtime) {\r\n    SpecialClickActionsHelper.doHistoryMoveOnAncestor(requestingComponentPath, 'home', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Add a bookmark for the current page in the parent CbaPageArea. \r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {*} requestingComponentPath The index path of the display component requesting the operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static addBookmark(triggeringType, requestingComponentPath, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    if (pageAreaPath === undefined) {\r\n      console.log(`Cannot add bookmark: No receiving page area found. Receiver path in action: ${actionParam.receiverPath}, requesting component path: ${requestingComponentPath}`);\r\n      return;\r\n    }\r\n    CbaPageArea.addBookmark(pageAreaPath, triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Show the manage bookmark view for a CbaPageArea. \r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {*} requestingComponentPath The index path of the display component requesting the operation.\r\n   * @param {{receiverPath: String, windowTitle: String, deleteColumnHeader: String, bookmarkColumnHeader: String okButton: String, cancelButton: String}} actionParam \r\n   *  The action parameter, i.e. the optional receiver path and the labels to use in the bookmark management dialog.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static manageBookmark(triggeringType, requestingComponentPath, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    const triggerUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(requestingComponentPath, runtime);\r\n    const ownerUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(pageAreaPath, runtime)\r\n    if (pageAreaPath === undefined) {\r\n      console.log(`Cannot open manage bookmark dialog: No receiving page area found. Receiver path in action: ${actionParam.receiverPath}, requesting component path: ${requestingComponentPath}`);\r\n      return;\r\n    }\r\n\r\n    const dialogContent = {\r\n      pageAreaIndexPath: pageAreaPath,\r\n      requestingComponentPath,\r\n      runtime,\r\n      labelConfiguration: actionParam,\r\n      testPresenter: runtime.testPresenter,\r\n    }\r\n\r\n    const { windowTitle } = actionParam;\r\n    const useTranslation = MenuBuildHelper.provideTranslationSupport(requestingComponentPath, runtime);\r\n    const windowTitleTranslation = runtime.translationManager.getTranslatedTextWithFallback('bookmarkTitleText', windowTitle);\r\n    runtime.testPresenter.openDialog(BOOKMARKS, useTranslation ? windowTitleTranslation : windowTitle, dialogContent);\r\n\r\n    runtime.traceLogBuffer.reportEvent(\r\n      'Bookmark',\r\n      new Date(),\r\n      {\r\n        triggerType: triggeringType,\r\n        triggerIndexPath: requestingComponentPath,\r\n        triggerUserDefIdPath,\r\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggerUserDefIdPath),\r\n        operation: 'manage',\r\n        ownerIndexPath: pageAreaPath,\r\n        ownerUserDefIdPath,\r\n        ownerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(ownerUserDefIdPath)\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * Trigger a ScaleVariableInput increment value\r\n   * \r\n   * @param {String} attachedScale The attached ScaleVariable userDefinedId. \r\n   * @param {Number} incrementValue The value of increment.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static incrementScale(requestingComponentPath, attachedScale, incrementValue, runtime) {\r\n    const scaleValueInputPath =SpecialClickActionsHelper.buildScaleValueInput(requestingComponentPath, attachedScale);\r\n    runtime.eventEmitter.emit(`${scaleValueInputPath}-incrementScale`, incrementValue);\r\n  }\r\n\r\n  // private stuff -----------------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Common kernel of the back/forward/home methods.\r\n   */\r\n  static doHistoryMoveOnAncestor(requestingComponentPath, historyMove, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    if (pageAreaPath === undefined) {\r\n      console.log(`Cannot switch ${historyMove} in page history: No receiving page area found. Receiver path in action: ${actionParam.receiverPath}, requesting component path: ${requestingComponentPath}`);\r\n      return;\r\n    }\r\n\r\n    // TODO: What about this asymmetry: Checking enablement via CbaPageArea but doing the switch via TaskManager.\r\n    //  We need the rerender call in the TaskManager.doHistoryMove method. Therefore we cannot use CbaPageArea.doHistoryMove here.\r\n    //  -> Should we add enablement checking to TaskManager? Or should we move the rendered call to CbaPageArea.soHistoryMove?\r\n    runtime.taskManager.doHistoryMove(pageAreaPath, historyMove);\r\n  }\r\n\r\n  /**\r\n   * Common kernel of the backEnabled/forwardEnabled methods.\r\n   */\r\n  static historyMoveEnabled(requestingComponentPath, historyMove, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    if (pageAreaPath === undefined) {\r\n      return false;\r\n    }\r\n    return CbaPageArea.historyMoveEnabled(pageAreaPath, historyMove, runtime);\r\n\r\n  }\r\n\r\n  /**\r\n   * Internal Helper: Calculate the path of the page area component a command refers to.\r\n   * \r\n   * @param {String} requestingComponentPath The component triggering the command. This provides a default path.\r\n   * @param {String} actionParamReceiverPath The path segment specified by the command configuration.\r\n   */\r\n  static getPageAreaPath(requestingComponentPath, actionParamReceiverPath) {\r\n    const pageAreaPath = actionParamReceiverPath === undefined\r\n      ? IndexPathHelper.findPageAreaAncestorPath(requestingComponentPath)\r\n      : IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(requestingComponentPath), actionParamReceiverPath);\r\n    return pageAreaPath;\r\n  }\r\n\r\n  static buildScaleValueInput(requestingComponentPath, attachedScale) {\r\n    const requestingComponentPathhWithoutLastPageSegment = IndexPathHelper.dropPageSegmentFromPath(requestingComponentPath);\r\n    return IndexPathHelper.appendPageSegmentsToPath(requestingComponentPathhWithoutLastPageSegment, attachedScale);\r\n  }\r\n\r\n}\r\n","import CommonActionsHelper from \"./CommonActionsHelper\";\nimport SpecialClickActionsHelper from \"./SpecialClickActionsHelper\";\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport CbaPageArea from \"./CbaPageArea\";\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport UserDefPathHelper from \"../state/UserDefPathHelper\";\n\n\n/**\n * Helper methods to transform context menu configuration structures.\n */\nexport default class MenuBuildHelper {\n\n  // ----- public API ----------------------------------------------------------------------\n\n  /**\n   * Transform the contextMenu configuration object from a display component configuration \n   * to a context menu configuration suitable for the MenuItemTree.\n   * \n   * @param {*} displayComponentContextMenuConfig The contextMenu configuration object of a display component.\n   * @param {*} event The click event that triggered the context menu.\n   * @param {String} indexPath The index path of the calling component.\n   * @param {String} defaultLinkReceiver The index path of the default link receiver (see CommaonActionsHelper.doPageSwitch()).\n   * @param {*} runtime The common runtime context structure.\n   */\n  static buildMenuTreeItemConfiguration(displayComponentContextMenuConfig, event, indexPath, defaultLinkReceiver, runtime) {\n    return {\n      entries: MenuBuildHelper.transformEntries(displayComponentContextMenuConfig.entries, indexPath, defaultLinkReceiver, runtime),\n      event\n    }\n  }\n\n\n  // ------ private stuff ------------------------------------------------------------------\n\n  static transformEntries(displayComponentEntries, indexPath, defaultLinkReceiver, runtime) {\n    const result = [];\n    displayComponentEntries.forEach((entry, index) => {\n      result.push(MenuBuildHelper.transformEntry(entry, indexPath, defaultLinkReceiver, runtime));\n    });\n    return result;\n  }\n\n  static transformEntry(displayComponentEntry, indexPath, defaultLinkReceiver, runtime) {\n    switch (displayComponentEntry.type) {\n      case 'separator':\n        return MenuBuildHelper.transformSeparatorEntry(displayComponentEntry);\n      case 'submenu':\n        return MenuBuildHelper.transformSubmenuEntry(displayComponentEntry, indexPath, defaultLinkReceiver, runtime);\n      case 'action':\n        return MenuBuildHelper.transformActionEntry(displayComponentEntry, indexPath, runtime);\n      case 'link':\n        return MenuBuildHelper.transformLinkEntry(displayComponentEntry, indexPath, defaultLinkReceiver, runtime);\n      case 'provided':\n        return MenuBuildHelper.transformProvidedEntry(displayComponentEntry, indexPath, runtime);\n      default:\n        console.error(`Invalid context menu configuration entry type: ${displayComponentEntry.type}`, displayComponentEntry);\n        return {\n          type: 'separator'\n        };\n    }\n  }\n\n  static transformSeparatorEntry(orignal) {\n    return {\n      type: 'separator'\n    };\n  }\n\n  static transformSubmenuEntry(original, indexPath, defaultLinkReceiver, runtime) {\n    return {\n      type: 'submenu',\n      label: runtime.translationManager.getTranslatedTextWithFallback(original.userDefinedId, original.label),\n      icon: runtime.translationManager.getTranslatedImageWithFallback(original.userDefinedId, original.icon),\n      disabled: false,\n      submenu: MenuBuildHelper.transformEntries(original.submenu, indexPath, defaultLinkReceiver, runtime)\n    }\n  }\n\n  // temporary solution: disable translation for the bookmark button for now (this should use translated properties of its own)\n  static provideTranslationSupport(indexPath, runtime) {\n    let useTranslation = true;\n    const { type, config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath));\n    const menuTriggeredByButton = (type === 'CbaButton');\n    const buttonHasBookmarkSubType = (config !== undefined && config.subtype === 'bookmark');\n    if (menuTriggeredByButton && buttonHasBookmarkSubType) {\n      useTranslation = false;\n    }\n    return useTranslation;\n  }\n\n  static transformActionEntry(originalEntry, indexPath, runtime) {\n    const useTranslation = MenuBuildHelper.provideTranslationSupport(indexPath, runtime);\n    return {\n      type: 'action',\n      label: useTranslation ? MenuBuildHelper.getActionTextTranslation(originalEntry, runtime) : originalEntry.label,\n      mouseOver: useTranslation ? runtime.translationManager.getTranslatedMouseOverWithFallback(originalEntry.userDefinedId, originalEntry.mouseOver) : originalEntry.mouseOver,\n      icon: useTranslation ? runtime.translationManager.getTranslatedImageWithFallback(originalEntry.userDefinedId, originalEntry.icon) : originalEntry.icon,\n      event: originalEntry.event,\n      action: MenuBuildHelper.buildActionMethod(originalEntry.action, originalEntry.actionParam, indexPath, runtime),\n      disabled: MenuBuildHelper.isActionDisabled(originalEntry.action, originalEntry.actionParam, indexPath, runtime, originalEntry.event)\n    }\n  }\n\n  static getActionTextTranslation(originalEntry, runtime) {\n    const { userDefinedId } = originalEntry;\n    if (userDefinedId !== undefined) {\n      return runtime.translationManager.getTranslatedTextWithFallback(userDefinedId, originalEntry.label);\n    }\n    let translationKey = '';\n    const actionType = originalEntry.action;\n    switch (actionType) {\n      case 'cut':\n        translationKey = 'editCutText';\n        break;\n      case 'copy':\n        translationKey = 'editCopyText';\n        break;\n      case 'paste':\n        translationKey = 'editPasteText';\n        break;\n      case 'back':\n        translationKey = 'naviationBackText';\n        break;\n      case 'forward':\n        translationKey = 'navigationForwardText';\n        break;\n      case 'home':\n        translationKey = 'navigationHomeText';\n        break;\n      case 'addBookmark':\n        translationKey = 'bookmarkAddText';\n        break;\n      case 'manageBookmark':\n        translationKey = 'bookmarkManageText';\n        break;\n      default: break;\n    }\n\n    if (translationKey === '') return originalEntry.label;\n    return runtime.translationManager.getTranslatedTextWithFallback(translationKey, originalEntry.label);\n  }\n\n  static buildActionMethod(actionType, actionParam, indexPath, runtime) {\n    switch (actionType) {\n      case 'cut':\n        return () => { SpecialClickActionsHelper.cut('contextMenu', indexPath, runtime); };\n      case 'copy':\n        return () => { SpecialClickActionsHelper.copy('contextMenu', indexPath, runtime); };\n      case 'paste':\n        return () => { SpecialClickActionsHelper.paste('contextMenu', indexPath, runtime); };\n      case 'next_task':\n        return () => { SpecialClickActionsHelper.nextTask(runtime); };\n      case 'back_task':\n        return () => { SpecialClickActionsHelper.backTask(runtime); };\n      case 'cancel_task':\n        return () => { SpecialClickActionsHelper.cancelTask(runtime); };\n      case 'startFullscreen':\n        return () => { SpecialClickActionsHelper.startFullscreen(runtime); };\n      case 'stopFullscreen':\n        return () => { SpecialClickActionsHelper.stopFullscreen(runtime); };\n      case 'close':\n        return () => { SpecialClickActionsHelper.close(indexPath, runtime); };\n      case 'back':\n        return () => { SpecialClickActionsHelper.back(indexPath, actionParam, runtime); };\n      case 'forward':\n        return () => { SpecialClickActionsHelper.forward(indexPath, actionParam, runtime); };\n      case 'home':\n        return () => { SpecialClickActionsHelper.home(indexPath, actionParam, runtime); };\n      case 'addBookmark':\n        return () => { SpecialClickActionsHelper.addBookmark('contextMenu', indexPath, actionParam, runtime); };\n      case 'manageBookmark':\n        return () => { SpecialClickActionsHelper.manageBookmark('contextMenu', indexPath, actionParam, runtime); };\n      case 'none':\n        return () => { console.log(`Menu button without action activated: ${indexPath}`) };\n      default:\n        console.error(`Unknown action type: ${actionType}`);\n        return () => { console.error(`Cannot process unknown action type: ${actionType}`) };\n    }\n  }\n\n  static isActionDisabled(actionType, actionParam, indexPath, runtime, event) {\n    switch (actionType) {\n      case 'cut':\n        return !SpecialClickActionsHelper.cutEnabled(runtime);\n      case 'copy':\n        return !SpecialClickActionsHelper.copyEnabled(runtime);\n      case 'paste':\n        return !SpecialClickActionsHelper.pasteEnabled(runtime);\n      case 'next_task':\n        return !SpecialClickActionsHelper.nextTaskEnabled(runtime);\n      case 'back_task':\n        return !SpecialClickActionsHelper.backTaskEnabled(runtime);\n      case 'back':\n        return !SpecialClickActionsHelper.backEnabled(indexPath, actionParam, runtime);\n      case 'forward':\n        return !SpecialClickActionsHelper.forwardEnabled(indexPath, actionParam, runtime);\n      case 'none':\n        return event === undefined;\n      default:\n        return false;\n    }\n  }\n\n  static transformLinkEntry(originalEntry, indexPath, defaultLinkReceiver, runtime) {\n    return {\n      type: 'action',\n      label: runtime.translationManager.getTranslatedTextWithFallback(originalEntry.userDefinedId, originalEntry.label),\n      mouseOver: runtime.translationManager.getTranslatedMouseOverWithFallback(originalEntry.userDefinedId, originalEntry.mouseOver),\n      icon: runtime.translationManager.getTranslatedImageWithFallback(originalEntry.userDefinedId, originalEntry.icon),\n      event: originalEntry.event,\n      action: () => { CommonActionsHelper.doPageSwitch(originalEntry.link, runtime, defaultLinkReceiver, indexPath); },\n      disabled: false\n    }\n  }\n\n  static transformProvidedEntry(originalEntry, indexPath, runtime) {\n    const pageAreaPath = originalEntry.providerParam === undefined\n      ? IndexPathHelper.findPageAreaAncestorPath(indexPath)\n      : IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(indexPath), originalEntry.providerParam);\n    const bookmarks = CbaPageArea.getBookmarks(pageAreaPath, runtime);\n    const menuEntries = bookmarks.map((pageEntry) => {\n      const pageLabel = pageEntry.pageUrl ? pageEntry.pageUrl : \"\";\n      const pageAreaTab = pageEntry.pageTab === undefined ? undefined : {\n        name: pageEntry.pageTab,\n        image: pageEntry.pageImage\n      }\n\n      return {\n        type: 'action',\n        label: pageLabel,\n        mouseOver: `Switch browser to ${pageLabel}`,\n        icon: pageEntry.pageImage,\n        disabled: false,\n        action: () => {\n          // Note: Delegating the trace operation makes sure that the trace timestamp is taken when executing the menu action: \n          MenuBuildHelper.trace(indexPath, pageAreaPath, pageEntry.pageName, pageEntry.pageUrl, pageEntry.pageTab, runtime);\n          runtime.taskManager.switchEmbeddedPage(pageAreaPath, pageEntry.pageName, pageEntry.pageUrl, pageAreaTab);\n        }\n      }\n    });\n\n    return {\n      type: 'dynamicItems',\n      provider: () => menuEntries,\n      providerParam: undefined\n    }\n  }\n\n  /**\n * Create a trace log entry for a bookmark select action\n * \n * @param {String} triggeringIndexPath The index path of the triggering display component instance.\n * @param {String} ownerIndexPath The index path of the display component owining the bookmarks.\n * @param {String} pageName The name pf the page of the bookmark.\n * @param {String} pageUrl The URL pf the page of the bookmark.\n * @param {String} tab The browser tab the bookmark operates on.\n * @param {*} runtime The common runtime context structure.\n */\n  static trace(triggeringIndexPath, ownerIndexPath, pageName, pageUrl, tab, runtime) {\n    const triggeringUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(triggeringIndexPath, runtime);\n    const ownerUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(ownerIndexPath, runtime);\n\n    runtime.traceLogBuffer.reportEvent(\n      'Bookmark',\n      new Date(),\n      {\n        triggerType: 'contextMenu',\n        triggerIndexPath: triggeringIndexPath,\n        triggerUserDefIdPath: triggeringUserDefPath,\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggeringUserDefPath),\n        operation: 'select',\n        ownerIndexPath,\n        ownerUserDefIdPath: ownerUserDefPath,\n        ownerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(ownerUserDefPath),\n        pageName,\n        pageUrl,\n        tab\n      }\n    );\n  }\n\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Draggable from 'react-draggable';\nimport Dialog from 'react-dialog';\nimport CbaInterpreter from '../components/CbaInterpreter';\nimport RenderingHelper from '../components/RenderingHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\n\nexport default class DialogPresenter extends Component {\n\n  // NOTE: The DialogPresenter has no index path. Therefore it cannot register at the RenderingHelper\n  // via onMount, onUnmount, onReceiveProps. You cannot use RenderingHelper.triggerRenderingViaPath(...) either.\n  static buildDialogIndexPath(taskPath, dialog) {\n    return IndexPathHelper.appendPageSegmentToPathRoot(taskPath, dialog.type, dialog.pageAreaName, IndexPathHelper.buildPageSegment(dialog.pageName));\n  }\n\n  static buildDialogRefKey(dialog) {\n    const { pageAreaType, pageAreaName, pageName } = dialog;\n    return `/type=${pageAreaType}/areaName=${pageAreaName}/pageName=${pageName}`;\n  }\n\n  static isDialogParentInPath(path) {\n    if (path !== undefined) {\n      const currentPageAreaType = IndexPathHelper.getPageAreaTypeFromPath(path);\n      return currentPageAreaType !== undefined && (currentPageAreaType === \"dialog\" || currentPageAreaType === \"modal\");\n    }\n\n    return false;\n  }\n\n  static closeParentDialogFromPath(runtime, path) {\n    if (DialogPresenter.isDialogParentInPath(path)) {\n      const currentPageAreaType = IndexPathHelper.getPageAreaTypeFromPath(path);\n      const currentPageAreaName = IndexPathHelper.getPageAreaNameFromPath(path);\n      const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n\n      runtime.presenterStateManager.hideDialog(currentPageAreaName, currentPageAreaType, currentTaskPath, runtime);\n    } else {\n      console.warn(\"Dialog is not in path - \", path);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    // TODO: CKI Is the self registering a good idea? Why don't we use self registering for other global components?\n    props.runtime.dialogPresenter = this;\n  }\n\n  /*\n  * function to get all dialogs from the presenter state manager\n  */\n  getDialogsFromPresenterStateManager = () => {\n    const { runtime, findPageForPageName } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n    const taskState = runtime.presenterStateManager.getTaskState(currentTaskPath);\n    const filteredDialogs = taskState.dialogs.filter(d => d.visible)\n    const dialogs = this.checkAndSetFocus(filteredDialogs);\n\n    return dialogs.map((dialog) => {\n      const page = findPageForPageName(dialog.pageName, runtime);\n      const { width: pageWidth, height: pageHeight } = page.content.config.position;\n\n      // if no position center object\n      if (!dialog.position) {\n        dialog.position = {\n          x: window.innerWidth / 2 - pageWidth / 2,\n          y: window.innerHeight / 2 - pageHeight / 2,\n        }\n      }\n\n      return {\n        type: dialog.type,\n        position: dialog.position,\n        focused: dialog.focused,\n        pageAreaName: dialog.pageAreaName,\n        pageName: dialog.pageName,\n        visible: dialog.visible\n      }\n    });\n  }\n\n  checkAndSetFocus = (dialogs) => {\n    for (let index = 0; index < dialogs.length; index += 1) {\n      if (dialogs[index].focused) return dialogs;\n      if (index === dialogs.length - 1) {\n        dialogs[index].focused = true;\n      }\n    }\n\n    return dialogs;\n  }\n\n  handleFocusAndDrag = (event, dialog) => {\n    const { runtime } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n\n    // get new position.\n    // TODO: support separate namespaces for dialog/modal:\n    const position = this.getCurrentDialogPosition(dialog);\n\n    // update dialog state in task state and rerender\n    runtime.presenterStateManager.updatePositionAndFocusDialog(dialog.pageAreaName, dialog.type, currentTaskPath, position, runtime);\n    RenderingHelper.triggerRendering(this);\n  }\n\n  getCurrentDialogPosition = (dialog) => {\n    /* Dependent on the use of transform by react-dialog (3rd party library) - could break */\n    // eslint-disable-next-line\n    const dialogInstance = ReactDOM.findDOMNode(this.refs[DialogPresenter.buildDialogRefKey(dialog)]).getElementsByClassName(\"ui-dialog\")[0];\n    const rawTransform = dialogInstance.style.transform.match(/\\(([^)]+)\\)/)[1];\n    const transformValue = rawTransform.split(\",\");\n\n    const x = parseInt(transformValue[0], 10);\n    const y = parseInt(transformValue[1], 10);\n    return {\n      x,\n      y,\n    };\n  }\n\n  buildDialogs = () => {\n    const { runtime, findPageForPageName } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n    return this.getDialogsFromPresenterStateManager().map((dialog, index) => {\n      const isModal = dialog.type === \"modal\";\n      const page = findPageForPageName(dialog.pageName, runtime);\n      const orientation = page.orientation ? \"right\" : \"left\";\n      const { width: pageWidth, height: pageHeight } = page.content.config.position; // maybe make top level height and width accesible to page obj?\n      const dialogPath = DialogPresenter.buildDialogIndexPath(currentTaskPath, dialog);\n      const scaleValue = runtime.app ? runtime.app.state.scaleValue : 1;\n      const dragBounds = {\n        left: -dialog.position.x,\n        top: -dialog.position.y,\n        right: runtime.taskManager.getTopLevelConfiguration().itemWidth-pageWidth-dialog.position.x,\n        bottom: runtime.taskManager.getTopLevelConfiguration().itemHeight-pageHeight-dialog.position.y-25\n      };\n\n      return (\n        <React.Fragment key={DialogPresenter.buildDialogRefKey(dialog)}>\n          <Draggable\n            disabled={!page.closable}\n            scale={scaleValue}\n            bounds={dragBounds}\n          >\n            <div\n              className={`${isModal ? \"cba-modal\" : \"cba-dialog\"} ${dialog.focused ? \"focused\" : \"\"} ${!page.closable ? \"not-closable\" : \"\"}`}\n              onClick={(event) => { this.handleFocusAndDrag(event, dialog) }}\n            >\n              <Dialog\n                // title={props.currentModal} TODO: add title when merging with other debug modals\n                modal={isModal}\n                isResizable={false}\n                hasCloseIcon={page.closable}\n                closeOnEscape={page.closable}\n                width={pageWidth}\n                height={pageHeight + 25} // adding height of topbar\n                onClose={() => this.closeDialog(dialog)}\n                position={dialog.position}\n                ref={DialogPresenter.buildDialogRefKey(dialog)}\n              >\n                <div className=\"dialog-page\">\n                  {/* @Dejan TODO: replace with Modal Manager and move this logic to Modal Manager when merging  */}\n                  <CbaInterpreter runtime={runtime} path={dialogPath} config={page.content} orientation={orientation} />\n                </div>\n              </Dialog>\n            </div>\n          </Draggable>\n          {isModal && <div className=\"ui-dialog-overlay\" /> }\n        </React.Fragment>\n      )\n    })\n  }\n\n  closeDialog = (dialog) => {\n    const { runtime } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n\n    runtime.presenterStateManager.hideDialog(dialog.pageAreaName, dialog.type, currentTaskPath, runtime);\n    RenderingHelper.triggerRendering(this);\n  }\n\n  closeSpecificPageDialog = (pageName) => {\n    const { runtime } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n\n    runtime.presenterStateManager.hideSpecificPageDialog(pageName, currentTaskPath, runtime);\n    RenderingHelper.triggerRendering(this);\n  }\n\n  render() {\n    return (\n      <div>\n        {this.buildDialogs()}\n      </div>\n    )\n  }\n\n}\n\n\nDialogPresenter.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  findPageForPageName: PropTypes.func.isRequired,\n}\n","import throttle from 'lodash.throttle';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport MenuBuildHelper from \"./MenuBuildHelper\";\r\nimport DialogPresenter from '../dialog/DialogPresenter';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\n\r\n/**\r\n * Helper methods that factor out code patterns commonly used by many display components.\r\n */\r\nexport default class CommonActionsHelper {\r\n\r\n  /**\r\n   * Do the usual processing of an onClick event on a display component:\r\n   *  - Trace a user interaction.\r\n   *  - Do a page switch according to the link specification.\r\n   *  - Send a standard state machine event.\r\n   * w\r\n   * @param {*} event The onClick event triggering the processing.\r\n   * @param {*} traceValues Values to add to the on click trace log (may be undefined if there is nothing to add).\r\n   * @param {*} component The diplay component instance.\r\n   */\r\n  static doStandardOnClick(event, traceValues, component) {\r\n    const { config, path, runtime } = component.props;\r\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path, traceValues, event, runtime);\r\n    CommonActionsHelper.doPageSwitchForComponent(component);\r\n    CommonActionsHelper.sendStandardEvent(config, runtime);\r\n  }\r\n\r\n  /**\r\n   * Trace user interaction of an onClick event on a frozen display component:\r\n   *\r\n   * @param {String} path The Index Path of the display component instance.\r\n   * @param {*} runtime The common runtime object.\r\n   * @param {*} componentTypeValue The component type value to be traced.\r\n   */\r\n  static doStandardOnFrozenInteraction(path, runtime, componentTypeValue) {\r\n    CommonActionsHelper.traceUserInteraction(\r\n      'FrozenComponentInteraction', path,\r\n      {\r\n        componentType: componentTypeValue,\r\n      },\r\n      undefined, undefined, runtime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Do the basic processing of an onClick event on a display component:\r\n   *  - Start a new user interaction as far as replay is concerned.\r\n   *  - Stop propagation of the event to parent components.\r\n   *  - Deregister other current selection provider and insert position at the clipboard manager.\r\n   * \r\n   * @param {*} event The onClick event triggering the processing.\r\n   * @param {String} path The Index Path of the display component instance.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static doBasicOnClick(event, path, runtime) {\r\n    runtime.replayStepMonitor.incrementReplayStep();\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n    CommonActionsHelper.signalFocusChangeToClipboardManager(path, runtime);\r\n  }\r\n\r\n  /**\r\n   * Stop the propagation of the given event.\r\n   * \r\n   * @param {*} event \r\n   */\r\n  static stopEventPropagation(event) {\r\n    if (event !== undefined) {\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deregister other components as selection provider and insert position in the clipboard manager.\r\n   * \r\n   * @param {String} path The Index Path of the component. \r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static signalFocusChangeToClipboardManager(path, runtime) {\r\n    runtime.clipboardManager.registerFocus(path);\r\n  }\r\n\r\n  /**\r\n   * Signal a user interaction to the user interaction counter and the trace log using the trace log config structure.\r\n   * \r\n   * @param {*} config The component's configuration object containing the trace config structure.\r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static traceUserInteractionPerConfig(config, path, values, browserEvent, runtime) {\r\n    CommonActionsHelper.traceUserInteractionPerTraceConfig(config.trace, path, values, browserEvent, runtime);\r\n  }\r\n\r\n  /**\r\n   * Signal a user interaction to the user interaction counter and the trace log using the trace log config structure.\r\n   * \r\n   * @param {*} traceConfig The trace configuration structure from the component's configuration object.\r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static traceUserInteractionPerTraceConfig(traceConfig, path, values, browserEvent, runtime) {\r\n    if (traceConfig.skipTrace === undefined || traceConfig.skipTrace !== true) {\r\n      const extendedValues = {};\r\n      CommonActionsHelper.extendTraceDetailsObject(extendedValues, traceConfig.addOn);\r\n      CommonActionsHelper.extendTraceDetailsObject(extendedValues, values);\r\n\r\n      CommonActionsHelper.traceUserInteraction(traceConfig.type, path, extendedValues, browserEvent, undefined, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Signal a user interaction to the user interaction counter and the trace log.\r\n   * \r\n   * @param {string} eventType The type of event to log in the trace log.\r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {{type: String, value: String}} continuingInteractionKey The key used to identify a user interaction that might trigger \r\n   *  several consecutive calls but should be counted as a single interaction only. \r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static traceUserInteraction(eventType, path, values, browserEvent, continuingInteractionKey, runtime) {\r\n    const details = CommonActionsHelper.buildTraceLogDetails(path, values, browserEvent, runtime);\r\n    const timestamp = new Date();\r\n    runtime.incidentsAccumulator.userInteraction(timestamp.getTime(), continuingInteractionKey, runtime);\r\n    runtime.traceLogBuffer.reportEvent(eventType, timestamp, details);\r\n  }\r\n\r\n  /**\r\n   * Signal a user scroll interaction to the user interaction counter and the trace log.\r\n   * Function auto throttles itself to 2 calls per second\r\n   * \r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} runtime The common runtime object.\r\n   * \r\n   * @returns {Function(event)} Function must be added to the onScroll event of a Component\r\n   */\r\n  static traceUserScroll(path, runtime, xPath, isXPageFirst) {\r\n    let lastScrollValue;\r\n    let currentScrollValue\r\n    let lastOrientationValue;\r\n    let currentOrientationValue;\r\n    const throttleOptions = {\r\n      leading: false\r\n    }\r\n\r\n    const throttleTraceScrollFunction = throttle(TraceLogHelper.traceScrollWrap(), 500, throttleOptions);\r\n\r\n    return (event) => {\r\n      event.stopPropagation();\r\n      lastScrollValue = currentScrollValue;\r\n      currentScrollValue = TraceLogHelper.getScrollDataFromEvent(event);\r\n\r\n      let tracePath;\r\n\r\n      // xpage case (cannot assign a onScroll function. on scroll is captured at a higher level and computes path based on which comes first.)\r\n      if (xPath) {\r\n        const isScrollOnPane1 = event.target.className.includes(\"Pane1\");\r\n        if (isXPageFirst) {\r\n          tracePath = isScrollOnPane1 ? xPath : path;\r\n        } else {\r\n          tracePath = isScrollOnPane1 ? path : xPath;\r\n        }\r\n      } else {\r\n        tracePath = path;\r\n      }\r\n\r\n      lastOrientationValue = currentOrientationValue;\r\n      currentOrientationValue = TraceLogHelper.computeScrollOrientation(currentScrollValue, lastScrollValue);\r\n\r\n      if (lastOrientationValue && lastOrientationValue.direction && (lastOrientationValue.direction !== currentOrientationValue.direction)) {\r\n        TraceLogHelper.traceScroll(tracePath, runtime, currentScrollValue, currentOrientationValue);\r\n      }\r\n\r\n      throttleTraceScrollFunction(currentScrollValue, currentOrientationValue, tracePath, runtime);\r\n    };\r\n\r\n  }\r\n\r\n  /**\r\n   * Build the details structure for trace log entries triggered by display components.\r\n   * \r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static buildTraceLogDetails(path, values, browserEvent, runtime) {\r\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime);\r\n    const details = {\r\n      indexPath: path,\r\n      userDefIdPath,\r\n      userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\r\n    };\r\n    CommonActionsHelper.addMouseEventDetails(browserEvent, details);\r\n    CommonActionsHelper.extendTraceDetailsObject(details, values);\r\n    return details;\r\n  }\r\n\r\n  /**\r\n   * Extend the given oldValues trace details object with the values given. \r\n   * \r\n   * @param {*} detailsObject The trace details object to be extended.\r\n   * @param {*} valuesToAdd The attributes to add to the trace details object.\r\n   */\r\n  static extendTraceDetailsObject(detailsObject, valuesToAdd) {\r\n    if (valuesToAdd !== undefined) {\r\n      Object.keys(valuesToAdd).forEach((attribute) => {\r\n        detailsObject[attribute] = valuesToAdd[attribute];\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add properties specific to MouseEvents to the given trace log details object.\r\n   * \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that might be a MouseEvent.\r\n   * @param {*} traceDetails The trace log details where we should add the MouseEvent attribute values to.\r\n   */\r\n  static addMouseEventDetails(browserSideEvent, traceDetails) {\r\n    if (browserSideEvent !== undefined) {\r\n      traceDetails.clientX = browserSideEvent.clientX;\r\n      traceDetails.clientY = browserSideEvent.clientY;\r\n      traceDetails.pageX = browserSideEvent.pageX;\r\n      traceDetails.pageY = browserSideEvent.pageY;\r\n      traceDetails.screenX = browserSideEvent.screenX;\r\n      traceDetails.screenY = browserSideEvent.screenY;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Build a trace log additional value object for the 'old selected' status \r\n   * to use as values parameter in the traceUserInteraction method.\r\n   * \r\n   * @param {*} pathState The component's state to extract the selected value from.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static buildOldSelectedTraceLogValueObject(selectedState) {\r\n    return {\r\n      oldSelected: selectedState\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the standard or alternate event according to the 'selected' state of the component instance. \r\n   * \r\n   * @param {*} selectedState The 'selected' state of the component instance.\r\n   * @param {*} props The component's configuration object.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static sendStandardOrAlternateEvent(selectedState, props, runtime) {\r\n    if (selectedState) {\r\n      CommonActionsHelper.sendAlternateEvent(props, runtime);\r\n    } else {\r\n      CommonActionsHelper.sendStandardEvent(props, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the standard state machine event according to the display component's configuration.\r\n   * \r\n   * @param {*} props The component's configuration object.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static sendStandardEvent(props, runtime) {\r\n    const event = props.event.standard;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a standard event using only the name of the event\r\n   * \r\n   * @param {\"String\"} name the name of the event\r\n   * @param {*} runtime the common runtime object\r\n   */\r\n  static sendEvent(name, runtime) {\r\n    if (name !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(name);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the alternate state machine event according to the display component's configuration.\r\n   * \r\n   * @param {*} props The component's configuration object.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static sendAlternateEvent(props, runtime) {\r\n    const event = props.event.alternate === undefined ? props.event.standard : props.event.alternate;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the state machine event according to the display component's configured onFocusIn event.\r\n   * \r\n   * @param {*} component The display component instance.\r\n   */\r\n  static doStandardOnFocus(component) {\r\n    const { props } = component;\r\n    const { config, runtime } = props;\r\n\r\n    const event = config.event.onFocusIn;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the state machine event according to the display component's configured onFocusOut event.\r\n   * \r\n   * @param {*} component The display component instance.\r\n   */\r\n  static doStandardOnBlur(component) {\r\n    const { props } = component;\r\n    const { config, runtime } = props;\r\n\r\n    const event = config.event.onFocusOut;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the page switch for the specified display component instance.\r\n   * @param {*} component \r\n   */\r\n  static doPageSwitchForComponent(component) {\r\n    const defaultLinkReceiver = CommonActionsHelper.getDefaultLinkReceiver(component);\r\n    CommonActionsHelper.doPageSwitch(component.props.config.link, component.props.runtime, defaultLinkReceiver, component.props.path);\r\n  }\r\n\r\n\r\n  /**\r\n   * Perform the page switch specified in the given link specification.\r\n   * \r\n   * @param {*} link The link specification object from the display component's configuration.\r\n   * @param {*} runtime The common runtime object.\r\n   * @param {*} defaultReceiver An optional receiving page area to be specified if the display component sits in a page that is embedded in a page area that catches page switches.\r\n   * @param {*} path Path of the component requesting the page switch\r\n   */\r\n  static doPageSwitch(link, runtime, defaultReceiver, path) {\r\n    const targetReceiver = CommonActionsHelper.buildTargetReceiver(link, defaultReceiver, path);\r\n    const targetPage = link.page;\r\n    const conditionalLink = link.conditional;\r\n    const { pageUrl, historyMove } = link;\r\n    if (targetPage !== undefined || conditionalLink !== undefined || (targetReceiver !== undefined && historyMove !== undefined)) {\r\n      if (path !== undefined && DialogPresenter.isDialogParentInPath(path)) {\r\n        DialogPresenter.closeParentDialogFromPath(runtime, path);\r\n      }\r\n\r\n      runtime.taskManager.switchPage(\r\n        targetPage,\r\n        conditionalLink,\r\n        pageUrl,\r\n        link.pageAreaType == null ? IndexPathHelper.getPageAreaTypeFromPath(path) : link.pageAreaType,\r\n        link.pageAreaName == null ? IndexPathHelper.getPageAreaNameFromPath(path) : link.pageAreaName,\r\n        targetReceiver,\r\n        link.receiverTab,\r\n        link.historyMove,\r\n        undefined\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal helper method: Get position of the top level component in the page given by the page's name.\r\n   */\r\n  static getTopComponentPosition(pageName, pageConfigurationsManager) {\r\n    const targetPageConfig = pageConfigurationsManager.findPage(pageName);\r\n    if (targetPageConfig === undefined) {\r\n      console.error(`Could not find configuration for page: ${pageName}`);\r\n      return undefined;\r\n    }\r\n    const { content } = targetPageConfig;\r\n    if (content === undefined) {\r\n      console.error(`Could not find content in configuration of page ${pageName}: ${targetPageConfig}`);\r\n      return undefined;\r\n    }\r\n    const { config } = content;\r\n    if (config === undefined) {\r\n      console.error(`Could not find config for content in page ${pageName}: ${content}`);\r\n      return undefined;\r\n    }\r\n    const { position } = targetPageConfig.content.config;\r\n    return {\r\n      x: position.x,\r\n      y: position.y\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the default link receiver from the state of the display component instance.\r\n   * \r\n   * @param {*} component The display component instance.\r\n   */\r\n  static getDefaultLinkReceiver(component) {\r\n    if (component.props === undefined) {\r\n      console.error(`Component without props detected: ${component}`);\r\n      return undefined;\r\n    }\r\n    const pathState = ComponentStateHelper.getState(component);\r\n    return StateAttributeAccess.extractDefaultLinkReceiver(pathState);\r\n  }\r\n\r\n  static computeMenuPosition(runtime, baseX, baseY) {\r\n    const scaleValue = runtime.app ? runtime.app.state.scaleValue : 1;\r\n    const appDivElement = document.querySelector(`.${\"appDiv\"}`);\r\n    const { left: appMarginLeft, top: appMarginTop } = (appDivElement !== null) ? appDivElement.getBoundingClientRect() : {\r\n      left: 0,\r\n      top: 0\r\n    };\r\n    const x = (baseX - appMarginLeft)/(scaleValue);\r\n    const y = (baseY - appMarginTop)/(scaleValue);\r\n    return {\r\n      clientX: x,\r\n      clientY: y\r\n    };\r\n  }\r\n\r\n\r\n  /**\r\n   * Open the context menu for the calling display component instance. \r\n   * \r\n   * @param {*} component The calling display component instance.\r\n   * @param {MouseEvent} event The mouse event opening the context menu.\r\n   */\r\n  static doContextMenuOpen(component, event) {\r\n    const { props } = component;\r\n\r\n    if (props === undefined || props.runtime === undefined\r\n      || props.config === undefined) {\r\n      console.error(\"Cannot open context menu for component.\", props);\r\n      return;\r\n    }\r\n\r\n    const { runtime, config, path: indexPath } = props;\r\n    const { contextMenu } = config;\r\n\r\n    if (contextMenu !== undefined) {\r\n      event.stopPropagation();\r\n\r\n      const menuPosition = CommonActionsHelper.computeMenuPosition(runtime, event.clientX, event.clientY);\r\n      event.clientX = menuPosition.clientX;\r\n      event.clientY = menuPosition.clientY;\r\n\r\n      runtime.contextMenu.openMenuItemTreeWithDynamicConfig(\r\n        MenuBuildHelper.buildMenuTreeItemConfiguration(\r\n          contextMenu,\r\n          event,\r\n          indexPath,\r\n          CommonActionsHelper.getDefaultLinkReceiver(component),\r\n          runtime\r\n        )\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Register or deregister the current selection of a textarea or input tag for cut&paste due to a click or select event.\r\n   * \r\n   * Firefox and Chrome differ a bit with selection data in the events and events sequence when dropping a selection. \r\n   * Fortunately both send the proper selection data with the last event triggered by each selecting or deselecting action.\r\n   * Therefore we have to process the selected text in onClick and onSelection. \r\n   * \r\n   * @param {*} path The index path of the display component instance.\r\n   * @param {*} event The event that triggers the selection processing.\r\n   * @param {*} readOnly Is the component read only, i.e. it cannot do a 'cut' operation.\r\n   * @param {*} cutCallback The method to call at an actual cut operation to replace the selected text.\r\n   * @param {*} cutCallbackObj The component instance on which will be applied the 'cut' operation.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static processSelectedTextForCutAndPaste(path, event, readOnly, cutCallback, cutCallbackObj, runtime) {\r\n    const { selectionStart, selectionEnd, value } = event.target;\r\n    const selectedText = `${value.substring(selectionStart, selectionEnd)}`;\r\n    if (selectedText === undefined || selectedText.length === 0) {\r\n      runtime.clipboardManager.deregisterSelection(path);\r\n    } else {\r\n      runtime.clipboardManager.registerSelection(\r\n        path,\r\n        (drop) => {\r\n          if (drop && !readOnly && cutCallback !== undefined) {\r\n            cutCallback(cutCallbackObj, selectionStart, selectionEnd, '');\r\n          }\r\n          return selectedText;\r\n        },\r\n        () => readOnly\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------------- private stuff -------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the target receiver from link and defaultReceiver:\r\n   * \r\n   * - If no default receiver is given (i.e. no intercepting embedding page area) just use the receiver given in the link.\r\n   * - If a default receiver is given and the link specifies a different top level page area than the default receiver then \r\n   *   return the receiver of the link: The embedding page area does not intercept a page setting in a foreign top level page area.\r\n   * - If a default receiver is given and the top level page area specified by the link is the same as the top level page area\r\n   *   of the defaultReceiver (i.e. the intercepting embedding page area) concatenate receiver of intercepting page area and link:  \r\n   *   The receiver in the link becomes relative to the intercepting embedding page. (If the link specifies no specific receiver\r\n   *   just use the default receiver instead of concatenating both: The link sets the page embedded in the embedding page area itself.)\r\n   */\r\n  static buildTargetReceiver(link, defaultReceiver, pathOfLinkRequestor) {\r\n    let targetReceiver;\r\n    if (defaultReceiver === undefined) {\r\n      targetReceiver = link.receiver;\r\n    } else if (CommonActionsHelper.linkTargetsOtherPageArea(link, pathOfLinkRequestor)) {\r\n      targetReceiver = link.receiver;\r\n    } else if (link.receiver === undefined) {\r\n      targetReceiver = defaultReceiver;\r\n    } else {\r\n      targetReceiver = IndexPathHelper.appendPageSegmentsToPath(defaultReceiver, link.receiver);\r\n    }\r\n    return targetReceiver;\r\n  }\r\n\r\n  /**\r\n   * Internal helper: Does the given link target the page area of the link requesting component?\r\n   */\r\n  static linkTargetsOtherPageArea(link, pathOfLinkRequestor) {\r\n    if (link.pageAreaName === undefined || link.pageAreaType === undefined) {\r\n      // link does not specifiy a proper page area of its own -> assume page area of calling component is to be used\r\n      return false;\r\n    }\r\n    return link.pageAreaType !== IndexPathHelper.getPageAreaTypeFromPath(pathOfLinkRequestor) || link.pageAreaName !== IndexPathHelper.getPageAreaNameFromPath(pathOfLinkRequestor);\r\n  }\r\n\r\n}\r\n","import IndexPathHelper from '../../state/IndexPathHelper';\r\n\r\n/**\r\n * Helper methods used by CbaRichTextField \r\n * to calculate positions in the Draft.js editor state \r\n * taking 'content modifiers' into account.\r\n */\r\nexport default class PositionCalculationHelper {\r\n\r\n  /**\r\n   * Positions (block key and character offset) as given in the CbaRichTextField configuration \r\n   * are valid as long a no content modifiers are applied to the editor state. \r\n   * As soon as content modifiers change the block content of the editor state one has to \r\n   * apply an offset to obtain positions that take the modifications done by the \r\n   * content modifiers into account.\r\n   * \r\n   * The method calculates the actual position for the given modifier in the given editor state.\r\n   * \r\n   * @param {*} targetModifier The static configuration (from the contentModifiers list in the static configuration of the rich text field) of the content modifier to calculate the actual target position for.\r\n   * @param {[*]} configBlocks The text blocks as specified in the static configuration of the rich text field.\r\n   * @param {{}} blockKeyToIndexMap A map from each block key to its index in the configBlocks array.\r\n   * @param {[*]} configContentModifiers The content modifiers list in the static configuration of the rich text field.\r\n   * @param {{}} contentModifiersInEditorState The extract of the modifications implanted by the content modifiers in the current editor state.\r\n   * @param {string} contentModifierParentPath The parent path used to calculate the content modifiers' path ids with.\r\n   * @param {*} editorState The current editor state in which the calculated actual target position should be valid.\r\n   */\r\n  static calculateActualPosition(\r\n    targetModifier,\r\n    configBlocks,\r\n    blockKeyToIndexMap,\r\n    configContentModifiers,\r\n    contentModifiersInEditorState,\r\n    contentModifierParentPath,\r\n    editorState\r\n  ) {\r\n    const actualPositionOffset = PositionCalculationHelper.calculateCurrentPositionOffset(\r\n      targetModifier,\r\n      configBlocks,\r\n      blockKeyToIndexMap,\r\n      configContentModifiers,\r\n      contentModifiersInEditorState,\r\n      contentModifierParentPath\r\n    );\r\n    const modifierPosition = targetModifier.config.position;\r\n    const actualBlockKey = PositionCalculationHelper.calculateBlockKey(modifierPosition.blockKey, actualPositionOffset.blockOffset, editorState);\r\n    if (actualBlockKey === undefined) {\r\n      console.error(`Actual block key undefined for ${targetModifier.config.userDefinedId}`);\r\n    }\r\n    return {\r\n      blockKey: actualBlockKey,\r\n      offset: modifierPosition.offset + actualPositionOffset.characterOffset\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * The method calculates the block key for the requested block (specified by the start block key and a block offset) \r\n   * in the given editor state. \r\n   * \r\n   * @param {*} startBlockKey The block key of the block the given block offset is applied to.\r\n   * @param {*} blockOffset The block offset to apply to the startBlockKey.\r\n   * @param {*} editorState The editor state containing the targeted block.\r\n   */\r\n  static calculateBlockKey(startBlockKey, blockOffset, editorState) {\r\n    const contentState = editorState.getCurrentContent();\r\n    let movedBlockKey = startBlockKey;\r\n    let offsetCounter;\r\n    for (offsetCounter = 0; offsetCounter < blockOffset; offsetCounter+=1) {\r\n      movedBlockKey = contentState.getKeyAfter(movedBlockKey);\r\n    }\r\n    return movedBlockKey;\r\n  }\r\n\r\n\r\n  /**\r\n   * The method calculates the necessary offset (block offset and character offset)\r\n   * to be applied to a given 'config' position to obtain the 'actual' position in the\r\n   * editor state.\r\n   * \r\n   * @param {*} targetModifier The content modifier (in the contentModifiers list) to calculate the actual target position for.\r\n   * @param {[*]} configBlocks The text blocks as specified in the configuration.\r\n   * @param {{}} blockKeyToIndexMap A map from each block key to its index in the configBlocks array.\r\n   * @param {[*]} configContentModifiers The content modifiers specified in the configuration.\r\n   * @param {{}} contentModifiersInEditorState The activation status of the content modifiers in the current editor state.\r\n   * @param {string} contentModifierParentPath The parent path used to calculate the content modifiers' path ids with.\r\n   */\r\n  static calculateCurrentPositionOffset(\r\n    targetModifier,\r\n    configBlocks,\r\n    blockKeyToIndexMap,\r\n    configContentModifiers,\r\n    contentModifiersInEditorState,\r\n    contentModifierParentPath\r\n  ) {\r\n\r\n    // Only currently activated modifiers and modifiers in the our target block and before our target position can affect our calculations:\r\n    const targetModifierBlockKey = targetModifier.config.position.blockKey;\r\n    const relevantModifiers = configContentModifiers.filter((modifier, index, all) => {\r\n      const stateInEditorState = PositionCalculationHelper.getModifierStateInEditorState(index, contentModifierParentPath, contentModifiersInEditorState);\r\n      return (PositionCalculationHelper.isEvaluatedInject(modifier) ? stateInEditorState.injectText !== \"\" : stateInEditorState.active)\r\n        && PositionCalculationHelper.inBlock(modifier, targetModifierBlockKey) && PositionCalculationHelper.beforePosition(modifier, targetModifier, blockKeyToIndexMap);\r\n    });\r\n\r\n\r\n    // The block offset is the sum of all blocks added by active dynamic fragments before our target position.\r\n    const blockShiftingModifiers = relevantModifiers.filter((modifier, index, all) => PositionCalculationHelper.hasMoreThanOneBlock(modifier));\r\n    const blockOffset = blockShiftingModifiers.reduce((total, currentBlockShifter) => total + currentBlockShifter.config.blocks.length - 1, 0);\r\n\r\n\r\n    // To calculate the character offset we have to consider the last block-creating fragment in the target block before the target position. \r\n    // If such a fragment exists, its last block replaces all characters in the target block up to the fragment's position \r\n    // and we start calculating the character offset from this position and with an initial value of (characters in replacing block - character up to fragment's position on old block).\r\n    // If no such fragment exists we start calculating the character offset with inital value 0 at the beginning of the target block.\r\n    // Now we add to the character offset the count of characters injected by all active modifiers up to the target position.\r\n\r\n    const lastBlockShifterInSameBlock = PositionCalculationHelper.getLastModifierPerOffset(blockShiftingModifiers);\r\n    const characterSwitchersStartOffset = lastBlockShifterInSameBlock === undefined ? 0 : lastBlockShifterInSameBlock.config.position.offset;\r\n    const characterSwitchersStartIndex = lastBlockShifterInSameBlock === undefined ? 0 : lastBlockShifterInSameBlock.config.position.index;\r\n    const characterOffsetStartValue = lastBlockShifterInSameBlock === undefined ? 0\r\n      : PositionCalculationHelper.getLastBlockOfFragment(lastBlockShifterInSameBlock).text.length - lastBlockShifterInSameBlock.config.position.offset;\r\n\r\n    // Note: We need the index in the array of all configModifiers to calculate the injected text for evaluating modifiers. \r\n    //       Therefore we have to map the full contentModifiers array here! \r\n    const allCharacterShifterTexts = configContentModifiers.map((modifier, index, all) => {\r\n      if (!PositionCalculationHelper.afterPositionInSameBlock(modifier, targetModifierBlockKey, characterSwitchersStartOffset, characterSwitchersStartIndex)) return \"\";\r\n      if (!PositionCalculationHelper.beforePosition(modifier, targetModifier, blockKeyToIndexMap)) return \"\";\r\n      if (PositionCalculationHelper.isDynamicFragment(modifier)) {\r\n        return PositionCalculationHelper.getModifierStateInEditorState(index, contentModifierParentPath, contentModifiersInEditorState).active ? modifier.config.blocks[0].text : \"\";\r\n      }\r\n      if (PositionCalculationHelper.isEvaluatedInject(modifier)) {\r\n        return PositionCalculationHelper.getModifierStateInEditorState(index, contentModifierParentPath, contentModifiersInEditorState).injectText;\r\n      }\r\n      return \"\";\r\n    });\r\n\r\n    const characterOffset = allCharacterShifterTexts.reduce((total, injectedText) => total + injectedText.length, characterOffsetStartValue);\r\n\r\n\r\n    return {\r\n      blockOffset,\r\n      characterOffset\r\n    }\r\n  }\r\n\r\n\r\n  static isDynamicFragment(modifier) {\r\n    return modifier.type === 'DynamicFragment';\r\n  }\r\n\r\n  static isEvaluatedInject(modifier) {\r\n    return modifier.type === 'EvaluatedInject';\r\n  }\r\n\r\n  static hasMoreThanOneBlock(modifier) {\r\n    return PositionCalculationHelper.isDynamicFragment(modifier) && modifier.config.blocks.length > 1;\r\n  }\r\n\r\n  static beforePosition(candidateModifier, compareModifier, blockKeyToIndexMap) {\r\n    const candidatePosition = candidateModifier.config.position;\r\n    const comparePosition = compareModifier.config.position;\r\n    const candidateBlockIndex = blockKeyToIndexMap[candidatePosition.blockKey];\r\n    const compareBlockIndex = blockKeyToIndexMap[comparePosition.blockKey];\r\n\r\n    // check blocks: \r\n    if (candidateBlockIndex < compareBlockIndex) return true;\r\n    if (candidateBlockIndex > compareBlockIndex) return false;\r\n\r\n    // blocks are the same, now check offsets in block:\r\n    if (candidatePosition.offset < comparePosition.offset) return true;\r\n    if (candidatePosition.offset > comparePosition.offset) return false;\r\n\r\n    // character offset are the same also, now check index:\r\n    return candidatePosition.index < comparePosition.index;\r\n  }\r\n\r\n  static afterPositionInSameBlock(candidateModifier, compareBlockKey, compareOffset, compareIndex) {\r\n    const candidatePosition = candidateModifier.config.position;\r\n    return (candidatePosition.blockKey === compareBlockKey)\r\n      && (candidatePosition.offset > compareOffset || (candidatePosition.offset === compareOffset && candidatePosition.index > compareIndex));\r\n  }\r\n\r\n  static inBlock(candidateModifier, compareBlockKey) {\r\n    return candidateModifier.config.position.blockKey === compareBlockKey;\r\n  }\r\n\r\n  static getLastBlockOfFragment(dynamicFragment) {\r\n    const { blocks } = dynamicFragment.config;\r\n    return blocks.length < 1 ? undefined : blocks[blocks.length - 1];\r\n  }\r\n\r\n  static getLastModifierPerOffset(candidateModifiers) {\r\n    let result;\r\n    candidateModifiers.forEach((candidate, index, all) => {\r\n      if (result === undefined || PositionCalculationHelper.isGreaterPositionOffset(candidate.config.position, result.config.position)) {\r\n        result = candidate;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  static isGreaterPositionOffset(left, right) {\r\n    if (left.offset > right.offset) return true;\r\n    if (right.offset > left.offset) return false;\r\n    return left.index > right.index;\r\n  }\r\n\r\n\r\n  static getModifierStateInEditorState(contentModifierIndex, contentModifierParentPath, contentModifiersInEditorState) {\r\n    const fromState = contentModifiersInEditorState[IndexPathHelper.appendIndexToPageSegment(contentModifierParentPath, contentModifierIndex)];\r\n    return fromState === undefined\r\n      ? {\r\n        injectText: \"\",\r\n        active: false\r\n      }\r\n      : fromState;\r\n  }\r\n\r\n\r\n}\r\n","import { EditorState, Modifier, SelectionState, convertFromRaw, RichUtils } from 'draft-js';\r\n\r\n/**\r\n * Helper methods to work with the Draft.js editor state.\r\n */\r\nexport default class EditorStateHelper {\r\n\r\n\r\n  static replaceTextInBlock(editorState, startBlockKey, startOffset, endBlockKey, endOffset, toBeInserted) {\r\n    return EditorState.push(editorState,\r\n      Modifier.replaceText(\r\n        editorState.getCurrentContent(),\r\n        EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset),\r\n        toBeInserted\r\n      ),\r\n      'insert-characters')\r\n  }\r\n\r\n  static replaceWithBlocks(editorState, startBlockKey, startOffset, endBlockKey, endOffset, rawBlocksArrayToInsert, entityMapToInsert) {\r\n    const rawValue = {\r\n      blocks: rawBlocksArrayToInsert,\r\n      entityMap: entityMapToInsert\r\n    };\r\n    const blockMap = convertFromRaw(rawValue).getBlockMap();\r\n    return EditorState.push(editorState,\r\n      Modifier.replaceWithFragment(\r\n        editorState.getCurrentContent(),\r\n        EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset),\r\n        blockMap\r\n      ),\r\n      'insert-fragment')\r\n  }\r\n\r\n  static removeBlocks(editorState, startBlockKey, startOffset, endBlockKey, endOffset) {\r\n    return EditorState.push(editorState,\r\n      Modifier.removeRange(\r\n        editorState.getCurrentContent(),\r\n        EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset),\r\n        'forward'\r\n      ),\r\n      'remove-range')\r\n  }\r\n\r\n  static applyInlineStyles(editorState, startBlockKey, startOffset, endBlockKey, endOffset, styleNames) {\r\n    let modifiedEditorState = editorState;\r\n    if (styleNames !== undefined) {\r\n      const targetSelection = EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset);\r\n      styleNames.forEach((styleName, index, all) => {\r\n        modifiedEditorState = EditorState.push(modifiedEditorState,\r\n          Modifier.applyInlineStyle(modifiedEditorState.getCurrentContent(), targetSelection, styleName),\r\n          'change-inline-style');\r\n      });\r\n    }\r\n    return modifiedEditorState;\r\n  }\r\n\r\n  static applyEntities(editorState, startBlockKey, startOffset, endBlockKey, endOffset, entityNames) {\r\n    let modifiedEditorState = editorState;\r\n    if (entityNames !== undefined) {\r\n      const targetSelection = EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset);\r\n      entityNames.forEach((entityName, index, all) => {\r\n        modifiedEditorState = EditorState.push(modifiedEditorState,\r\n          Modifier.applyEntity(modifiedEditorState.getCurrentContent(), targetSelection, entityName),\r\n          'apply-entity');\r\n      });\r\n    }\r\n    return modifiedEditorState;\r\n  }\r\n\r\n\r\n  static forceSelection(editorState, startBlockKey, startOffset, endBlockKey, endOffset) {\r\n    return EditorState.forceSelection(editorState, EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset))\r\n  }\r\n\r\n  /**\r\n   * \r\n   * Toggle style on a selection in editor state\r\n   * \r\n   * @param {*} editorState \r\n   * @param {*} selection \r\n   * \r\n   * @returns {EditorState} EditorState\r\n   */\r\n  static toggleEditorStateStyleOnSelection(editorState, selection) {\r\n    const { startKey, startOffset, endKey, endOffset, highlightKey } = selection;\r\n    let newEditorState = EditorStateHelper.forceSelection(editorState, startKey, startOffset, endKey, endOffset);\r\n    newEditorState = RichUtils.toggleInlineStyle(newEditorState, highlightKey);\r\n\r\n    return newEditorState;\r\n  }\r\n\r\n  static buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset) {\r\n    return SelectionState.createEmpty('notUsed').merge({\r\n      anchorKey: startBlockKey,\r\n      anchorOffset: startOffset,\r\n      focusKey: endBlockKey,\r\n      focusOffset: endOffset\r\n    });\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CommonActionsHelper from \"../CommonActionsHelper\";\r\nimport IndexPathHelper from '../../state/IndexPathHelper'\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\n\r\n/**\r\n * A display component used by CbaRichTextField to display 'embedded links'. \r\n */\r\nclass DraftLink extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onClickHandler = this.onClickHandler.bind(this);\r\n    this.getData = this.getData.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { runtime, parentPath } = this.props;\r\n    runtime.componentDirectory.registerComponent(DraftLink.buildMyPath(parentPath, this.getData()), this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { runtime, parentPath } = this.props;\r\n    runtime.componentDirectory.deregisterComponent(DraftLink.buildMyPath(parentPath, this.getData()));\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    const { runtime, parentPath } = this.props;\r\n    if (!(parentPath === nextProps.parentPath)) {\r\n      runtime.componentDirectory.deregisterComponent(DraftLink.buildMyPath(parentPath, this.getData()));\r\n      runtime.componentDirectory.registerComponent(DraftLink.buildMyPath(nextProps.parentPath, nextProps.contentState.getEntity(nextProps.entityKey).getData()), this);\r\n    }\r\n  }\r\n\r\n  onClickHandler(event) {\r\n    const { runtime, parentPath, linkReceiver, fullRichTextPath } = this.props;\r\n    const isDisabled = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractDisabled, fullRichTextPath, runtime);\r\n\r\n    if (!isDisabled) {\r\n      const data = this.getData();\r\n      const myPath = DraftLink.buildMyPath(parentPath, data)\r\n\r\n      CommonActionsHelper.doBasicOnClick(event, myPath, runtime);\r\n      CommonActionsHelper.traceUserInteraction('EmbeddedLink', myPath, undefined, event, undefined, runtime);\r\n\r\n      // Update the 'visited' state: \r\n      const state = DraftLink.getOrBuildState(parentPath, data, runtime);\r\n      state.selected = true;\r\n      DraftLink.persistState(state, parentPath, data, runtime);\r\n\r\n      CommonActionsHelper.doPageSwitch(data.link, runtime, linkReceiver, parentPath);\r\n    }\r\n\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      this.onClickHandler(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fix for Firefox not respecting tabIndex=-1 in DraftLink \r\n   * (DraftJS may modify contentEditable attribute making the browser think it should be focus visible)\r\n   * \r\n   * @param {*} event \r\n   */\r\n  handleMouseDown(event) {\r\n    event.currentTarget.contentEditable = true;\r\n    event.currentTarget.contentEditable = false;\r\n  }\r\n\r\n  getData() {\r\n    const { contentState, entityKey } = this.props;\r\n    return contentState.getEntity(entityKey).getData();\r\n  }\r\n\r\n  static getOrBuildState(parentPath, data, runtime) {\r\n    return runtime.componentStateManager.findOrBuildStateForPathId(DraftLink.buildMyPath(parentPath, data), runtime);\r\n  }\r\n\r\n  static persistState(fullState, parentPath, data, runtime) {\r\n    runtime.componentStateManager.registerStateByPathId(DraftLink.buildMyPath(parentPath, data), fullState, runtime);\r\n  }\r\n\r\n  static buildMyPath(parentPath, data) {\r\n    return IndexPathHelper.appendIndexToPageSegment(parentPath, data.id);\r\n  }\r\n\r\n  static buildStyle(state, data) {\r\n    return {\r\n      color: state.selected ? data.color.visited : data.color.notVisited,\r\n      cursor: \"pointer\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { runtime, parentPath, children, tabIndex } = this.props;\r\n    const data = this.getData();\r\n    const state = DraftLink.getOrBuildState(parentPath, data, runtime);\r\n    const style = DraftLink.buildStyle(state, data);\r\n    CommonConfigHelper.setStyleAttribute(style, 'display', 'inline-block');\r\n    CommonConfigHelper.setStyleAttribute(style, 'lineHeight', '1');\r\n    const className = style.color !== undefined ? 'cba-link' : '';\r\n\r\n    return (\r\n      <span\r\n        className={`CbaLink ${className}`}\r\n        style={style}\r\n        onClick={this.onClickHandler}\r\n        onKeyDown={e => this.handleKeyDown(e)}\r\n        onMouseDown={e => this.handleMouseDown(e)}\r\n        tabIndex={tabIndex}\r\n      >\r\n        {children}\r\n      </span>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n/*\r\n  Function which specifies the strategy in finding link entities in DraftJS content\r\n*/\r\nconst findLinkEntities = (contentBlock, callback, contentState) => {\r\n  contentBlock.findEntityRanges(\r\n    (character) => {\r\n      const entityKey = character.getEntity();\r\n      return (\r\n        entityKey !== null && contentState.getEntity(entityKey).getType() === 'LINK'\r\n      );\r\n    },\r\n    callback\r\n  );\r\n}\r\n\r\nDraftLink.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  parentPath: PropTypes.string.isRequired,\r\n  contentState: PropTypes.object.isRequired,\r\n  entityKey: PropTypes.string.isRequired,\r\n  children: PropTypes.array.isRequired,\r\n  fullRichTextPath: PropTypes.string.isRequired,\r\n  linkReceiver: PropTypes.string,\r\n  tabIndex: PropTypes.number,\r\n}\r\n\r\nDraftLink.defaultProps = {\r\n  linkReceiver: undefined,\r\n  tabIndex: -1\r\n}\r\n\r\nexport { DraftLink, findLinkEntities }\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CommonConfigHelper from \"../../config/CommonConfigHelper\";\r\n\r\nconst Audio = (props) => {\r\n  const { src, style } = props;\r\n  return <audio><track kind=\"captions\" controls src={src} style={style} /></audio>;\r\n};\r\n\r\nconst Image = (props) => {\r\n  const { src, style } = props;\r\n  return <img src={src} style={style} alt={src} />;\r\n};\r\n\r\nconst Video = (props) => {\r\n  const { src, style } = props;\r\n  return <video><track kind=\"captions\" controls src={src} style={style} /></video>;\r\n};\r\n\r\nexport const Media = runtime => (\r\n  // Passing arguments to a JavaScript callback function\r\n  (props) => {\r\n    const entity = props.contentState.getEntity(\r\n      props.block.getEntityAt(0)\r\n    );\r\n    const { src, style } = entity.getData();\r\n    const type = entity.getType();\r\n\r\n    const relativePathSrc = CommonConfigHelper.getProperResourcePath(src, runtime);\r\n\r\n    let media;\r\n    if (type === 'audio') {\r\n      media = <Audio src={relativePathSrc} style={style} />;\r\n    } else if (type === 'image') {\r\n      media = <Image src={relativePathSrc} style={style} />;\r\n    } else if (type === 'video') {\r\n      media = <Video src={relativePathSrc} style={style} />;\r\n    }\r\n\r\n    return media;\r\n  });\r\n\r\nAudio.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  style: PropTypes.object.isRequired\r\n}\r\n\r\nImage.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  style: PropTypes.object.isRequired\r\n}\r\n\r\nVideo.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  style: PropTypes.object.isRequired\r\n}\r\n\r\nMedia.propTypes = {\r\n  doHighlight: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Media as default }\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * A react component used by the CbaRichTextField to display bulleted or numbered lists.\r\n */\r\nclass DraftBullet extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.style = this.getStyle();\r\n    this.bullet = this.getBullet();\r\n  }\r\n\r\n  getStyle = () => {\r\n    const { contentState, entityKey } = this.props;\r\n    return contentState.getEntity(entityKey).getData().style;\r\n  }\r\n\r\n  getBullet = () => {\r\n    const { children } = this.props;\r\n    const rawSymbol = children[0].props.text;\r\n    let bullet = \"\";\r\n\r\n    if (rawSymbol.indexOf(\"num-\") === 0) {\r\n      // ordered list\r\n      [, bullet] = rawSymbol.split(\"-\");\r\n    } else {\r\n      // unordered list\r\n      switch (rawSymbol) {\r\n        case \"a\": bullet = String.fromCharCode(\"0x25CF\"); break;// black circle\r\n        case \"b\": bullet = String.fromCharCode(\"0x25CB\"); break;// white circle\r\n        case \"c\": bullet = String.fromCharCode(\"0x25A0\"); break;// black square\r\n        case \"d\": bullet = String.fromCharCode(\"0x25A1\"); break;// white square\r\n        default: bullet = String.fromCharCode(\"0x25CF\"); break;// black circle\r\n      }\r\n    }\r\n\r\n    return bullet;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <span suppressContentEditableWarning=\"true\" className=\"cbaListBullet\" style={this.style} contentEditable=\"false\">\r\n        {this.bullet}\r\n      </span>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst findBulletEntities = (contentBlock, callback, contentState) => {\r\n  contentBlock.findEntityRanges(\r\n    (character) => {\r\n      const entityKey = character.getEntity();\r\n      return (\r\n        entityKey !== null && contentState.getEntity(entityKey).getType() === 'LIST-BULLET'\r\n      );\r\n    },\r\n    callback\r\n  );\r\n}\r\n\r\nDraftBullet.propTypes = {\r\n  contentState: PropTypes.object.isRequired,\r\n  entityKey: PropTypes.string.isRequired,\r\n  children: PropTypes.array.isRequired\r\n}\r\n\r\nexport { findBulletEntities, DraftBullet };\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class MathJaxTranspiler extends Component {\r\n\r\n  componentDidMount() {\r\n    if (!window.MathJax) {\r\n      this.interval = window.setInterval(() => {\r\n        const { MathJax } = window;\r\n\r\n        if (MathJax) {\r\n          this.setState(prevState => ({\r\n            // eslint-disable-next-line react/no-unused-state\r\n            update: prevState + 1\r\n          }));\r\n\r\n          clearInterval(this.interval);\r\n        }\r\n      }, 100);\r\n\r\n      // Timeout for clearing interval if no library is found\r\n      window.setTimeout(() => {\r\n        if (!window.MathJax) {\r\n          console.error(\"MathJax not found, check item dependency library\");\r\n          clearInterval(this.interval);\r\n        }\r\n      }, 10000)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const { MathJax } = window;\r\n    const { tex } = this.props;\r\n\r\n    if (!MathJax) {\r\n      return <span>MathJax Not loaded</span>\r\n    }\r\n\r\n    MathJax.texReset();\r\n\r\n    const result = MathJax.tex2chtml(tex);\r\n\r\n    MathJax.startup.document.clear();\r\n    MathJax.startup.document.updateDocument();\r\n\r\n    return (\r\n      // eslint-disable-next-line react/no-danger\r\n      <span dangerouslySetInnerHTML={{\r\n        __html: result.innerHTML\r\n      }}\r\n      />\r\n    )\r\n  }\r\n\r\n}\r\n\r\nMathJaxTranspiler.propTypes = {\r\n  tex: PropTypes.string.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MathJaxTranspiler from '../MathJax/MathJaxTranspiler'\r\n/**\r\n * A react component used by the CbaRichTextField to display Mathematical expressions via MathJax.\r\n */\r\nclass MathJaxEntity extends React.Component {\r\n\r\n  getPropertyData = (property) => {\r\n    const { contentState, entityKey } = this.props;\r\n    return contentState.getEntity(entityKey).getData()[property];\r\n  }\r\n\r\n  render() {\r\n    const fontSize = this.getPropertyData(\"fontSize\");\r\n    const color = this.getPropertyData(\"fontColor\");\r\n\r\n    const style = {\r\n      fontSize,\r\n      color\r\n    }\r\n\r\n    return (\r\n      <span style={style} suppressContentEditableWarning=\"true\" contentEditable=\"false\">\r\n        <MathJaxTranspiler tex={this.getPropertyData(\"tex\")} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst findMathJaxEntities = (contentBlock, callback, contentState) => {\r\n  contentBlock.findEntityRanges(\r\n    (character) => {\r\n      const entityKey = character.getEntity();\r\n      return (\r\n        entityKey !== null && contentState.getEntity(entityKey).getType() === 'TEX'\r\n      );\r\n    },\r\n    callback\r\n  );\r\n}\r\n\r\nMathJaxEntity.propTypes = {\r\n  contentState: PropTypes.object.isRequired,\r\n  entityKey: PropTypes.string.isRequired,\r\n}\r\n\r\nexport { findMathJaxEntities, MathJaxEntity };\r\n","import React from 'react';\r\nimport { EditorState, RichUtils, convertFromRaw, convertToRaw, DefaultDraftBlockRenderMap } from 'draft-js';\r\nimport Editor from 'draft-js-plugins-editor';\r\nimport PropTypes from 'prop-types';\r\nimport debounce from 'lodash.debounce';\r\nimport { isEqual } from 'lodash';\r\n\r\nimport './css/Draft.css';\r\nimport './css/plugin.css';\r\nimport './css/custom.css';\r\nimport './css/repeatable.css';\r\n\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport SelectGroupHelper from '../SelectGroupHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport TermEvaluator from '../../eval/TermEvaluator';\r\nimport Utils from '../../utils/Utils';\r\nimport SelectionHelper from './SelectionHelper';\r\nimport PositionCalculationHelper from './PositionCalculationHelper';\r\nimport EditorStateHelper from './EditorStateHelper';\r\nimport { DraftLink, findLinkEntities } from './DraftLink';\r\nimport { Media } from './Media'\r\nimport { findBulletEntities, DraftBullet } from './DraftBullet'\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport TableHelper from '../table/TableHelper';\r\nimport { findMathJaxEntities, MathJaxEntity } from './MathJaxEntity';\r\nimport PathTranslationHelper from '../../state/PathTranslationHelper';\r\nimport UserDefPathHelper from '../../state/UserDefPathHelper';\r\n\r\n/**\r\n * A display component for rich text content.\r\n * \r\n * We use this to implement the HTMLTextField and the RichText known on the Java side.\r\n * On the long run we hope to merge HTMLTextField and RichText on the Java side.\r\n * \r\n * The component supports 'highlighting', 'embedded links' and 'content modifiers'.\r\n * \r\n * An 'embedded link' is a selectable section of the text that will trigger a page switch on selection.\r\n * \r\n * There are two types of 'content modifiers': 'EvaluatedInject' and 'DynamicFragment'. \r\n * An 'Evaluated Inject' is a text snippet that we calculate at runtime as result of an operator call\r\n * and insert into the displayed text. \r\n * A 'Dynamic Fragment' is a text snippet with a 'selected' status flag and a User Defined ID. We will display \r\n * the text snippet as long as it is in 'selected'==true state. \r\n * \r\n * The 'content modifiers' and the 'embedded links' have their own index paths: \r\n *  - embedded links append a pseudo index 1 and their own index in the list of content modifiers to the component's path, e.g.:\r\n *     <rich text field index path>/index=1/index=3 for the fourth content modifier of the component\r\n *  - content modifiers append a pseudo index 2 and their own index in the list of content modifiers to the component's path, e.g.:\r\n *     <rich text field index path>/index=2/index=7 for the eighth content modifier of the component\r\n * Lookups for these index paths in the component directory will return the rich text field component, i.e. re-rendering calls on \r\n * these index paths are delegated to the rich text field component.\r\n * The page configurations manager will return configuration data for the embedded link paths (but not for the content modifiers)\r\n * for use by the DraftLink components. \r\n * The component state manager will return state data for the embedded link index paths and the content modifier index paths. \r\n * \r\n */\r\nexport default class CbaRichTextField extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.lastUserEvent = Utils.isTouchDevice() ? \"touch\" : \"mouse\";\r\n  }\r\n\r\n\r\n  // ------------ lifecycle methods ---------------------------------------------------------------------------\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n    // In addition to registering myself I register myself as component to be re-rendered in lieu of all my content modifiers:\r\n    const { config, path, row, column, runtime } = this.props;\r\n    const editorComponent = this;\r\n    CbaRichTextField.forEachContentModifier(config, path, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.registerComponent(modifierPath, editorComponent);\r\n    });\r\n\r\n    // register for deselect event\r\n    if (row !== undefined && column !== undefined) {\r\n      runtime.eventEmitter.addListener(`${TableHelper.buildTablePath(path)}-removeLastSelection-[${row},${column}]`, this.onRemoveLastSelection.bind(this));\r\n    }\r\n\r\n    // register for flash text events\r\n    if (config.fromSecond !== undefined) {\r\n      runtime.eventEmitter.addListener(\"currentTimeUpdate\", this.onCurrentTimeUpdate.bind(this));\r\n      runtime.eventEmitter.addListener(\"clearFlashTexts\", this.onClearFlashTexts.bind(this));\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n\r\n    // Deregister myself as component to be re-rendered in lieu of all my content modifiers:\r\n    const { config, path } = this.props;\r\n    const editorComponent = this;\r\n    CbaRichTextField.forEachContentModifier(config, path, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.deregisterComponent(modifierPath);\r\n    });\r\n\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n\r\n    // In addition to my own registration I update the registration of all my content modifiers:\r\n    const editorComponent = this;\r\n\r\n    const { config: oldConfig, path: oldPath } = this.props;\r\n    CbaRichTextField.forEachContentModifier(oldConfig, oldPath, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.deregisterComponent(modifierPath);\r\n    });\r\n\r\n    const { config: newConfig, path: newPath } = nextProps;\r\n    CbaRichTextField.forEachContentModifier(newConfig, newPath, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.registerComponent(modifierPath, editorComponent);\r\n    });\r\n\r\n  }\r\n\r\n  // ------------ component state initialization ---------------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Build the initial state in the component state manager. \r\n   * \r\n   * The component state manager will call this method to initialize state for new display component instances.\r\n   */\r\n  static addAttributesToInitialState(initialState, configProps) {\r\n    const styleMap = CbaRichTextField.findStylesMapInConfig(configProps);\r\n\r\n    // deactivate deep copy in state manager since editor state cannot be cloned. \r\n    StateAttributeAccess.setDeepCopy(initialState, false);\r\n    StateAttributeAccess.setComponentClassName(initialState, \"CbaRichTextField\");\r\n\r\n    initialState.editorState = CbaRichTextField.buildInitialEditorState(configProps);\r\n\r\n    // We keep the currently 'highlighted' areas in the text as 'selections' attribute in the component state. \r\n    // (In the editor state these areas have a 'HIGHLIGHTED' style setting which is a kind of duplication of the information here.)\r\n    initialState.selections = [];\r\n\r\n    // style map is not defined for HTMLTextField without any text content -> insert default value (highlight color is never used in this case)\r\n    initialState.defaultHighlightColor = styleMap === undefined ? \"rgba(0,0,0,0)\" : styleMap.HIGHLIGHT.backgroundColor;\r\n\r\n    initialState.modifiersInEditorState = {};\r\n\r\n    // keep an unformatted representation of our text content in the component state\r\n    StateAttributeAccess.setTextValue(initialState, CbaRichTextField.calculateTextValue(initialState.editorState));\r\n\r\n    // keep highlightable flag in component state manager\r\n    StateAttributeAccess.setHighlightable(initialState, configProps.highlightText);\r\n\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Build an initial editor state for the Draft editor. \r\n   */\r\n  static buildInitialEditorState(configProps) {\r\n    const contentState = convertFromRaw(configProps.value);\r\n    return EditorState.createWithContent(contentState);\r\n  }\r\n\r\n\r\n  /**\r\n   * Add the specific pseudo index for 'embedded links' to the index path of the rich text field.  \r\n   */\r\n  static addLinkIndex(richTextFieldPageSegment) {\r\n    return IndexPathHelper.appendIndexToPageSegment(richTextFieldPageSegment, 1);\r\n  }\r\n\r\n  /**\r\n   * Add the specific pseudo index for 'content modifier children' to the index path of the rich text field.  \r\n   */\r\n  static addContentModifierIndex(richTextFieldPageSegment) {\r\n    return IndexPathHelper.appendIndexToPageSegment(richTextFieldPageSegment, 2);\r\n  }\r\n\r\n  /**\r\n   * Build an array of 'standard' configuration structures for the links defined \r\n   *  - in the editor state and\r\n   *  - in the dynamic fragment content modifiers.\r\n   * The page configurations manager expects a structure with the attributes type and config\r\n   * when it adds configuration entries for the embedded link index paths.  \r\n   */\r\n  static buildLinkConfigurationsArray(configProps) {\r\n    const result = [];\r\n    CbaRichTextField.insertLinkConfigurationsFromEntityMap(configProps.value.entityMap, result);\r\n    if (configProps.contentModifiers !== undefined) {\r\n      configProps.contentModifiers.forEach((modifier) => {\r\n        if (modifier.type === 'DynamicFragment') {\r\n          CbaRichTextField.insertLinkConfigurationsFromEntityMap(modifier.config.entityMap, result);\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * (Internal helper) Scan the given entity map from the Draft editor state and create an entry in the given \r\n   * result array for each entity of type 'LINK':\r\n   *  - the key in the array is the entity's data.id attribute -> the data.id should be a number!\r\n   *  - the value in the array is the usual config structure expected by the configurations manager: \r\n   *     { type: 'RichTextEmbeddedLink', config: { ... } }\r\n   */\r\n  static insertLinkConfigurationsFromEntityMap(entityMap, resultArray) {\r\n    Object.values(entityMap).forEach((entity) => {\r\n      if (entity.type === 'LINK') {\r\n        resultArray[entity.data.id] = {\r\n          type: 'RichTextEmbeddedLink',\r\n          config: {\r\n            state: {\r\n              disabled: false,\r\n              selected: false,\r\n              hidden: false\r\n            },\r\n          }\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Internal helper. Transforms from an 'HIGHLIGHT key to it's value\r\n   * \r\n   * HIGHLIGHT_r_g_b_a -> rgba(r,g,b,a)\r\n   * \r\n   * @param {String} key Highlight Key\r\n   * @param {String} path RichTextComponent Path \r\n   * @param {Object} runtime runtime object\r\n   * @returns {String} value\r\n   */\r\n  static convertHighlightKeyToValue(key, path, runtime) {\r\n    const defaultHighlightColor = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractDefaultHighlightColor, path, runtime);\r\n\r\n    const rgba = key.split('_').slice(1);\r\n    const convertedValue = `rgba(${rgba.join(',')})`\r\n\r\n    return key !== \"HIGHLIGHT\" ? convertedValue : defaultHighlightColor.replace(/\\s+/g, '');\r\n  }\r\n\r\n  /**\r\n   * Internal helper. Transforms from an rgba value to the HIGHLIGHT key\r\n   * \r\n   * rgba(r,g,b,a) -> HIGHLIGHT_r_g_b_a\r\n   * \r\n   * @param {String} value \r\n   * @returns {String} key\r\n   */\r\n  static convertHighlightValueToKey(value) {\r\n    const rgba = value.substring(5, value.length - 1)\r\n      .replace(/\\s+/g, '')\r\n      .split(',');\r\n\r\n    return `HIGHLIGHT_${rgba.join('_')}`;\r\n  }\r\n\r\n  // ----------- snapshot related ------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Transform the component state as stored in the component state manager into its snapshot representation.\r\n   * \r\n   * The component state manager will call this method when creating a snapshot.\r\n   */\r\n  static toSnapshot(indexPath, state) {\r\n    const result = {};\r\n    Object.entries(state).forEach((entry) => {\r\n      const [key, value] = entry;\r\n      switch (key) {\r\n        case 'editorState':\r\n          result[key] = CbaRichTextField.toSnapshotForEditorState(value);\r\n          break;\r\n        default:\r\n          result[key] = StateManagerHelper.deepCopy(value);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * Transform the state in snapshot representation to the format used in the component state manager.\r\n   * \r\n   * The component state manager will call this method when preloading state from a snapshot.\r\n   */\r\n  static fromSnapshot(indexPath, state) {\r\n    const result = {};\r\n    Object.entries(state).forEach((entry) => {\r\n      const [key, value] = entry;\r\n      switch (key) {\r\n        case 'editorState':\r\n          result[key] = CbaRichTextField.fromSnapshotForEditorState(value);\r\n          break;\r\n        default:\r\n          result[key] = StateManagerHelper.deepCopy(value);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Transform the given selections state into its snapshot representation.\r\n   */\r\n  static toSnapshotForEditorState(editorState) {\r\n    return convertToRaw(editorState.getCurrentContent());\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Transform the given snapshot representation of the editor state \r\n   * into the editorState attribute value in the state used at runtime.\r\n   */\r\n  static fromSnapshotForEditorState(editorState) {\r\n    return EditorState.createWithContent(convertFromRaw(editorState));\r\n  }\r\n\r\n\r\n  // --------- table related------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * This will automatically deselect the field.\r\n   */\r\n  onRemoveLastSelection() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n\r\n    this.updateStateAndTriggerRendering(pathState, false);\r\n  }\r\n\r\n  // ----------- text flash related -------------------------------\r\n  onCurrentTimeUpdate(currentTime) {\r\n    const { config, runtime } = this.props;\r\n    const { fromSecond, toSecond } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    if (currentTime >= fromSecond && currentTime <= toSecond) {\r\n      runtime.eventEmitter.emit(\"clearFlashTexts\");\r\n      StateAttributeAccess.setHidden(pathState, false);\r\n    } else {\r\n      StateAttributeAccess.setHidden(pathState, true);\r\n    }\r\n\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onClearFlashTexts() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setHidden(pathState, true);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  // ----------- public interaction API ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Trigger a re-render after a change in the highlight background color.\r\n   * \r\n   * Due to a bug Draft will not re-render if the only change is a modification of the styles map.\r\n   * see: https://github.com/facebook/draft-js/issues/999 \r\n   * \r\n   * We 'redefine' the current selection without changing its values to force the re-render.\r\n   */\r\n  highlightColorChanged() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const editorState = StateAttributeAccess.extractEditorState(pathState);\r\n    const finalEditorState = EditorState.forceSelection(editorState, editorState.getSelection());\r\n    this.saveEditorStateInPathState(finalEditorState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * Grab the focus.\r\n   */\r\n  focus = () => {\r\n    this.editor.focus();\r\n  }\r\n\r\n\r\n  // --------------- our own event handlers -------------------------------------------------------------------------\r\n\r\n  onClickHandler = (event) => {\r\n    const { runtime, config, path, onParentClick, checkSelectable } = this.props;\r\n    const { redirectClickEventsReference } = config;\r\n\r\n    if (redirectClickEventsReference !== undefined) {\r\n      const requestingComponentPathWithoutLastPageSegment = IndexPathHelper.dropPageSegmentFromPath(path);\r\n      const redirectClickEventsReferencePath = IndexPathHelper.appendPageSegmentsToPath(requestingComponentPathWithoutLastPageSegment, redirectClickEventsReference);\r\n      runtime.eventEmitter.emit(`redirectClickEvent-${redirectClickEventsReferencePath}`, redirectClickEventsReferencePath);\r\n      return;\r\n    }\r\n\r\n    // Silently forget event if we are child of a CbaTableCell that is not selectable currenty:\r\n    if (checkSelectable !== undefined && !checkSelectable()) {\r\n      CommonActionsHelper.stopEventPropagation(event);\r\n      return;\r\n    }\r\n\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\r\n    const { fromSecond, toSecond } = config;\r\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    if (fromSecond !== undefined) {\r\n      const traceDetails = {\r\n        from: fromSecond,\r\n        to: toSecond\r\n      }\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, traceDetails, event, runtime);\r\n    } else {\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path,\r\n        CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\r\n        event, runtime);\r\n    }\r\n\r\n    // Flip the selected state: 'yes' <-> 'no'\r\n    if (config.toggleType !== 'none') {\r\n      this.updateStateAndTriggerRendering(pathState);\r\n    }\r\n\r\n    // Call parent click handler if available, needed for standard table single select feature\r\n    if (onParentClick !== undefined) {\r\n      onParentClick(event);\r\n    }\r\n\r\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\r\n\r\n    // send statemachine event depending on state:\r\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\r\n\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Update our component state in the components state manager and trigger rendering.\r\n   */\r\n  updateStateAndTriggerRendering(pathState, isRemoveSelection) {\r\n    const { runtime, path } = this.props;\r\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\r\n    StateAttributeAccess.setVisited(pathState, true);\r\n\r\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\r\n  }\r\n\r\n  debouncedDoHighlightActions = debounce((editorState) => {\r\n    this.doHighlightActions(editorState);\r\n  }, 2000)\r\n\r\n\r\n  /**\r\n   * The Draft editor will call this method when the editor state\r\n   * is modified due to a user interaction in the editor.\r\n   * \r\n   * We should make sure that we update our structures to make sure that\r\n   * we will provide the modified editor state at the next \r\n   * render call to the Draft editor.\r\n   */\r\n  onChange = (editorState) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldEditorState = StateAttributeAccess.extractEditorState(pathState);\r\n    const oldSelections = StateAttributeAccess.extractSelections(pathState);\r\n    const highlightActive = StateAttributeAccess.extractHighlightable(pathState);\r\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\r\n\r\n    const { config, runtime } = this.props;\r\n    const blockKeysList = SelectionHelper.getListOfBlockKeysInBlockOrder(config.value.blocks);\r\n    let hasContentChanges = false;\r\n\r\n    // ignore content state modifications\r\n    if (!SelectionHelper.contentStateEqual(oldEditorState, editorState)) {\r\n      hasContentChanges = true;\r\n      // block modifications of the editor's text content: do not persist onChange editor state.\r\n    } else {\r\n      this.saveEditorStateInPathState(editorState);\r\n    }\r\n\r\n    // Do highlight actions if not disabled and no content changes\r\n    if (!hasContentChanges && !isDisabled && highlightActive) {\r\n      if (SelectionHelper.isSelection(editorState)) {\r\n        if (this.lastUserEvent === \"mouse\") {\r\n          this.doHighlightActions(editorState);\r\n        } else {\r\n          this.debouncedDoHighlightActions(editorState)\r\n        }\r\n      } else {\r\n        const clickedSelection = SelectionHelper.getSelectionHitByClick(editorState.getSelection(), oldSelections, blockKeysList);\r\n        if (clickedSelection !== undefined) {\r\n          editorState = this.removeClickedSelection(clickedSelection, editorState, oldSelections);\r\n        }\r\n      }\r\n    } else if (this.editor) {\r\n      // we are not in highlighting mode -> selections in our component state will not change\r\n      this.editor.blur();\r\n    }\r\n\r\n    if (this.lastUserEvent === \"touch\" && !hasContentChanges) {\r\n      this.saveEditorStateInPathState(editorState);\r\n    }\r\n\r\n    runtime.replayStepMonitor.incrementReplayStep();\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Combine the current selection in the editor state with our catalog of highlight selections in the component state.\r\n   */\r\n  doHighlightActions = (editorState) => {\r\n    const { config } = this.props;\r\n    const blockKeysList = SelectionHelper.getListOfBlockKeysInBlockOrder(config.value.blocks);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const currentHighlightKey = this.getHighlightColorKey(pathState);\r\n\r\n    this.processHighlightClick(editorState, blockKeysList, currentHighlightKey);\r\n\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * Remove the clicked selection from the editor state and from our selections\r\n   * Save the result in the pathState\r\n   * @param {*} clickedSelection \r\n   * @param {*} editorState \r\n   * @param {*} oldSelections \r\n   */\r\n  removeClickedSelection = (clickedSelection, editorState, oldSelections) => {\r\n    const { startKey, startOffset, endKey, endOffset, highlightKey } = clickedSelection;\r\n    let newEditorState = EditorStateHelper.forceSelection(editorState, startKey, startOffset, endKey, endOffset);\r\n    newEditorState = RichUtils.toggleInlineStyle(newEditorState, highlightKey);\r\n    newEditorState = EditorState.moveFocusToEnd(newEditorState);\r\n    const selections = SelectionHelper.removeSelectionFromSelectionsArray(oldSelections, clickedSelection);\r\n    this.saveEditorStateInPathState(newEditorState);\r\n    this.saveSelectionsInPathState(selections, clickedSelection, 'Remove');\r\n    this.triggerHighlightEvent();\r\n\r\n    return newEditorState;\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Update the highlight style settings in the editor state to include the new selected area \r\n   * and add the new selected area to our list of highlight selections in the component state.\r\n   */\r\n  processHighlightClick = (currentEditorState, blockKeysList, currentHighlightKey) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldSelections = StateAttributeAccess.extractSelections(pathState);\r\n    const currentSelection = SelectionHelper.getSelection(currentEditorState, currentHighlightKey, blockKeysList);\r\n    let operationType = 'Add';\r\n\r\n    // Clear old highlights from curently selected area.\r\n    const toggleOffOperationsList = [];\r\n\r\n    oldSelections.forEach((oldSelection) => {\r\n      const intersection = SelectionHelper.getIntersect(currentSelection, oldSelection, blockKeysList);\r\n      if (intersection.type !== 'none') operationType = 'Change';\r\n      switch (intersection.type) {\r\n        case \"left\":\r\n          toggleOffOperationsList\r\n            .push(SelectionHelper.buildSelection(\r\n              oldSelection.startKey, currentSelection.endKey, oldSelection.startOffset,\r\n              currentSelection.endOffset, oldSelection.highlightKey\r\n            ));\r\n          break;\r\n        case \"right\":\r\n          toggleOffOperationsList\r\n            .push(SelectionHelper.buildSelection(\r\n              currentSelection.startKey, oldSelection.endKey, currentSelection.startOffset,\r\n              oldSelection.endOffset, oldSelection.highlightKey\r\n            ));\r\n          break;\r\n        case \"inside\":\r\n          toggleOffOperationsList\r\n            .push(Object.assign({}, currentSelection, {\r\n              highlightKey: oldSelection.highlightKey\r\n            }));\r\n          break;\r\n        case \"cover\":\r\n          toggleOffOperationsList\r\n            .push(Object.assign({}, oldSelection));\r\n          break;\r\n        case \"none\":\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    toggleOffOperationsList.forEach((operation) => {\r\n      currentEditorState = EditorStateHelper.toggleEditorStateStyleOnSelection(currentEditorState, operation);\r\n    });\r\n\r\n    // Apply the HIGHLIGHT style to the current selection -> makes newly selected area part of the currently highlighted areas.\r\n    currentEditorState = EditorStateHelper.toggleEditorStateStyleOnSelection(currentEditorState, currentSelection);\r\n\r\n    // Deduce the new highlighted areas by inspecting the HIGHLIGHT style setting in the toggled editor state.\r\n    const selections = SelectionHelper.calculateSelectionsArray(currentEditorState, blockKeysList);\r\n\r\n    // Move the focus to the end \r\n    currentEditorState = EditorState.moveFocusToEnd(currentEditorState);\r\n\r\n    // update the editor state and the highlighted selections in our component state \r\n    this.saveEditorStateInPathState(currentEditorState);\r\n    this.saveSelectionsInPathState(selections, currentSelection, operationType);\r\n    this.triggerHighlightEvent();\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Trigger the optional highlight click event on the current state machine. \r\n   */\r\n  triggerHighlightEvent = () => {\r\n    const { config, runtime } = this.props;\r\n    const { highlightChangeEvent } = config;\r\n    if (highlightChangeEvent !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(highlightChangeEvent);\r\n    }\r\n  }\r\n\r\n\r\n  // --------------- content modifier activities -------------------------------------------------------------------------\r\n\r\n  /**\r\n   * (Internal helper) Apply the modifications to the editor's content defined by our content modifiers.\r\n   * \r\n   * The method returns the modified editor state and a new modifier-effects-in-editor-state extract.\r\n   * \r\n   * The caller should use the new editor state for rendering the Draft editor. \r\n   * The caller should store both structures in the rich text field's component state in the component state manager\r\n   * and provide these to a future applyContentModifiers call. \r\n   * \r\n   * The concept behind this is:\r\n   * We keep an extract of the modifications applied to the edtitor's content by the content modifiers.\r\n   * This extract is stored in the modifiersInEditorState attribute of the rich text field's state.\r\n   * We use this extract to decide whether we need to update the editor state due to changes in the content modifiers.\r\n   * Example: \r\n   *  - Dynamic fragments can be 'activated' by setting their 'selected' attribute in their component manager state (e.g. by the TermEvaluator). \r\n   *    When we render the rich text field we 'apply' the content modifiers to the editor's state. There we check whether the \r\n   *    current 'selected' setting in the component state of the modifier matches the current modification implanted in the editor's state by comparing\r\n   *    with the 'active' attribute in the extract.\r\n   * Since modifying the editor state might destroy the current highlight selections we try to avoid modifying the editor state without need.\r\n   * \r\n   * \r\n   * @param editorState: The editor state that was used for the last render. We will modify this editor state and return it at the end.\r\n   * @param modifiersInEditorState: The extract of the modifications done by the content modifiers in the given editor state. \r\n   *   We will return a new version of this extract that reflects the modifications implanted the the modified editor state. \r\n   *   We need the extract representing the modifications in the old editor state to decide whether we have to modify the editor state\r\n   *   at all.\r\n   * @param editorPath: The index path of the rich text field display component instance.\r\n   * @param propsConfig: The static 'config' structure of the rich text field diplay component.\r\n   * @param runtime: The common runtime context structure.\r\n   * \r\n   */\r\n  static applyContentModifiers(editorState, modifiersInEditorState, editorPath, propsConfig, runtime) {\r\n    const { contentModifiers } = propsConfig;\r\n\r\n    let modifiedEditorState = editorState;\r\n    const newModifiersInEditorState = StateManagerHelper.deepCopy(modifiersInEditorState);\r\n\r\n    // we need the ordering of the block keys for position comparisons:\r\n    const configBlocks = propsConfig.value.blocks;\r\n    const blockKeyToIndexMap = SelectionHelper.getBlockKeysToBlockIndexMap(SelectionHelper.getListOfBlockKeysInBlockOrder(configBlocks));\r\n\r\n    CbaRichTextField.forEachContentModifier(propsConfig, editorPath, (modifierInConfig, modifierPath, modifierParentPath) => {\r\n      const modifierState = runtime.componentStateManager.findOrBuildStateForPathId(modifierPath, runtime);\r\n      if (newModifiersInEditorState[modifierPath] === undefined) {\r\n        newModifiersInEditorState[modifierPath] = CbaRichTextField.buildNonActiveModifierInEditorState(modifierInConfig.type);\r\n      }\r\n      const actualPosition = PositionCalculationHelper.calculateActualPosition(\r\n        modifierInConfig,\r\n        configBlocks,\r\n        blockKeyToIndexMap,\r\n        contentModifiers,\r\n        newModifiersInEditorState,\r\n        modifierParentPath,\r\n        modifiedEditorState\r\n      );\r\n      const modifierInEditorState = newModifiersInEditorState[modifierPath];\r\n      let newModifierInEditorState;\r\n      switch (modifierInConfig.type) {\r\n        case 'EvaluatedInject':\r\n          [modifiedEditorState, newModifierInEditorState] = CbaRichTextField.applyEvaluatedInjectModifier(modifiedEditorState, modifierState, modifierInEditorState, modifierInConfig.config, actualPosition, runtime);\r\n          break;\r\n        case 'DynamicFragment':\r\n          [modifiedEditorState, newModifierInEditorState] = CbaRichTextField.applyDynamicFragmentModifier(modifiedEditorState, modifierState, modifierInEditorState, modifierInConfig.config, actualPosition, runtime);\r\n          break;\r\n        default:\r\n          console.error(`Unknown modifier type: ${modifierInConfig.type}`);\r\n      }\r\n      newModifiersInEditorState[modifierPath] = newModifierInEditorState;\r\n    });\r\n\r\n    return [modifiedEditorState, newModifiersInEditorState];\r\n  }\r\n\r\n\r\n  /**\r\n   * (Internal helper) Build the extract of the modifications done to the editor's content by an inactive content modifier.\r\n   */\r\n  static buildNonActiveModifierInEditorState(contentModifierType) {\r\n    return (contentModifierType === 'EvaluatedInject')\r\n      ? {\r\n        injectText: \"\"\r\n      }\r\n      : {\r\n        active: false\r\n      };\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Apply a content modifier of type 'evaluated inject' to the editor's state and calculate the new extract structure\r\n   * for the content modifier.\r\n   */\r\n  static applyEvaluatedInjectModifier(editorState, modifierState, modifierInEditorState, modifierConfig, actualPosition, runtime) {\r\n    // avoid unnecessary modification of editor state\r\n    const currentInjectText = modifierState.selected === true ? `${TermEvaluator.evaluateTerm(modifierConfig.insertString, runtime, [], 'inject')}` : \"\";\r\n    const oldInjectText = modifierInEditorState.injectText;\r\n    if (oldInjectText === currentInjectText) {\r\n      return [editorState, modifierInEditorState];\r\n    }\r\n\r\n    const newModifierInEditorState = StateManagerHelper.deepCopy(modifierInEditorState);\r\n    newModifierInEditorState.injectText = currentInjectText;\r\n\r\n    // TODO: second step improvement: if a modification is necessary do a best effort to modify the selections too\r\n    let modifiedEditorState = EditorStateHelper.replaceTextInBlock(editorState,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset + oldInjectText.length,\r\n      currentInjectText);\r\n\r\n    modifiedEditorState = EditorStateHelper.applyInlineStyles(modifiedEditorState,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset + currentInjectText.length,\r\n      modifierConfig.inlineStyles);\r\n\r\n    modifiedEditorState = EditorStateHelper.applyEntities(modifiedEditorState,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset + currentInjectText.length,\r\n      modifierConfig.entities);\r\n\r\n    return [modifiedEditorState, newModifierInEditorState];\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Apply a content modifier of type 'dynamic fragment' to the editor's state and calculate the new extract structure\r\n   * for the content modifier.\r\n   */\r\n  static applyDynamicFragmentModifier(editorState, modifierState, modifierInEditorState, modifierConfig, actualPosition, runtime) {\r\n    // avoid unnecessary modification of editor state\r\n    if (modifierState.selected === modifierInEditorState.active) {\r\n      return [editorState, modifierInEditorState];\r\n    }\r\n\r\n    const newModifierInEditorState = StateManagerHelper.deepCopy(modifierInEditorState);\r\n    newModifierInEditorState.active = modifierState.selected;\r\n\r\n    // TODO: second step improvement: if a modification is necessary do a best effort to modify the selections too\r\n    let modifiedEditorState;\r\n    if (modifierState.selected === true) {\r\n      modifiedEditorState = EditorStateHelper.replaceWithBlocks(editorState,\r\n        actualPosition.blockKey,\r\n        actualPosition.offset,\r\n        actualPosition.blockKey,\r\n        actualPosition.offset,\r\n        modifierConfig.blocks,\r\n        modifierConfig.entityMap);\r\n    } else {\r\n      const numberInjectedBlocks = modifierConfig.blocks.length - 1;\r\n\r\n      modifiedEditorState = EditorStateHelper.removeBlocks(editorState,\r\n        actualPosition.blockKey,\r\n        actualPosition.offset,\r\n        PositionCalculationHelper.calculateBlockKey(actualPosition.blockKey, numberInjectedBlocks, editorState),\r\n        (numberInjectedBlocks === 0 ? actualPosition.offset : 0) + modifierConfig.blocks[numberInjectedBlocks].text.length);\r\n    }\r\n\r\n    return [modifiedEditorState, newModifierInEditorState];\r\n  }\r\n\r\n\r\n  // ------------ common helper methods ---------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Run in a loop through all content modifiers specified in our static config structure and execute the given callback for each.\r\n   * \r\n   * We will provide the following parameters to the callback\r\n   *  - modifier: The content modifier configuration from the 'contentModifiers' array in the rich text field configuration.\r\n   *  - indexPathOfModifier: The index path of the content modifier \r\n   *    (i.e. the index path of the rich text field extended with a pseudo index to discern between content-modifier and embedded-link children and the index of the content modifier itself.)\r\n   *  - indexPathOfModifierParent: The index path of the node containing all content-modifier children. \r\n   *    (i.e. the index path of the rich text field extended with a pseudo index to discern between content-modifier and embedded-link children.)\r\n   * \r\n   * @param {object} propsConfig The config structure of the rich text field that contains the content modifier definitions in the 'contentModifiers' attribute.\r\n   * @param {String} editorPath The index path of the rich text field that contains the content modifiers.\r\n   * @param { callback(modifier, indexPathOfModifier) } doForEach The method to call for each content modifier. \r\n   */\r\n  static forEachContentModifier(propsConfig, editorPath, doForEach) {\r\n    const { contentModifiers } = propsConfig;\r\n    if (contentModifiers !== undefined) {\r\n      const modifierParentPath = CbaRichTextField.addContentModifierIndex(editorPath);\r\n      contentModifiers.forEach((modifier, index, all) => {\r\n        const modifierPath = IndexPathHelper.appendIndexToPageSegment(modifierParentPath, index);\r\n        doForEach(modifier, modifierPath, modifierParentPath);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract an unformatted plain text representation from our editor state.\r\n   */\r\n  static calculateTextValue(editorState) {\r\n    // stripping white space character, including space, tab, form feed, line feed.\r\n    // The content is stripped to the plain text (i.e. all formatting is stripped, newlines are replaced by blanks).\r\n    return editorState.getCurrentContent().getPlainText('').replace(/\\s/g, ' ');\r\n  }\r\n\r\n  /**\r\n   * Save the given content modifiers state in our component state object in the components state manager.\r\n   */\r\n  saveModifiersStateInPathState = (modifiersInEditorState) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setModifiersInEditorState(pathState, modifiersInEditorState)\r\n    const { runtime, path } = this.props;\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Save the given Draft editor state in our component state object in the components state manager.\r\n   * We also keep an unformatted plain text representation of our current editor's text content in our component state object.\r\n   */\r\n  saveEditorStateInPathState = (editorState) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setEditorState(pathState, editorState);\r\n    StateAttributeAccess.setTextValue(pathState, CbaRichTextField.calculateTextValue(editorState));\r\n    const { runtime, path } = this.props;\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Save the given selections in our component state object in the components state manager\r\n   * and create a trace log entry.\r\n   */\r\n  saveSelectionsInPathState = (newSelections, currentSelection, operationType) => {\r\n    const { runtime, path } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const selections = StateAttributeAccess.extractSelections(pathState);\r\n\r\n    CbaRichTextField.traceHighlightChange(path, selections, newSelections, currentSelection, operationType, runtime);\r\n\r\n    StateAttributeAccess.setSelections(pathState, newSelections);\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Trace a change in the highlight selections.\r\n   */\r\n  static traceHighlightChange(path, oldSelectionsRaw, newSelectionsRaw, currentSelection, operationType, runtime) {\r\n    // trace single highlight change\r\n    const selection = {\r\n      ...currentSelection\r\n    };\r\n    selection.highlightColor = this.convertHighlightKeyToValue(currentSelection.highlightKey, path, runtime);\r\n    selection.operationType = operationType;\r\n    delete selection.highlightKey;\r\n    CommonActionsHelper.traceUserInteraction('RichTextHighlight', path, selection, undefined, undefined, runtime);\r\n\r\n    // trace the changes in the overall highlight status of the component\r\n    const oldSelections = SelectionHelper.TransformSelectionsToTraceSelectionsDTO(oldSelectionsRaw, path, runtime);\r\n    const newSelections = SelectionHelper.TransformSelectionsToTraceSelectionsDTO(newSelectionsRaw, path, runtime);\r\n    const { addedInSelections, removedFromSelections } = this.compareSelections(oldSelections, newSelections);\r\n    this.traceOverallHighlightChanges(path, removedFromSelections, \"Removed\", runtime);\r\n    this.traceOverallHighlightChanges(path, addedInSelections, \"Added\", runtime);\r\n  }\r\n\r\n  static traceOverallHighlightChanges(indexPath, selections, operationType, runtime) {\r\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\r\n    const userDefId = UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath);\r\n    selections.map((selection, index) => (\r\n      runtime.traceLogBuffer.reportEvent('RichTextHighlightStatus', new Date(), {\r\n        indexPath,\r\n        userDefIdPath,\r\n        userDefId,\r\n        operationType,\r\n        ...selection\r\n      })\r\n    ));\r\n  }\r\n\r\n  static compareSelections(oldSelections, newSelections) {\r\n    const addedInSelections = newSelections.filter(oldSelection => !oldSelections.some(newSelection => isEqual(newSelection, oldSelection)));\r\n    const removedFromSelections = oldSelections.filter(oldSelection => !newSelections.some(newSelection => isEqual(oldSelection, newSelection)));\r\n\r\n    return {\r\n      removedFromSelections,\r\n      addedInSelections\r\n    };\r\n  }\r\n\r\n  // ------------ rendering ---------------------------------------------------------------------------------------\r\n\r\n  myBlockStyleFn = (contentBlock) => {\r\n    const type = contentBlock.getType();\r\n    if (type.substr(0, 3) === 'cba') {\r\n      return type.replace(/_/g, \" \");\r\n    } else {\r\n      if (type === 'atomic') {\r\n        return 'cbaImageLeft'\r\n      }\r\n      if (type === 'atomic_rtl') {\r\n        return 'cbaImageRight'\r\n      }\r\n      if (type === 'empty_block') {\r\n        return 'cbaClearImage'\r\n      }\r\n\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  mediaBlockRenderer = (block) => {\r\n    const { runtime } = this.props;\r\n    if (block.getType() === 'atomic' || block.getType() === 'atomic_rtl') {\r\n      return {\r\n        component: Media(runtime),\r\n        editable: false,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Calculate the styles map to use for rendering.\r\n   * \r\n   * We start with the styles map from the fixed component configuration \r\n   * and inject the current highlight background color setting from the task state.\r\n   */\r\n  getStylesMap = () => {\r\n    const { config, runtime } = this.props;\r\n    const { highlightColors } = runtime.taskManager.getTopLevelConfiguration();\r\n    const originalStylesMap = CbaRichTextField.findStylesMapInConfig(config);\r\n\r\n    const highlightStyleMap = highlightColors.reduce((accum, rgbaColor) => {\r\n      const rgbaKey = CbaRichTextField.convertHighlightValueToKey(rgbaColor);\r\n      accum[rgbaKey] = {\r\n        backgroundColor: rgbaColor\r\n      };\r\n      return accum;\r\n    }, {});\r\n\r\n    return Object.assign({}, originalStylesMap, highlightStyleMap);\r\n  }\r\n\r\n  /**\r\n   * The generator for the RichTextField puts the styles map into the value attribute itself.\r\n   * Our test items and the generator for the HTMLTextField put the styles map besides the value attribute.\r\n   * On the long run want to have it besides the value attribute since the value attribute is used by the Editor component.\r\n   * \r\n   * This method finds the style map in both places.\r\n   * \r\n   * @param {*} config The config structure for the component given in the page description.\r\n   */\r\n  static findStylesMapInConfig(config) {\r\n    return config.stylesMap === undefined ? config.value.stylesMap : config.stylesMap;\r\n  }\r\n\r\n  /**\r\n   * Get the current highlight color. \r\n   * \r\n   * Precedence: \r\n   *  - current task state setting\r\n   *  - our static config setting\r\n   *  - undefined\r\n   */\r\n  getHighlightColor = (pathState) => {\r\n    const { runtime, config } = this.props;\r\n    const highlightable = StateAttributeAccess.extractHighlightable(pathState);\r\n    if (!highlightable) return undefined;\r\n    return (\r\n      runtime.taskManager.getTopLevelConfiguration().itemHighlightColor\r\n      || config.stylesMap.HIGHLIGHT.backgroundColor\r\n      || undefined);\r\n  }\r\n\r\n  /**\r\n   * Get the current highlight color. \r\n   * \r\n   */\r\n  getHighlightColorKey = (pathState) => {\r\n    const currentColor = this.getHighlightColor(pathState);\r\n    const currentColorKey = CbaRichTextField.convertHighlightValueToKey(currentColor);\r\n    const defaultHighlightKey = \"HIGHLIGHT\";\r\n    const styleMap = this.getStylesMap();\r\n\r\n    return styleMap[currentColorKey] ? currentColorKey : defaultHighlightKey;\r\n  }\r\n\r\n  /**\r\n   * Generate a style tag to put into our top level div tag.\r\n   * \r\n   * This is the only way we found to inject a ::selection pseudo selector.\r\n   */\r\n  generateSelectionStyle = (isHighlightActive, highlightColor, wrapperId, isDisabled) => {\r\n    const selectionColor = isHighlightActive && !isDisabled ? highlightColor : \"transparent\";\r\n\r\n    return (\r\n      /**\r\n       * Handles selection color change #5339\r\n       * Handles caret-color transparent when highlight is not active #5489\r\n       * Handles isDisabled flag inheriting color #5427\r\n       */\r\n      // eslint-disable-next-line react/no-danger\r\n      <style dangerouslySetInnerHTML={\r\n        {\r\n          __html: `\r\n            #${wrapperId} .DraftEditor-root span::selection  { background-color: ${selectionColor}; }\r\n            #${wrapperId} .DraftEditor-root span::-moz-selection  { background-color: ${selectionColor}; }\r\n            ${isHighlightActive ? \"\" : `#${wrapperId}{ caret-color: transparent }`}\r\n            ${isDisabled ? `#${wrapperId} span { color: inherit!important; }` : \"\"}\r\n            ${isDisabled ? `#${wrapperId} .cbaImageRight, #${wrapperId} .cbaImageLeft { opacity: 0.4 }` : \"\"}\r\n          `\r\n        }\r\n      }\r\n      />\r\n    );\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      this.onClickHandler(event);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { runtime, path, config, orientation } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const highlightColor = this.getHighlightColor(pathState);\r\n    const highlightActive = StateAttributeAccess.extractHighlightable(pathState);\r\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\r\n    const wrapperId = IndexPathHelper.getValidCssIdFromPath(path);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\r\n    if (config.toggleType === \"upDown\") {\r\n      CommonConfigHelper.setStyleAttribute(style, \"borderStyle\", selectedState ? \"inset\" : \"outset\");\r\n    }\r\n\r\n    const styleMap = this.getStylesMap();\r\n\r\n    const oldEditorState = StateAttributeAccess.extractEditorState(pathState);\r\n    const modifiersInEditorState = StateAttributeAccess.extractModifiersInEditorState(pathState);\r\n\r\n    const [editorState, newModifiersInEditorState] = CbaRichTextField.applyContentModifiers(oldEditorState, modifiersInEditorState, path, config, runtime);\r\n\r\n    this.saveEditorStateInPathState(editorState);\r\n    this.saveModifiersStateInPathState(newModifiersInEditorState);\r\n\r\n    const linkReceiver = CommonActionsHelper.getDefaultLinkReceiver(this);\r\n    const customDecorators = [\r\n      {\r\n        strategy: findLinkEntities,\r\n        component: DraftLink,\r\n        props: {\r\n          linkReceiver,\r\n          parentPath: CbaRichTextField.addLinkIndex(path),\r\n          runtime,\r\n          tabIndex: config.tabIndex,\r\n          fullRichTextPath: path\r\n        }\r\n      },\r\n      {\r\n        strategy: findBulletEntities,\r\n        component: DraftBullet\r\n      },\r\n      {\r\n        strategy: findMathJaxEntities,\r\n        component: MathJaxEntity\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <div\r\n        id={wrapperId}\r\n        style={style}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n        title={CommonConfigHelper.buildTitle(config, pathState)}\r\n        data-cba-id={config.pageEditId}\r\n        onClick={this.onClickHandler}\r\n        onKeyDown={e => this.handleKeyDown(e)}\r\n        onMouseDown={() => { this.lastUserEvent = \"mouse\" }}\r\n        onTouchStart={() => { this.lastUserEvent = \"touch\" }}\r\n      >\r\n        {this.generateSelectionStyle(highlightActive, highlightColor, wrapperId, isDisabled)}\r\n        <Editor\r\n          runtime={runtime}\r\n          blockStyleFn={this.myBlockStyleFn}\r\n          blockRendererFn={this.mediaBlockRenderer}\r\n          blockRenderMap={DefaultDraftBlockRenderMap}\r\n          handleBeforeInput={() => 'handled'}\r\n          handlePastedText={() => true}\r\n          keyBindingFn={() => 'not-handled-command'}\r\n          customStyleMap={styleMap}\r\n          editorState={editorState}\r\n          decorators={customDecorators}\r\n          onChange={this.onChange}\r\n          plugins={this.plugins}\r\n          ref={(element) => { this.editor = element; }}\r\n          tabIndex={config.tabIndex}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaRichTextField.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\r\n      {\r\n        value: PropTypes.object.isRequired,\r\n        stylesMap: PropTypes.object,\r\n        contentModifiers: PropTypes.array,\r\n        highlightText: PropTypes.bool.isRequired,\r\n        toggleType: PropTypes.oneOf(['none', 'upDown', 'colorChange']).isRequired,\r\n        highlightChangeEvent: PropTypes.string,\r\n        redirectClickEventsReference: PropTypes.string\r\n      }\r\n    )\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n  row: PropTypes.number,\r\n  column: PropTypes.number,\r\n  onParentClick: PropTypes.func,\r\n  checkSelectable: PropTypes.func,\r\n  fromSecond: PropTypes.number,\r\n  toSecond: PropTypes.number\r\n}\r\n\r\nCbaRichTextField.defaultProps = {\r\n  row: undefined,\r\n  column: undefined,\r\n  onParentClick: undefined,\r\n  checkSelectable: undefined,\r\n  fromSecond: undefined,\r\n  toSecond: undefined\r\n}\r\n","import { convertToRaw, SelectionState } from 'draft-js';\r\nimport Utils from '../../utils/Utils';\r\nimport CbaRichTextField from './CbaRichTextField';\r\n\r\n/**\r\n * Helper mehtods used for the 'highlighting' implementation\r\n * in CbaRichTextField.\r\n */\r\nexport default class SelectionHelper {\r\n\r\n  // ------------- editor state related methods ------------------------------------------------------------\r\n\r\n  /**\r\n   * Compare the texts inside the content structures of the given Draft editor states. \r\n   * The method will not take style ranges into account (e.g. highlighted areas do not matter here).\r\n   */\r\n  static contentStateEqual = (oldEditorState, newEditorState) => {\r\n    const oldContentRaw = convertToRaw(oldEditorState.getCurrentContent());\r\n    const newContentRaw = convertToRaw(newEditorState.getCurrentContent());\r\n\r\n    for (let i = 0; i < oldContentRaw.blocks.length; i += 1) {\r\n      if (oldContentRaw.blocks[i].key !== newContentRaw.blocks[i].key || oldContentRaw.blocks[i].text !== newContentRaw.blocks[i].text) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Is there a non-empty selection active in the given Draft editor state?\r\n   */\r\n  static isSelection(editorState) {\r\n    const selection = editorState.getSelection();\r\n    const startKey = selection.getStartKey();\r\n    const endKey = selection.getEndKey();\r\n    const startOffset = selection.getStartOffset();\r\n    const endOffset = selection.getEndOffset();\r\n    return startOffset !== endOffset || startKey !== endKey;\r\n  }\r\n\r\n  static areEqual(selection1, selection2) {\r\n    return selection1.startKey === selection2.startKey\r\n      && selection1.startKey === selection2.startKey\r\n      && selection1.endKey === selection2.endKey\r\n      && selection1.startOffset === selection2.startOffset\r\n      && selection1.endOffset === selection2.endOffset\r\n      && selection1.currentHighlightKey === selection2.currentHighlightKey\r\n  }\r\n\r\n  /**\r\n   * \r\n   * Serializes the selection from the editorState object\r\n   * \r\n   * @param {EditorState} editorState \r\n   * @param {String} highlightKey \r\n   */\r\n  static getSelection(editorState, highlightKey, blockKeysList) {\r\n    const selection = editorState.getSelection();\r\n    const editorContent = editorState.getCurrentContent();\r\n    const rawContent = convertToRaw(editorContent);\r\n\r\n    const builtSelection = SelectionHelper.buildSelection(selection.getStartKey(), selection.getEndKey(),\r\n      selection.getStartOffset(), selection.getEndOffset(), highlightKey);\r\n\r\n    // Move start of selection to begining of next available block if start of selection is beyond the end of it's block\r\n    while (rawContent.blocks[builtSelection.startKey].text.length === builtSelection.startOffset) {\r\n      const startKeyIndex = blockKeysList.indexOf(builtSelection.startKey);\r\n      if (blockKeysList[startKeyIndex + 1]) {\r\n        builtSelection.startOffset = 0;\r\n        builtSelection.startKey = blockKeysList[startKeyIndex + 1];\r\n      } else break;\r\n\r\n    }\r\n\r\n    return builtSelection;\r\n  }\r\n\r\n  static buildSelection(startKey, endKey, startOffset, endOffset, highlightKey) {\r\n    return {\r\n      startKey, endKey, startOffset, endOffset, highlightKey\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} selection1 \r\n   * @param {*} selection2 \r\n   * \r\n   * @returns {Object} interesction - intersection object\r\n   * @returns {Boolean} intersection.isIntersect - \r\n   * @returns {String} intersection.type - one of [\"left\", \"right\", \"cover\", \"inside\", \"none\"]. Specifies the raport of selection 1 with selection 2\r\n   */\r\n  static getIntersect(selection1, selection2, blockKeysList) {\r\n    let type = \"\";\r\n    let isIntersect = true;\r\n\r\n    const selection1StartKeyIndex = blockKeysList.indexOf(selection1.startKey);\r\n    const selection2StartKeyIndex = blockKeysList.indexOf(selection2.startKey);\r\n    const selection1EndKeyIndex = blockKeysList.indexOf(selection1.endKey);\r\n    const selection2EndKeyIndex = blockKeysList.indexOf(selection2.endKey);\r\n\r\n    const isSameRowStart = selection1StartKeyIndex === selection2StartKeyIndex;\r\n    const isSameRowEnd = selection1EndKeyIndex === selection2EndKeyIndex;\r\n\r\n    const isS1StartSameRowAsS2End = selection1StartKeyIndex === selection2EndKeyIndex;\r\n    const isS1EndSameRowAsS2Start = selection1EndKeyIndex === selection2StartKeyIndex;\r\n\r\n    const isSel1StartToLeftOfSel2 = selection1StartKeyIndex < selection2StartKeyIndex || (isSameRowStart && selection1.startOffset < selection2.startOffset);\r\n    const isSel1EndToLeftOfSel2 = selection1EndKeyIndex < selection2StartKeyIndex || (isS1EndSameRowAsS2Start && selection1.endOffset < selection2.startOffset)\r\n    const isSel1StartToRightOfSel2 = selection1StartKeyIndex > selection2EndKeyIndex || (isS1StartSameRowAsS2End && selection1.startOffset > selection2.endOffset)\r\n    const isSel1EndToRightOfSel2 = selection1EndKeyIndex > selection2EndKeyIndex || (isSameRowEnd && selection1.endOffset > selection2.endOffset);\r\n\r\n    if (isSel1StartToLeftOfSel2 && isSel1EndToRightOfSel2) {\r\n      type = \"cover\";\r\n    }\r\n\r\n    if (!isSel1StartToLeftOfSel2 && !isSel1EndToRightOfSel2) {\r\n      type = \"inside\";\r\n    }\r\n\r\n    if (isSel1StartToLeftOfSel2 && !isSel1EndToRightOfSel2) {\r\n      type = \"left\";\r\n    }\r\n\r\n    if (!isSel1StartToLeftOfSel2 && isSel1EndToRightOfSel2) {\r\n      type = \"right\";\r\n    }\r\n\r\n    if (!type || (isSel1StartToLeftOfSel2 && isSel1EndToLeftOfSel2) || (isSel1StartToRightOfSel2 && isSel1EndToRightOfSel2)) {\r\n      type = \"none\";\r\n      isIntersect = false;\r\n    }\r\n\r\n    return {\r\n      type,\r\n      isIntersect\r\n    };\r\n  }\r\n\r\n\r\n  /*\r\n   * Build a selections array from the 'HIGHLIGHT'-styled areas in the given Draft editor state.\r\n   */\r\n  static calculateSelectionsArray = (editorState, blockKeysList) => {\r\n    const editorContent = editorState.getCurrentContent();\r\n    const rawContent = convertToRaw(editorContent);\r\n    return SelectionHelper.calculateSelectionsArrayFromContentState(rawContent, blockKeysList);\r\n  }\r\n\r\n\r\n  // -------------- selection related methods ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Create a new list of selections that contains all selections of the given list\r\n   * excluding the given selection to be removed.\r\n   * \r\n   * The method expects and returns selection objects with the four attributes startKey, startOffset, endKey, endOffset.\r\n   */\r\n  static removeSelectionFromSelectionsArray(selectionsArray, toRemove) {\r\n    const selections = selectionsArray.slice();\r\n    const filteredArray = selections.filter(item => !(\r\n      toRemove.startOffset === item.startOffset\r\n      && toRemove.endOffset === item.endOffset\r\n      && toRemove.startKey === item.startKey\r\n      && toRemove.endKey === item.endKey\r\n      && toRemove.highlightKey === item.highlightKey))\r\n\r\n    return filteredArray;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the selection from the given selections that is hit be the given click.\r\n   * \r\n   * The method expects and returns selection objects with the four attributes startKey, startOffset, endKey, endOffset.\r\n   * \r\n   * The method returns undefined if the click does not hit any selection in the given selections array.\r\n   */\r\n  static getSelectionHitByClick(click, selections, keyRowOrder) {\r\n    const clickedPosition = {\r\n      rowKey: click.getStartKey(),\r\n      pos: click.getStartOffset()\r\n    }\r\n\r\n    const filterConditions = selection => (\r\n      SelectionHelper.isMultipleRow(selection)\r\n        ? SelectionHelper.isSelectionHitByClickOnMultipleRows(clickedPosition, selection, keyRowOrder)\r\n        : (\r\n          SelectionHelper.isSelectionHitByClickInsideOneRow(clickedPosition, selection)\r\n          || SelectionHelper.isSelectionHitByClickOnOneCharacter(clickedPosition, selection)\r\n        )\r\n    );\r\n\r\n    const filteredSelections = selections.filter(selection => filterConditions(selection));\r\n\r\n    const { length } = filteredSelections;\r\n\r\n    return length > 0 ? filteredSelections[length - 1] : undefined;\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears the given selection object\r\n   * Selection keeps the position of the cursor\r\n   * @param {*} selection -> Given selection state object\r\n   * @returns {*} SelectionState\r\n   */\r\n  static clearSelection(selection) {\r\n\r\n    const focusKey = selection.getFocusKey();\r\n    const startOffset = selection.getStartOffset();\r\n    const endOffset = selection.getEndOffset();\r\n\r\n    const emptySelection = SelectionState.createEmpty(focusKey);\r\n\r\n    if (selection.getIsBackward()) {\r\n      return emptySelection.merge({\r\n        focusOffset: startOffset,\r\n        anchorOffset: startOffset\r\n      });\r\n    }\r\n\r\n    return emptySelection.merge({\r\n      focusOffset: endOffset,\r\n      anchorOffset: endOffset\r\n    });\r\n\r\n  }\r\n\r\n  // ---------------- blocks related methods ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the list of block keys in the the order of the blocks appearing in the given blocks list, \r\n   * e.g. [\"k0\", \"k1\"] \r\n   */\r\n  static getListOfBlockKeysInBlockOrder(blocks) {\r\n    return blocks.map(block => block.key);\r\n  }\r\n\r\n  /**\r\n   * Get a map from block-key to index-of-block for the given block keys list.\r\n   */\r\n  static getBlockKeysToBlockIndexMap(blockKeysList) {\r\n    const keyToIndexMap = {};\r\n    blockKeysList.forEach((element, index) => {\r\n      keyToIndexMap[element] = index;\r\n    });\r\n    return keyToIndexMap;\r\n  }\r\n\r\n  /**\r\n   * Transforms given Selections list to a list of DTOs for tracing\r\n   * @param {Array} selections \r\n   */\r\n  static TransformSelectionsToTraceSelectionsDTO(selections, path, runtime) {\r\n    const traceSelectionsDTO = [];\r\n\r\n    selections.forEach((selection) => {\r\n      const { startKey, endKey, startOffset, endOffset, highlightKey } = selection;\r\n      traceSelectionsDTO.push({\r\n        startKey,\r\n        endKey,\r\n        startOffset,\r\n        endOffset,\r\n        highlightColor: CbaRichTextField.convertHighlightKeyToValue(highlightKey, path, runtime)\r\n      })\r\n    });\r\n\r\n    return traceSelectionsDTO;\r\n  }\r\n\r\n\r\n  // ------------------ private stuff ----------------------------------------------------------\r\n  //\r\n  // All methods here expect and return selection objects with the four attributes startKey, startOffset, endKey, endOffset.\r\n  // \r\n\r\n  /*\r\n   * Build a selections array from the 'HIGHLIGHT'-styled areas in the given \r\n   * serializable content state (i.e. a RawDraftContentState).\r\n   * \r\n   * The returned array contains selection objects with five attributes: startKey, startOffset, endKey, endOffset, highlightKey.\r\n   */\r\n  static calculateSelectionsArrayFromContentState = (rawContent, blockKeysList) => {\r\n    const highlightSelections = {\r\n      blockTextLengths: {},\r\n      rawSelections: []\r\n    }\r\n\r\n    // Find all areas in the editor's blocks with 'HIGHLIGHT' style and collect them in the builtSelections structure:\r\n    rawContent.blocks.forEach((block, blockIndex) => {\r\n      // set block length\r\n      highlightSelections.blockTextLengths[block.key] = block.text.length;\r\n      block.inlineStyleRanges.forEach((inlineStyle) => {\r\n        if (inlineStyle.style && inlineStyle.style.includes(\"HIGHLIGHT\")) {\r\n          highlightSelections.rawSelections.push({\r\n            startKey: blockKeysList[blockIndex],\r\n            endKey: blockKeysList[blockIndex],\r\n            startOffset: inlineStyle.offset,\r\n            endOffset: inlineStyle.offset + inlineStyle.length,\r\n            highlightKey: inlineStyle.style\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    // merge all selections that overlap\r\n    return SelectionHelper.mergeRowSelections(highlightSelections.rawSelections, highlightSelections.blockTextLengths, blockKeysList);\r\n  }\r\n\r\n\r\n  /** \r\n   * Merge each group of contiguous (or even overlapping?) selections into a single selection. \r\n   * \r\n   * The method returns a new selections array with the merged selections (having attributes startKey, startOffset, endKey, endOffset).\r\n   * \r\n   * @param {[*]} selections Array of selections to be merged. Each selection must have the four attributes startKey, startOffset, endKey, endOffset.\r\n   * @param {*} blockTextLengths Map 'block key -> block's text length'\r\n   * @param {[string]} keyRowOrder List of block keys in the order of block appearance in the editor content.\r\n   */\r\n  static mergeRowSelections(selections, blockTextLengths, keyRowOrder) {\r\n    const blockKeyToIndexMap = SelectionHelper.getBlockKeysToBlockIndexMap(keyRowOrder);\r\n    const selectionsMergedStepByStep = Utils.deepCopy(selections);\r\n\r\n    for (let currentSelectionIndex = 0; currentSelectionIndex < selectionsMergedStepByStep.length - 1; currentSelectionIndex += 1) {\r\n      const currentSelection = selectionsMergedStepByStep[currentSelectionIndex];\r\n      const nextSelection = selectionsMergedStepByStep[currentSelectionIndex + 1];\r\n\r\n      const isSelectionToEndOfBlock = currentSelection.endOffset === blockTextLengths[currentSelection.endKey];\r\n      const isNextSelectionFromStart = (blockKeyToIndexMap[currentSelection.endKey] + 1) === blockKeyToIndexMap[nextSelection.startKey] && nextSelection.startOffset === 0;\r\n      const isNextSelectionSameColor = currentSelection.highlightKey === nextSelection.highlightKey;\r\n\r\n      if (isNextSelectionSameColor && isSelectionToEndOfBlock && isNextSelectionFromStart) {\r\n        const newMergedSelection = {\r\n          startKey: currentSelection.startKey,\r\n          endKey: nextSelection.endKey,\r\n          startOffset: currentSelection.startOffset,\r\n          endOffset: nextSelection.endOffset,\r\n          highlightKey: currentSelection.highlightKey\r\n        }\r\n\r\n        selectionsMergedStepByStep[currentSelectionIndex] = newMergedSelection;\r\n        selectionsMergedStepByStep.splice(currentSelectionIndex + 1, 1);\r\n        currentSelectionIndex -= 1;\r\n      }\r\n    }\r\n\r\n    return selectionsMergedStepByStep;\r\n  }\r\n\r\n  /**\r\n   * Does the given selection  span more than one row (i.e. block in the Draft's editor value model)?\r\n   */\r\n  static isMultipleRow = selection => selection.startKey !== selection.endKey\r\n\r\n  /**\r\n   * Does the given clicked position hit the given multiline selection?\r\n   */\r\n  static isSelectionHitByClickOnMultipleRows(clickedPosition, selection, keyRowOrder) {\r\n    return (\r\n      SelectionHelper.isTopRowClick(clickedPosition, selection)\r\n      || SelectionHelper.isBottomRowClick(clickedPosition, selection)\r\n      || SelectionHelper.isMiddleRowClick(clickedPosition, selection, keyRowOrder));\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit a 'middle' row of the given multiline selection?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isMiddleRowClick(clickedPosition, selection, keyRowOrder) {\r\n    const startIndex = keyRowOrder.indexOf(selection.startKey);\r\n    const endIndex = keyRowOrder.indexOf(selection.endKey);\r\n\r\n    for (let i = startIndex + 1; i < endIndex; i += 1) {\r\n      if (keyRowOrder[i] === clickedPosition.rowKey) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit the given multiline selection in its first row?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isTopRowClick(clickedPosition, selection) {\r\n    return clickedPosition.rowKey === selection.startKey && clickedPosition.pos > selection.startOffset;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit the given multiline selection in its last row?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isBottomRowClick(clickedPosition, selection) {\r\n    return clickedPosition.rowKey === selection.endKey && clickedPosition.pos < selection.endOffset;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit inside the given single row selection?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isSelectionHitByClickInsideOneRow(clickedPosition, selection) {\r\n    return clickedPosition.pos > selection.startOffset\r\n      && clickedPosition.pos < selection.endOffset\r\n      && clickedPosition.rowKey === selection.startKey;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit the given single character selection?\r\n   * \r\n   * We accept a click before and after the single character.\r\n   */\r\n  static isSelectionHitByClickOnOneCharacter(clickedPosition, selection) {\r\n    return (clickedPosition.rowKey === selection.startKey && selection.endOffset - selection.startOffset === 1)\r\n      && (clickedPosition.pos === selection.startOffset || clickedPosition.pos === selection.endOffset);\r\n  }\r\n\r\n\r\n}\r\n","import SelectionHelper from './SelectionHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport CbaRichTextField from './CbaRichTextField';\r\n\r\n\r\n/**\r\n * Helper methods to check the current 'highlight' selections\r\n * in a rich text field. These methods answer questions like:\r\n * Are there any non-blank characters selected?\r\n * Is a named 'text block' currently completely or partially selected?\r\n */\r\nexport default class TextBlockSelectHelper {\r\n\r\n  /**\r\n   * Is there any non-blank character inside the current selection of the given rich text field?\r\n   * @param {*} richTextPathState The full path state of the rich text field containing the text block.\r\n   * @param {*} richTextConfig The JSON configuration of the rich text field containing the text block.\r\n   */\r\n  static isSelectionContainsNonBlank(richTextPathState, richTextConfig, highlightColor) {\r\n    if (richTextConfig.value === undefined) {\r\n      console.warn(\"Invalid configuration found in rich text field!\");\r\n      return false;\r\n    }\r\n\r\n    const draftBlocks = richTextConfig.value.blocks;\r\n    if (draftBlocks === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const blockKeyToIndexMap = TextBlockSelectHelper.buildBlockKeyToIndexMap(richTextConfig);\r\n    const currentSelections = TextBlockSelectHelper.getSpansFromSelections(richTextPathState);\r\n\r\n    const spanArrayContainsNonBlank = TextBlockSelectHelper.spanArrayContainsNonBlank(currentSelections, draftBlocks, blockKeyToIndexMap);\r\n    const highlightedSelection = TextBlockSelectHelper.selectionsHighlighted(currentSelections, highlightColor);\r\n    return (spanArrayContainsNonBlank && highlightedSelection);\r\n  }\r\n\r\n  /**\r\n   * Is the text block identified by the given text block name (at least partially) selected by the current selection \r\n   * in the rich text field?\r\n   * @param {*} blockName The name of the text block to look at.\r\n   * @param {*} richTextPathState The full path state of the rich text field containing the text block.\r\n   * @param {*} richTextConfig The JSON configuration of the rich text field containing the text block.\r\n   * @param {*} partial Is it sufficient to have at least one non-blank character selected of do we need a full selection of all non-blank characters?\r\n   */\r\n  static isTextBlockSelected(blockName, richTextPathState, richTextConfig, partial, highlightColor) {\r\n\r\n    if (richTextConfig.value === undefined) {\r\n      console.warn(\"Invalid configuration found in rich text field!\");\r\n      return false;\r\n    }\r\n\r\n    const draftBlocks = richTextConfig.value.blocks;\r\n    if (draftBlocks === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const allBlocksConfig = richTextConfig.textBlocks;\r\n    if (allBlocksConfig === undefined) {\r\n      console.warn(`Text block with name ${blockName} not found in rich text field ${CommonConfigHelper.getIdentifyingInfoForLogMessage(richTextConfig)} (no text blocks there)`);\r\n      return false;\r\n    }\r\n\r\n    const blockConfig = TextBlockSelectHelper.findBlockConfigForBlockName(blockName, richTextConfig.textBlocks);\r\n    if (blockConfig === undefined) {\r\n      console.warn(`Text block with name ${blockName} not found in rich text field ${CommonConfigHelper.getIdentifyingInfoForLogMessage(richTextConfig)} (no such block)`);\r\n      return false;\r\n    }\r\n\r\n    const currentSelections = TextBlockSelectHelper.getSpansFromSelections(richTextPathState);\r\n\r\n    const blockKeyToIndexMap = TextBlockSelectHelper.buildBlockKeyToIndexMap(richTextConfig);\r\n\r\n    const { spans } = blockConfig;\r\n\r\n    return (partial\r\n      ? (spans.find(span => TextBlockSelectHelper.selectionsCoverANonBlankInSpanWithOptionalHighlight(currentSelections, span, draftBlocks, blockKeyToIndexMap, highlightColor)) !== undefined)\r\n      : spans.every(span => TextBlockSelectHelper.selectionsCoverNonBlanksInSpanWithOptionalHighlight(currentSelections, span, draftBlocks, blockKeyToIndexMap, highlightColor)));\r\n  }\r\n\r\n  static selectionsCoverNonBlanksInSpanWithOptionalHighlight(currentSelections, span, draftBlocks, blockKeyToIndexMap, highlightColor) {\r\n    const selectionsCoverNonBlanksInSpan = TextBlockSelectHelper.selectionsCoverNonBlanksInSpan(currentSelections, span, draftBlocks, blockKeyToIndexMap);\r\n    const selectionsCoverSpanWithGivenHighlightColor = TextBlockSelectHelper.selectionsCoverSpanWithGivenHighlightColor(currentSelections, span, draftBlocks, blockKeyToIndexMap, highlightColor);\r\n    return selectionsCoverNonBlanksInSpan && selectionsCoverSpanWithGivenHighlightColor;\r\n  }\r\n\r\n  static selectionsCoverSpanWithGivenHighlightColor(selections, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor) {\r\n    if (highlightColor === null) return true;\r\n    return selections.every((selection, index, all) => TextBlockSelectHelper.selectionCoverSpanWithGivenHighlightColor(selection, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor));\r\n  }\r\n\r\n  static selectionCoverSpanWithGivenHighlightColor(selection, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor) {\r\n    const checkSelection = TextBlockSelectHelper.selectionCoversANonBlankInSpan(selection, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor);\r\n    return checkSelection ? this.selectionHighlighted(selection, highlightColor) : true;\r\n  }\r\n\r\n  static selectionsHighlighted(currentSelections, highlightColor) {\r\n    if (highlightColor === null) return true;\r\n    return (currentSelections.find(currentSelection => TextBlockSelectHelper.selectionHighlighted(currentSelection, highlightColor)) !== undefined)\r\n  }\r\n\r\n  static selectionHighlighted(selection, highlightColor) {\r\n    if (highlightColor === null) return true;\r\n    return (highlightColor === selection.highlightColor);\r\n  }\r\n\r\n  static findBlockConfigForBlockName(blockName, allBlocksConfig) {\r\n    return allBlocksConfig.find(blockConfig => blockConfig.name === blockName)\r\n  }\r\n\r\n  static buildBlockKeyToIndexMap(richTextConfig) {\r\n    return SelectionHelper.getBlockKeysToBlockIndexMap(SelectionHelper.getListOfBlockKeysInBlockOrder(richTextConfig.value.blocks));\r\n  }\r\n\r\n\r\n  /**\r\n   * Return spans representing the current selections in the rich text field.\r\n   * @param {*} richTextPathState \r\n   */\r\n  static getSpansFromSelections(richTextPathState) {\r\n    const defaultHighlightColor = CbaRichTextField.convertHighlightValueToKey(richTextPathState.defaultHighlightColor);\r\n    return richTextPathState.selections.map(editorSelection => TextBlockSelectHelper.getSpanFromSelection(editorSelection, defaultHighlightColor));\r\n  }\r\n\r\n  /**\r\n   * Return a span representing the given current selection.\r\n   * \r\n   * @param {{startKey, startOffset, endKey, endOffset}} currentSelection A selection object representing one area of the current selections.\r\n   * @return {{start: { blockKey, offset}, end: {blockKey, offset}}}\r\n   */\r\n  static getSpanFromSelection(currentSelection, defaultHighlightColor) {\r\n    return {\r\n      start: {\r\n        blockKey: currentSelection.startKey,\r\n        offset: currentSelection.startOffset\r\n      },\r\n      end: {\r\n        blockKey: currentSelection.endKey,\r\n        offset: currentSelection.endOffset\r\n      },\r\n      highlightColor: (currentSelection.highlightKey === \"HIGHLIGHT\") ? defaultHighlightColor : currentSelection.highlightKey\r\n    };\r\n  }\r\n\r\n  static selectionsCoverANonBlankInSpanWithOptionalHighlight(selections, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor) {\r\n    return selections.find((selection, index, all) => (TextBlockSelectHelper.selectionCoversANonBlankInSpan(selection, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor) && TextBlockSelectHelper.selectionHighlighted(selection, highlightColor))) !== undefined;\r\n  }\r\n\r\n  static selectionCoversANonBlankInSpan(selection, spanToCover, draftBlocks, blockKeyToIndexMap) {\r\n    const overlap = TextBlockSelectHelper.getOverlap(selection, spanToCover, blockKeyToIndexMap);\r\n    return overlap === undefined ? false : TextBlockSelectHelper.spanContainsNonBlank(overlap, draftBlocks, blockKeyToIndexMap);\r\n  }\r\n\r\n  static selectionsCoverNonBlanksInSpan(selections, spanToCover, draftBlocks, blockKeyToIndexMap) {\r\n    //  Calculate areas in the span not covered by the selection. \r\n    const uncoveredAreas = TextBlockSelectHelper.calculateUncoveredAreas(selections, spanToCover, blockKeyToIndexMap);\r\n\r\n    //  Look for non-blanks in the uncovered areas. Result is true if no non-blanks are there, otherwise false.\r\n    return !TextBlockSelectHelper.spanArrayContainsNonBlank(uncoveredAreas, draftBlocks, blockKeyToIndexMap);\r\n  }\r\n\r\n  /**\r\n   * Calculate an array of spans not covered by the given selections.\r\n   * \r\n   * @param {*} selections \r\n   * @param {*} spanToCover \r\n   * @param {*} blockKeyToIndexMap \r\n   */\r\n  static calculateUncoveredAreas(selections, spanToCover, blockKeyToIndexMap) {\r\n    // Start with the complete span to cover as only element in a list of 'uncovered areas'. \r\n    // Loop over all selections: \r\n    //   Find the first uncovered area that is hit by the selection, punch out the part covered by the selection.\r\n    //   This may trim the uncovered area or split it in a left and a right part. Replace the original uncovered area with the rests of it \r\n    //   in the list of uncovered areas (in correct order: left first, right after that).\r\n    //  The loop keeps the list of uncovered areas sorted. Since the selections do not overlap we have to process \r\n    //  the first afflicted uncovered area only for each selection.\r\n    let uncoveredAreas = [spanToCover];\r\n    selections.forEach((currentSelection, index, all) => {\r\n      uncoveredAreas = TextBlockSelectHelper.calculateUncoveredAreasBySingleSelection(currentSelection, uncoveredAreas, blockKeyToIndexMap);\r\n    });\r\n    return uncoveredAreas;\r\n  }\r\n\r\n  /**\r\n   * Calculate an array of spans not covered by the given selection.\r\n   * \r\n   * @param {*} selection \r\n   * @param {*} spansToCover \r\n   * @param {*} blockKeyToIndexMap \r\n   */\r\n  static calculateUncoveredAreasBySingleSelection(selection, spansToCover, blockKeyToIndexMap) {\r\n    // Start with the complete span to cover as only element in a list of 'uncovered areas'. \r\n    // Loop over all selections: \r\n    //   Find the first uncovered area that is hit by the selection, punch out the part covered by the selection.\r\n    //   This may trim the uncovered area or split it in a left and a right part. Replace the original uncovered area with the rests of it \r\n    //   in the list of uncovered areas (in correct order: left first, right after that).\r\n    //  The loop keeps the list of uncovered areas sorted. Since the selections do not overlap we have to process \r\n    //  the first afflicted uncovered area only for each selection.\r\n    let uncoveredAreas = spansToCover;\r\n    let hitFound = false;\r\n    let areaIndex;\r\n    for (areaIndex = 0; !hitFound && areaIndex < uncoveredAreas.length; areaIndex += 1) {\r\n      const punchTarget = uncoveredAreas[areaIndex];\r\n      const remainingAreas = TextBlockSelectHelper.punch(selection, punchTarget, blockKeyToIndexMap);\r\n      if (remainingAreas !== undefined) {\r\n        hitFound = true;\r\n        uncoveredAreas = TextBlockSelectHelper.replaceEntryByArray(uncoveredAreas, areaIndex, remainingAreas);\r\n      }\r\n    }\r\n    return uncoveredAreas;\r\n  }\r\n\r\n  static dumpObject(object) {\r\n    return JSON.stringify(object);\r\n  }\r\n\r\n  static replaceEntryByArray(arrayToModify, indexToReplace, arrayToBeInserted) {\r\n    return arrayToModify.slice(0, indexToReplace).concat(arrayToBeInserted).concat(arrayToModify.slice(indexToReplace + 1));\r\n  }\r\n\r\n\r\n  /**\r\n   * Does the given span array contain any non-blank character?\r\n   * \r\n   * @param {[{start: { blockKey, offset}, end: {blockKey, offset}}] } spanArray An array of spans to be checked.\r\n   * @param {[{key, text}]} draftBlocks The text content blocks for the Draft editor.\r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static spanArrayContainsNonBlank(spanArray, draftBlocks, blockKeyToIndexMap) {\r\n    let nonBlankFound = false;\r\n    let spanIndex;\r\n    for (spanIndex = 0; !nonBlankFound && spanIndex < spanArray.length; spanIndex += 1) {\r\n      if (TextBlockSelectHelper.spanContainsNonBlank(spanArray[spanIndex], draftBlocks, blockKeyToIndexMap)) {\r\n        nonBlankFound = true;\r\n      }\r\n    }\r\n    return nonBlankFound;\r\n  }\r\n\r\n\r\n  /**\r\n   * Does the given span contain any non-blank character?\r\n   * \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}} } span A span to be checked.\r\n   * @param {[{key, text}]} draftBlocks The text content blocks for the Draft editor.\r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static spanContainsNonBlank(span, draftBlocks, blockKeyToIndexMap) {\r\n    const startKeyIndex = blockKeyToIndexMap[span.start.blockKey];\r\n    const endKeyIndex = blockKeyToIndexMap[span.end.blockKey];\r\n\r\n    if (startKeyIndex === endKeyIndex) {\r\n      return TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[startKeyIndex].text.substring(span.start.offset, span.end.offset));\r\n    }\r\n\r\n    let nonBlankFound = TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[startKeyIndex].text.substring(span.start.offset));\r\n    let keyIndex;\r\n    for (keyIndex = startKeyIndex + 1; !nonBlankFound && keyIndex < endKeyIndex; keyIndex += 1) {\r\n      nonBlankFound = TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[keyIndex].text);\r\n    }\r\n    if (!nonBlankFound) {\r\n      nonBlankFound = TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[endKeyIndex].text.substring(0, span.end.offset));\r\n    }\r\n\r\n    return nonBlankFound;\r\n  }\r\n\r\n  static stringContainsNonBlank(string) {\r\n    return /\\S/.test(string);\r\n  }\r\n\r\n  /**\r\n   * Punch out the given selection from the given target span. \r\n   * If they don't overlap return undefined. \r\n   * Otherwise return one or two spans that remain after punching out the given punch span from the given target span. \r\n   * \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}}} punchSpan A span to be punched from the target span. \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}} } targetSpan A span the punch is applied to.\r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   * @returns {[{start: { blockKey, offset}, end: {blockKey, offset} }]} The rest of the target span afer punching. \r\n   */\r\n  static punch(punchSpan, targetSpan, blockKeyToIndexMap) {\r\n    const leftPunchBorder = TextBlockSelectHelper.max(punchSpan.start, targetSpan.start, blockKeyToIndexMap);\r\n    const rightPunchBorder = TextBlockSelectHelper.min(punchSpan.end, targetSpan.end, blockKeyToIndexMap);\r\n    if (TextBlockSelectHelper.isLessOrEqual(leftPunchBorder, rightPunchBorder, blockKeyToIndexMap)) {\r\n      const result = [];\r\n      if (TextBlockSelectHelper.isLess(targetSpan.start, leftPunchBorder, blockKeyToIndexMap)) {\r\n        result.push({\r\n          start: targetSpan.start,\r\n          end: leftPunchBorder\r\n        });\r\n      }\r\n      if (TextBlockSelectHelper.isGreater(targetSpan.end, rightPunchBorder, blockKeyToIndexMap)) {\r\n        result.push({\r\n          start: rightPunchBorder,\r\n          end: targetSpan.end\r\n        });\r\n      }\r\n      return result;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the overlap of two spans.\r\n   * If they don't overlap return undefined. \r\n   * \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}}} oneSpan \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}} } anotherSpan \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   * @returns {[{start: { blockKey, offset}, end: {blockKey, offset} }]} The overlap or undefined if the spans do not overlap. \r\n   */\r\n  static getOverlap(oneSpan, anotherSpan, blockKeyToIndexMap) {\r\n    const leftOverlapBorder = TextBlockSelectHelper.max(oneSpan.start, anotherSpan.start, blockKeyToIndexMap);\r\n    const rightOverlapBorder = TextBlockSelectHelper.min(oneSpan.end, anotherSpan.end, blockKeyToIndexMap);\r\n    return (TextBlockSelectHelper.isLessOrEqual(leftOverlapBorder, rightOverlapBorder, blockKeyToIndexMap)\r\n      ? {\r\n        start: leftOverlapBorder,\r\n        end: rightOverlapBorder\r\n      }\r\n      : undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Return the maximum of the given span borders.\r\n   * \r\n   * @param {{blockKey, offset}} one\r\n   * @param {{blockKey, offset}} another \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static max(one, another, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isLess(one, another, blockKeyToIndexMap) ? another : one;\r\n  }\r\n\r\n  /**\r\n   * Return the minimum of the given span borders.\r\n   * \r\n   * @param {{blockKey, offset}} one\r\n   * @param {{blockKey, offset}} another \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static min(one, another, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isLess(one, another, blockKeyToIndexMap) ? one : another;\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static isLessOrEqual(leftBorder, rightBorder, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isEqual(leftBorder, rightBorder) || TextBlockSelectHelper.isLess(leftBorder, rightBorder, blockKeyToIndexMap);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static isGreater(leftBorder, rightBorder, blockKeyToIndexMap) {\r\n    return !TextBlockSelectHelper.isLessOrEqual(leftBorder, rightBorder, blockKeyToIndexMap);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static isLess(leftBorder, rightBorder, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isLessBlockKey(leftBorder.blockKey, rightBorder.blockKey, blockKeyToIndexMap) || (leftBorder.blockKey === rightBorder.blockKey && leftBorder.offset < rightBorder.offset);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   */\r\n  static isEqual(leftBorder, rightBorder) {\r\n    return leftBorder.blockKey === rightBorder.blockKey && leftBorder.offset === rightBorder.offset;\r\n  }\r\n\r\n  static isLessBlockKey(leftKey, rightKey, blockKeyToIndexMap) {\r\n    return blockKeyToIndexMap[leftKey] < blockKeyToIndexMap[rightKey];\r\n  }\r\n\r\n}\r\n","import CommonActionsHelper from './CommonActionsHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport RenderingHelper from './RenderingHelper';\nimport TableHelper from './table/TableHelper';\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport UserDefPathHelper from '../state/UserDefPathHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\n\n/**\n * Static methods used by our input components CbaInputField and CbaSingleLineInputField. \n */\nexport default class InputComponent {\n\n  static addAttributesToInitialState(initialState, configProps) {\n    StateAttributeAccess.setTextValue(initialState, configProps.text.label === undefined ? '' : configProps.text.label);\n  }\n\n  static isValidText(text, validationPattern) {\n    if (validationPattern === undefined) {\n      return true;\n    }\n    try {\n      const expression = new RegExp(`${validationPattern}`, 'm');\n      return expression.test(text);\n    } catch (exception) {\n      console.log(`Invalid regular expression ${validationPattern} on input field -> accepting input without check.`);\n      return true;\n    }\n  }\n\n  static onChangeHandler(component, event, userInteraction, traceType) {\n    const pathState = ComponentStateHelper.getState(component);\n    const oldText = StateAttributeAccess.extractTextValue(pathState);\n    const newText = event.target.value;\n    const { path, config, runtime, isInEditMode } = component.props;\n    const { nativeEvent } = event;\n    const inputTypeValue = (nativeEvent !== undefined) ? nativeEvent.inputType : undefined;\n    let inputDataValue = (nativeEvent !== undefined && nativeEvent.data !== null) ? nativeEvent.data : undefined;\n\n    const { validationPattern, validationFailEvent, sourceInputPath } = config;\n    const newTextIsValid = InputComponent.isValidText(newText, validationPattern);\n    const newTextValue = newTextIsValid ? newText : oldText;\n\n    // compute deleted text only if it is not a table cell or value input component\n    const computeDeletedText = !(config.isVariableValueInput || isInEditMode);\n    if (computeDeletedText && (newTextValue.length < oldText.length)) {\n      const diffIndex = oldText.split('').findIndex((char, index) => char !== newTextValue[index]);\n      inputDataValue = oldText.slice(diffIndex, diffIndex + (oldText.length - newTextValue.length));\n    }\n\n    const traceDetails = (userInteraction === 'ValueInputModified')\n      ? {\n        newValue: newText,\n        inputType: inputTypeValue\n      }\n      : {\n        oldTextValue: oldText,\n        newTextValue,\n        origin: 'keyboard',\n        validationPattern,\n        invalidTextValue: newTextIsValid ? undefined : newText,\n        inputType: inputTypeValue,\n        inputData: inputDataValue\n      };\n    // do not trace in for table cells\n    if (!isInEditMode) {\n      CommonActionsHelper.traceUserInteraction(\n        userInteraction, path,\n        traceDetails,\n        event,\n        {\n          type: traceType,\n          value: path\n        },\n        runtime\n      );\n    }\n\n    // update our full state in state manager:\n    // handle variable value input\n    if (config.isVariableValueInput) {\n      if (newText === '' || newText === '-') {\n        component.blockedDynamicUpdateText = newText;\n      } else {\n        component.blockedDynamicUpdateText = undefined;\n        if (InputComponent.isValidText(newText, '^[\\\\-]?[0-9]+$')) {\n          const { taskManager, variableManager } = runtime;\n          const currentTaskId = taskManager.getCurrentStatePathRoot();\n\n          const variableName = config.text.dynamic.variable;\n          const variableValue = parseInt(newText, 10);\n\n          variableManager.setVariable(currentTaskId, variableName, variableValue, \"integer\", runtime);\n        }\n      }\n\n    } else {\n      StateAttributeAccess.setTextValue(pathState, newTextValue);\n      if (sourceInputPath !== undefined) {\n        runtime.eventEmitter.emit(`inputFieldUpdated-${sourceInputPath}`, newTextValue);\n      }\n    }\n    StateAttributeAccess.setVisited(pathState, true);\n    ComponentStateHelper.registerState(component, pathState);\n\n    // trigger rendering by updating component's local state:\n    RenderingHelper.triggerRendering(component);\n\n    if (!newTextIsValid) {\n      CommonActionsHelper.sendEvent(validationFailEvent, runtime);\n    }\n  }\n\n  static onClickHandler(component, event) {\n    const { runtime, config, path, isInEditMode } = component.props;\n    const readOnly = config.readOnly === undefined ? false : config.readOnly;\n    CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, readOnly, InputComponent.updateTextValue, component, runtime);\n    InputComponent.registerAsInsertPosition(component, event);\n    const pathState = ComponentStateHelper.getState(component);\n    const currentText = StateAttributeAccess.extractTextValue(pathState);\n    const traceDetails = (config.isVariableValueInput === true)\n      ? {}\n      : {\n        currentTextValue: currentText\n      }\n    // do not trace in trace log for table cells\n    if (!isInEditMode) {\n      CommonActionsHelper.doStandardOnClick(event, traceDetails, component);\n    } else {\n      // when double click is made in a table cell we need to avoid propagation\n      const { row, column } = config;\n      const tablePath = TableHelper.buildTablePath(path);\n      const tableUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(tablePath, runtime);\n      const oldSelected = TableHelper.isOldSelected(tableUserDefIdPath, runtime);\n      const cellTraceDetails = {\n        tableUserDefIdPath,\n        tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\n        row,\n        column,\n        oldSelected\n      }\n\n      const cellPath = IndexPathHelper.dropIndexFromPageSegment(path);\n      CommonActionsHelper.traceUserInteractionPerConfig(config, cellPath,\n        cellTraceDetails,\n        event, runtime);\n      // avoid container tracing \n      CommonActionsHelper.stopEventPropagation(event);\n    }\n  }\n\n  static onContextMenuHandler(component, event) {\n    CommonActionsHelper.doContextMenuOpen(component, event);\n  }\n\n  static onSelectionHandler(component, event, componentTypeValue) {\n    const { runtime, path, config, isInEditMode } = component.props;\n    const pathState = ComponentStateHelper.getState(component);\n    const readOnly = config.readOnly === undefined ? false : config.readOnly;\n    CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, readOnly, InputComponent.updateTextValue, component, runtime);\n    InputComponent.registerAsInsertPosition(component, event);\n    CommonActionsHelper.stopEventPropagation(event);\n\n    if (!isInEditMode) {\n      const { selectionStart, selectionEnd, selectionDirection } = event.target;\n      const positionValue = (selectionStart === selectionEnd || selectionDirection === 'backward') ? selectionStart : selectionEnd;\n      CommonActionsHelper.traceUserInteraction(\n        'CaretPositionChange', path,\n        {\n          componentType: componentTypeValue,\n          position: positionValue\n        },\n        undefined, undefined, runtime\n      );\n      StateAttributeAccess.setLastCaretPosition(pathState, positionValue);\n      ComponentStateHelper.registerState(component, pathState);\n    }\n  }\n\n  static registerAsInsertPosition = (component, event) => {\n    const { runtime, path, config } = component.props;\n    const { selectionStart, selectionEnd } = event.target;\n    const readOnly = config.readOnly === undefined ? false : config.readOnly;\n    if (!readOnly) {\n      runtime.clipboardManager.registerInsertPosition(\n        path,\n        contentToInsert => InputComponent.updateTextValue(component, selectionStart, selectionEnd, contentToInsert)\n      );\n    }\n  }\n\n  static onBlurHandler(component) {\n    CommonActionsHelper.doStandardOnBlur(component);\n  }\n\n  static onFocusHandler(component) {\n    CommonActionsHelper.doStandardOnFocus(component);\n  }\n\n  /* disable the cut copy paste default browser handling of events */\n  static onCutCopyPaste(component, event) {\n    event.preventDefault();\n    return false;\n  }\n\n  static updateTextValue = (component, startPosition, endPosition, replacementText) => {\n    const pathState = ComponentStateHelper.getState(component);\n    const oldText = StateAttributeAccess.extractTextValue(pathState);\n    const newText = `${oldText.substring(0, startPosition)}${replacementText}${oldText.substring(endPosition)}`;\n\n    const { config, runtime, path, isInEditMode } = component.props;\n    const { validationPattern, validationFailEvent, trace } = config;\n    const newTextIsValid = InputComponent.isValidText(newText, validationPattern);\n    const eventType = trace.type === 'SingleLineInputField' ? 'SingleLineInputFieldModified' : 'InputFieldModified'\n\n    // do not trace in table cell edit mode\n    if (!isInEditMode) {\n      CommonActionsHelper.traceUserInteraction(\n        eventType, path,\n        {\n          oldTextValue: oldText,\n          newTextValue: newTextIsValid ? newText : oldText,\n          origin: 'cutAndPaste',\n          validationPattern,\n          invalidTextValue: newTextIsValid ? undefined : newText\n        },\n        undefined,\n        undefined,\n        runtime\n      );\n    }\n\n    if (newTextIsValid) {\n      // update our full state in state manager:\n      StateAttributeAccess.setTextValue(pathState, newText);\n      ComponentStateHelper.registerState(component, pathState);\n      RenderingHelper.triggerRendering(component);\n    } else {\n      CommonActionsHelper.sendEvent(validationFailEvent, runtime);\n    }\n\n  }\n\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport RenderingHelper from './RenderingHelper';\nimport TableHelper from './table/TableHelper';\nimport InputComponent from './InputComponent';\nimport IndexPathHelper from '../state/IndexPathHelper';\n\nexport default class CbaSingleLineInputField extends Component {\n\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    this.blockedDynamicUpdateText = undefined;\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n    const { runtime, config, path, isInEditMode } = this.props;\n    const { isSpreadsheet } = config;\n    if (isSpreadsheet) {\n      runtime.eventEmitter.addListener(`${TableHelper.buildTablePath(path)}-inputContentUpdate`, this.onContentUpdate.bind(this));\n\n      if (isInEditMode) {\n        this.focus();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  focus = () => {\n    this.inputRef.current.focus();\n  }\n\n  // ------------- Table specific handlers ------------------- //\n\n  onContentUpdate(value, receivedRow, receivedColumn) {\n    const { config } = this.props;\n    const { row, column } = config;\n    if (row === receivedRow && column === receivedColumn) {\n      const pathState = ComponentStateHelper.getState(this);\n\n      // update our full state in state manager:\n      StateAttributeAccess.setTextValue(pathState, value);\n      StateAttributeAccess.setVisited(pathState, true);\n      ComponentStateHelper.registerState(this, pathState);\n    }\n  }\n\n  onKeyDownHandler = (e) => {\n    const { path, runtime, config, isInEditMode } = this.props;\n    TableHelper.handleKeyDown(e, runtime, config, TableHelper.buildTablePath(path), isInEditMode);\n  }\n\n  onFocusHandler = () => {\n    const { path, runtime, isInEditMode } = this.props;\n    InputComponent.onFocusHandler(this);\n    TableHelper.handleCellFocus(runtime, TableHelper.buildTablePath(path), isInEditMode);\n  }\n\n  onKeyPressOnInput = (e) => {\n    const { runtime, config, path, isInEditMode, onBlur } = this.props;\n    // handle 'Enter' key pressed only we are inside of a table cell \n    if (isInEditMode) {\n      const { row, column } = config;\n      if (e.key === 'Enter') {\n        runtime.eventEmitter.emit(`${TableHelper.buildTablePath(path)}-contentUpdate`, e.target.value, row, column, false);\n        onBlur(e);\n        e.preventDefault();\n      }\n    }\n  }\n\n  onClickFrozenHandler = (event) => {\n    const { runtime, path, config, isInEditMode } = this.props;\n    let componentType = 'SingleLineInputField';\n    if (isInEditMode) componentType = 'TableCell';\n    if (config.isVariableValueInput) componentType = 'ValueInput';\n\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, componentType);\n    event.stopPropagation();\n  }\n\n  render() {\n    const { config, path, runtime, orientation, isInEditMode, onBlur, title } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selected = StateAttributeAccess.extractSelected(pathState);\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selected, orientation, runtime);\n\n    if (isInEditMode) {\n      // use the evaluated value as initial text if the config text is a formula\n      const textValue = StateAttributeAccess.extractTextValue(pathState);\n      if (textValue !== undefined && textValue === config.text.label && TableHelper.isFormula(textValue)) {\n        const cellPath = IndexPathHelper.dropIndexFromPageSegment(path);\n        const cellPathState = runtime.componentStateManager.findOrBuildStateForPathId(cellPath, runtime);\n        const cellValue = StateAttributeAccess.extractTextValue(cellPathState);\n        StateAttributeAccess.setTextValue(pathState, cellValue);\n      }\n\n      // force border style when in table cell\n      CommonConfigHelper.setStyleAttribute(style, \"zIndex\", 1);\n      CommonConfigHelper.setStyleAttribute(style, \"boxShadow\", \"inset rgb(79, 124, 177) 0px 0px 4px\");\n    }\n\n    const value = this.blockedDynamicUpdateText === undefined ? CommonConfigHelper.buildDisplayText(config, pathState, runtime) : this.blockedDynamicUpdateText;\n    this.blockedDynamicUpdateText = undefined;\n    const userInteraction = config.isVariableValueInput ? 'ValueInputModified' : 'SingleLineInputFieldModified';\n    const traceType = config.isVariableValueInput ? 'ValueInputField_onChange' : 'CbaSingleLineInputField_onChange';\n    const componentType = config.isVariableValueInput ? 'ValueInput' : 'SingleLineInputField';\n\n    return (\n      <React.Fragment>\n        <input\n          ref={this.inputRef}\n          type=\"text\"\n          title={isInEditMode ? title : CommonConfigHelper.buildTitle(config, pathState)}\n          style={style}\n          data-cba-id={config.pageEditId}\n          readOnly={config.readOnly}\n          disabled={StateAttributeAccess.extractDisabled(pathState)}\n          value={value}\n          onClick={event => InputComponent.onClickHandler(this, event)}\n          onContextMenu={event => InputComponent.onContextMenuHandler(this, event)}\n          onChange={event => InputComponent.onChangeHandler(this, event, userInteraction, traceType)}\n          onSelect={event => InputComponent.onSelectionHandler(this, event, componentType)}\n          onBlur={e => (isInEditMode ? onBlur(e, StateAttributeAccess.extractTextValue(pathState), false) : InputComponent.onBlurHandler(this))}\n          onFocus={this.onFocusHandler}\n          onKeyPress={this.onKeyPressOnInput}\n          onKeyDown={this.onKeyDownHandler}\n          onCut={event => InputComponent.onCutCopyPaste(this, event)}\n          onCopy={event => InputComponent.onCutCopyPaste(this, event)}\n          onPaste={event => InputComponent.onCutCopyPaste(this, event)}\n          tabIndex={config.tabIndex}\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaSingleLineInputField\")}\n          spellCheck={config.spellCheck}\n        />\n        {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaSingleLineInputField-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(style)} />}\n      </React.Fragment>\n    );\n  }\n\n}\n\n\nCbaSingleLineInputField.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        validationPattern: PropTypes.string,\n        validationFailEvent: PropTypes.string,\n        sourceInputPath: PropTypes.string\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n  isInEditMode: PropTypes.bool,\n  onBlur: PropTypes.func,\n  title: PropTypes.string\n}\n\nCbaSingleLineInputField.defaultProps = {\n  isInEditMode: false,\n  onBlur: () => {},\n  title: \"\"\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport CbaSingleLineInputField from '../CbaSingleLineInputField';\r\nimport CbaComboBox from '../CbaComboBox';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CbaRichTextField from '../CbaRichTextField/CbaRichTextField';\r\nimport TableHelper from './TableHelper';\r\nimport PathTranslationHelper from '../../state/PathTranslationHelper';\r\nimport UserDefPathHelper from '../../state/UserDefPathHelper';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\n\r\nexport default class CbaTableCell extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { runtime, config } = this.props;\r\n    this.eventEmitter = runtime.eventEmitter;\r\n    this.state = {\r\n      isInEditMode: config.isInEditMode,\r\n      hasHover: false\r\n    }\r\n    this.onCellFocused = this.onCellFocused.bind(this);\r\n    this.onClickHandler = this.onClickHandler.bind(this);\r\n    this.buildTableIndexPath = this.buildTableIndexPath.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { config } = this.props;\r\n    if (config.isSpreadsheet) {\r\n      this.initializeSpreadsheet();\r\n    }\r\n\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-removeLastSelection-[${config.row},${config.column}]`, this.onRemoveLastSelection.bind(this));\r\n  }\r\n\r\n  initializeSpreadsheet = () => {\r\n    const { config, path, runtime } = this.props;\r\n    const { row, column, isReadOnly } = config;\r\n    this.registerEventListeners(row, column);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const hadFocus = StateAttributeAccess.extractCellHadFocus(pathState);\r\n    // the default selected cell will be cell[1,1] if there was no focus registered for the page\r\n    const pagePath = IndexPathHelper.getPagePath(path);\r\n    if (row === 1 && column === 1 && !hadFocus\r\n      && !runtime.focusRegister.hasActionsRegisteredForPath(pagePath)) {\r\n      window.setTimeout(() => {\r\n        this.onCellFocused(row, column, isReadOnly);\r\n      }, 100);\r\n      StateAttributeAccess.setCellHadFocus(pathState, true);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n      this.updateStateAndTriggerRender(true);\r\n    }\r\n  }\r\n\r\n  registerEventListeners(row) {\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-rowHeaderUpdate`, this.onRowHeaderUpdate.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-columnHeaderUpdate`, this.onColumnHeaderUpdate.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-cell-mouse-enter-${row}`, this.onCellMouseEnter.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-cell-mouse-leave-${row}`, this.onCellMouseLeave.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-updateCellValue`, this.onUpdateValue.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-autoFocus`, this.onAutoFocus.bind(this));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  /**\r\n   * Callback method registered as a listener for cell update events. \r\n   * Update the cell state accordingly and notifies the edit mode component about the current updates.\r\n   * @param {*} selectedCell \r\n   * @param {*} value \r\n   * @param {*} isNotValidFormula \r\n   * @param {*} formula \r\n   * @param {*} errorMessage \r\n   * @param {*} isInitialization \r\n   */\r\n  onUpdateValue(selectedCell, value, isNotValidFormula, formula, errorMessage, errorProperty, isInitialization) {\r\n    const { config } = this.props;\r\n    if (selectedCell.row === config.row && selectedCell.column === config.column) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-inputContentUpdate`, value, selectedCell.row, selectedCell.column);\r\n      this.updateStateAndTriggerRender(true);\r\n\r\n      const pathState = ComponentStateHelper.getState(this);\r\n      const oldValue = StateAttributeAccess.extractTextValue(pathState);\r\n      const oldFormula = StateAttributeAccess.extractFormula(pathState);\r\n\r\n      // update our full state in state manager:\r\n      if (isNotValidFormula !== undefined) {\r\n        StateAttributeAccess.setCellHasError(pathState, isNotValidFormula);\r\n      }\r\n      if (errorMessage !== undefined) {\r\n        StateAttributeAccess.setCellTitle(pathState, errorMessage);\r\n        StateAttributeAccess.setCellTitleErrorProperty(pathState, errorProperty);\r\n      }\r\n      StateAttributeAccess.setTextValue(pathState, value);\r\n      StateAttributeAccess.setFormula(pathState, formula);\r\n      StateAttributeAccess.setVisited(pathState, true);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n\r\n\r\n      // handle tracing \r\n      if (!isInitialization && oldValue !== undefined && oldValue !== value) {\r\n        this.traceCellModified(undefined, oldValue, value, oldFormula, formula, errorMessage);\r\n      }\r\n\r\n      this.setState({\r\n        isInEditMode: false\r\n      });\r\n    }\r\n  }\r\n\r\n  onClickHandler = (event, keepHover) => {\r\n    const { config, runtime, path } = this.props;\r\n    const { row, column, isSpreadsheet, readOnly } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldSelected = StateAttributeAccess.extractSelected(pathState);\r\n\r\n    if (isSpreadsheet) {\r\n      if (row !== 0 && column !== 0) {\r\n        this.onCellFocused(row, column, readOnly);\r\n        this.updateStateAndTriggerRender(true);\r\n      } else if (row === 0) {\r\n        // second row same column should be focused\r\n        this.eventEmitter.emit(`${this.buildTableIndexPath()}-autoFocus`, row + 1, column);\r\n        // avoid container tracing \r\n        CommonActionsHelper.stopEventPropagation(event);\r\n        return;\r\n      } else if (column === 0) {\r\n        // same row second column should be focused\r\n        this.eventEmitter.emit(`${this.buildTableIndexPath()}-autoFocus`, row, column + 1);\r\n        // avoid container tracing \r\n        CommonActionsHelper.stopEventPropagation(event);\r\n        return;\r\n      }\r\n    } else {\r\n      // ignore click if our parent table is switched to 'not selectable' currently:\r\n      const tableState = runtime.componentStateManager.findOrBuildStateForPathId(this.buildTableIndexPath(), runtime);\r\n      if (StateAttributeAccess.extractSelectable(tableState)) {\r\n        // when multi select is disabled we need to clean the last selection \r\n        if (!config.isMultiSelectEnabled) {\r\n          this.onCellFocused(row, column, readOnly);\r\n        }\r\n        this.updateStateAndTriggerRender();\r\n      }\r\n    }\r\n\r\n    // handle tracing\r\n    const tablePath = this.buildTableIndexPath();\r\n    const tableUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(tablePath, runtime);\r\n    const traceDetails = {\r\n      tableUserDefIdPath,\r\n      tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\r\n      row,\r\n      column,\r\n      oldSelected\r\n    }\r\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\r\n      traceDetails,\r\n      event, runtime);\r\n    // avoid container tracing \r\n    CommonActionsHelper.stopEventPropagation(event);\r\n\r\n    // when a cell is clicked the row hover should disapeer \r\n    if (row !== 0 && !keepHover) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-cell-mouse-leave-${row}`, row);\r\n    }\r\n  }\r\n\r\n  checkSelectable = () => {\r\n    const { config, runtime } = this.props;\r\n\r\n    if (config.isSpreadsheet) {\r\n      return true;\r\n    }\r\n\r\n    const tableState = runtime.componentStateManager.findOrBuildStateForPathId(this.buildTableIndexPath(), runtime);\r\n    return StateAttributeAccess.extractSelectable(tableState);\r\n  }\r\n\r\n  updateStateAndTriggerRender = (keepSelection, selectionValue) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const { runtime, path } = this.props;\r\n\r\n    // update our full state in state manager:\r\n    if (!keepSelection) {\r\n      const oldSelected = StateAttributeAccess.extractSelected(pathState);\r\n      StateAttributeAccess.setSelected(pathState, selectionValue !== undefined ? selectionValue : !oldSelected);\r\n    }\r\n\r\n    StateAttributeAccess.setVisited(pathState, true);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRenderingViaPath(path, runtime);\r\n  }\r\n\r\n  onAutoFocus(rowToFocus, columnToFocus) {\r\n    const { config } = this.props;\r\n    const { row, column } = config;\r\n\r\n    if (row === rowToFocus && column === columnToFocus) {\r\n      this.onClickHandler(undefined, true);\r\n    }\r\n  }\r\n\r\n  onCellFocused(row, column, isReadOnly) {\r\n    const { config } = this.props;\r\n    this.eventEmitter.emit(`${this.buildTableIndexPath()}-cellFocused`, row, column, config.address, isReadOnly);\r\n    this.setState({\r\n      isInEditMode: true\r\n    });\r\n  }\r\n\r\n  onRowHeaderUpdate(currentSelected, newSelected) {\r\n    const { config } = this.props;\r\n    if ((config.row === currentSelected || config.row === newSelected)\r\n      && (currentSelected !== newSelected) && (config.column === 0)) {\r\n      this.updateStateAndTriggerRender();\r\n    }\r\n  }\r\n\r\n  onColumnHeaderUpdate(currentSelected, newSelected) {\r\n    const { config } = this.props;\r\n    if ((config.column === currentSelected || config.column === newSelected)\r\n      && (currentSelected !== newSelected) && (config.row === 0)) {\r\n      this.updateStateAndTriggerRender();\r\n    }\r\n  }\r\n\r\n  onRemoveLastSelection() {\r\n    this.updateStateAndTriggerRender(false, false);\r\n  }\r\n\r\n  onMouseEnter() {\r\n    const { config } = this.props;\r\n    const { row } = config;\r\n    if (row !== 0) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-cell-mouse-enter-${row}`, row);\r\n    }\r\n  }\r\n\r\n  onCellMouseEnter(row) {\r\n    const { config } = this.props;\r\n    if (config.row === row && config.column !== 0) {\r\n      this.setState({\r\n        hasHover: true\r\n      });\r\n    }\r\n  }\r\n\r\n  onMouseLeave() {\r\n    const { config } = this.props;\r\n    const { row } = config;\r\n    if (row !== 0) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-cell-mouse-leave-${row}`, row);\r\n    }\r\n  }\r\n\r\n  onCellMouseLeave(row) {\r\n    const { config } = this.props;\r\n    if (config.row === row && config.column !== 0) {\r\n      this.setState({\r\n        hasHover: false\r\n      });\r\n    }\r\n  }\r\n\r\n  onKeyDownHandler(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      this.onClickHandler(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback method sent as prop to edit mode components.\r\n   * Will forward the changed data to the table component and exit the edit mode(rerender).\r\n   */\r\n  onSelectionChange = (e, textValue, isReadOnly) => {\r\n    if (textValue !== undefined) {\r\n      const pathState = ComponentStateHelper.getState(this);\r\n      const oldValue = StateAttributeAccess.extractTextValue(pathState);\r\n      const { config } = this.props;\r\n      if (textValue !== oldValue) {\r\n        const { row, column } = config;\r\n        this.eventEmitter.emit(`${this.buildTableIndexPath()}-contentUpdate`, textValue, row, column, isReadOnly);\r\n      }\r\n    }\r\n\r\n    this.updateStateAndTriggerRender(false, true);\r\n    this.setState({\r\n      isInEditMode: false\r\n    });\r\n  }\r\n\r\n  buildLabel = (config, pathState) => {\r\n    let label = StateAttributeAccess.extractTextValue(pathState);\r\n    const { text } = config;\r\n\r\n    label = (label === undefined ? text.label : label);\r\n\r\n    if (TableHelper.isInt(label)) {\r\n      label = Number.parseInt(label, 10);\r\n    }\r\n\r\n    if (TableHelper.isFloat(label)) {\r\n      if (config.numberOfDecimalPlaces !== -1) {\r\n        label = Number.parseFloat(label).toFixed(config.numberOfDecimalPlaces);\r\n      } else if (config.defaultNumberOfDecimalPlaces !== 0) {\r\n        label = Number.parseFloat(label).toFixed(config.defaultNumberOfDecimalPlaces);\r\n      }\r\n    }\r\n\r\n    return label;\r\n  }\r\n\r\n  buildTitle = (config, pathState) => {\r\n    const { runtime } = this.props;\r\n    const hasError = StateAttributeAccess.extractCellHasError(pathState);\r\n    let title;\r\n    if (hasError) {\r\n      const errorMessage = StateAttributeAccess.extractCellTitle(pathState);\r\n      const errorProperty = StateAttributeAccess.extractCellTitleErrorProperty(pathState);\r\n      title = errorMessage !== undefined ? runtime.translationManager.getTranslatedTextWithFallback(errorProperty, errorMessage) : '';\r\n    } else if (config.hasStandardTooltip) {\r\n      title = CommonConfigHelper.buildTitle(config, pathState);\r\n      if (title === undefined || title === '') {\r\n        title = config.address;\r\n      }\r\n    }\r\n    return title;\r\n  }\r\n\r\n  /**\r\n   * Helper method used to decide which kind of React component will be rendered as a table cell.\r\n   * In standard mode this will usually return a CbaRichTextField or a <div>. \r\n   * In spreadsheed mode the cell in read mode will be represented by a <div> \r\n   * and in edit mode they'll become a CbaSingleLineInputField or a CbaCombobox.\r\n   */\r\n  buildTableCell = (config, path, runtime, orientation, style) => {\r\n    const { isSpreadsheet, tabIndex } = config;\r\n    const { isInEditMode } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const imageReference = StateAttributeAccess.extractDefaultImage(pathState);\r\n    const imageStyle = {\r\n      maxHeight: \"100%\",\r\n      maxWidth: \"100%\"\r\n    }\r\n    let tableCell;\r\n    if (isSpreadsheet) {\r\n      tableCell = (\r\n        <div\r\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaSpreadsheetCell\")}\r\n          style={style}\r\n          data-cba-id={config.pageEditId}\r\n          onClick={this.onClickHandler}\r\n          onDoubleClick={this.onDoubleClickCaptureHandler}\r\n          title={this.buildTitle(config, pathState)}\r\n          onMouseEnter={() => this.onMouseEnter()}\r\n          onMouseLeave={() => this.onMouseLeave()}\r\n          onKeyDown={event => this.onKeyDownHandler(event)}\r\n          tabIndex={tabIndex}\r\n        >\r\n          {imageReference\r\n            && <img src={CommonConfigHelper.getProperResourcePath(imageReference, runtime)} style={imageStyle} alt=\"\" />}\r\n          {this.buildLabel(config, pathState)}\r\n        </div>\r\n      );\r\n\r\n      // in edit we render a child component \r\n      if (isInEditMode) {\r\n        const cellConfig = {\r\n          config\r\n        }\r\n        if (config.items !== undefined) {\r\n          const comboboxCopy = CbaTableCell.createCellCopy(cellConfig, path, \"CbaComboBox\");\r\n          tableCell = <CbaComboBox config={comboboxCopy.config} path={comboboxCopy.path} runtime={runtime} orientation={orientation} title={this.buildTitle(config, pathState)} onBlur={this.onSelectionChange} isInEditMode={isInEditMode} />\r\n          StateAttributeAccess.setCellType(pathState, \"combo\");\r\n        } else {\r\n          const inputCopy = CbaTableCell.createCellCopy(cellConfig, path, \"CbaSingleLineInputField\");\r\n          tableCell = <CbaSingleLineInputField config={inputCopy.config} path={inputCopy.path} runtime={runtime} orientation={orientation} title={this.buildTitle(config, pathState)} onBlur={this.onSelectionChange} isInEditMode={isInEditMode} />\r\n          StateAttributeAccess.setCellType(pathState, \"text\");\r\n        }\r\n        ComponentStateHelper.registerState(this, pathState);\r\n      }\r\n    } else {\r\n      const delegates = config.cbaChildren.map((child, index) => {\r\n        const childPath = IndexPathHelper.appendIndexToPageSegment(path, index);\r\n\r\n        // Override child config with some of the table cell config attributes,\r\n        // needed for selected/deselected behavior, \r\n        // because the text field model doesn't contain the selectGroupMember attribute\r\n        const childCopy = StateManagerHelper.deepCopy(child);\r\n        childCopy.config.color = config.color;\r\n        childCopy.config.toggleType = \"colorChange\";\r\n        childCopy.config.tabIndex = config.tabIndex;\r\n\r\n        return (\r\n          <CbaRichTextField\r\n            key={childPath}\r\n            config={childCopy.config}\r\n            path={childPath}\r\n            runtime={runtime}\r\n            orientation={orientation}\r\n            row={config.row}\r\n            column={config.column}\r\n            parentTableUserDefId={config.parentTableUserDefId}\r\n            onParentClick={this.onClickHandler}\r\n            checkSelectable={this.checkSelectable}\r\n          />\r\n        )\r\n      });\r\n\r\n      // shrink borders inside the cell\r\n      style.boxSizing = 'border-box';\r\n      tableCell = (\r\n        <div\r\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaTableCell\")}\r\n          style={style}\r\n          data-cba-id={config.pageEditId}\r\n          onClick={this.onClickHandler}\r\n          title={CommonConfigHelper.buildTitle(config, pathState)}\r\n          tabIndex={delegates.length ? \"-1\" : tabIndex}\r\n          onKeyDown={event => this.onKeyDownHandler(event)}\r\n        >\r\n          {imageReference\r\n            && <img src={CommonConfigHelper.getProperResourcePath(imageReference, runtime)} style={imageStyle} alt=\"\" />}\r\n          {delegates}\r\n        </div>\r\n      )\r\n    }\r\n    return tableCell;\r\n  }\r\n\r\n  /**\r\n   * The method returns the index path of the parent table\r\n   */\r\n  buildTableIndexPath() {\r\n    const { path } = this.props;\r\n    return IndexPathHelper.dropIndexFromPageSegment(path);\r\n  }\r\n\r\n  traceCellModified(event, oldEvaluatedValue, newEvaluatedValue, oldValue, newValue, errorInFormula) {\r\n    const { config, path, runtime } = this.props;\r\n    const { row, column } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const tablePath = this.buildTableIndexPath();\r\n    const tableUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(tablePath, runtime);\r\n    const currentCellType = StateAttributeAccess.extractCellType(pathState);\r\n    const cellType = TableHelper.isFormula(newValue) ? 'formula' : currentCellType;\r\n    const oldCellType = TableHelper.isFormula(oldValue) ? 'formula' : currentCellType;\r\n    const oldErrorState = Number.isNaN(Number.parseFloat(oldEvaluatedValue));\r\n    let traceDetails;\r\n\r\n    if (oldCellType !== 'formula') {\r\n      // do not show old evaluated value for old text cells  \r\n      oldValue = oldEvaluatedValue;\r\n      oldEvaluatedValue = undefined;\r\n    } else if (oldErrorState) {\r\n      // do not show old evaluated value for old formula cells with errors \r\n      oldEvaluatedValue = undefined;\r\n    }\r\n\r\n    // do not show new evaluated value for new formula cells with errors \r\n    if (errorInFormula) {\r\n      newEvaluatedValue = undefined;\r\n    }\r\n\r\n    if (cellType === 'formula') {\r\n      traceDetails = {\r\n        tableUserDefIdPath,\r\n        tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\r\n        row,\r\n        column,\r\n        oldValue,\r\n        newValue,\r\n        cellType,\r\n        oldEvaluatedValue,\r\n        newEvaluatedValue,\r\n        errorInFormula\r\n      }\r\n    } else {\r\n      newValue = newEvaluatedValue;\r\n      traceDetails = {\r\n        tableUserDefIdPath,\r\n        tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\r\n        row,\r\n        column,\r\n        oldValue,\r\n        newValue,\r\n        cellType,\r\n        oldEvaluatedValue\r\n      }\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteraction(\"TableCellModified\", path, traceDetails,\r\n      event,\r\n      undefined,\r\n      runtime);\r\n  }\r\n\r\n  /**\r\n   * Helper method used to create a copy of the cell coponent and override some info.\r\n   * @param {*} cell the table cell component instance\r\n   * @param {*} type the type of the copy created\r\n   */\r\n  static createCellCopy(cell, path, type) {\r\n    const cellCopy = StateManagerHelper.deepCopy(cell);\r\n    cellCopy.config.userDefinedId = undefined;\r\n    cellCopy.type = type;\r\n    cellCopy.path = IndexPathHelper.appendIndexToPageSegment(path, 0);\r\n    return cellCopy;\r\n  }\r\n\r\n  static getFormulaOrValue(selector, userDefPath, runtime) {\r\n    const cellState = runtime.componentStateManager.findOrBuildStateByUserDefPath(userDefPath, runtime);\r\n    if (selector === 'formula') {\r\n      return StateAttributeAccess.extractFormula(cellState);\r\n    }\r\n    return StateAttributeAccess.extractTextValue(cellState);\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n    const { hasHover } = this.state;\r\n    const hoverBackgroundColor = \"-webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(235, 235, 235)), to(rgb(213, 213, 213)))\";\r\n\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const selectedState = StateAttributeAccess.extractSelected(pathState);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\r\n\r\n    const { isSpreadsheet } = config;\r\n    if (isSpreadsheet) {\r\n      // when a cell has hover a grey gradient will be applied to its background, \r\n      // otherwise should return to its previous state\r\n      if (hasHover) {\r\n        CommonConfigHelper.setStyleAttribute(style, \"background\", hoverBackgroundColor);\r\n      } else if (selectedState) {\r\n        CommonConfigHelper.setStyleAttribute(style, \"background\", config.color.background.selected);\r\n      } else {\r\n        CommonConfigHelper.setStyleAttribute(style, \"background\", config.color.background.default);\r\n      }\r\n\r\n      // these are styling settings to keep the label inside the cell \r\n      CommonConfigHelper.setStyleAttribute(style, \"textOverflow\", \"ellipsis\");\r\n      CommonConfigHelper.setStyleAttribute(style, \"whiteSpace\", \"nowrap\");\r\n      CommonConfigHelper.setStyleAttribute(style, \"overflow\", \"hidden\");\r\n\r\n    }\r\n\r\n    return this.buildTableCell(config, path, runtime, orientation, style);\r\n  }\r\n\r\n}\r\n\r\nCbaTableCell.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        row: PropTypes.number.isRequired,\r\n        column: PropTypes.number.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDrop, useDrag } from 'react-dnd'\r\nimport TreeUtils from '../TreeUtils';\r\nimport DragAndDropHelper from '../../../config/DragAndDropHelper';\r\nimport PropTypesHelper from '../../PropTypesHelper';\r\n\r\n\r\nexport default function CbaTreeHeader(props) {\r\n  const { column } = props;\r\n  const { mouseOver, label, font } = column;\r\n  // const style = TreeUtils.buildTreeCellStyle(column); use this when/if generator generates the full column header style\r\n  const style = {\r\n    textAlign: font ? font.alignmentHorizontal : \"\"\r\n  }\r\n\r\n  const headerRef = useRef(null);\r\n\r\n  const [collectedPropsDrop, drop] = useDrop({\r\n    accept: `${column.parentPath}-header`,\r\n    drop: (item) => {\r\n      TreeUtils.handleColumnMove(column, item.id);\r\n    },\r\n    canDrop: item => item.id !== column.key,\r\n    collect: monitor => ({\r\n      dragIsOver: monitor.isOver(),\r\n      dragCanDrop: monitor.canDrop(),\r\n    })\r\n  });\r\n\r\n  const [, drag] = useDrag({\r\n    item: {\r\n      id: column.key,\r\n      type: `${column.parentPath}-header`\r\n    },\r\n    canDrag: () => column.moveable\r\n  });\r\n\r\n  drag(drop(headerRef));\r\n\r\n  DragAndDropHelper.addCanDropStyleAttributes(style, collectedPropsDrop);\r\n\r\n  return (\r\n    <div\r\n      title={mouseOver}\r\n      className=\"CbaTreeHeaderInner\"\r\n      style={style}\r\n      ref={headerRef}\r\n    >\r\n      <span>{label}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nCbaTreeHeader.propTypes = {\r\n  column: PropTypes.shape(PropTypesHelper.getCbaTreeColumnConfig())\r\n}\r\n\r\nCbaTreeHeader.defaultProps = {\r\n  column: {\r\n    label: \"default\",\r\n    key: \"\"\r\n  }\r\n}\r\n","import CommonActionsHelper from \"../CommonActionsHelper\";\r\nimport TreeUtils from \"./TreeUtils\";\r\n\r\nexport default class TreeTraceHelper {\r\n\r\n  /**\r\n   * Trace tree view sort action \r\n  */\r\n  static traceSort(path, columnId, sortDirection, runtime) {\r\n\r\n    const { treeColumns } = TreeUtils.getTreeDataByPath(path, runtime);\r\n\r\n    let columnName;\r\n    let columnIndex;\r\n\r\n    treeColumns.forEach((column, index) => {\r\n      if (column.key === columnId) {\r\n        columnName = column.label;\r\n        columnIndex = index;\r\n      }\r\n    });\r\n\r\n    const traceDetails = {\r\n      columnName,\r\n      columnIndex,\r\n      sortDirection: TreeTraceHelper.getSortDirectionForTrace(sortDirection)\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteraction(\"TreeViewSort\", path, traceDetails, undefined, undefined, runtime);\r\n  }\r\n\r\n  static getSortDirectionForTrace(sortDirection) {\r\n    switch (sortDirection) {\r\n      case 'ASC':\r\n        return 'ascending';\r\n      case 'DESC':\r\n        return 'descending';\r\n      case 'NONE':\r\n        return 'none';\r\n      default:\r\n        return `<unknown: ${sortDirection}>`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traces any kind of node action \r\n   */\r\n  static traceNodeAction(actionType, treePath, rowData, runtime, oldValue, newValue, columnName) {\r\n    const { isTreeView, treeViewPath, nodeType, nodePathId, nodeTypes } = rowData;\r\n    const eventType = isTreeView ? \"TreeViewNode\" : \"TreeNode\";\r\n    const path = isTreeView ? treeViewPath : treePath;\r\n\r\n    let triggeredEvent;\r\n    let nodeName;\r\n\r\n    if (!newValue && !oldValue && !columnName) {\r\n      nodeName = TreeUtils.getNodeName(rowData);\r\n    }\r\n\r\n    if (nodeType && nodeTypes) {\r\n      const nodeTypeInstance = TreeUtils.getNodeType(nodeTypes, nodeType);\r\n      const { deleteEvent } = nodeTypeInstance;\r\n      triggeredEvent = TreeTraceHelper.isTriggeredEventRequired(deleteEvent, actionType) ? deleteEvent : undefined;\r\n    }\r\n\r\n    const traceDetails = {\r\n      operation: actionType,\r\n      nodeName,\r\n      oldValue,\r\n      newValue,\r\n      columnName,\r\n      nodeType,\r\n      nodePathId,\r\n      triggeredEvent\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteraction(eventType, path, traceDetails, undefined, undefined, runtime);\r\n  }\r\n\r\n  static isTriggeredEventRequired = (deleteEvent, operation) => deleteEvent !== undefined && deleteEvent !== \"\" && operation === \"delete\";\r\n\r\n}\r\n","import TreeUtils from \"./TreeUtils\";\r\nimport TreeTraceHelper from \"./TreeTraceHelper\";\r\n\r\nexport default class TreeContextMenuHelper {\r\n\r\n  static openContextMenu(event, rowData, columnKey) {\r\n    event.persist();\r\n    const { runtime } = rowData;\r\n    const entries = TreeContextMenuHelper.buildContextMenuEntries(rowData, columnKey);\r\n\r\n    if (entries.length) {\r\n      runtime.contextMenu.openMenuItemTree({\r\n        event,\r\n        entries\r\n      })\r\n    }\r\n  }\r\n\r\n  static buildContextMenuEntries = (rowData, columnKey) => {\r\n    const { nodeType, nodeTypes, runtime } = rowData;\r\n    const nodeTypeInstance = TreeUtils.getNodeType(nodeTypes, nodeType);\r\n    const { contextMenuCommands } = nodeTypeInstance;\r\n\r\n    return contextMenuCommands.map((entry) => {\r\n      let command = Object.assign({}, entry);\r\n      switch (entry.type) {\r\n        case \"action\": command = TreeContextMenuHelper.buildContextMenuActionEntry(command, rowData, columnKey); break;\r\n        case \"submenu\": command = Object.assign(command, {\r\n          submenu: command.submenu.map(e => TreeContextMenuHelper.buildContextMenuActionEntry(e, rowData, columnKey)),\r\n          disabled: !command.submenu.length,\r\n          label: runtime.translationManager.getTranslatedTextWithFallback('treeAddText', command.label)\r\n        }); break;\r\n        default: console.error(\"Invalid context menu config in tree\", rowData);\r\n      }\r\n\r\n      return command;\r\n    });\r\n  }\r\n\r\n  static buildContextMenuActionEntry(entry, rowData, columnKey) {\r\n    const actionEntry = Object.assign({}, entry);\r\n    const { action } = entry;\r\n    const { runtime } = rowData;\r\n\r\n    switch (action) {\r\n      case \"CUT\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeCut);\r\n        actionEntry.label = runtime.translationManager.getTranslatedTextWithFallback('editCutText', actionEntry.label);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"COPY\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeCopy);\r\n        actionEntry.label = runtime.translationManager.getTranslatedTextWithFallback('editCopyText', actionEntry.label);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"PASTE\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreePaste);\r\n        actionEntry.label = runtime.translationManager.getTranslatedTextWithFallback('editPasteText', actionEntry.label);\r\n        actionEntry.disabled = TreeContextMenuHelper.handlePasteDisabled(rowData);\r\n        break;\r\n      case \"DELETE\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeDelete);\r\n        actionEntry.label = runtime.translationManager.getTranslatedTextWithFallback('treeDeleteText', actionEntry.label);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"RENAME\": // rename operation needs specific data for tracing, thus we'll trace inside the rename handler\r\n        actionEntry.action = () => TreeUtils.startRenameOperation(rowData, columnKey);\r\n        actionEntry.label = runtime.translationManager.getTranslatedTextWithFallback('treeRenameText', actionEntry.label);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"NEW\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeNew, actionEntry.label);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      default: console.error(\"Invalid context menu config in tree\", rowData);\r\n    }\r\n\r\n    return actionEntry;\r\n  }\r\n\r\n  static buildContextMenuAction = (actionType, rowData, actionHandler, label) => {\r\n    const { path: nodePath, treePath, runtime, isTreeView, treeViewPath } = rowData;\r\n\r\n    TreeTraceHelper.traceNodeAction(actionType.toLowerCase(), treePath, rowData, runtime);\r\n    actionHandler(treePath, nodePath, runtime, label, isTreeView, treeViewPath);\r\n  }\r\n\r\n  static handlePasteDisabled = (rowData) => {\r\n    const { treePath, runtime, path: nodePath, nodeType: nodeTypeName } = rowData;\r\n\r\n    const { treeState, nodeTypes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const { copiedNode, currentlyCutNodePath } = treeState;\r\n    const nodeType = TreeUtils.getNodeType(nodeTypes, nodeTypeName);\r\n\r\n    // mark as disabled if there is no node to paste\r\n    if (!treeState.copiedNode) {\r\n      return true;\r\n    }\r\n\r\n    // mark as disabled if the copied node does not have the accepted node type\r\n    if (!nodeType.childTypes.includes(copiedNode.nodeType)) {\r\n      return true;\r\n    }\r\n\r\n    // mark as disabled if cut node is a parent of the node that opened context menu\r\n    if (copiedNode && currentlyCutNodePath) {\r\n      let cutNodes = []\r\n      if (copiedNode.nodes.length) {\r\n        cutNodes = TreeUtils.flattenNodes(copiedNode.nodes);\r\n      }\r\n      cutNodes.push(copiedNode);\r\n\r\n      if (cutNodes.find(n => n.path === nodePath)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // mark enabled if it gets here\r\n    return false\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TreeUtils from '../TreeUtils';\r\nimport TreeContextMenuHelper from '../TreeContextMenuHelper';\r\nimport CommonActionsHelper from '../../CommonActionsHelper';\r\nimport ComponentStateHelper from '../../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../../state/StateAttributeAccess';\r\nimport Utils from '../../../utils/Utils';\r\nimport TreeTraceHelper from '../TreeTraceHelper';\r\nimport PropTypesHelper from '../../PropTypesHelper';\r\n\r\n\r\nexport default class CbaTreeCell extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = this.getInitialState();\r\n    this.inputRef = React.createRef();\r\n  }\r\n\r\n  handleContextMenuClick = (event, updateOnSingleClick) => {\r\n    const { rowData, column } = this.props;\r\n    const { onRowSelect, runtime, isReadOnly } = rowData;\r\n\r\n    if (!runtime.contextMenu) console.error(\"Context menu not found in tree row\", rowData);\r\n\r\n    if (updateOnSingleClick) {\r\n      onRowSelect(event, rowData);\r\n    }\r\n\r\n    if (!isReadOnly) {\r\n      TreeContextMenuHelper.openContextMenu(event, rowData, column.key);\r\n    }\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  handleRenameCell = () => {\r\n    // setTimeout needed because method is called from render function\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isRenameState: true,\r\n        cellEditedValue: this.getInitialState().cellEditedValue\r\n      }, () => {\r\n        const { rowData } = this.props;\r\n        const { treePath, runtime } = rowData;\r\n        const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n        const pathState = ComponentStateHelper.getState(treeInstance);\r\n        const treeState = StateAttributeAccess.extractTreeState(pathState) || {};\r\n\r\n        treeState.currentRenameNode = null;\r\n\r\n        StateAttributeAccess.setTreeState(pathState, treeState);\r\n        ComponentStateHelper.registerState(treeInstance, pathState);\r\n\r\n        this.inputRef.current.focus();\r\n      });\r\n    }, 0)\r\n  }\r\n\r\n  handleCellInputFocus = (event) => {\r\n    event.target.select();\r\n  }\r\n\r\n  handleCellInputBlur = (event) => {\r\n    const { rowData, column } = this.props;\r\n    const { cellEditedValue } = this.state;\r\n    const initialState = this.getInitialState();\r\n\r\n    if (initialState.cellEditedValue !== cellEditedValue) {\r\n      TreeUtils.doTreeRename(rowData, column.key, cellEditedValue);\r\n    }\r\n\r\n    this.setState(this.getInitialState());\r\n  }\r\n\r\n  handleCellInputKeyDown = (event) => {\r\n    event.stopPropagation();\r\n    if (Utils.keyCodes.Enter === event.keyCode) {\r\n      // blur to save state\r\n      this.inputRef.current.blur();\r\n    }\r\n\r\n    if (Utils.keyCodes.Escape === event.keyCode) {\r\n      // ESC to cancel saving state\r\n      this.setState(this.getInitialState())\r\n    }\r\n  }\r\n\r\n  handleCellInputChange = (event) => {\r\n    event.stopPropagation();\r\n    const newValue = event.target.value;\r\n\r\n    this.setState(() => ({\r\n      cellEditedValue: newValue\r\n    }))\r\n\r\n    return false;\r\n  }\r\n\r\n  onDoubleClick = (event, updateOnSingleClick, onRowSelect, rowData) => {\r\n    event.stopPropagation();\r\n    const { treePath, runtime } = rowData;\r\n    TreeTraceHelper.traceNodeAction(\"doubleClick\", treePath, rowData, runtime);\r\n\r\n    if (!updateOnSingleClick) {\r\n      onRowSelect(event, rowData)\r\n    }\r\n  }\r\n\r\n  getCellData = () => {\r\n    const { rowData, column } = this.props;\r\n    const { cells } = rowData;\r\n    return cells.find(cell => cell.columnId === column.key) || {};\r\n  }\r\n\r\n  getInitialState = () => {\r\n    const cellData = this.getCellData();\r\n    return {\r\n      isRenameState: false,\r\n      cellEditedValue: cellData ? cellData.label : \"\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { rowData, idx, column } = this.props;\r\n    const { isRenameState, cellEditedValue } = this.state;\r\n    const { expanded, nodes, imagePath, depth, isLeaf, onRowExpandClick, onRowSelect, updateOnSingleClick, isTreeView, path: rowPath, runtime, treePath } = rowData;\r\n    const cellData = this.getCellData();\r\n\r\n    // JSX Conditionals\r\n    const hasSubRows = (nodes.length !== 0);\r\n\r\n    // CellData\r\n    const value = cellData.label || \"\";\r\n    const title = cellData.mouseOver || \"\";\r\n\r\n    // Styles\r\n    const rowStartStyle = {\r\n      paddingLeft: `${(depth - 1) * 16}px`\r\n    }\r\n    const rowImageStyle = {\r\n      backgroundImage: imagePath ? `url(${imagePath})` : null\r\n    }\r\n    const cellOuterStyle = {\r\n      width: column.width,\r\n      height: rowData.height,\r\n      left: column.left\r\n    }\r\n    const cellStyle = TreeUtils.buildTreeCellStyle(cellData);\r\n\r\n\r\n    // click logic\r\n    let updateOnClick;\r\n    if (isTreeView) {\r\n      updateOnClick = isLeaf;\r\n    } else {\r\n      updateOnClick = updateOnSingleClick;\r\n    }\r\n\r\n    // check if renamed\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const { currentRenameNode } = treeState;\r\n    if (currentRenameNode && currentRenameNode.cellPath === TreeUtils.buildCellPath(rowPath, column.key) && currentRenameNode.isTreeView === isTreeView) {\r\n      this.handleRenameCell();\r\n    }\r\n\r\n    return (\r\n      <div className=\"react-grid-Cell\" style={cellOuterStyle}>\r\n        <div\r\n          className=\"CbaTreeCellInner\"\r\n          onClick={event => (updateOnClick ? onRowSelect(event, rowData) : event.stopPropagation())}\r\n          onDoubleClick={event => this.onDoubleClick(event, updateOnClick, onRowSelect, rowData)}\r\n          onContextMenu={event => this.handleContextMenuClick(event, updateOnClick)}\r\n          title={title}\r\n          style={cellStyle}\r\n        >\r\n          {idx === 0 && (\r\n            <div className=\"CbaTreeCellInner-rowStart\" style={rowStartStyle}>\r\n              <div\r\n                className={`CbaTreeCellInner-expander ${expanded ? \"expanded\" : \"\"} ${hasSubRows ? \"hasSubRows\" : \"\"}`}\r\n                onClick={event => onRowExpandClick(event, rowData)}\r\n              />\r\n              <div className=\"CbaTreeCellInner-image\" style={rowImageStyle} />\r\n            </div>\r\n          )}\r\n\r\n          {!isRenameState && <div className=\"CbaTreeCellInner-value\" title={value}>{value}</div>}\r\n          {isRenameState && (\r\n            <input\r\n              ref={this.inputRef}\r\n              type=\"text\"\r\n              value={cellEditedValue}\r\n              onBlur={this.handleCellInputBlur}\r\n              onFocus={this.handleCellInputFocus}\r\n              onKeyDown={this.handleCellInputKeyDown}\r\n              onChange={this.handleCellInputChange}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTreeCell.propTypes = {\r\n  column: PropTypes.shape(PropTypesHelper.getCbaTreeColumnConfig()),\r\n  rowData: PropTypes.shape(PropTypesHelper.getCbaTreeRowConfig()).isRequired,\r\n  idx: PropTypes.number.isRequired\r\n}\r\n\r\n\r\nCbaTreeCell.defaultProps = {\r\n  column: {\r\n    label: \"default\"\r\n  }\r\n}\r\n","import React, { useRef, PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDrop, useDrag } from 'react-dnd';\r\nimport CbaTreeCell from './CbaTreeCell';\r\nimport PropTypesHelper from '../../PropTypesHelper';\r\nimport DragAndDropHelper from '../../../config/DragAndDropHelper';\r\nimport TreeUtils from '../TreeUtils';\r\nimport TreeTraceHelper from '../TreeTraceHelper';\r\n\r\nconst CbaTreeRow = (props) => {\r\n  const { row, columns, idx, height } = props;\r\n  const { nodeTypes, nodeType, treePath, runtime, isReadOnly } = row;\r\n\r\n  const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n  const { currentNode, currentlyCutNodePath } = treeState\r\n\r\n  const selectedClass = currentNode === row.path ? \"selected\" : \"\";\r\n  const cutClass = currentlyCutNodePath === row.path ? \"cut\" : \"\";\r\n  const reactGridClass = idx % 2 ? \"react-grid-Row--even\" : \"react-grid-Row--odd\";\r\n\r\n  const width = columns.map(c => c.width).reduce((accum, reducer) => accum + reducer, 0);\r\n\r\n  const rowStyle = {\r\n    height,\r\n    width\r\n  }\r\n\r\n  const nodeTypeInstance = TreeUtils.getNodeType(nodeTypes, nodeType);\r\n  const treeAction = TreeUtils.getTreeDragDropAction(treePath, runtime);\r\n\r\n  let hoverCount = 0;\r\n  let firstHover;\r\n\r\n  const rowRef = useRef(null);\r\n  const [collectedPropsDrop, drop] = useDrop({\r\n    accept: nodeTypes.map(ct => `${treePath}-${ct.name}`),\r\n    hover: () => {\r\n      hoverCount += 1;\r\n\r\n      if (hoverCount === 1) {\r\n        firstHover = new Date();\r\n      }\r\n\r\n      const deltaTime = new Date() - firstHover;\r\n\r\n      if (deltaTime > 1400 && deltaTime < 1600) {\r\n        row.onRowExpandClick(null, row, true);\r\n      }\r\n    },\r\n    drop: (item) => {\r\n      switch (treeAction) {\r\n        case \"DROP_COPY\": TreeUtils.doTreeCopyAction(treePath, item.path, row.path, runtime); break;\r\n        case \"DROP_MOVE\": TreeUtils.doTreeMoveAction(treePath, item.path, row.path, runtime); break;\r\n        case \"DROP_SWITCH\":\r\n        case \"DROP_NONE\": break;\r\n        default: console.error(\"Invalid Tree drag&dropMode\", treePath);\r\n      }\r\n\r\n      TreeTraceHelper.traceNodeAction(\"drop\", treePath, row, runtime, undefined);\r\n    },\r\n    canDrop: item => TreeUtils.canNodeTypeDrop(nodeTypeInstance, treePath, runtime, item.nodeType, isReadOnly),\r\n    collect: monitor => ({\r\n      dragIsOver: monitor.isOver(),\r\n      dragCanDrop: monitor.canDrop(),\r\n    })\r\n  });\r\n\r\n  const [, drag] = useDrag({\r\n    item: {\r\n      path: row.path,\r\n      type: `${treePath}-${nodeType}`,\r\n      nodePathId: row.nodePathId,\r\n      nodeType: row.nodeType,\r\n      runtime\r\n    },\r\n    canDrag: () => TreeUtils.canNodeTypeDrag(nodeTypeInstance, treePath, runtime, isReadOnly),\r\n    begin: () => {\r\n      TreeTraceHelper.traceNodeAction(\"drag\", treePath, row, runtime, undefined);\r\n    }\r\n  });\r\n\r\n  drag(drop(rowRef));\r\n\r\n  DragAndDropHelper.addCanDropStyleAttributes(rowStyle, collectedPropsDrop);\r\n\r\n  return (\r\n    <div\r\n      ref={rowRef}\r\n      style={rowStyle}\r\n      className={` react-grid-Row ${selectedClass} ${cutClass} ${reactGridClass}`}\r\n    >\r\n      {columns.map((column, index) => (\r\n        <CbaTreeCell key={column.key} column={column} rowData={row} idx={index} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nCbaTreeRow.propTypes = {\r\n  columns: PropTypes.arrayOf(PropTypes.shape(PropTypesHelper.getCbaTreeColumnConfig())).isRequired,\r\n  row: PropTypes.shape(PropTypesHelper.getCbaTreeRowConfig()).isRequired,\r\n  idx: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired\r\n}\r\n\r\n/**\r\n * Passthrough component required because CbaTreeRow is a functional component and the library react-data-grid uses ref's on it\r\n * Refs are only supported on Components\r\n */\r\nclass CbaTreeRowWrapper extends PureComponent {\r\n\r\n  render() {\r\n    return <CbaTreeRow {...this.props} />\r\n  }\r\n\r\n}\r\n\r\nexport default CbaTreeRowWrapper;\r\n","import React from 'react';\r\nimport Utils from '../../utils/Utils';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport PathTranslationHelper from '../../state/PathTranslationHelper';\r\nimport { CbaTreeHeader } from './DataGridRenderers';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport TreeTraceHelper from './TreeTraceHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\n/**\r\n * Helper class for CbaTree, CbaTreeView & CbaTreeChildArea:\r\n * \r\n * - contains constans\r\n * \r\n * - contains static methods\r\n *\r\n *  ____________________\r\n * | TREE   | TREE VIEW |\r\n * |________|___________|\r\n * |  TREE CHILD AREA   |\r\n * |____________________|\r\n * \r\n */\r\nexport default class TreeUtils {\r\n\r\n  static\r\n    const = {\r\n      COLUMN_HEIGHT: 34,\r\n      ROW_HEIGHT: 25,\r\n      DEFAULT_COLUMN: {\r\n        label: \"default\",\r\n        isPrimary: true,\r\n        isDefault: true\r\n      }\r\n    }\r\n\r\n  /* Static string builder functions */\r\n\r\n  static buildCellPath = (rowPath, columnPath) => `${rowPath}_${columnPath}`;\r\n\r\n  static buildColumnId = (path, index) => `${path}--${index}`;\r\n\r\n  static generateNodePathId = (node, parentNode) => `${parentNode.nodePathId}_${node.userDefinedId}-${parentNode.children + 1}`;\r\n\r\n  static generateNodePathIdChild = (node, parentNode) => `${parentNode.nodePathId}_${node.nodePathId.split(\"_\").slice(-1).pop()}`;\r\n\r\n  /** Get the name for change events issued by the given tree (specified as full index path). */\r\n  static getTreeEventChangeName = treePath => `${treePath}-TreeChangeEvent`;\r\n\r\n  static getTreePathFromColumnPath = columnPath => columnPath.split(\"--\")[0];\r\n\r\n\r\n  /* Initialisation functions */\r\n  static initTreeNodes(rootNodes, nodeTypes, path, runtime, treeSettings) {\r\n    rootNodes = Utils.deepCopy(rootNodes);\r\n\r\n    TreeUtils.resetPathsToNodes(rootNodes, path);\r\n\r\n    TreeUtils.parseNodes(rootNodes, (node) => {\r\n      const nodeType = TreeUtils.getNodeType(nodeTypes, node.nodeType);\r\n\r\n      node.cells = node.cells.map((cell, index) => {\r\n        cell.columnId = TreeUtils.buildColumnId(path, index);\r\n        /* TODO: tree translation (second step)\r\n        const translatedText = runtime.translationManager.getTranslatedText(node.userDefinedId);\r\n        if (translatedText !== null) {\r\n          cell.label = translatedText;\r\n        }\r\n        */\r\n        return cell;\r\n      });\r\n\r\n      /* TODO: tree translation (second step)\r\n      const translatedMouseOver = runtime.translationManager.getTranslatedMouseOver(node.userDefinedId);\r\n      if (translatedMouseOver !== null) {\r\n        node.tooltip = translatedMouseOver;\r\n      }\r\n      */\r\n\r\n      node.isLeaf = nodeType.childTypes.length === 0; // leaf is defined by not having the possiblity of children.\r\n      node.imagePath = CommonConfigHelper.getProperResourcePath(nodeType.image, runtime);\r\n      node.expanded = TreeUtils.isNodeExpandedAtInit(node, nodeType, treeSettings.startCollapsed);\r\n      node.children = node.nodes.length - 1; // needed to compute the userDefPath of pasted/new nodes\r\n      return true;\r\n    });\r\n\r\n    return rootNodes;\r\n  }\r\n\r\n  static initTreeColumns(columns, path, runtime) {\r\n    columns = Utils.deepCopy(columns);\r\n\r\n    if (columns.length === 0) {\r\n      columns.push(TreeUtils.const.DEFAULT_COLUMN);\r\n    }\r\n\r\n    return columns.map((column, index) => {\r\n      column.key = TreeUtils.buildColumnId(path, index);\r\n      column.name = column.label;\r\n\r\n      /* TODO: tree translation (second step)\r\n      const translatedText = runtime.translationManager.getTranslatedText(column.userDefinedId);\r\n      if (translatedText !== null) {\r\n        column.label = translatedText;\r\n      }\r\n\r\n      const translatedMouseOver = runtime.translationManager.getTranslatedMouseOver(column.userDefinedId);\r\n      if (translatedMouseOver !== null) {\r\n        column.mouseOver = translatedMouseOver;\r\n      }\r\n      */\r\n\r\n      if (column.width === 0) {\r\n        delete column.width;\r\n      }\r\n\r\n      return column;\r\n    });\r\n\r\n  }\r\n\r\n  /* TODO: tree translation (second step)\r\n  static initTreeNodeTypes(nodeTypes, runtime) {\r\n    nodeTypes = Utils.deepCopy(nodeTypes);\r\n    return nodeTypes.map((nodeType, index) => {\r\n      const translatedText = runtime.translationManager.getTranslatedText(nodeType.userDefinedId);\r\n      if (translatedText !== null) {\r\n        nodeType.name = translatedText;\r\n      }\r\n\r\n      const translatedMouseOver = runtime.translationManager.getTranslatedMouseOver(nodeType.userDefinedId);\r\n      if (translatedMouseOver !== null) {\r\n        nodeType.tooltip = translatedMouseOver;\r\n      }\r\n\r\n      return nodeType;\r\n    });\r\n  }\r\n  */\r\n\r\n  static initTreeState(columns) {\r\n    const modifiedColumns = {}\r\n    columns.forEach((column, index) => {\r\n      modifiedColumns[column.key] = {\r\n        order: index,\r\n        width: column.width\r\n      }\r\n    });\r\n\r\n    return {\r\n      modifiedColumns\r\n    }\r\n  }\r\n\r\n  /* Column operations */\r\n  static handleColumnResize(columnKey, newWidth, instance) {\r\n    const state = ComponentStateHelper.getState(instance);\r\n    const treeState = StateAttributeAccess.extractTreeState(state) || {};\r\n\r\n    treeState.modifiedColumns[columnKey].width = newWidth;\r\n\r\n    StateAttributeAccess.setTreeState(state, treeState);\r\n    ComponentStateHelper.registerState(instance, state);\r\n  }\r\n\r\n  static handleColumnMove(displayDroppedColumn, draggedColumnId) {\r\n    const { runtime, key, parentPath } = displayDroppedColumn;\r\n    const treePath = TreeUtils.getTreePathFromColumnPath(key);\r\n\r\n    const parentInstance = runtime.componentDirectory.findComponent(parentPath);\r\n    const parentPathState = ComponentStateHelper.getState(parentInstance);\r\n    const parentTreeState = StateAttributeAccess.extractTreeState(parentPathState) || {};\r\n    const { modifiedColumns } = parentTreeState;\r\n\r\n    const draggedColumn = modifiedColumns[draggedColumnId];\r\n    const droppedColumn = modifiedColumns[displayDroppedColumn.key];\r\n\r\n    // figure out direction of dragging\r\n    const isDraggedToStart = draggedColumn.order > droppedColumn.order;\r\n\r\n    Object.keys(modifiedColumns)\r\n      .map((columnKey) => {\r\n        const column = modifiedColumns[columnKey];\r\n\r\n        // drag column gets the order of the dropped column\r\n        if (columnKey === draggedColumnId) {\r\n          return {\r\n            key: columnKey,\r\n            order: droppedColumn.order\r\n          }\r\n        }\r\n\r\n        // handle drag to start case\r\n        if (isDraggedToStart && (column.order >= droppedColumn.order && column.order < draggedColumn.order)) {\r\n          return {\r\n            key: columnKey,\r\n            order: column.order + 1\r\n          }\r\n        }\r\n\r\n        // handle drag to end case\r\n        if (!isDraggedToStart && (column.order > draggedColumn.order && column.order <= droppedColumn.order)) {\r\n          return {\r\n            key: columnKey,\r\n            order: column.order - 1\r\n          }\r\n        }\r\n\r\n        return {\r\n          key: columnKey,\r\n          order: column.order\r\n        }\r\n\r\n      }).forEach((column) => {\r\n        modifiedColumns[column.key].order = column.order;\r\n      });\r\n\r\n    StateAttributeAccess.setTreeState(parentPathState, parentTreeState);\r\n    ComponentStateHelper.registerState(parentInstance, parentPathState);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static getDisplayColumns(treeColumns, sortable, modifiedColumns, parentPath, runtime) {\r\n    treeColumns = Utils.deepCopy(treeColumns);\r\n\r\n    return treeColumns.map((column) => {\r\n      column.sortable = sortable;\r\n      column.headerRenderer = <CbaTreeHeader column={column} />;\r\n      column.parentPath = parentPath;\r\n      column.runtime = runtime;\r\n\r\n      // handles losing resize on rerender\r\n      if (modifiedColumns && modifiedColumns[column.key] && modifiedColumns[column.key].width) {\r\n        column.width = modifiedColumns[column.key].width;\r\n      }\r\n      return column;\r\n    }).sort(TreeUtils.sortAscendingByParameter(\"order\", c => modifiedColumns[c.key].order));\r\n  }\r\n\r\n  static isDefaultColumn(treeColumns) {\r\n    return treeColumns.length === 1 && treeColumns[0].isDefault;\r\n  }\r\n\r\n  /**\r\n   * Calculate the array of nodes (= rows) to be displayed in the CbaTree.\r\n   * \r\n   * We start with the given root nodes and flatten their subtrees out:\r\n   *  - drop leaf nodes (i.e. isLeaf flag is set on the node) if the hideLeaves flag is set\r\n   *  - include child nodes in the flat result if the expanded flag is true for the parent node\r\n   *  - sort the resulting list of nodes by their index path\r\n   *  - for each node calculate its depth in the node hierarchy\r\n   * \r\n   * @param {*} rootNodes An array of root nodes to start with.\r\n   * @param {*} path The path of the Tree that contains the tree nodes.\r\n   * @param {*} hideLeaves Should we drop leaf nodes from the result?\r\n   * @returns \r\n   */\r\n  static getTreeDisplayNodes(rootNodes, path, hideLeaves) {\r\n    rootNodes = Utils.deepCopy(rootNodes);\r\n    const flatmap = [];\r\n    TreeUtils.parseNodes(rootNodes, (node) => {\r\n      if (!(node.isLeaf && hideLeaves)) {\r\n        flatmap.push(node);\r\n      }\r\n\r\n      return node.expanded;\r\n    });\r\n\r\n    flatmap.sort(TreeUtils.sortAscendingByIndexHierarchy(path));\r\n    flatmap.map((node) => {\r\n      node.depth = IndexPathHelper.extractTreeChildPathFromTreePath(path, node.path).split(\"/\").length - 1\r\n\r\n      return node;\r\n    });\r\n\r\n    return flatmap;\r\n  }\r\n\r\n  static getTreeViewDisplayNodes(treeNodes, treePath, filterLeaves, selectedNodePath, sort) {\r\n    const allNodes = Utils.deepCopy(treeNodes);\r\n    const isRoot = !selectedNodePath;\r\n    const selectedNode = TreeUtils.getNode(allNodes, selectedNodePath);\r\n\r\n    let shownNodes;\r\n\r\n    if (!isRoot && selectedNode) {\r\n      shownNodes = selectedNode.isLeaf ? TreeUtils.getParentNode(allNodes, selectedNode.path).nodes : selectedNode.nodes;\r\n    } else {\r\n      shownNodes = allNodes;\r\n    }\r\n\r\n    const flatmap = shownNodes.map((child) => {\r\n      child.expanded = false;\r\n      child.depth = 1;\r\n      child.nodes = [];\r\n      return child;\r\n    });\r\n\r\n    const sortCellFinderFunction = (node, param) => {\r\n      const cell = node.cells.find(c => c.columnId === sort.column);\r\n      return cell ? cell[param] : \"\";\r\n    };\r\n\r\n    switch (sort.type) {\r\n      case \"NONE\": flatmap.sort(TreeUtils.sortAscendingByIndexHierarchy(treePath)); break;\r\n      case \"ASC\": flatmap.sort(TreeUtils.sortAscendingByParameter(\"label\", sortCellFinderFunction)); break;\r\n      case \"DESC\": flatmap.sort(TreeUtils.sortDescendingByParameter(\"label\", sortCellFinderFunction)); break;\r\n      default: flatmap.sort(TreeUtils.sortAscendingByIndexHierarchy(treePath)); break;\r\n    }\r\n\r\n    const filteredFlatMap = filterLeaves ? flatmap.filter(child => child.isLeaf && filterLeaves) : flatmap;\r\n\r\n    return filteredFlatMap;\r\n  }\r\n\r\n  /* helper methods */\r\n  static resetPathsToNodes(nodes, rootPath) {\r\n    nodes.forEach((node, index) => {\r\n      node.path = IndexPathHelper.appendIndexToPageSegment(rootPath, index);\r\n\r\n      if (node.nodes.length > 0) {\r\n        TreeUtils.resetPathsToNodes(node.nodes, node.path)\r\n      }\r\n    })\r\n  }\r\n\r\n  static flattenNodes(nodes) {\r\n    const flatmap = [];\r\n    TreeUtils.parseNodes(nodes, node => flatmap.push(node));\r\n    return flatmap;\r\n  }\r\n\r\n  /**\r\n   * Apply the given callback to all given root nodes and recurse down to the\r\n   * descendants of each node as long as the callback returns true. \r\n   * \r\n   * @param {*} rootNodes The array of root nodes where we start to apply the callback. Each node must have a node attribute containing an array of child nodes.\r\n   * @param {*} callback The callback to apply to the nodes. The callback must return a boolean value.\r\n   */\r\n  static parseNodes(rootNodes, callback) {\r\n    rootNodes.forEach((node) => {\r\n\r\n      const shouldContinue = callback(node);\r\n\r\n      if (node.nodes.length > 0 && shouldContinue) {\r\n        TreeUtils.parseNodes(node.nodes, callback);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  static isNodeExpandedAtInit(node, nodeType, treeStartCollapsed) {\r\n    if (node.nodes.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    return treeStartCollapsed ? false : !nodeType.startCollapsed;\r\n\r\n  }\r\n\r\n  static getNodeType(nodeTypes, type) {\r\n    return nodeTypes.filter(nodeType => nodeType.name === type)[0];\r\n  }\r\n\r\n  static createNodeFromNodeType(nodeType, treeColumns, parentNode, runtime) {\r\n    const cells = Utils.deepCopy(nodeType.cellInitSettings);\r\n\r\n    return {\r\n      cells: cells.map((c, i) => Object.assign(c, {\r\n        columnId: treeColumns[i].key\r\n      })),\r\n      contentPage: nodeType.contentPage,\r\n      event: nodeType.event,\r\n      expanded: false,\r\n      imagePath: CommonConfigHelper.getProperResourcePath(nodeType.image, runtime),\r\n      isLeaf: nodeType.childTypes.length === 0,\r\n      link: nodeType.link,\r\n      nodePathId: TreeUtils.generateNodePathId(nodeType, parentNode),\r\n      nodeType: nodeType.name,\r\n      nodes: [],\r\n      path: null,\r\n      tooltip: nodeType.tooltip,\r\n      children: -1, // -1 so that first child has index 0;\r\n      userDefinedId: nodeType.userDefId, // figure out what to do here\r\n    }\r\n  }\r\n\r\n  static getNode(nodes, searchedNodePath) {\r\n    let foundNode;\r\n    TreeUtils.parseNodes(nodes, (node) => {\r\n      if (node.path === searchedNodePath) {\r\n        foundNode = node;\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    return foundNode\r\n  }\r\n\r\n  static getNodeName(rowData) {\r\n    if (rowData !== undefined) {\r\n      const cell = rowData.cells.find(c => c.isPrimary);\r\n\r\n      if (cell !== undefined) return cell.label;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static getParentNode(nodes, searchedNodePath) {\r\n    const parentPath = IndexPathHelper.dropIndexFromPageSegment(searchedNodePath);\r\n    const parentNode = TreeUtils.getNode(nodes, parentPath);\r\n\r\n    if (parentNode) {\r\n      return parentNode;\r\n    } else {\r\n      return {\r\n        root: true,\r\n        nodes\r\n      }\r\n    }\r\n  }\r\n\r\n  static buildTreeCellStyle(cell) {\r\n    if (!cell) return {};\r\n\r\n    const result = {\r\n      fontFamily: `${cell.font.name}, Geneva, sans-serif`,\r\n      fontSize: cell.font.size,\r\n      fontWeight: cell.font.bold ? 'bold' : 'normal',\r\n      fontStyle: cell.font.italic ? 'italic' : 'normal',\r\n      textDecoration: cell.font.underlined ? 'underline' : 'none',\r\n      textAlign: cell.font.alignmentHorizontal,\r\n    }\r\n\r\n    CommonConfigHelper.setStyleAttribute(result, \"color\", CommonConfigHelper.chooseImageOrColorVariant(cell.color.text, false, false, false));\r\n\r\n    return result;\r\n  }\r\n\r\n  /* User actions */\r\n  static selectNodeAction(treePath, rowData) {\r\n    const { runtime, path, contentPage } = rowData;\r\n\r\n    const { treeState, treeNodes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const currentNode = TreeUtils.getNode(treeNodes, path);\r\n\r\n    treeState.currentNode = path;\r\n    treeState.currentPage = contentPage;\r\n    currentNode.visited = true;\r\n\r\n    TreeTraceHelper.traceNodeAction(\"selection\", treePath, rowData, runtime);\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, treeNodes, treeState, null, null);\r\n\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static emitTreeEvent(eventEmitter, treePath, replayStepMonitor) {\r\n    replayStepMonitor.incrementReplayStep();\r\n    eventEmitter.emit(TreeUtils.getTreeEventChangeName(treePath));\r\n  }\r\n\r\n  static sortAscendingByParameter = (param, compareLocator) => (node1, node2) => {\r\n    const comparator1 = compareLocator ? compareLocator(node1, param) : node1[param];\r\n    const comparator2 = compareLocator ? compareLocator(node2, param) : node2[param];\r\n\r\n    let comparison = 0;\r\n    if (comparator1 > comparator2) {\r\n      comparison = 1;\r\n    } else if (comparator1 < comparator2) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  }\r\n\r\n  static sortDescendingByParameter = (param, compareLocator) => (node1, node2) => {\r\n    const comparator1 = compareLocator ? compareLocator(node1, param) : node1[param];\r\n    const comparator2 = compareLocator ? compareLocator(node2, param) : node2[param];\r\n\r\n    let comparison = 0;\r\n    if (comparator1 < comparator2) {\r\n      comparison = 1;\r\n    } else if (comparator1 > comparator2) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  }\r\n\r\n  static sortAscendingByIndexHierarchy = treePath => (node1, node2) => {\r\n    const path1 = IndexPathHelper.extractTreeChildPathFromTreePath(treePath, node1.path);\r\n    const path2 = IndexPathHelper.extractTreeChildPathFromTreePath(treePath, node2.path);\r\n\r\n    const indexArray1 = path1.split('/index=');\r\n    const indexArray2 = path2.split('/index=');\r\n    const commonDepth = Math.min(indexArray1.length, indexArray2.length);\r\n\r\n    for (let checkedDepth = 0; checkedDepth < commonDepth; checkedDepth += 1) {\r\n      const number1 = parseInt(indexArray1[checkedDepth], 10);\r\n      const number2 = parseInt(indexArray2[checkedDepth], 10);\r\n      if (number1 > number2) {\r\n        return 1;\r\n      }\r\n      if (number1 < number2) {\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    if (indexArray1.length > indexArray2.length) {\r\n      return 1;\r\n    }\r\n    if (indexArray1.length < indexArray2.length) {\r\n      return -1;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  static collapseNode = (node) => {\r\n    node.expanded = false;\r\n\r\n    if (!node.isLeaf && node.nodes.length) {\r\n      TreeUtils.parseNodes(node.nodes, (innerNode) => {\r\n        innerNode.expanded = false;\r\n        return true;\r\n      })\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /* Drag&Drop Actions */\r\n  static getTreeDragDropAction = (treePath, runtime) => {\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n    if (treeInstance) {\r\n      return treeInstance.props.config[\"drag&dropMode\"];\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  static canNodeTypeDrag = (nodeType, treePath, runtime, isReadOnly) => {\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n    const canTreeDoIt = treeInstance.props.config.dragSource;\r\n    const canNodeTypeDoIt = nodeType.dragSource;\r\n\r\n    return !isReadOnly && canTreeDoIt && canNodeTypeDoIt\r\n  }\r\n\r\n  static canNodeTypeDrop = (nodeType, treePath, runtime, type, isReadOnly) => {\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n    const canTreeDoIt = treeInstance.props.config.dropTarget;\r\n    const canNodeTypeDoIt = nodeType.dropTarget;\r\n\r\n    return !isReadOnly && canTreeDoIt && canNodeTypeDoIt && nodeType.childTypes.includes(type);\r\n  }\r\n\r\n  /* Methods used by tree child components (CbaTreeView or CbaTreeChildArea) */\r\n\r\n  /**\r\n   * Get the component instance of the tree that is associated with the tree child component instance (CbaTreeView or CbaTreeChildArea).\r\n   * \r\n   * Both components must be part of the same page. \r\n   * \r\n   * @param {*} props The properties of the tree child component instance. \r\n   * @returns {*} The associated tree component instance. \r\n   */\r\n  static getTreeInstanceFromChildComponent = (props) => {\r\n    const { runtime, config, path } = props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n\r\n    return treeInstance;\r\n  }\r\n\r\n  /**\r\n   * Get the full index path of the tree component using the given tree path (page segment as in the page configuration) and\r\n   * the full path of the component (CbaTreeView or CbaTreeChildArea) associated with the tree. \r\n   * \r\n   * The associated component must be part of the same page as the tree component. \r\n   * \r\n   * @param {string} treePathId Page segment of tree (according to page configuration).\r\n   * @param {string} path Full path of the component associated with the tree (must reside in the same page as the tree).\r\n   * @returns {string} Full path of the tree. \r\n   */\r\n  static getTreePathFromChildComponent = (treePathId, path) => IndexPathHelper.dropPageSegmentFromPath(path) + treePathId;\r\n\r\n  /* Methods handling userDefIdPath operations */\r\n\r\n  static getTreeFromUserDefIdPath = (userDefPath, runtime) => runtime.componentDirectory.findComponent(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime));\r\n\r\n  static getTreeFlatNodesFromUserDefIdPath = (userDefPath, runtime) => {\r\n    const path = PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime);\r\n    const treeData = TreeUtils.getTreeDataByPath(path, runtime);\r\n    return TreeUtils.flattenNodes(treeData.treeNodes);\r\n  }\r\n\r\n  /* Methods handling Getting/Setting TreeState */\r\n\r\n  static getTreeDataByPath = (path, runtime) => {\r\n    const treeNodes = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeNodes, path, runtime) || [];\r\n    const treeState = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeState, path, runtime) || {};\r\n    const treeColumns = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeColumns, path, runtime) || [];\r\n    const nodeTypes = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractNodeTypes, path, runtime) || [];\r\n    const treeReadOnly = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeReadOnly, path, runtime) || false;\r\n\r\n    return {\r\n      treeNodes,\r\n      treeState,\r\n      treeColumns,\r\n      nodeTypes,\r\n      treeReadOnly\r\n    }\r\n  }\r\n\r\n  static setTreeDataByPath = (path, runtime, treeNodes, treeState, treeColumns, nodeTypes) => {  \r\n    if (treeNodes) {\r\n      const { extractTreeNodes: getter, setTreeNodes: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, treeNodes, path, runtime, false);\r\n    }\r\n\r\n    if (treeState) {\r\n      const { extractTreeState: getter, setTreeState: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, treeState, path, runtime, false);\r\n    }\r\n\r\n    if (treeColumns) {\r\n      const { extractTreeColumns: getter, setTreeColumns: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, treeColumns, path, runtime, false);\r\n    }\r\n\r\n    if (nodeTypes) {\r\n      const { extractNodeTypes: getter, setNodeTypes: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, nodeTypes, path, runtime, false);\r\n    }\r\n  }\r\n\r\n  /* Methods used by State Machine */\r\n\r\n  static getVisitedPathIds(userDefPath, runtime) {\r\n    const nodes = TreeUtils.getTreeFlatNodesFromUserDefIdPath(userDefPath, runtime);\r\n\r\n    return nodes.filter(node => node.visited).map(node => node.nodePathId);\r\n  }\r\n\r\n  static getNodePathIds(userDefPath, runtime) {\r\n    const nodes = TreeUtils.getTreeFlatNodesFromUserDefIdPath(userDefPath, runtime);\r\n\r\n    return nodes.map(node => node.nodePathId);\r\n  }\r\n\r\n  static getCurrentNodePathId(userDefPath, runtime) {\r\n    const path = PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime);\r\n    const { treeState, treeNodes } = TreeUtils.getTreeDataByPath(path, runtime);\r\n    const nodes = TreeUtils.flattenNodes(treeNodes);\r\n    const currentNodePath = treeState.currentNode;\r\n\r\n    const currentNode = nodes.find(node => node.path === currentNodePath);\r\n\r\n    return currentNode ? currentNode.nodePathId : null;\r\n  }\r\n\r\n  static getColumnValuesMap(userDefPath, nodePathIds, runtime) {\r\n    const nodes = TreeUtils.getTreeFlatNodesFromUserDefIdPath(userDefPath, runtime);\r\n    const map = new Map();\r\n\r\n    nodePathIds.forEach((nodePath) => {\r\n      const node = nodes.find(n => n.nodePathId === nodePath);\r\n      const columnValues = node.cells.map(cell => cell.label);\r\n      map.set(nodePath, columnValues);\r\n    });\r\n\r\n    return map;\r\n  }\r\n\r\n  static treeMoveCurrentNode(userDefPath, targetNode, runtime) {\r\n    TreeUtils.treeActionCurrentNode(userDefPath, targetNode, runtime, TreeUtils.doTreeMoveAction);\r\n  }\r\n\r\n  static treeCopyCurrentNode(userDefPath, targetNode, runtime) {\r\n    TreeUtils.treeActionCurrentNode(userDefPath, targetNode, runtime, TreeUtils.doTreeCopyAction);\r\n  }\r\n\r\n  static treeActionCurrentNode(userDefPath, targetNode, runtime, action) {\r\n    const treePath = PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime);\r\n    const { treeState, treeNodes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const currentNodePath = treeState.currentNode;\r\n    const flatNodes = TreeUtils.flattenNodes(treeNodes);\r\n    const targetNodeInstance = flatNodes.find(node => node.nodePathId === targetNode);\r\n\r\n    if (targetNodeInstance && !targetNodeInstance.isLeaf && treeState.currentNode) {\r\n      action(treePath, currentNodePath, targetNodeInstance.path, runtime)\r\n    }\r\n  }\r\n\r\n  /*\r\n    Methods used by Drag&Drop\r\n  */\r\n  static doTreeMoveAction(treePath, fromPath, toPath, runtime) {\r\n    if (toPath.includes(fromPath)) {\r\n      console.error(\"Could not move tree node from parent to child\", fromPath, toPath);\r\n      return;\r\n    }\r\n\r\n    TreeUtils.doTreeCut(treePath, fromPath, runtime);\r\n    TreeUtils.doTreePaste(treePath, toPath, runtime);\r\n  }\r\n\r\n  static doTreeCopyAction(treePath, fromPath, toPath, runtime) {\r\n    TreeUtils.doTreeCopy(treePath, fromPath, runtime);\r\n    TreeUtils.doTreePaste(treePath, toPath, runtime);\r\n  }\r\n\r\n  /* Context menu operations */\r\n  static doTreeCopy(treePath, nodePath, runtime, shouldNotClearCut) {\r\n    // get tree state\r\n    const { treeNodes: nodes, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    // copy logic\r\n    const node = TreeUtils.getNode(nodes, nodePath);\r\n    if (!shouldNotClearCut) {\r\n      treeState.currentlyCutNodePath = null;\r\n    }\r\n\r\n    treeState.copiedNode = Utils.deepCopy(node);\r\n    treeState.copiedNode = TreeUtils.collapseNode(treeState.copiedNode);\r\n    // treeState.copiedNode.path = null;\r\n\r\n    // set tree state\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, null, treeState, null);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static doTreeCut = (treePath, nodePath, runtime) => {\r\n    // get tree state\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    // cut logic\r\n    treeState.currentlyCutNodePath = nodePath;\r\n\r\n    // set tree state\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, null, treeState, null);\r\n\r\n    // this also emits event\r\n    TreeUtils.doTreeCopy(treePath, nodePath, runtime, true);\r\n  }\r\n\r\n  static doTreePaste(treePath, nodePath, runtime) {\r\n    // get tree state\r\n    let { treeNodes: nodes, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    // paste logic\r\n    let node = TreeUtils.getNode(nodes, nodePath);\r\n\r\n    const { copiedNode, currentlyCutNodePath } = treeState;\r\n\r\n    if (!copiedNode) {\r\n      console.error(\"Tree context menu error, no node to paste\");\r\n      return;\r\n    }\r\n\r\n    // delete node if cut node exists\r\n    if (currentlyCutNodePath) {\r\n      TreeUtils.doTreeDelete(treePath, currentlyCutNodePath, runtime, true);\r\n      // update function variables to new state after delete\r\n      ({ treeNodes: nodes, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime));\r\n      node = TreeUtils.getNode(nodes, nodePath);\r\n\r\n      // clear copied node and cut node\r\n      treeState.currentlyCutNodePath = null;\r\n      treeState.copiedNode = null;\r\n    }\r\n\r\n    // update nodePathId for copied node and children\r\n    copiedNode.nodePathId = TreeUtils.generateNodePathId(copiedNode, node);\r\n    TreeUtils.parseNodes(copiedNode.nodes, (copiedNodeChild) => {\r\n      let copiedNodeParent = TreeUtils.getParentNode(copiedNode.nodes, copiedNodeChild.path);\r\n      if (copiedNodeParent.root) {\r\n        copiedNodeParent = copiedNode;\r\n      }\r\n      copiedNodeChild.nodePathId = TreeUtils.generateNodePathIdChild(copiedNodeChild, copiedNodeParent);\r\n      return true;\r\n    });\r\n\r\n    // add node\r\n    node.nodes.push(copiedNode);\r\n\r\n    // update children number\r\n    node.children += 1;\r\n\r\n    // reset paths\r\n    TreeUtils.resetPathsToNodes(nodes, treePath);\r\n\r\n    // update tree state\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, treeState, null);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static doTreeDelete(treePath, nodePath, runtime, isPasted) {\r\n    // get tree state\r\n    const treeData = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    let { treeNodes: nodes } = treeData;\r\n    const { treeState, nodeTypes } = treeData;\r\n\r\n    // delete logic \r\n    const parentNode = TreeUtils.getParentNode(nodes, nodePath);\r\n    const deletedNode = TreeUtils.getNode(nodes, nodePath);\r\n    const deleteEventNodeType = TreeUtils.getNodeType(nodeTypes, deletedNode.nodeType);\r\n\r\n    // Don't delete for raised event\r\n    if (!isPasted && deleteEventNodeType.deleteEvent) {\r\n      CommonActionsHelper.sendEvent(deleteEventNodeType.deleteEvent, runtime);\r\n      return;\r\n    }\r\n\r\n    // clear selection in deleted nodes\r\n    TreeUtils.parseNodes(nodes, (currentParsedNode) => {\r\n      let deletedNodes = [];\r\n      if (currentParsedNode.path === nodePath) {\r\n        deletedNodes = TreeUtils.flattenNodes(currentParsedNode.nodes);\r\n        deletedNodes.push(currentParsedNode);\r\n\r\n        const selectedNodeInDeletedNodes = !!deletedNodes.find(node => treeState.currentNode === node.path);\r\n        const cutNodeInDeleteNodes = !!deletedNodes.find(node => treeState.currentlyCutNodePath === node.path);\r\n\r\n        if (selectedNodeInDeletedNodes) treeState.currentNode = null;\r\n        if (cutNodeInDeleteNodes) {\r\n          treeState.currentlyCutNodePath = null;\r\n          treeState.copiedNode = null\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    // filter out node\r\n    if (parentNode.root) {\r\n      nodes = nodes.filter(node => node.path !== nodePath);\r\n    } else {\r\n      parentNode.nodes = parentNode.nodes.filter(node => node.path !== nodePath);\r\n    }\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, treeState);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static startRenameOperation(rowData, columnKey) {\r\n    const { treePath, path: nodePath, runtime, isTreeView } = rowData;\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    treeState.currentRenameNode = {\r\n      isTreeView,\r\n      cellPath: TreeUtils.buildCellPath(nodePath, columnKey)\r\n    }\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, null, treeState, null, null)\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static doTreeRename(rowData, columnKey, newValue) {\r\n    const { treePath, path: nodePath, runtime } = rowData;\r\n    const { treeNodes: nodes, treeColumns: columns } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    const node = TreeUtils.getNode(nodes, nodePath);\r\n    const cell = node.cells.find(c => c.columnId === columnKey);\r\n    const column = columns.find(c => c.key === columnKey);\r\n    const oldValue = cell.label;\r\n\r\n    cell.label = newValue;\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, null, null, null);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n    TreeTraceHelper.traceNodeAction(\"rename\", treePath, rowData, runtime, oldValue, newValue, column.name);\r\n  }\r\n\r\n  static doTreeNew(treePath, nodePath, runtime, newTreeType, isTreeView, treeViewPath) {\r\n    const { treeNodes: nodes, treeColumns, nodeTypes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const node = TreeUtils.getNode(nodes, nodePath); // need this to compute pathid of new node\r\n\r\n    const newNodeType = TreeUtils.getNodeType(nodeTypes, newTreeType);\r\n    const newNode = TreeUtils.createNodeFromNodeType(newNodeType, treeColumns, node, runtime);\r\n\r\n    node.expanded = true;\r\n    node.nodes.push(newNode);\r\n    node.children += 1;\r\n    TreeUtils.resetPathsToNodes(nodes, treePath)\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, null, null, null);\r\n\r\n    const primaryColumn = newNode.cells.find(c => c.isPrimary).columnId;\r\n    const mockRowData = Object.assign({\r\n      runtime,\r\n      treePath,\r\n      isTreeView,\r\n      treeViewPath\r\n    }, newNode);\r\n\r\n    TreeUtils.selectNodeAction(treePath, mockRowData);\r\n    TreeUtils.startRenameOperation(mockRowData, primaryColumn);\r\n  }\r\n\r\n}\r\n","\nexport const FORMATS = {\n  DE: {\n    decimal: \",\", grouping: \".\"\n  },\n  EN: {\n    decimal: \".\", grouping: \",\"\n  }\n}\n\n/**\n  * Translate a value given as number (or as string with dot as decimal separator)\n  * to a string with decimal and thousand separators as specified by our format members.\n  */\nexport function formatValue(number, withThousandSeparator, addTrailingDecimalSeparator, format) {\n  if (number === null || number === undefined) return number;\n\n  const parts = number.toString().split('.');\n  if (withThousandSeparator) {\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, format.grouping);\n  }\n  return `${parts.join(format.decimal)}${addTrailingDecimalSeparator ? format.decimal : ''}`;\n}\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport TreeUtils from './TreeUtils';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport PageAreaRenderer from '../PageAreaRenderer';\r\nimport Utils from '../../utils/Utils';\r\n\r\n\r\nexport default class CbaTreeChildArea extends PureComponent {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { runtime } = this.props;\r\n    this.scrollableAreaRef = React.createRef();\r\n    this.eventEmitter = runtime.eventEmitter;\r\n\r\n    this.onClickHandler = this.onClickHandler.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n    // Make our tree change handler listen to change events issued by our tree:\r\n    const { path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    this.subscription = this.eventEmitter.addListener(TreeUtils.getTreeEventChangeName(treePath), this.handleTreeChange);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n\r\n    // Remove our tree change event subscription:\r\n    this.subscription.remove();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onClickHandler(event) {\r\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  /**\r\n   * Callback handling changes in our associated tree.\r\n   */\r\n  handleTreeChange = () => {\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * Get the name of the currently embedded (i.e. displayed) page. \r\n   * \r\n   * The embedded page follows the selected node in the associated tree. \r\n   * We return 'undefined' if the currently selected node does not have a page assigned. \r\n   * \r\n   */\r\n  static getEmbeddedPageName(path, config, runtime) {\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    return treeState.currentPage || undefined;\r\n  }\r\n\r\n  scroll(x, y) {\r\n    const scrollElement = this.scrollableAreaRef.current;\r\n    if (!scrollElement) return;\r\n    Utils.doScrollOnHTMLElement(x, y, scrollElement, scrollElement);\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const currentPage = CbaTreeChildArea.getEmbeddedPageName(path, config, runtime);\r\n    const emptyStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    // TODO: CKI: factor that out in a common helper method shared with CbaPageArea\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const positionOnlyState = {};\r\n    StateAttributeAccess.setPosition(positionOnlyState, StateAttributeAccess.extractPosition(pathState));\r\n    const title = CommonConfigHelper.buildTitle(config, pathState);\r\n\r\n    if (currentPage === undefined) {\r\n      return (\r\n        <div\r\n          style={emptyStyle}\r\n          data-cba-id={config.pageEditId}\r\n          onClick={event => CommonActionsHelper.doStandardOnClick(event, undefined, this)}\r\n          title={CommonConfigHelper.buildTitle(config, pathState)}\r\n          className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <PageAreaRenderer\r\n          onClick={this.onClickHandler}\r\n          onContextMenu={this.onContextMenuHandler}\r\n          orientation={orientation}\r\n          embeddedPageName={currentPage}\r\n          hasTabs={false}\r\n          tabsBar={<span />}\r\n          path={path}\r\n          position={positionOnlyState}\r\n          title={title}\r\n          config={config}\r\n          scrollableAreaRef={this.scrollableAreaRef}\r\n          runtime={runtime}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\nCbaTreeChildArea.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        treePathId: PropTypes.string.isRequired,\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","\r\nimport React, { useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './media.css'\r\n\r\nconst MediaPreview = ({ type, stream, style, pauseRecording, resumeRecording, shouldPause }) => {\r\n  const mediaRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (mediaRef.current && stream) {\r\n      mediaRef.current.srcObject = stream;\r\n    }\r\n    if (mediaRef.current !== null && mediaRef.current !== undefined\r\n      && shouldPause) {\r\n      mediaRef.current.pause();\r\n    }\r\n  }, [stream, shouldPause]);\r\n  if (!stream) {\r\n    return null;\r\n  }\r\n  let media;\r\n  if (type === \"video\") {\r\n    media = (\r\n      <video\r\n        ref={mediaRef}\r\n        style={style}\r\n        onPause={pauseRecording}\r\n        onPlay={resumeRecording}\r\n        autoPlay\r\n        controls\r\n      />\r\n    )\r\n  } else {\r\n    media = (\r\n      <div style={style}>\r\n        <audio\r\n          ref={mediaRef}\r\n          onPause={pauseRecording}\r\n          onPlay={resumeRecording}\r\n          autoPlay\r\n          controls\r\n          className=\"audio\"\r\n        />\r\n        {!shouldPause && <span className=\"recording\" />}\r\n      </div>\r\n    )\r\n  }\r\n  return media;\r\n};\r\n\r\nMediaPreview.propTypes = {\r\n  stream: PropTypes.object,\r\n  style: PropTypes.object.isRequired,\r\n  pauseRecording: PropTypes.func.isRequired,\r\n  resumeRecording: PropTypes.func.isRequired\r\n}\r\n\r\nMediaPreview.defaultProps = {\r\n  stream: null\r\n}\r\n\r\nexport default MediaPreview;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport debounce from 'lodash.debounce';\r\nimport { ReactMediaRecorder } from 'react-media-recorder';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CbaInterpreter from '../CbaInterpreter';\r\nimport MediaPreview from './MediaPreview';\r\nimport PathTranslationHelper from '../../state/PathTranslationHelper';\r\n\r\nexport const OPERATION_PLAY = 'play';\r\nexport const OPERATION_PAUSE = 'pause';\r\nexport const OPERATION_STOP = 'stop';\r\nexport const OPERATION_ENDED = 'ended';\r\n\r\nexport default class CbaMedia extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.mediaRef = React.createRef();\r\n    this.isStatemachineTriggered = false;\r\n    this.startRecordingTime = undefined;\r\n    this.shouldPlayOnResume = false;\r\n    this.shouldSendStartRecordingEvent = true;\r\n    this.isPauseHandled = false;\r\n    this.isTaskPlayerPausePlay = false;\r\n\r\n    this.startRecordingDelayed = false;\r\n    this.recordingStarted = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { runtime, config, path } = this.props;\r\n    if (config.src !== undefined && config.src.dynamic !== undefined) {\r\n      runtime.variableManager.addVariableChangeObserver(path, config.src.dynamic.variable);\r\n    }\r\n\r\n    this.setVolumeFromState();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    const { runtime, config, path } = this.props;\r\n    if (config.src !== undefined && config.src.dynamic !== undefined) {\r\n      runtime.variableManager.dropVariableChangeObserver(path, config.src.dynamic.variable);\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.setVolumeFromState();\r\n    if (this.resumeRecording && this.startRecordingDelayed) {\r\n      this.resumeRecording();\r\n      this.startRecordingDelayed = false;\r\n    }\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n  }\r\n\r\n  onClickCapture = (event) => {\r\n    // TODO: check if this is really needed otherwise remove it as it block access to text flash children\r\n    // CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  onPlayHandler = (event) => {\r\n    const { config, runtime } = this.props;\r\n\r\n    // skip play trace event, save operation and FSM event when play is triggered by TaskPlayer resume command\r\n    if (this.isTaskPlayerPausePlay) {\r\n      this.isTaskPlayerPausePlay = false;\r\n      return;\r\n    }\r\n\r\n    this.saveInStateLastOperation(OPERATION_PLAY);\r\n    this.traceMedia(OPERATION_PLAY, this.isStatemachineTriggered, event);\r\n    CommonActionsHelper.sendEvent(config.startEvent, runtime);\r\n    this.isStatemachineTriggered = false;\r\n  }\r\n\r\n  onPauseHandler = (event) => {\r\n    const { config, runtime } = this.props;\r\n    const player = this.getMediaPlayer();\r\n\r\n    // skip pause tracing events, save operation and FSM event when: a) ended is reached and b) is handled by stop;\r\n    // a) When the player reaches the end: currentTime == duration -> browser calls onPauseHandler and the onEndHandler. We want only the end handler to happen.\r\n    // b) FSM stop implementation will send pause to player but wants to skip onPauseHandler and call onStopHandler instead.\r\n    // c) When the player enters a pause triggered by pause task\r\n    if (player.duration === player.currentTime || this.isPauseHandled || this.isTaskPlayerPausePlay) {\r\n      this.isPauseHandled = false;\r\n      this.isTaskPlayerPausePlay = false;\r\n      return;\r\n    }\r\n\r\n    this.saveInStateLastOperation(OPERATION_PAUSE);\r\n    this.traceMedia(OPERATION_PAUSE, this.isStatemachineTriggered, event);\r\n    CommonActionsHelper.sendEvent(config.pauseEvent, runtime);\r\n    this.isStatemachineTriggered = false;\r\n  }\r\n\r\n  onStopHandler = () => {\r\n    const { config, runtime } = this.props;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const lastOperation = StateAttributeAccess.extractLastOperation(state);\r\n\r\n    if (lastOperation !== OPERATION_STOP) {\r\n      this.saveInStateLastOperation(OPERATION_STOP);\r\n      this.traceMedia(OPERATION_STOP, this.isStatemachineTriggered, undefined);\r\n      CommonActionsHelper.sendEvent(config.stopEvent, runtime);\r\n    }\r\n    this.isStatemachineTriggered = false;\r\n  }\r\n\r\n\r\n  onEndedHandler = (event) => {\r\n    const { config, runtime } = this.props;\r\n    this.saveInStateLastOperation(OPERATION_ENDED);\r\n    this.increasePlayNumberAndCheckMaxPlay();\r\n    this.traceMedia(OPERATION_ENDED, false, event);\r\n    CommonActionsHelper.sendEvent(config.endEvent, runtime);\r\n  }\r\n\r\n  handleTaskPauseOrResume = (enterPause) => {\r\n    const player = this.getMediaPlayer();\r\n\r\n    if (!player) return null;\r\n\r\n    const lastOperation = StateAttributeAccess.extractLastOperation(ComponentStateHelper.getState(this));\r\n\r\n    if (enterPause && lastOperation === OPERATION_PLAY) {\r\n      this.shouldPlayOnResume = true;\r\n      this.isTaskPlayerPausePlay = true;\r\n      player.pause();\r\n    }\r\n\r\n    if (!enterPause && this.shouldPlayOnResume) {\r\n      player.play();\r\n      this.shouldPlayOnResume = false;\r\n      this.isTaskPlayerPausePlay = true;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  onVolumeChange = () => {\r\n    const state = ComponentStateHelper.getState(this);\r\n    const player = this.getMediaPlayer();\r\n\r\n    // the mediaRef volume value is between [0,1] and the state media volume stores values between [0,10]\r\n    StateAttributeAccess.setMediaVolume(state, parseInt(player.volume * 10, 10));\r\n    ComponentStateHelper.registerState(this, state);\r\n  }\r\n\r\n  onTimeUpdate = () => {\r\n    const { runtime } = this.props;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const player = this.getMediaPlayer();\r\n    const newTime = parseInt(player.currentTime, 10);\r\n    const oldTime = StateAttributeAccess.extractCurrentTime(state);\r\n    if (oldTime !== newTime) {\r\n      StateAttributeAccess.setCurrentTime(state, newTime);\r\n      runtime.eventEmitter.emit(\"currentTimeUpdate\", newTime);\r\n    }\r\n    ComponentStateHelper.registerState(this, state);\r\n  }\r\n\r\n\r\n  play(isStatemachineTriggered = false) {\r\n    const { config } = this.props;\r\n    const { recording } = config;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const maxRecord = StateAttributeAccess.extractMaxRecord(state);\r\n    const recordNumber = StateAttributeAccess.extractRecordNumber(state);\r\n\r\n    if (recording) {\r\n      // when maxRecord is reached we should stop here\r\n      if (maxRecord > 0 && recordNumber === maxRecord) {\r\n        console.info(\"The max record number was reached!\");\r\n        return;\r\n      }\r\n      this.isRecording = true;\r\n      this.startRecordingTime = moment().format();\r\n\r\n      if (this.resumeRecording) {\r\n        this.resumeRecording();\r\n      } else {\r\n        this.startRecordingDelayed = true;\r\n      }\r\n\r\n      StateAttributeAccess.setRecordNumber(state, recordNumber + 1);\r\n      ComponentStateHelper.registerState(this, state);\r\n      RenderingHelper.triggerRendering(this);\r\n    } else {\r\n      const player = this.getMediaPlayer();\r\n      if (!player) return;\r\n      this.isStatemachineTriggered = isStatemachineTriggered;\r\n      player.play();\r\n    }\r\n  }\r\n\r\n  stop(isStatemachineTriggered = false) {\r\n    if (this.stopRecording) {\r\n      this.stopRecording();\r\n    } else {\r\n      const player = this.getMediaPlayer();\r\n      if (!player) return;\r\n\r\n      this.isStatemachineTriggered = isStatemachineTriggered;\r\n      this.isPauseHandled = true;\r\n\r\n      player.pause();\r\n      player.currentTime = 0;\r\n      this.onStopHandler();\r\n    }\r\n  }\r\n\r\n  pause(isStatemachineTriggered = false) {\r\n    if (this.pauseRecording) {\r\n      this.pauseRecording();\r\n      RenderingHelper.triggerRendering(this)\r\n    } else {\r\n      const player = this.getMediaPlayer();\r\n      if (!player) return;\r\n      this.isStatemachineTriggered = isStatemachineTriggered;\r\n\r\n      player.pause();\r\n    }\r\n  }\r\n\r\n  saveInStateLastOperation(operation) {\r\n    const state = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setLastOperation(state, operation);\r\n    ComponentStateHelper.registerState(this, state);\r\n  }\r\n\r\n  setVolumeFromState() {\r\n    const state = ComponentStateHelper.getState(this);\r\n\r\n    const volume = StateAttributeAccess.extractMediaVolume(state);\r\n    const newVolume = volume !== undefined ? CbaMedia.convertToMediaRefVolume(volume) : undefined;\r\n\r\n    // mediaRef might refer to a simple div if there is nothing to play currently:\r\n    if (newVolume !== undefined && this.mediaRef.current !== null) {\r\n      this.mediaRef.current.volume = newVolume;\r\n    }\r\n  }\r\n\r\n  increasePlayNumberAndCheckMaxPlay() {\r\n    const state = ComponentStateHelper.getState(this);\r\n    const maxPlay = StateAttributeAccess.extractMaxPlay(state);\r\n    const playNo = StateAttributeAccess.extractPlayNumber(state);\r\n    const currentPlayNumber = playNo + 1;\r\n    StateAttributeAccess.setPlayNumber(state, currentPlayNumber);\r\n    ComponentStateHelper.registerState(this, state);\r\n\r\n    // when current play number equals maxPlay we need to disable media controls\r\n    if (currentPlayNumber === maxPlay) {\r\n      StateAttributeAccess.setHideControls(state, true);\r\n      ComponentStateHelper.registerState(this, state);\r\n      RenderingHelper.triggerRendering(this);\r\n    }\r\n  }\r\n\r\n  traceMedia(operation, isStatemachineTriggered, event) {\r\n    const { config, path, runtime } = this.props;\r\n    const { trace } = config;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const automaticStart = StateAttributeAccess.extractAutomaticStart(state);\r\n    const maxPlay = StateAttributeAccess.extractMaxPlay(state);\r\n    const hideControls = StateAttributeAccess.extractHideControls(state);\r\n    const modifiedTraceConfig = StateManagerHelper.deepCopy(config.trace);\r\n\r\n    if (trace.type !== undefined && trace.type !== 'ValueDisplay') {\r\n      modifiedTraceConfig.type = `${trace.type}Control`;\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteractionPerTraceConfig(\r\n      modifiedTraceConfig,\r\n      path,\r\n      trace.type === 'ValueDisplay' ? {} : {\r\n        operation,\r\n        maxPlay,\r\n        currentPlayNo: StateAttributeAccess.extractPlayNumber(state),\r\n        automaticStart,\r\n        hideControls,\r\n        volumeLevel: CbaMedia.computeVolumeInPercentage(StateAttributeAccess.extractMediaVolume(state)),\r\n        isStatemachineTriggered\r\n      },\r\n      trace.type === 'ValueDisplay' ? event : undefined,\r\n      runtime\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns player instance if available, else returns null\r\n   */\r\n  getMediaPlayer = () => {\r\n    const player = this.mediaRef.current;\r\n    if (player === null || player === undefined) {\r\n      console.info(\"The player is not there (anymore); probably max play number was reached or there is nothing to play.\");\r\n      return null;\r\n    }\r\n\r\n    return player;\r\n  }\r\n\r\n\r\n  // ------------ media recorder methods ----------------\r\n\r\n  /**\r\n   * Creates a media recorder component and exposes callbacks to the current instance\r\n   * @param {*} type The media component type\r\n   * @param {*} mediaStyle The component style\r\n   * @param {*} config the component config (needed for the start/pause/stop event names)\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  createMediaRecorder(type, mediaStyle, config, runtime) {\r\n    return (\r\n      <ReactMediaRecorder\r\n        audio\r\n        video={type === \"video\"}\r\n        onStop={this.endRecording}\r\n        render={({ status, startRecording, stopRecording, pauseRecording, resumeRecording, mediaBlobUrl, previewStream }) => {\r\n          this.stopRecording = () => {\r\n            CommonActionsHelper.sendEvent(config.stopRecordingEvent, runtime);\r\n            stopRecording();\r\n            this.shouldSendStartRecordingEvent = true;\r\n          }\r\n\r\n          this.pauseRecording = () => {\r\n            CommonActionsHelper.sendEvent(config.pauseRecordingEvent, runtime);\r\n            pauseRecording();\r\n            this.shouldPause = true;\r\n            this.shouldSendStartRecordingEvent = true;\r\n          }\r\n\r\n          this.resumeRecording = () => {\r\n            if (this.shouldSendStartRecordingEvent) {\r\n              CommonActionsHelper.sendEvent(config.startRecordingEvent, runtime);\r\n              this.shouldSendStartRecordingEvent = false;\r\n            }\r\n            resumeRecording();\r\n            this.shouldPause = false;\r\n            if (type === \"audio\") {\r\n              // we need to rerender the preview in order to have recording resume feedback\r\n              RenderingHelper.triggerRendering(this)\r\n            }\r\n          }\r\n\r\n          this.startRecording = () => {\r\n            if (status === \"idle\" && !this.recordingStarted) {\r\n              startRecording();\r\n            }\r\n            if (status === \"acquiring_media\" || status === \"recording\") {\r\n              this.recordingStarted = true;\r\n            }\r\n            if (status === \"stopped\") {\r\n              this.recordingStarted = false;\r\n            }\r\n          }\r\n\r\n          this.startRecording();\r\n\r\n          return (\r\n            <MediaPreview\r\n              type={type}\r\n              stream={status === \"recording\" ? previewStream : null}\r\n              style={mediaStyle}\r\n              pauseRecording={this.pauseRecording}\r\n              resumeRecording={this.resumeRecording}\r\n              shouldPause={this.shouldPause}\r\n            />\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handles the end recording logic which will store the recorded blob inside the component state,\r\n   * then passes it to the transfer mechanism for global storage.\r\n   * @param {*} mediaBlob The recorded media blob URL\r\n   */\r\n  endRecording = (mediaBlob) => {\r\n    const { runtime, config, path } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const recordNumber = StateAttributeAccess.extractRecordNumber(pathState);\r\n    StateAttributeAccess.setMediaBlob(pathState, mediaBlob)\r\n    ComponentStateHelper.registerState(this, pathState);\r\n\r\n    const taskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\r\n    const userDefinedIDPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime);\r\n    runtime.recordingBuffer.reportRecording(config.userDefinedId, this.startRecordingTime, recordNumber, mediaBlob, taskInfo, userDefinedIDPath);\r\n\r\n    this.isRecording = false;\r\n    this.shouldPause = false;\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * a debounced version of the previous method.\r\n   */\r\n  debouncedEndRecording = debounce(this.endRecording, 500);\r\n\r\n  /**\r\n   * Converts the config value to a range value supported by MediaRef.\r\n   * @param volume \r\n   */\r\n  static convertToMediaRefVolume(volume) {\r\n    if (volume < 0) {\r\n      volume = 0;\r\n    } else if (volume > 10) {\r\n      volume = 10;\r\n    }\r\n    return volume / 10;\r\n  }\r\n\r\n  static computeVolumeInPercentage(volume) {\r\n    const volumeValue = parseInt(volume * 10, 10);\r\n    return volumeValue;\r\n  }\r\n\r\n  static addAttributesToInitialState(initialState, configProps) {\r\n    initialState.defaultImage = configProps.imageReference;\r\n    initialState.volume = configProps.useAudio ? 1 : 0;\r\n    initialState.lastOperation = undefined;\r\n    initialState.playNumber = 0;\r\n    initialState.hideControls = configProps.hideControls;\r\n    initialState.automaticStart = configProps.automaticStart;\r\n    initialState.hideControls = configProps.hideControls;\r\n    initialState.maxPlay = configProps.maxPlay;\r\n    initialState.maxRecord = configProps.maxRecord;\r\n    initialState.recordNumber = 0;\r\n  }\r\n\r\n  static createDelegateComponent(component, path, type) {\r\n    const delegateComponent = StateManagerHelper.deepCopy(component);\r\n    delegateComponent.config.userDefinedId = undefined;\r\n    delegateComponent.type = type;\r\n    const delegatePath = IndexPathHelper.appendIndexToPageSegment(path, 0);\r\n    return {\r\n      delegatePath, delegateComponent\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const { type } = config;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const imageReference = StateAttributeAccess.extractDefaultImage(state);\r\n    const muted = StateAttributeAccess.extractMediaVolume(state) <= 0;\r\n    const automaticStart = StateAttributeAccess.extractAutomaticStart(state);\r\n    const hideControls = StateAttributeAccess.extractHideControls(state);\r\n    const mediaBlob = StateAttributeAccess.extractMediaBlob(state);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const srcFromVariable = (config.src !== undefined && config.src.dynamic !== undefined)\r\n      ? CommonConfigHelper.getDynamicValueFromStatemachineAndMapper(config.src.dynamic, runtime)\r\n      : undefined;\r\n    // const src = mediaBlobUrl !== undefined ? mediaBlobUrl\r\n    //   : CommonConfigHelper.getProperResourcePath((srcFromVariable === undefined || srcFromVariable.length === 0) ? config.src.mediaReference : srcFromVariable, runtime);\r\n\r\n    const src = mediaBlob || CommonConfigHelper.getProperResourcePath((srcFromVariable === undefined || srcFromVariable.length === 0) ? config.src.mediaReference : srcFromVariable, runtime);\r\n    const altSrc = (config.src.mediaAlternateRef) ? CommonConfigHelper.getProperResourcePath(config.src.mediaAlternateRef, runtime) : undefined;\r\n    const extSrc = config.src.mediaReferenceExternal;\r\n    const altExtSrc = config.src.mediaAlternateRefExternal;\r\n    const poster = (imageReference === undefined || imageReference.length === 0) ? undefined : CommonConfigHelper.getProperResourcePath(imageReference, runtime);\r\n\r\n    // Avoid blocking the loading mechanism if there is nothing to play currently:\r\n    const someResourceToPlay = (\r\n      (src !== undefined && src !== null && src.length > 0)\r\n      || (altSrc !== undefined && altSrc.length > 0)\r\n      || (extSrc !== undefined && extSrc.length > 0)\r\n      || (altExtSrc !== undefined && altExtSrc.length > 0)\r\n      || this.isRecording);\r\n\r\n    // Make sure the audio/video reload each time the primary local resource changes:\r\n    // (Alternate and external resources do not change dynamically.)\r\n    const key = src;\r\n    const mediaStyle = {\r\n      width: '100%',\r\n      height: '100%'\r\n    }\r\n\r\n    // we might have childrens only for video component\r\n    const delegates = config.cbaChildren !== undefined ? config.cbaChildren.map((child, index) => {\r\n      const childPath = IndexPathHelper.appendIndexToPageSegment(path, index);\r\n      return (\r\n        <CbaInterpreter\r\n          key={childPath}\r\n          config={child}\r\n          path={childPath}\r\n          runtime={runtime}\r\n          orientation={orientation}\r\n        />\r\n      )\r\n    }) : undefined;\r\n\r\n    let media;\r\n    if (this.isRecording) {\r\n      media = this.createMediaRecorder(type, mediaStyle, config, runtime)\r\n    } else if (type === 'audio') {\r\n      media = (\r\n        <audio\r\n          ref={this.mediaRef}\r\n          key={key}\r\n          style={mediaStyle}\r\n          controls={!hideControls}\r\n          autoPlay={automaticStart}\r\n          muted={muted}\r\n          controlsList=\"nodownload\"\r\n          onClick={this.onClickHandler}\r\n          onContextMenu={this.onContextMenuHandler}\r\n          onPlay={this.onPlayHandler}\r\n          onPause={this.onPauseHandler}\r\n          onEnded={this.onEndedHandler}\r\n          onVolumeChange={this.onVolumeChange}\r\n          title={CommonConfigHelper.buildTitle(config, state)}\r\n          tabIndex={config.tabIndex}\r\n        >\r\n          <source src={src} />\r\n          {(altSrc) && <source src={altSrc} />}\r\n          {(extSrc) && <source src={extSrc} />}\r\n          {(altExtSrc) && <source src={altExtSrc} />}\r\n          Your browser does not support the audio element.\r\n        </audio>\r\n      );\r\n    } else if (type === 'video') {\r\n      media = (\r\n        <video\r\n          ref={this.mediaRef}\r\n          key={key}\r\n          style={mediaStyle}\r\n          controls={!hideControls}\r\n          autoPlay={automaticStart}\r\n          muted={muted}\r\n          poster={poster}\r\n          controlsList=\"nodownload nofullscreen noremoteplayback noplaybackrate\"\r\n          disablePictureInPicture\r\n          onClick={this.onClickHandler}\r\n          onContextMenu={this.onContextMenuHandler}\r\n          onPlay={this.onPlayHandler}\r\n          onPause={this.onPauseHandler}\r\n          onEnded={this.onEndedHandler}\r\n          onVolumeChange={this.onVolumeChange}\r\n          onTimeUpdate={this.onTimeUpdate}\r\n          title={CommonConfigHelper.buildTitle(config, state)}\r\n          tabIndex={config.tabIndex}\r\n        >\r\n          <source src={src} type=\"video/mp4\" />\r\n          {(altSrc) && <source src={altSrc} type=\"video/mp4\" />}\r\n          {(extSrc) && <source src={extSrc} type=\"video/mp4\" />}\r\n          {(altExtSrc) && <source src={altExtSrc} type=\"video/mp4\" />}\r\n          Your browser does not support the video element.\r\n        </video>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        onClick={someResourceToPlay ? undefined : this.onClickHandler}\r\n        onClickCapture={this.onClickCapture}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n      >\r\n        {someResourceToPlay && media}\r\n        {delegates}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nCbaMedia.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.getStandardConfigPropTypes(false)\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n}\r\n","import ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport SelectGroupHelper from '../components/SelectGroupHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\nimport TextBlockSelectHelper from '../components/CbaRichTextField/TextBlockSelectHelper';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\nimport BookmarkHelper from '../components/BookmarkHelper';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\nimport CbaRichTextField from '../components/CbaRichTextField/CbaRichTextField';\r\nimport CbaTableCell from '../components/table/CbaTableCell';\r\nimport TreeUtils from '../components/CbaTree/TreeUtils';\r\nimport PropagationHelper from './PropagationHelper';\r\nimport Utils from '../utils/Utils';\r\nimport CbaContainer from '../components/CbaContainer';\r\nimport * as ValueFormatter from \"../components/calculator/ValueFormatter\";\r\nimport CbaTreeChildArea from '../components/CbaTree/CbaTreeChildArea';\r\nimport { OPERATION_PLAY, OPERATION_PAUSE, OPERATION_STOP, OPERATION_ENDED } from '../components/media/CbaMedia';\r\n\r\n\r\nexport default class TermEvaluator {\r\n\r\n  // all operators we know: -----------------------------------------------------------------\r\n  static operators = {\r\n    // context value access\r\n    contextValue: TermEvaluator.contextValue,\r\n\r\n    // basic boolean\r\n    and: TermEvaluator.and,\r\n    or: TermEvaluator.or,\r\n    not: TermEvaluator.not,\r\n    ifThenElse: TermEvaluator.ifThenElse,\r\n    ifGuard: TermEvaluator.ifGuard,\r\n\r\n    // compare\r\n    equal: TermEvaluator.equal,\r\n    notEqual: TermEvaluator.notEqual,\r\n    greater: TermEvaluator.greater,\r\n    greaterEqual: TermEvaluator.greaterEqual,\r\n    less: TermEvaluator.less,\r\n    lessEqual: TermEvaluator.lessEqual,\r\n    max: TermEvaluator.max,\r\n    maxNamed: TermEvaluator.maxNamed,\r\n    matches: TermEvaluator.matches,\r\n\r\n    // arrays \r\n    arrayLength: TermEvaluator.arrayLength,\r\n    union: TermEvaluator.union,\r\n    intersection: TermEvaluator.intersection,\r\n\r\n    // numbers\r\n    add: TermEvaluator.add,\r\n    subtract: TermEvaluator.subtract,\r\n    multiply: TermEvaluator.multiply,\r\n    divide: TermEvaluator.divide,\r\n    modulo: TermEvaluator.modulo,\r\n    floor: TermEvaluator.floor,\r\n    ceil: TermEvaluator.ceil,\r\n    trunc: TermEvaluator.trunc,\r\n    round: TermEvaluator.round,\r\n\r\n    // strings\r\n    stringFormat: TermEvaluator.stringFormat,\r\n    concatenate: TermEvaluator.concatenate,\r\n    boolToString: TermEvaluator.boolToString,\r\n    numberToString: TermEvaluator.numberToString,\r\n    contains: TermEvaluator.contains,\r\n\r\n    // currently running\r\n    getCurrentTest: TermEvaluator.getCurrentTest,\r\n    getCurrentTask: TermEvaluator.getCurrentTask,\r\n    getCurrentItem: TermEvaluator.getCurrentItem,\r\n    getCurrentPage: TermEvaluator.getCurrentPage,\r\n    getEmbeddedPage: TermEvaluator.getEmbeddedPage,\r\n\r\n    switchPage: TermEvaluator.switchPage,\r\n    closeDialog: TermEvaluator.closeDialog,\r\n\r\n    saveTaskResults: TermEvaluator.saveTaskResults,\r\n    previousTask: TermEvaluator.previousTask,\r\n    nextTask: TermEvaluator.nextTask,\r\n    cancelTask: TermEvaluator.cancelTask,\r\n    switchTaskInTest: TermEvaluator.switchTaskInTest,\r\n    switchTaskAndTest: TermEvaluator.switchTaskAndTest,\r\n\r\n    recommend: TermEvaluator.recommend,\r\n\r\n    // interaction events\r\n    nbUserInteractions: TermEvaluator.nbUserInteractions,\r\n    nbUserInteractionsTotal: TermEvaluator.nbUserInteractionsTotal,\r\n    firstReactionTime: TermEvaluator.firstReactionTime,\r\n    firstReactionTimeTotal: TermEvaluator.firstReactionTimeTotal,\r\n    taskExecutionTime: TermEvaluator.taskExecutionTime,\r\n    taskExecutionTimeTotal: TermEvaluator.taskExecutionTimeTotal,\r\n\r\n    // get/set on widgets\r\n    focus: TermEvaluator.focus,\r\n\r\n    getDisabled: TermEvaluator.getDisabled,\r\n    setDisabled: TermEvaluator.setDisabled,\r\n\r\n    getSelected: TermEvaluator.getSelected,\r\n    setSelected: TermEvaluator.setSelected,\r\n\r\n    getHidden: TermEvaluator.getHidden,\r\n    setHidden: TermEvaluator.setHidden,\r\n\r\n    getVisited: TermEvaluator.getVisited,\r\n    setVisited: TermEvaluator.setVisited,\r\n\r\n    getTextValue: TermEvaluator.getTextValue,\r\n    setTextValue: TermEvaluator.setTextValue,\r\n\r\n    setHighlightable: TermEvaluator.setHighlightable,\r\n    isSelectedComponentOrTextBlock: TermEvaluator.isSelectedComponentOrTextBlock,\r\n    isHighlighted: TermEvaluator.isHighlighted,\r\n    getIntegerValue: TermEvaluator.getIntegerValue,\r\n\r\n    setMediaPlayerVolume: TermEvaluator.setMediaPlayerVolume,\r\n    setMediaPlayer: TermEvaluator.setMediaPlayer,\r\n    initMediaPlayer: TermEvaluator.initMediaPlayer,\r\n\r\n    setDragAndDropMode: TermEvaluator.setDragAndDropMode,\r\n\r\n    setSingleSelectMode: TermEvaluator.setSingleSelectMode,\r\n    setAllowDeselect: TermEvaluator.setAllowDeselect,\r\n    setSelectable: TermEvaluator.setSelectable,\r\n    setSelectChangeBlockMode: TermEvaluator.setSelectChangeBlockMode,\r\n\r\n    // named calculations\r\n    evaluateNamedCalculation: TermEvaluator.evaluateNamedCalculation,\r\n    getCalculationResult: TermEvaluator.getCalculationResult,\r\n\r\n    // variables\r\n    getVariable: TermEvaluator.getVariable,\r\n    setVariable: TermEvaluator.setVariable,\r\n    switchVariables: TermEvaluator.switchVariables,\r\n    getImplicitVariable: TermEvaluator.getImplicitVariable,\r\n    getInternalImplicitVariable: TermEvaluator.getInternalImplicitVariable,\r\n\r\n    // state machine\r\n    raiseEvent: TermEvaluator.raiseEvent,\r\n    postponeTaskSwitch: TermEvaluator.postponeTaskSwitch,\r\n    setTimedEventInterval: TermEvaluator.setTimedEventInterval,\r\n    setStatemachineAssignedPage: TermEvaluator.setStatemachineAssignedPage,\r\n    getNbStatemachineEventsRaised: TermEvaluator.getNbStatemachineEventsRaised,\r\n    getCurrentLeafStates: TermEvaluator.getCurrentLeafStates,\r\n    getRaisedStatemachineEvents: TermEvaluator.getRaisedStatemachineEvents,\r\n    getVisitedStates: TermEvaluator.getVisitedStates,\r\n    getRaisedEventsInState: TermEvaluator.getRaisedEventsInState,\r\n    getStatemachineVariableValues: TermEvaluator.getStatemachineVariableValues,\r\n    elapsedTimeInState: TermEvaluator.elapsedTimeInState,\r\n\r\n    // trace\r\n    traceText: TermEvaluator.traceText,\r\n    traceSnapshot: TermEvaluator.traceSnapshot,\r\n\r\n    // calculator\r\n    calcGetMem: TermEvaluator.calcGetMem,\r\n    calcOp: TermEvaluator.calcOp,\r\n    calcOpnd: TermEvaluator.calcOpnd,\r\n    calcSettings: TermEvaluator.calcSettings,\r\n\r\n    // tree\r\n    currentNode: TermEvaluator.currentNode,\r\n    getVisitedNodes: TermEvaluator.getVisitedNodes,\r\n    matchNodes: TermEvaluator.matchNodes,\r\n    matchNodesWithColumns: TermEvaluator.matchNodesWithColumns,\r\n    treeMove: TermEvaluator.treeMove,\r\n    treeCopy: TermEvaluator.treeCopy,\r\n\r\n    // scroll\r\n    scrollEmbeddedPage: TermEvaluator.scrollEmbeddedPage,\r\n    scrollTopLevelPage: TermEvaluator.scrollTopLevelPage,\r\n\r\n    // system environment\r\n    currentTimestamp: TermEvaluator.currentTimestamp,\r\n    consoleLog: TermEvaluator.consoleLog,\r\n\r\n    setGlobalPropertyHighlightColor: TermEvaluator.setGlobalPropertyHighlightColor,\r\n\r\n    // others\r\n    containerMembersFormLocalGroup: TermEvaluator.containerMembersFormLocalGroup,\r\n    containerRangeContainsMembers: TermEvaluator.containerRangeContainsMembers,\r\n    isInBookmarksList: TermEvaluator.isInBookmarksList,\r\n    callExternalPageFrame: TermEvaluator.callExternalPageFrame,\r\n    caretPosition: TermEvaluator.caretPosition,\r\n    changeLanguage: TermEvaluator.changeLanguage\r\n  }\r\n\r\n  static contextValue(params, runtime, contextSlots) {\r\n    const mainEntry = contextSlots[params.valueIndex];\r\n    if (params.attributes === undefined) {\r\n      return mainEntry;\r\n    }\r\n    let result = mainEntry;\r\n    params.attributes.forEach((attribute) => { result = result === undefined ? undefined : result[attribute]; })\r\n    return result;\r\n  }\r\n\r\n  // basic boolean ------------------------------------\r\n  static and(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous && current, true);\r\n    }\r\n    return params.left && params.right;\r\n  }\r\n\r\n  static or(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous || current, false);\r\n    }\r\n    return params.left || params.right;\r\n  }\r\n\r\n  static not(params, runtime) {\r\n    return !params.value;\r\n  }\r\n\r\n  static ifThenElse(params, runtime) {\r\n    return params.if ? params.then : params.else;\r\n  }\r\n\r\n  static ifGuard(params, runtime) {\r\n    // Th internal evaluation evaluated guarded branches implicitly\r\n    // and puts term of first passed guard as 'activeBranch' into the params structure.\r\n    // We just return that branch here:\r\n    return params.activeBranch;\r\n  }\r\n\r\n  // compare ------------------------------------\r\n  static equal(params, runtime) {\r\n    return params.left === params.right;\r\n  }\r\n\r\n  static notEqual(params, runtime) {\r\n    return params.left !== params.right;\r\n  }\r\n\r\n  static greater(params, runtime) {\r\n    return params.left > params.right;\r\n  }\r\n\r\n  static greaterEqual(params, runtime) {\r\n    return params.left >= params.right;\r\n  }\r\n\r\n  static less(params, runtime) {\r\n    return params.left < params.right;\r\n  }\r\n\r\n  static lessEqual(params, runtime) {\r\n    return params.left <= params.right;\r\n  }\r\n\r\n  static max(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.sort((a, b) => b - a)[0];\r\n    }\r\n    return params.left > params.right ? params.left : params.right;\r\n  }\r\n\r\n  static maxNamed(params, runtime) {\r\n    // use the params names as return\r\n    // compare params values and return params name of max value\r\n    let currentMaximumValue;\r\n    let currentMaximumName;\r\n    Object.keys(params).forEach((candidateName) => {\r\n      const candidateValue = params[candidateName];\r\n      if (currentMaximumValue === undefined || currentMaximumValue < candidateValue) {\r\n        currentMaximumValue = candidateValue;\r\n        currentMaximumName = candidateName;\r\n      }\r\n    });\r\n    return currentMaximumName;\r\n  }\r\n\r\n  static matches(params) {\r\n    try {\r\n      const matcher = RegExp(params.pattern, 'm');\r\n      return matcher.test(params.candidate);\r\n    } catch (exception) {\r\n      console.log(`Invalid regular expression in matches operator: ${params.pattern} -> evaluate matches call to 'false'`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // arrays -----------------------------------\r\n  static arrayLength(params, runtime) {\r\n    return params.value.length;\r\n  }\r\n\r\n  static union(params, runtime) {\r\n    const { left, right } = params;\r\n\r\n    const result = [];\r\n    left.forEach((candidate) => {\r\n      if (!result.includes(candidate)) {\r\n        result.push(candidate);\r\n      }\r\n    })\r\n    right.forEach((candidate) => {\r\n      if (!result.includes(candidate)) {\r\n        result.push(candidate);\r\n      }\r\n    })\r\n    return result;\r\n  }\r\n\r\n\r\n  static intersection(params, runtime) {\r\n    const { left, right } = params;\r\n\r\n    const result = [];\r\n    left.forEach((candidate) => {\r\n      if (right.includes(candidate) && !result.includes(candidate)) {\r\n        result.push(candidate);\r\n      }\r\n    })\r\n    return result;\r\n  }\r\n\r\n  // numbers ------------------------------------\r\n  static add(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous + current, 0);\r\n    }\r\n    return params.left + params.right;\r\n  }\r\n\r\n  static subtract(params, runtime) {\r\n    return params.left - params.right;\r\n  }\r\n\r\n  static multiply(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous * current, 1);\r\n    }\r\n    return params.left * params.right;\r\n  }\r\n\r\n  static divide(params, runtime) {\r\n    return params.left / params.right;\r\n  }\r\n\r\n  static modulo(params, runtime) {\r\n    return params.left % params.right;\r\n  }\r\n\r\n  static floor(params, runtime) {\r\n    return Math.floor(params.value);\r\n  }\r\n\r\n  static ceil(params, runtime) {\r\n    return Math.ceil(params.value);\r\n  }\r\n\r\n  static trunc(params, runtime) {\r\n    return Math.trunc(params.value);\r\n  }\r\n\r\n  static round(params, runtime) {\r\n    return Math.round(params.value);\r\n  }\r\n\r\n  // strings --------------------------------------------------------------\r\n  static stringFormat(params, runtime) {\r\n    let result = params.expression;\r\n    params.valuesArray.forEach((value, index) => {\r\n      // build regex based on the value index\r\n      const exp = `%${index + 1}[$]s`;\r\n      const regexp = new RegExp(exp, \"g\");\r\n      result = result.replace(regexp, value);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  static concatenate(params, runtime) {\r\n    const { left, right } = params;\r\n    return left + right;\r\n  }\r\n\r\n  static boolToString(params, runtime) {\r\n    const { cond } = params;\r\n    return cond.toString();\r\n  }\r\n\r\n  static numberToString(params, runtime) {\r\n    const { expression } = params;\r\n    return expression.toString();\r\n  }\r\n\r\n  static contains(params, runtime) {\r\n    const { container, candidates } = params;\r\n    return candidates.every(candidate => container.includes(candidate));\r\n  }\r\n\r\n  // currently running -----------------------------------------------------\r\n  static getCurrentTest(params, runtime) {\r\n    return runtime.taskManager.getCurrentTestTaskItemNames().test;\r\n  }\r\n\r\n  static getCurrentTask(params, runtime) {\r\n    return runtime.taskManager.getCurrentTestTaskItemNames().task;\r\n  }\r\n\r\n  static getCurrentItem(params, runtime) {\r\n    return runtime.taskManager.getCurrentTestTaskItemNames().item;\r\n  }\r\n\r\n  static getCurrentPage(params, runtime) {\r\n    switch (params.pageType) {\r\n      case \"standard\":\r\n        return runtime.taskManager.getCurrentPageNames().standardPage;\r\n      case \"xPage\":\r\n        return runtime.taskManager.getCurrentPageNames().xPage;\r\n      default:\r\n        console.error(`Illegal page type in getCurrentPage call: ${params.pageType}`);\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  static getEmbeddedPage(params, runtime) {\r\n    const path = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(UserDefPathHelper.getLastUserDefIdFromPath(params.absoluteUserDefId));\r\n    const pageAreaConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (pageAreaConfig === undefined) {\r\n      console.error(`Illegal page area reference in getEmbeddedPage call: ${params.absoluteUserDefId}`);\r\n      return undefined;\r\n    }\r\n    switch (pageAreaConfig.type) {\r\n      case 'CbaPageArea': return CbaPageArea.getEmbeddedPageName(path, pageAreaConfig.config, runtime);\r\n      case 'CbaTreeChildArea': return CbaTreeChildArea.getEmbeddedPageName(path, pageAreaConfig.config, runtime);\r\n      default: {\r\n        console.error(`Not supported component type ${pageAreaConfig.type} in getEmbeddedPage call with reference: ${params.absoluteUserDefId}`);\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  static switchPage(params, runtime) {\r\n    // translate the user defined id path to the target CBAPageArea to a proper state path \r\n    const receiverPath = params.receiver === undefined ? undefined\r\n      : IndexPathHelper.trimRootAndPageAreaFromPath(PathTranslationHelper.getIndexPathForUserDefPath(params.receiver, runtime));\r\n    const receiverTabInfo = params.receiverTabName === undefined ? undefined : {\r\n      name: params.receiverTabName,\r\n      image: params.receiverTabImage\r\n    }\r\n    const position = (params.x === undefined || params.y === undefined) ? undefined : {\r\n      x: params.x, y: params.y\r\n    }\r\n\r\n    runtime.taskManager.switchPage(\r\n      params.pageName, undefined, params.pageUrl,\r\n      params.pageAreaType, params.pageAreaName, receiverPath,\r\n      receiverTabInfo, undefined, position\r\n    );\r\n    return undefined;\r\n  }\r\n\r\n  static closeDialog(params, runtime) {\r\n    const presenter = runtime.dialogPresenter;\r\n    if (presenter !== undefined) {\r\n      if (params.pageName !== undefined) {\r\n        presenter.closeSpecificPageDialog(params.pageName);\r\n      } else {\r\n        presenter.closeDialog({\r\n          pageAreaName: params.pageAreaName,\r\n          type: params.pageAreaType\r\n        })\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static saveTaskResults(params, runtime) {\r\n    runtime.taskManager.saveCurrentTaskResults();\r\n    return undefined;\r\n  }\r\n\r\n  static previousTask(params, runtime) {\r\n    runtime.taskManager.switchTaskPrevious();\r\n    return undefined;\r\n  }\r\n\r\n  static nextTask(params, runtime) {\r\n    runtime.taskManager.switchTaskNext();\r\n    return undefined;\r\n  }\r\n\r\n  static cancelTask(params, runtime) {\r\n    runtime.taskManager.cancelTask();\r\n    return undefined;\r\n  }\r\n\r\n  static switchTaskInTest(params, runtime) {\r\n    runtime.taskManager.switchFirstMatchingTaskIntraTest(params.taskName);\r\n    return undefined;\r\n  }\r\n\r\n  static switchTaskAndTest(params, runtime) {\r\n    runtime.taskManager.switchFirstMatchingTaskInterTest(params.testName, params.taskName);\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * The parameter recommendations must be an array of recommendation objects.\r\n   * Each recommendation object \r\n   * - must have a testName attribute and \r\n   * - may have a taskName atrribute and \r\n   * - may have an absoluteUserDef attribute if a taskName attribute is given.\r\n   */\r\n  static recommend(params, runtime) {\r\n    runtime.recommendationsManager.setRecommendations(params.recommendations);\r\n    return undefined;\r\n  }\r\n\r\n  // interaction events ---------------------------------------------------\r\n  static nbUserInteractions(params, runtime) {\r\n    return runtime.incidentsAccumulator.nbUserInteractions(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static nbUserInteractionsTotal(params, runtime) {\r\n    return runtime.incidentsAccumulator.nbUserInteractionsTotal(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static firstReactionTime(params, runtime) {\r\n    return runtime.incidentsAccumulator.firstReactionTime(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static firstReactionTimeTotal(params, runtime) {\r\n    return runtime.incidentsAccumulator.firstReactionTimeTotal(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static taskExecutionTime(params, runtime) {\r\n    return runtime.incidentsAccumulator.taskExecutionTime(runtime.taskManager.getCurrentStatePathRoot(), new Date().getTime());\r\n  }\r\n\r\n  static taskExecutionTimeTotal(params, runtime) {\r\n    return runtime.incidentsAccumulator.taskExecutionTimeTotal(runtime.taskManager.getCurrentStatePathRoot(), new Date().getTime());\r\n  }\r\n\r\n\r\n  // get/set on widgets ------------------------------------------------------------------\r\n  static focus(params, runtime) {\r\n    const component = TermEvaluator.findComponentByAbsoluteUserDefId(params.absoluteUserDefId, runtime);\r\n    const pathId = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pagePath = IndexPathHelper.getPagePath(pathId);\r\n    if (component !== undefined) {\r\n      component.focus();\r\n    } else {\r\n      runtime.actionRegister.registerAction(pathId, \"focus\");\r\n    }\r\n    runtime.focusRegister.registerFocus(pagePath);\r\n    return undefined;\r\n  }\r\n\r\n  static getDisabled(params, runtime) {\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractDisabled, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setDisabled(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    PropagationHelper.applySimpleSetter(absoluteUserDefId, groupName, StateAttributeAccess.extractDisabled, StateAttributeAccess.setDisabled, value, true, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static getSelected(params, runtime) {\r\n    const pathId = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(pathId, runtime);\r\n    return SelectGroupHelper.extractSelectedState(pathState, pathId, runtime);\r\n  }\r\n\r\n  static setSelected(params, runtime) {\r\n    const pathId = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(pathId, runtime);\r\n    const dataBeforeSelection = TraceLogHelper.getTraceDataBeforeSetSelection(params.absoluteUserDefId, runtime);\r\n\r\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(params.value, pathId, pathState, false, true, runtime);\r\n    TraceLogHelper.traceChangesAfterSetSelection(params.absoluteUserDefId, runtime, dataBeforeSelection);\r\n    return undefined;\r\n  }\r\n\r\n  static getHidden(params, runtime) {\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractHidden, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setHidden(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    PropagationHelper.applySimpleSetter(absoluteUserDefId, groupName, StateAttributeAccess.extractHidden, StateAttributeAccess.setHidden, value, true, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static getVisited(params, runtime) {\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractVisited, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setVisited(params, runtime) {\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractVisited, StateAttributeAccess.setVisited, params.value, params.absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n\r\n  static getTextValue(params, runtime) {\r\n    const { selector } = params;\r\n    if (selector) {\r\n      return CbaTableCell.getFormulaOrValue(selector, params.absoluteUserDefId, runtime);\r\n    }\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setTextValue(params, runtime) {\r\n\r\n    // create trace log entry\r\n    const oldTextValue = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, params.absoluteUserDefId, runtime);\r\n    const newTextValue = TermEvaluator.caluculateTextInsert(oldTextValue, params.value, params.insertPosition, params.dropLength);\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const traceDetails = {\r\n      indexPath,\r\n      userDefIdPath: params.absoluteUserDefId,\r\n      userDefId: UserDefPathHelper.getLastUserDefIdFromPath(params.absoluteUserDefId),\r\n      oldTextValue,\r\n      newTextValue,\r\n      insertedValue: params.value,\r\n      insertPosition: params.insertPosition,\r\n      dropLength: params.dropLength\r\n    };\r\n    runtime.traceLogBuffer.reportEvent('OperatorSetTextValue', new Date(), traceDetails);\r\n\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, StateAttributeAccess.setTextValue, newTextValue, params.absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n  static caluculateTextInsert(oldText, insertText, insertPosition, dropLength) {\r\n    const prefix = insertPosition < 0 ? oldText : oldText.substr(0, insertPosition);\r\n    const postfix = (insertPosition < 0 || dropLength < 0) ? \"\" : oldText.substr(insertPosition + dropLength);\r\n    return prefix + insertText + postfix;\r\n  }\r\n\r\n  static setHighlightable(params, runtime) {\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractHighlightable, StateAttributeAccess.setHighlightable, params.value, params.absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n  static isSelectedComponentOrTextBlock(params, runtime) {\r\n    const pathParameter = params.absolutePath;\r\n    const blockOwnerPathId = PathTranslationHelper.getIndexPathForTextBlockPath(pathParameter, runtime);\r\n    if (blockOwnerPathId === undefined) {\r\n      const pathId = PathTranslationHelper.getIndexPathForUserDefPath(pathParameter, runtime);\r\n      const pathState = runtime.componentStateManager.findOrBuildStateForPathId(pathId, runtime);\r\n      return SelectGroupHelper.extractSelectedState(pathState, pathId, runtime);\r\n    } else {\r\n      const { partial, highlightColor } = params;\r\n      const richTextPathState = runtime.componentStateManager.findOrBuildStateForPathId(blockOwnerPathId, runtime);\r\n      const blockName = UserDefPathHelper.getLastUserDefIdFromPath(pathParameter);\r\n      const richTextPageSegment = runtime.pageConfigurationsManager.findPageSegmentForTextBlockOwner(blockName);\r\n      const richTextConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(richTextPageSegment);\r\n      let highlightColorValue = null;\r\n      if (highlightColor !== undefined) {\r\n        highlightColorValue = CbaRichTextField.convertHighlightValueToKey(highlightColor);\r\n      }\r\n      return TextBlockSelectHelper.isTextBlockSelected(blockName, richTextPathState, richTextConfig.config, partial, highlightColorValue);\r\n    }\r\n  }\r\n\r\n  static isHighlighted(params, runtime) {\r\n    const { highlightColor } = params;\r\n    const richTextPathState = runtime.componentStateManager.findOrBuildStateByUserDefPath(params.absoluteUserDefId, runtime);\r\n    const richTextPageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(UserDefPathHelper.getLastUserDefIdFromPath(params.absoluteUserDefId));\r\n    const richTextConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(richTextPageSegment);\r\n    let highlightColorValue = null;\r\n    if (highlightColor !== undefined) {\r\n      highlightColorValue = CbaRichTextField.convertHighlightValueToKey(highlightColor);\r\n    }\r\n    return TextBlockSelectHelper.isSelectionContainsNonBlank(richTextPathState, richTextConfig.config, highlightColorValue);\r\n  }\r\n\r\n  static getIntegerValue(params, runtime) {\r\n    const { absoluteUserDefId, roundingMode, defaultValue } = params;\r\n    // TODO: CKI or BHO: unfortunately the TableCell component puts a Number into the textValue field -> cast that to String:\r\n    const valueAsText = String(ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, absoluteUserDefId, runtime));\r\n\r\n    if (valueAsText === undefined || valueAsText.length === 0) {\r\n      return defaultValue;\r\n    }\r\n\r\n    const parsedValue = TermEvaluator.integerValueFromString(valueAsText, roundingMode);\r\n    return parsedValue === undefined ? defaultValue : parsedValue;\r\n  }\r\n\r\n  /**\r\n   * Internal helper: Parse the given String as integer with rounding applied.\r\n   * \r\n   * The method returns undefined if the string does not represent a decimal number. \r\n   * \r\n   * @param {String} valueAsString The value given as string\r\n   * @param {String} roundingMode The rounding mode, one of 'up', 'down', 'half_up', 'half_down'\r\n   */\r\n  static integerValueFromString(valueAsString, roundingMode) {\r\n    const parseResult = TermEvaluator.parseDecimalString(valueAsString);\r\n    if (parseResult === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const { wholeValue: whole, fractionClass } = parseResult;\r\n    const wholeUp = whole >= 0 ? (whole + 1) : (whole - 1);\r\n    switch (roundingMode) {\r\n      case 'up':\r\n        return fractionClass === 'zero' ? whole : wholeUp;\r\n      case 'down':\r\n        return whole;\r\n      case 'half_up':\r\n        return fractionClass === 'five' || fractionClass === 'greaterThanFive' ? wholeUp : whole;\r\n      case 'half_down':\r\n        return fractionClass === 'greaterThanFive' ? wholeUp : whole;\r\n      default:\r\n        console.warn(`Invalid rounding mode: ${roundingMode}`);\r\n        return undefined;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Internal helper that parses a decimal string into the whole part\r\n   * and a classification of the fractional part: 'zero', 'lessThanFive', 'five', greaterThanFive'.\r\n   * \r\n   * The method returns undefined if the given String is not a proper decimal number.\r\n   * \r\n   * @param {String} valueAsString \r\n   */\r\n  static parseDecimalString(valueAsString) {\r\n    const dotIndex = valueAsString.indexOf('.');\r\n    const wholeString = dotIndex === -1 ? valueAsString : valueAsString.substr(0, dotIndex);\r\n    const fractionString = dotIndex === -1 ? '0' : valueAsString.substr(dotIndex + 1);\r\n    const wholeValue = parseInt(wholeString, 10);\r\n    const fractionValue = parseInt(fractionString, 10);\r\n    if (String(wholeValue) !== wholeString) {\r\n      return undefined;\r\n    }\r\n    let fractionCompareString = fractionString;\r\n    while (fractionCompareString.startsWith('0')) {\r\n      fractionCompareString = fractionCompareString.substr(1);\r\n    }\r\n    if (fractionCompareString.length === 0) {\r\n      fractionCompareString = '0';\r\n    }\r\n    if (String(fractionValue) !== fractionCompareString) {\r\n      return undefined;\r\n    }\r\n    if (fractionValue < 0) {\r\n      return undefined;\r\n    }\r\n    let fractionClass;\r\n    if (fractionValue === 0) {\r\n      fractionClass = 'zero'\r\n    } else if (fractionString[0] === '0' || fractionValue < 5) {\r\n      fractionClass = 'lessThanFive'\r\n    } else if (fractionValue > 5) {\r\n      fractionClass = 'greaterThanFive'\r\n    } else {\r\n      fractionClass = 'five'\r\n    }\r\n    return {\r\n      wholeValue, fractionClass\r\n    };\r\n  }\r\n\r\n  static setMediaPlayerVolume(params, runtime) {\r\n    if (params.value >= 0 && params.value <= 10) {\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractMediaVolume, StateAttributeAccess.setMediaVolume, params.value, params.absoluteUserDefId, runtime, true);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static setMediaPlayer(params, runtime) {\r\n    const component = TermEvaluator.findComponentByAbsoluteUserDefId(params.absoluteUserDefId, runtime);\r\n    if (component !== undefined) {\r\n      const operation = params.value.toLowerCase();\r\n      switch (operation) {\r\n        case 'start':\r\n          component.play(true);\r\n          break;\r\n        case 'stop':\r\n          component.stop(true);\r\n          break;\r\n        case 'pause':\r\n          component.pause(true);\r\n          break;\r\n        default:\r\n          TermEvaluator.logMessage(`invalid operation ${operation}`);\r\n          break;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static initMediaPlayer(params, runtime) {\r\n    const { absoluteUserDefId, automaticStart, hideControls, maxPlay } = params;\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractAutomaticStart, StateAttributeAccess.setAutomaticStart, automaticStart, absoluteUserDefId, runtime, true);\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractHideControls, StateAttributeAccess.setHideControls, hideControls, absoluteUserDefId, runtime, true);\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractMaxPlay, StateAttributeAccess.setMaxPlay, maxPlay, absoluteUserDefId, runtime, true);\r\n  }\r\n\r\n  static setDragAndDropMode(params, runtime) {\r\n    const { isSender, isReceiver, absoluteUserDefId } = params;\r\n    const modeToSet = {\r\n      isSender,\r\n      isReceiver\r\n    }\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractDragAndDrop, StateAttributeAccess.setDragAndDrop, modeToSet, absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n  static setSingleSelectMode(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    SelectGroupHelper.setSingleSelectActiveForController(absoluteUserDefId, groupName, value, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static setAllowDeselect(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    SelectGroupHelper.setAllowDeselectForController(absoluteUserDefId, groupName, value, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Operator to set the selectable flag in the ComponentStateManager explcitily. \r\n   * For use on components, that never use the select-group approach to control selectability (e.g. CbaTable).\r\n   */\r\n  static setSelectable(params, runtime) {\r\n    const { value, absoluteUserDefId } = params;\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractSelectable, StateAttributeAccess.setSelectable, value, absoluteUserDefId, runtime, false);\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Operator to switch selectability for a component possibly controlled by a select group controller.\r\n   */\r\n  static setSelectChangeBlockMode(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    const pathState = runtime.componentStateManager.findOrBuildStateByUserDefPath(params.absoluteUserDefId, runtime);\r\n    const selectableFlagInPathState = StateAttributeAccess.extractSelectable(pathState);\r\n    if (selectableFlagInPathState === undefined) {\r\n      // selectability is controlled by select group:\r\n      SelectGroupHelper.setSelectionChangesBlockedForController(absoluteUserDefId, groupName, value, runtime);\r\n    } else {\r\n      // selectability is explicitly controlled by component itself:\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractSelectable, StateAttributeAccess.setSelectable, !value, absoluteUserDefId, runtime, false);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n\r\n  // named calculations ----------------------------------------------------------------------\r\n\r\n  static evaluateNamedCalculation(params, runtime, contextSlots) {\r\n    const currentTaskName = runtime.taskManager.getCurrentTestTaskItemNames().task;\r\n    const termIdentifiedByName = runtime.calculationsConfigurationManager.findCalculationByTaskName(currentTaskName, params.calculationName);\r\n\r\n    // Shortcut to avoid repetitive calculations during a full task result calculation (i.e. starting with a cleared task result):\r\n    if (\r\n      contextSlots !== undefined\r\n      && contextSlots[0] !== undefined\r\n      && contextSlots[0].useExistingCalculationResults === true\r\n      && contextSlots[0].taskPath !== undefined) {\r\n      const existingResult = runtime.taskResultsManager.getResult(contextSlots[0].taskPath, params.calculationName);\r\n      if (existingResult !== undefined) {\r\n        return existingResult;\r\n      }\r\n    }\r\n\r\n    return TermEvaluator.evaluateTerm(termIdentifiedByName, runtime, contextSlots, params.calculationName);\r\n  }\r\n\r\n  static getCalculationResult(params, runtime) {\r\n\r\n    const currentTaskName = runtime.taskManager.getCurrentTestTaskItemNames().task;\r\n    if (currentTaskName === params.taskName) {\r\n      // evaluate ad hoc in current task\r\n      return TermEvaluator.evaluateNamedCalculation({\r\n        calculationName: params.calculationName\r\n      }, runtime);\r\n    } else {\r\n      // look up calculation result in stored result of inactive task\r\n      const taskPath = runtime.taskManager.getStatePathRootForTask(params.taskName);\r\n      return runtime.taskResultsManager.getResult(taskPath, params.calculationName);\r\n    }\r\n  }\r\n\r\n  // variables  --------------------------------------------------------------------------\r\n\r\n  static getVariable(params, runtime) {\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    return variableManager.getVariable(currentTaskId, params.name);\r\n  }\r\n\r\n  static setVariable(params, runtime) {\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    variableManager.setVariable(currentTaskId, params.name, params.value, params.type, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static switchVariables(params, runtime) {\r\n    const { left, right } = params;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n    const { value: oldValueLeft, type: oldTypeLeft } = variableManager.getVariable(currentTaskId, left, true);\r\n    const { value: oldValueRight, type: oldTypeRight } = variableManager.getVariable(currentTaskId, right, true);\r\n\r\n    variableManager.setVariable(currentTaskId, left, oldValueRight, oldTypeRight, runtime);\r\n    variableManager.setVariable(currentTaskId, right, oldValueLeft, oldTypeLeft, runtime);\r\n  }\r\n\r\n  // implicit variables ---------------------------------------------------------------\r\n  static getImplicitVariable(params, runtime) {\r\n    const { groupName, absoluteUserDefId, selector } = params;\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const componentType = ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime);\r\n    switch (componentType) {\r\n      // evaluated to String\r\n      case 'CbaInputField':\r\n      case 'CbaSingleLineInputField':\r\n        return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, absoluteUserDefId, runtime);\r\n      case 'CbaTableCell':\r\n        if (selector) {\r\n          return CbaTableCell.getFormulaOrValue(selector, absoluteUserDefId, runtime);\r\n        }\r\n        return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, absoluteUserDefId, runtime);\r\n      case 'CbaComboBox': {\r\n        return SelectGroupHelper.getComboboxSelectedItem(indexPath, runtime);\r\n      }\r\n      case 'CbaList': {\r\n        return SelectGroupHelper.getListSelectedItems(indexPath, runtime);\r\n      }\r\n      case 'CbaTree': {\r\n        const currentNode = TreeUtils.getCurrentNodePathId(absoluteUserDefId, runtime);\r\n        return (currentNode === null) ? '' : currentNode;\r\n      }\r\n      case 'CbaMedia': {\r\n        const lastOperation = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractLastOperation, absoluteUserDefId, runtime);\r\n        if (lastOperation === OPERATION_PLAY) return 'mp_start';\r\n        if (lastOperation === OPERATION_PAUSE) return 'mp_pause';\r\n        if (lastOperation === OPERATION_STOP) return 'mp_stop';\r\n        if (lastOperation === OPERATION_ENDED) return 'mp_end';\r\n        return '';\r\n      }\r\n      case 'CbaContainer': {\r\n        if (groupName === undefined) {\r\n          return SelectGroupHelper.getNonSelectGroupSelectedChildren(indexPath, runtime);\r\n        }\r\n        return SelectGroupHelper.getSelectGroupSelectedChildren(indexPath, groupName, runtime);\r\n      }\r\n      // evaluated to Boolean\r\n      case 'CbaCheckbox':\r\n      case 'CbaRadioButton':\r\n      case 'CbaButton':\r\n      case 'CbaLink':\r\n      case 'CbaRichTextField':\r\n        return TermEvaluator.getSelected(params, runtime);\r\n      // evaluated to Integer\r\n      case 'CbaTimer': {\r\n        const { pageConfigurationsManager, statemachinesManager } = runtime;\r\n        const { timerEvent } = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config;\r\n        if (timerEvent !== undefined) {\r\n          const timerData = statemachinesManager.getTimerData(timerEvent);\r\n          const remainingTimeInMillis = timerData.remainingTime;\r\n          return (remainingTimeInMillis ? Math.ceil(remainingTimeInMillis / 1000) : 0);\r\n        }\r\n        return 0;\r\n      }\r\n      default:\r\n        console.log(`Unknown component type: ${componentType}. We will do nothing!`);\r\n        return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internally used to build ResultVariables in the scoring result structure for components that have 'scoringResultPerMember' attribute enabled.\r\n   * \r\n   * Returns a collection containing each 'member' of the given component together with its current (selection) state.\r\n   * Applies on CbaList, Frames, RadioButtonGroup.\r\n   */\r\n  static getInternalImplicitVariable(params, runtime) {\r\n    const { groupName, absoluteUserDefId } = params;\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const componentType = ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime);\r\n    switch (componentType) {\r\n      // evaluated to list of Strings\r\n      case 'CbaList': {\r\n        return SelectGroupHelper.getListItemsPerMemberState(indexPath, runtime);\r\n      }\r\n      case 'CbaContainer': {\r\n        if (groupName === undefined) {\r\n          return SelectGroupHelper.getNonSelectGroupSelectedChildrenPerMember(indexPath, runtime);\r\n        }\r\n        return SelectGroupHelper.getSelectGroupSelectedChildrenPerMember(indexPath, groupName, runtime);\r\n      }\r\n      default:\r\n        console.log(`Not supported component type: ${componentType} for internal evaluation.`);\r\n        return [];\r\n    }\r\n  }\r\n\r\n  // state machine  --------------------------------------------------------------------------\r\n\r\n  static raiseEvent(params, runtime) {\r\n    runtime.statemachinesManager.triggerEvent(params.event);\r\n    return undefined;\r\n  }\r\n\r\n  static postponeTaskSwitch(params, runtime) {\r\n    runtime.statemachinesManager.setPostponedTaskSwitch(params.switchCall.deferred);\r\n    return undefined;\r\n  }\r\n\r\n  static setTimedEventInterval(params, runtime) {\r\n    const { eventName, interval } = params;\r\n    const { statemachinesManager } = runtime;\r\n    statemachinesManager.setTimedEventInterval(eventName, interval, runtime);\r\n  }\r\n\r\n  static setStatemachineAssignedPage(params, runtime) {\r\n    const { state, pageName, pageAreaType, pageAreaName } = params;\r\n    const { statemachinesManager } = runtime;\r\n    statemachinesManager.setStatePageAssignment(state, pageName, pageAreaType, pageAreaName);\r\n  }\r\n\r\n  static getNbStatemachineEventsRaised(params, runtime) {\r\n    return runtime.statemachinesManager.getTotalNbOfRaisedEvents();\r\n  }\r\n\r\n  static getCurrentLeafStates(params, runtime) {\r\n    return runtime.statemachinesManager.getCurrentStateMachineLeafStates();\r\n  }\r\n\r\n  static getRaisedStatemachineEvents(params, runtime) {\r\n    return runtime.statemachinesManager.getRaisedEvents();\r\n  }\r\n\r\n  static getVisitedStates(params, runtime) {\r\n    return runtime.statemachinesManager.getVisitedStates();\r\n  }\r\n\r\n  static getRaisedEventsInState(params, runtime) {\r\n    return runtime.statemachinesManager.getRaisedEventsInState(params.state);\r\n  }\r\n\r\n  static getStatemachineVariableValues(params, runtime) {\r\n    return runtime.statemachinesManager.getValuesOfVariable(params.variable);\r\n  }\r\n\r\n  static elapsedTimeInState(params, runtime) {\r\n    return runtime.statemachinesManager.elapsedTimeInState(params.state);\r\n  }\r\n\r\n  // trace ----------------------------------------------------------------------------------\r\n\r\n  static traceText(params, runtime) {\r\n    TermEvaluator.traceTextInternal('OperatorTraceText', params, runtime);\r\n    return true;\r\n  }\r\n\r\n  static traceSnapshot(params, runtime) {\r\n    TermEvaluator.traceTextInternal('OperatorTraceSnapshot', params, runtime);\r\n    TraceLogHelper.dumpSnapshotToTrace(runtime);\r\n    return true;\r\n  }\r\n\r\n  static traceTextInternal(operator, params, runtime) {\r\n    const text = TermEvaluator.evaluateTerm(params.expression, runtime, [], `text_${operator}`);\r\n    const type = params.type === undefined ? undefined : TermEvaluator.evaluateTerm(params.type, runtime, [], `type_${operator}`);\r\n    const traceDetails = {\r\n      type,\r\n      text\r\n    };\r\n    runtime.traceLogBuffer.reportEvent(operator, new Date(), traceDetails);\r\n  }\r\n\r\n  // calculator ----------------------------------------------------------------------------------\r\n\r\n  static calcGetMem(params, runtime) {\r\n    return runtime.calculatorsManager.calcGetMem(TermEvaluator.evaluateTerm(params.expression, runtime, [], 'calcGetMem'));\r\n  }\r\n\r\n  static calcOp(params, runtime) {\r\n    const value = (params.expression !== undefined) ? TermEvaluator.evaluateTerm(params.expression, runtime, [], `calcOp${params.operation}`) : undefined;\r\n    runtime.calculatorsManager.calcOp(params.operation, value);\r\n    return undefined;\r\n  }\r\n\r\n  static calcOpnd(params, runtime) {\r\n    const value = (params.expression !== undefined) ? TermEvaluator.evaluateTerm(params.expression, runtime, [], `calcOpnd${params.operation}`) : undefined;\r\n    runtime.calculatorsManager.calcOpnd(params.operation, value);\r\n    return undefined;\r\n  }\r\n\r\n  static calcSettings(params, runtime) {\r\n    const settings = {};\r\n    const { scale, displayWidth, withThousandSeparator, includeOperandInHistory, angle, format } = params;\r\n    if (scale !== undefined) {\r\n      settings.scale = scale;\r\n    }\r\n    if (displayWidth !== undefined) {\r\n      settings.displayWidth = displayWidth;\r\n    }\r\n    if (withThousandSeparator !== undefined) {\r\n      settings.withThousandSeparator = withThousandSeparator;\r\n    }\r\n    if (includeOperandInHistory !== undefined) {\r\n      settings.includeOperandInHistory = includeOperandInHistory;\r\n    }\r\n    if (angle !== undefined) {\r\n      settings.angle = angle;\r\n    }\r\n    if (format !== undefined) {\r\n      settings.format = TermEvaluator.getValueFormatForCalculator(params.format);\r\n    }\r\n    runtime.calculatorsManager.calcSettings(settings);\r\n  }\r\n\r\n  // system environment -----------------------------------------------------------------------\r\n\r\n  static currentTimestamp(params, runtime) {\r\n    return new Date().getTime();\r\n  }\r\n\r\n  static consoleLog(params, runtime) {\r\n    console.log(params.message);\r\n    return undefined;\r\n  }\r\n\r\n  static setGlobalPropertyHighlightColor(params, runtime) {\r\n    const topLevelConfiguration = runtime.presenterStateManager.getTaskState(runtime.taskManager.getCurrentStatePathRoot());\r\n    topLevelConfiguration.itemHighlightColor = params.value;\r\n    runtime.presenterStateManager.saveTaskState(runtime.taskManager.getCurrentStatePathRoot(), topLevelConfiguration, runtime);\r\n\r\n    runtime.componentDirectory.findByComponentType(CbaRichTextField).forEach((richTextComponent) => {\r\n      richTextComponent.highlightColorChanged();\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  // scroll -----------------------------------------------------------------------\r\n  static scrollEmbeddedPage(params, runtime) {\r\n    const { absoluteUserDefId, xPosition, yPosition, xPositionType, yPositionType } = params;\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const componentInstance = runtime.componentDirectory.findComponent(indexPath);\r\n\r\n    if (componentInstance) {\r\n      const x = `${xPosition}${xPositionType === '%' ? xPositionType : ''}`;\r\n      const y = `${yPosition}${yPositionType === '%' ? yPositionType : ''}`;\r\n      componentInstance.scroll(x, y);\r\n    } else {\r\n      console.warn(`Term Evaluator - scrollEmbeddedPage - component is not currently on screen or can't be found`);\r\n    }\r\n  }\r\n\r\n  static scrollTopLevelPage(params, runtime) {\r\n    const { isXPage, xPosition, yPosition, xPositionType, yPositionType } = params;\r\n    const currentPages = runtime.taskManager.getCurrentPageNames();\r\n    const pageAreaName = isXPage ? \"xPage\" : \"standard\";\r\n    const pageName = isXPage ? currentPages.xPage : currentPages.standardPage;\r\n\r\n    if (pageAreaName && pageName) {\r\n      const pagePath = IndexPathHelper.appendPageSegmentToPathRoot(\r\n        runtime.taskManager.getCurrentStatePathRoot(),\r\n        'main',\r\n        pageAreaName,\r\n        IndexPathHelper.buildPageSegment(pageName)\r\n      );\r\n\r\n      const componentInstance = runtime.componentDirectory.findComponent(pagePath);\r\n      const containerRef = componentInstance && componentInstance instanceof CbaContainer && componentInstance.containerRendererRef.current;\r\n\r\n      if (containerRef) {\r\n        const parentNode = currentPages.xPage ? containerRef.parentNode.parentNode : containerRef.parentNode;\r\n        const x = `${xPosition}${xPositionType === '%' ? xPositionType : ''}`;\r\n        const y = `${yPosition}${yPositionType === '%' ? yPositionType : ''}`;\r\n        Utils.doScrollOnHTMLElement(x, y, containerRef, parentNode);\r\n      }\r\n    } else if (!pageName && isXPage) {\r\n      console.warn(`Term Evaluator - scrollTopLevelPage - xPage is either not currently on screen or can't be found`);\r\n    } else {\r\n      // should never go here\r\n      console.warn(`Term Evaluator - scrollTopLevelPage - unknown page tried scrolling`);\r\n    }\r\n  }\r\n\r\n  // others -----------------------------------------------------------------------\r\n  static containerMembersFormLocalGroup(params, runtime) {\r\n    const { container, minDistance, maxDistance, anchorPointType, groupMembers, checkNonMembers } = params;\r\n    const containerIndexPath = PathTranslationHelper.getIndexPathForUserDefPath(container, runtime);\r\n    const memberIndexPaths = TermEvaluator.getIndexPathsForUserDefIds(groupMembers, runtime);\r\n    if (!TermEvaluator.checkChildhood(containerIndexPath, memberIndexPaths)) {\r\n      console.warn('Some group members in containerMembersFormLocalGroup call are not children of the given container -> returning false.')\r\n      return false;\r\n    }\r\n    const { memberComparePoints, nonMemberComparePoints } = TermEvaluator.getComparePointSets(containerIndexPath, 'comparesPosition', anchorPointType, memberIndexPaths, runtime);\r\n\r\n    return TermEvaluator.checkLocalGroup(minDistance, maxDistance, memberComparePoints, checkNonMembers === false ? [] : nonMemberComparePoints);\r\n  }\r\n\r\n  static containerRangeContainsMembers(params, runtime) {\r\n    const { container, minX, maxX, minY, maxY, anchorPointType, rangeMembers, checkNonMembers } = params;\r\n    const containerIndexPath = PathTranslationHelper.getIndexPathForUserDefPath(container, runtime);\r\n    const memberIndexPaths = TermEvaluator.getIndexPathsForUserDefIds(rangeMembers, runtime);\r\n    if (!TermEvaluator.checkChildhood(containerIndexPath, memberIndexPaths)) {\r\n      console.warn('Some group members in containerRangeContainsMembers call are not children of the given container -> returning false.')\r\n      return false;\r\n    }\r\n    const { memberComparePoints, nonMemberComparePoints } = TermEvaluator.getComparePointSets(containerIndexPath, 'comparesPosition', anchorPointType, memberIndexPaths, runtime);\r\n\r\n    return TermEvaluator.checkInRange(minX, maxX, minY, maxY, memberComparePoints, checkNonMembers === false ? [] : nonMemberComparePoints);\r\n  }\r\n\r\n  static isInBookmarksList(params, runtime) {\r\n    const { pageName: pageToLookFor } = params;\r\n    const pageAreaPathList = ComponentStateHelper.findIndexPathsInCurrentTaskOfComponentWithType('CbaPageArea', runtime);\r\n\r\n    const pageAreaWithMatchingBookmark = pageAreaPathList.find(indexPath => BookmarkHelper.getBookmarks(indexPath, runtime).find(bookmark => bookmark.pageName === pageToLookFor) !== undefined);\r\n    return pageAreaWithMatchingBookmark !== undefined;\r\n  }\r\n\r\n  static callExternalPageFrame(params, runtime) {\r\n    const { absoluteUserDefId, values } = params;\r\n    const pageFrameInstance = runtime.componentDirectory.findComponent(PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime));\r\n\r\n    // don't try to send a message if the external page frame does not exist currently:\r\n    if (pageFrameInstance !== undefined) {\r\n      const targetWindow = pageFrameInstance.getFrameWindow();\r\n      const url = pageFrameInstance.getFrameContentUrl();\r\n      if (targetWindow !== undefined && url !== undefined) {\r\n        // send asynchronosly:\r\n        const sendPromise = new Promise((resolve, reject) => {\r\n          try {\r\n            targetWindow.postMessage(JSON.stringify(values), url.origin);\r\n          } catch (e) {\r\n            console.error(`Cannot call external page frame via postMessage`, e);\r\n            throw new Error(`Cannot call external page frame via postMessage`);\r\n          }\r\n        });\r\n        // currently we don't do anything once the send operation is complete:\r\n        sendPromise.then();\r\n      }\r\n    }\r\n  }\r\n\r\n  static caretPosition(params, runtime) {\r\n    const { absoluteUserDefId, defaultValue } = params;\r\n    const caretPosition = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractLastCaretPosition, absoluteUserDefId, runtime);\r\n    return (caretPosition !== undefined) ? caretPosition : defaultValue;\r\n  }\r\n\r\n  static changeLanguage(params, runtime) {\r\n    const { language } = params;\r\n    runtime.translationManager.changeLanguage(language, runtime);\r\n  }\r\n\r\n  // client interface ------------------------------------------------------------------------\r\n  static evaluateTerm(term, runtime, contextSlots, topLogName) {\r\n    return TermEvaluator.evaluateTermInternal(term, runtime, contextSlots, `<${topLogName === undefined ? '' : topLogName}>`);\r\n  }\r\n\r\n\r\n  // internal methods of evaluation loop ------------------------------------------------------------------------\r\n  static evaluateTermInternal(term, runtime, contextSlots, logContext) {\r\n    if (runtime === undefined) TermEvaluator.logMessage(`Runtime undefined for ${logContext}`);\r\n\r\n    // detect atomic terms and return their values immediately:\r\n    const typeOfTerm = typeof term\r\n    if (typeOfTerm === 'string' || typeOfTerm === 'boolean' || typeOfTerm === 'number') {\r\n      TermEvaluator.logCalculation(`${logContext}=>${term}`);\r\n      return term;\r\n    }\r\n\r\n    if (!TermEvaluator.isTermComplete(term, logContext)) {\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n\r\n    // get operator\r\n    const operatorName = term.operator;\r\n\r\n    // detect non recursive structures (i.e. parameter objects that are not operator calls)\r\n    // and return them immediately\r\n    if (operatorName === undefined) {\r\n      TermEvaluator.logCalculation(`${logContext}=>${JSON.stringify(term)}`);\r\n      return term;\r\n    }\r\n\r\n    const operatorFunction = TermEvaluator.operators[operatorName];\r\n    if (operatorFunction === undefined) {\r\n      TermEvaluator.logMessage(`Unknown operator ${operatorName} in term in ${logContext}`);\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n\r\n    // evaluate parameters\r\n    const evaluatedParams = {};\r\n\r\n    if (operatorFunction === TermEvaluator.ifThenElse) {\r\n      // special case for if-then-else: evaluate one branch only:\r\n\r\n      const ifParamIndex = term.params.findIndex(param => param.name === 'if');\r\n      if (ifParamIndex === -1) {\r\n        TermEvaluator.logMessage(`Missing if parameter in if-then-else in ${logContext}`);\r\n        evaluatedParams.if = false;\r\n      } else {\r\n        const evaluationResult = TermEvaluator.evaluateParam(term.params[ifParamIndex], ifParamIndex, runtime, contextSlots, operatorName, logContext);\r\n        evaluatedParams[evaluationResult.name] = evaluationResult.value;\r\n      }\r\n\r\n      const chosenBranch = evaluatedParams.if === true ? 'then' : 'else';\r\n      const chosenBranchIndex = term.params.findIndex(param => param.name === chosenBranch);\r\n      if (chosenBranchIndex !== -1) {\r\n        const evaluationResult = TermEvaluator.evaluateParam(term.params[chosenBranchIndex], chosenBranchIndex, runtime, contextSlots, operatorName, logContext)\r\n        evaluatedParams[evaluationResult.name] = evaluationResult.value;\r\n      }\r\n    } else if (operatorFunction === TermEvaluator.ifGuard) {\r\n      // special case for an array of guarded evaluations: evaluate guards up to the first hit, evaluate that branch only:\r\n\r\n      const branchesIndex = term.params.findIndex(param => param.name === 'branches');\r\n      if (branchesIndex === -1) {\r\n        TermEvaluator.logMessage(`Missing branches parameter in guarded-if in ${logContext}`);\r\n      } else {\r\n        const branchesArray = term.params[branchesIndex].value;\r\n        if (branchesArray === undefined || !Array.isArray(branchesArray)) {\r\n          TermEvaluator.logMessage(`Branches parameter in guarded-if does not contain an array as value in ${logContext}`);\r\n        } else {\r\n          // find the first branch with a passed guard:\r\n          const activeBranch = branchesArray.find((branchInfo, branchIndex) => {\r\n            if (branchInfo.guard === undefined || branchInfo.branch === undefined) {\r\n              TermEvaluator.logMessage(`Ignored incomplete guarded branch at index ${branchIndex} in guarded-if in ${logContext}`);\r\n              return false;\r\n            }\r\n            return TermEvaluator.evaluateTermInternal(branchInfo.guard, runtime, contextSlots, operatorName, logContext);\r\n          });\r\n\r\n          // none of the guards might pass:\r\n          if (activeBranch === undefined) {\r\n            TermEvaluator.logMessage(`No active branch in guarded-if in ${logContext}`);\r\n          } else {\r\n            // put evaluated branch of first passed guard into parameter structure for operator implementation:\r\n            evaluatedParams.activeBranch = TermEvaluator.evaluateTermInternal(activeBranch.branch, runtime, contextSlots, operatorName, logContext);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // standard case: evaluate all parameters\r\n      term.params.forEach((param, index) => {\r\n        const evaluationResult = TermEvaluator.evaluateParam(param, index, runtime, contextSlots, operatorName, logContext);\r\n        evaluatedParams[evaluationResult.name] = evaluationResult.value;\r\n      });\r\n    }\r\n\r\n    // call operator with evaluated parameters\r\n    const result = operatorFunction(evaluatedParams, runtime, contextSlots);\r\n    TermEvaluator.logCalculation(`${logContext}=>${result}`);\r\n    return result;\r\n\r\n  }\r\n\r\n  static isTermComplete(term, logContext) {\r\n    if (term === undefined) {\r\n      TermEvaluator.logMessage(`Undefined term in ${logContext}`);\r\n      return false;\r\n    }\r\n    if (term.operator === undefined) {\r\n      // terms without operator are object value parameters that should not be evaluated\r\n      return true;\r\n    }\r\n    if (term.params === undefined) {\r\n      TermEvaluator.logMessage(`Undefined parameters for operator ${term.operator} in term in ${logContext}`);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  static evaluateParam(param, index, runtime, contextSlots, operatorName, logContext) {\r\n    if (param === undefined) {\r\n      TermEvaluator.logMessage(`Undefined parameter at index ${index} in term in ${logContext}`);\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n    if (param.name === undefined) {\r\n      TermEvaluator.logMessage(`Parameter without name at index ${index} in term in ${logContext}`);\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n\r\n    const resultValue = (Array.isArray(param.value))\r\n      // manage arrays as param.value content: call evaluateTermInternal for each array element \r\n      // and create an array of these results in evaluatedParams[param.name]\r\n      ? param.value.map((value, index2, all) => TermEvaluator.evaluateTermInternal(value, runtime, contextSlots, `${logContext}-> parameter ${param.name}[${index2}] for operator ${operatorName}`))\r\n      : TermEvaluator.evaluateTermInternal(param.value, runtime, contextSlots, `${logContext}-> parameter ${param.name} for operator ${operatorName}`);\r\n\r\n    return {\r\n      name: param.name,\r\n      value: resultValue\r\n    }\r\n\r\n  }\r\n\r\n  static logMessage(message) {\r\n    console.warn(message);\r\n  }\r\n\r\n  static logCalculation(message) {\r\n    // console.log(message);\r\n  }\r\n\r\n\r\n  // ---- internal helper methods ------------------------------------------------------------------------------------------------------------\r\n  /**\r\n   * Private helper: Translate the format parameter value coming from the generator\r\n   * to a ValueFormatter format known to the calculator implementation.\r\n   */\r\n  static getValueFormatForCalculator(parameterValue) {\r\n    switch (parameterValue) {\r\n      case 'EN': return ValueFormatter.FORMATS.EN;\r\n      case 'DE': return ValueFormatter.FORMATS.DE;\r\n      default: return ValueFormatter.FORMATS.DE;\r\n    }\r\n  }\r\n\r\n  static checkLocalGroup(minDistance, maxDistance, memberComparePoints, nonMemberComparePoints) {\r\n    const membersNotKeepingDistance = memberComparePoints.filter((candidate, index) => !TermEvaluator.keepsDistanceToGroup(candidate, memberComparePoints, minDistance, maxDistance, index));\r\n    const nonMembersKeepingDistance = nonMemberComparePoints.filter(candidate => TermEvaluator.keepsDistanceToGroup(candidate, memberComparePoints, minDistance, maxDistance, undefined));\r\n\r\n    return membersNotKeepingDistance.length === 0 && nonMembersKeepingDistance.length === 0;\r\n\r\n  }\r\n\r\n  static keepsDistanceToGroup(candidate, group, minDistance, maxDistance, excludeIndex) {\r\n    return group.filter((groupMember, index) => excludeIndex !== index && !TermEvaluator.keepDistance(candidate, groupMember, minDistance, maxDistance)).length === 0;\r\n  }\r\n\r\n  static keepDistance(pointA, pointB, minDistance, maxDistance) {\r\n    const xDelta = pointA.x - pointB.x;\r\n    const yDelta = pointA.y - pointB.y;\r\n    const distance = Math.sqrt((xDelta * xDelta) + (yDelta * yDelta));\r\n    return minDistance < distance && distance < maxDistance;\r\n  }\r\n\r\n\r\n  static checkInRange(minX, maxX, minY, maxY, memberComparePoints, nonMemberComparePoints) {\r\n    const membersNotInRange = TermEvaluator.filterInRange(minX, maxX, minY, maxY, memberComparePoints);\r\n    const nonMembersInRange = TermEvaluator.filterOutOfRange(minX, maxX, minY, maxY, nonMemberComparePoints);\r\n\r\n    return membersNotInRange.length === 0 && nonMembersInRange.length === 0;\r\n\r\n  }\r\n\r\n  static filterInRange(minX, maxX, minY, maxY, points) {\r\n    return points.filter(point => minX > point.x || point.x > maxX || minY > point.y || point.y > maxY);\r\n  }\r\n\r\n  static filterOutOfRange(minX, maxX, minY, maxY, points) {\r\n    return points.filter(point => minX <= point.x && point.x <= maxX && minY <= point.y && point.y <= maxY);\r\n  }\r\n\r\n  static checkChildhood(container, children) {\r\n    const nonChildren = children.filter(candidatePath => !candidatePath.startsWith(container));\r\n    return nonChildren.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Get the positions of the children of the given container according to the given anchor point type: topLeft/center/bottomLeft/...\r\n   * The children are divided in two groups: \r\n   *  - the 'members' (i.e. those in the given memberIndexPaths set) and\r\n   *  - the 'non-members' (i.e. those not in the given memberIndexPaths set) \r\n   * \r\n   * @param {*} containerIndexPath \r\n   * @param {*} classifier \r\n   * @param {*} anchorPointType \r\n   * @param {*} memberIndexPaths \r\n   * @param {*} runtime \r\n   */\r\n  static getComparePointSets(containerIndexPath, classifier, anchorPointType, memberIndexPaths, runtime) {\r\n    const nonMemberIndexPaths = TermEvaluator.getIndexPathsForChildrenWithClassifier(containerIndexPath, classifier, runtime).filter(childPath => !memberIndexPaths.includes(childPath));\r\n    return {\r\n      memberComparePoints: TermEvaluator.getComparePointsForIndexPaths(memberIndexPaths, anchorPointType, runtime),\r\n      nonMemberComparePoints: TermEvaluator.getComparePointsForIndexPaths(nonMemberIndexPaths, anchorPointType, runtime)\r\n    }\r\n  }\r\n\r\n  static getIndexPathsForChildrenWithClassifier(containerIndexPath, classifier, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const matchingChildrenPaths = [];\r\n    const containerChildrenArray = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(containerIndexPath)).config.cbaChildren;\r\n    if (containerChildrenArray !== undefined) {\r\n      containerChildrenArray.forEach((childConfig, index) => {\r\n        if (childConfig.config.classifiers !== undefined && childConfig.config.classifiers.includes(classifier)) {\r\n          matchingChildrenPaths.push(IndexPathHelper.appendIndexToPageSegment(containerIndexPath, index));\r\n        }\r\n      });\r\n    }\r\n    return matchingChildrenPaths;\r\n  }\r\n\r\n  static getIndexPathsForUserDefIds(userDefIdPaths, runtime) {\r\n    return userDefIdPaths.map(userDefIdPath => PathTranslationHelper.getIndexPathForUserDefPath(userDefIdPath, runtime));\r\n  }\r\n\r\n  /**\r\n   * For each given display component instance get the point that we should use for position compoarisons\r\n   * according to the given anchor point type: topLeft/center/bottomLeft/...\r\n   * \r\n   * @param {} indexPaths The index paths of the display component instances.\r\n   * @param {*} anchorPointType The anchor point type.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static getComparePointsForIndexPaths(indexPaths, anchorPointType, runtime) {\r\n    return indexPaths.map(indexPath => TermEvaluator.getComparePointForIndexPath(indexPath, anchorPointType, runtime));\r\n  }\r\n\r\n  /**\r\n   * Get the point of the given display component instance that we should use for position compoarisons\r\n   * according to the given anchor point type: topLeft/center/bottomLeft/...\r\n   * \r\n   * @param {} indexPath The index path of the display component instance.\r\n   * @param {*} anchorPointType The anchor point type.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static getComparePointForIndexPath(indexPath, anchorPointType, runtime) {\r\n    const { componentStateManager, pageConfigurationsManager } = runtime;\r\n    return TermEvaluator.getComparePoint(\r\n      StateAttributeAccess.extractPosition(componentStateManager.findOrBuildStateForPathId(indexPath, runtime)),\r\n      pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config.position,\r\n      anchorPointType\r\n    );\r\n  }\r\n\r\n  static getComparePoint(point, positionFromConfig, anchorPointType) {\r\n    switch (anchorPointType) {\r\n      case 'topLeft':\r\n        return {\r\n          x: point.x,\r\n          y: point.y\r\n        }\r\n      case 'bottomLeft':\r\n        return {\r\n          x: point.x,\r\n          y: point.y + positionFromConfig.height\r\n        }\r\n      case 'topRight':\r\n        return {\r\n          x: point.x + positionFromConfig.width,\r\n          y: point.y\r\n        }\r\n      case 'bottomRight':\r\n        return {\r\n          x: point.x + positionFromConfig.width,\r\n          y: point.y + positionFromConfig.height\r\n        }\r\n      case 'center':\r\n        return {\r\n          x: point.x + (positionFromConfig.width / 2),\r\n          y: point.y + (positionFromConfig.height / 2)\r\n        }\r\n      default:\r\n        console.error(`Unknown anchor point type ${anchorPointType} -> use upper left corner instead.`);\r\n        return {\r\n          x: point.x,\r\n          y: point.y\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n  static findComponentByAbsoluteUserDefId(absoluteUserDefId, runtime) {\r\n    return runtime.componentDirectory.findComponent(PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime));\r\n  }\r\n\r\n  static currentNode(params, runtime) {\r\n    return TreeUtils.getCurrentNodePathId(params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static getVisitedNodes(params, runtime) {\r\n    return TreeUtils.getVisitedPathIds(params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static matchNodes(params, runtime) {\r\n    const { absoluteUserDefId, regularExpressions } = params;\r\n    const matchedNodes = [];\r\n    const nodePathIds = TreeUtils.getNodePathIds(absoluteUserDefId, runtime);\r\n    regularExpressions.forEach((pattern) => {\r\n      nodePathIds.forEach((nodePathId) => {\r\n        if (TermEvaluator.matches({\r\n          pattern,\r\n          candidate: nodePathId\r\n        }) && !matchedNodes.includes(nodePathId)) {\r\n          matchedNodes.push(nodePathId);\r\n        }\r\n      })\r\n    })\r\n\r\n    return matchedNodes;\r\n  }\r\n\r\n  static matchNodesWithColumns(params, runtime) {\r\n    const { absoluteUserDefId, regularExpressions } = params;\r\n    const matchedNodes = [];\r\n    if (regularExpressions.length > 0) {\r\n      const matchedNodesByPatternId = TermEvaluator.matchNodes({\r\n        absoluteUserDefId, regularExpressions: [regularExpressions[0]]\r\n      }, runtime);\r\n      const nodeToColumnValuesMap = TreeUtils.getColumnValuesMap(absoluteUserDefId, matchedNodesByPatternId, runtime);\r\n      regularExpressions.shift();\r\n      nodeToColumnValuesMap.forEach((values, key) => {\r\n        if (TermEvaluator.columnsMatch(regularExpressions, values)) {\r\n          matchedNodes.push(key);\r\n        }\r\n      });\r\n    } else {\r\n      console.log(\"Empty list of regular expressions!\");\r\n    }\r\n\r\n    return matchedNodes;\r\n  }\r\n\r\n  static columnsMatch = (patterns, candidates) => {\r\n    let hasMatch = true;\r\n    if (patterns === undefined || patterns === null\r\n      || patterns.length === 0) {\r\n      return hasMatch;\r\n    }\r\n\r\n    for (let i = 0; i < patterns.length; i += 1) {\r\n      if (!TermEvaluator.matches({\r\n        pattern: patterns[i],\r\n        candidate: candidates[i]\r\n      })) {\r\n        hasMatch = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return hasMatch;\r\n  }\r\n\r\n  static treeAction(params, runtime, callback) {\r\n    const { absoluteUserDefId, targetNode } = params;\r\n    const nodePathIds = TermEvaluator.matchNodes(\r\n      {\r\n        absoluteUserDefId,\r\n        regularExpressions: [targetNode]\r\n      }, runtime\r\n    );\r\n    if (nodePathIds.length === 1) {\r\n      callback(absoluteUserDefId, nodePathIds[0], runtime);\r\n    }\r\n  }\r\n\r\n  static treeCopy(params, runtime) {\r\n    TermEvaluator.treeAction(params, runtime, TreeUtils.treeCopyCurrentNode);\r\n  }\r\n\r\n  static treeMove(params, runtime) {\r\n    TermEvaluator.treeAction(params, runtime, TreeUtils.treeMoveCurrentNode);\r\n  }\r\n\r\n}\r\n","import { useDrag, useDrop } from 'react-dnd';\r\nimport CommonConfigHelper from './CommonConfigHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport TermEvaluator from '../eval/TermEvaluator';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\n\r\n\r\n/**\r\n * All available drag&drop-content 'items' that we can move around via drag&drop.\r\n */\r\nexport const DndItemTypes = {\r\n  VALUE_DISPLAY: 'valueDisplay',\r\n}\r\n\r\n/**\r\n * Helper methods used for drag and drop event handling.\r\n */\r\nexport default class DragAndDropHelper {\r\n\r\n  // -------- public API ----------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Add the 'drag' part of a drag&drop functionality to a component renderer.\r\n   * \r\n   * @param {*} config The config structure of the component from the page configuration description.\r\n   * @param {String} path The index path of the component's state in the ComponentStateManager.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {String} itemType The type of the dragged item structure.\r\n   * @param {*} previewData The data that should be available for the preview in the drag layer.\r\n   * @returns The array returned by the useDrag call.\r\n   */\r\n  static addDrag(config, path, runtime, itemType, previewData) {\r\n    return useDrag({\r\n      item: {\r\n        type: itemType\r\n      },\r\n      begin: (monitor) => {\r\n        const dragAndDropConfig = CommonConfigHelper.getDragAndDrop(config);\r\n        const { sender: senderConfig } = dragAndDropConfig;\r\n        const { data, traceType, event: statemachineEvent } = senderConfig;\r\n        const dragAndDropData = {\r\n          type: itemType,\r\n          previewData,\r\n          indexPath: path,\r\n          senderData: data,\r\n          traceType,\r\n          startPosition: monitor.getInitialClientOffset()\r\n        };\r\n        DragAndDropHelper.triggerStatemachineEvent(statemachineEvent, runtime);\r\n        return dragAndDropData;\r\n      },\r\n      canDrag: monitor => DragAndDropHelper.isDragAndDropSender({\r\n        config, runtime, path\r\n      }),\r\n      collect: monitor => ({\r\n        idDragging: monitor.isDragging()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Add the 'drop' part of a drag&drop functionality to a component renderer.\r\n   * \r\n   * @param {*} config The config structure of the component from the page configuration description.\r\n   * @param {String} path The index path of the component's state in the ComponentStateManager.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {String} itemType The item type that we should accept as drop content.\r\n   * @param {bool} dropsOfMyChildrenOnly Should we restrict drops to children of the drop target component?\r\n   * @returns The array returned by the useDrop call.\r\n   */\r\n  static addDrop(config, path, runtime, itemType, dropsOfMyChildrenOnly) {\r\n    return useDrop({\r\n      accept: itemType,\r\n      drop: (item, monitor) => {\r\n        const transferredData = item;\r\n        const dragAndDropConfig = CommonConfigHelper.getDragAndDrop(config);\r\n        const { receiver: receiverConfig } = dragAndDropConfig;\r\n        const { actionTerms, traceType, event: statemachineEvent } = receiverConfig;\r\n        const endPosition = monitor.getClientOffset();\r\n        runtime.replayStepMonitor.incrementReplayStep();\r\n        const lastEvaluationResult = DragAndDropHelper.evaluateActionTerms(actionTerms, transferredData, runtime);\r\n        DragAndDropHelper.relocateIfNecessary(lastEvaluationResult, endPosition, transferredData, runtime);\r\n        DragAndDropHelper.triggerStatemachineEvent(statemachineEvent, runtime);\r\n        DragAndDropHelper.logAction(transferredData, path, endPosition, traceType, lastEvaluationResult, runtime);\r\n      },\r\n      canDrop: (item, monitor) => {\r\n        if (dropsOfMyChildrenOnly) {\r\n          const transferredData = item;\r\n          const senderIndexPath = transferredData.indexPath;\r\n          if (path !== IndexPathHelper.dropIndexFromPageSegment(senderIndexPath)) {\r\n            return false;\r\n          }\r\n        }\r\n        return DragAndDropHelper.isDragAndDropReceiver({\r\n          config, runtime, path\r\n        });\r\n      },\r\n      collect: monitor => (\r\n        {\r\n          dragIsOver: monitor.isOver({\r\n            shallow: true\r\n          }),\r\n          dragCanDrop: monitor.canDrop()\r\n        }\r\n      )\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add attributes to the given style configuration that give feedback\r\n   * highlighting a component instance as eligible drop target.\r\n   * \r\n   * @param {*} style The style attributes list to be modified.\r\n   * @param {*} props The props of the component instance.\r\n   */\r\n  static addCanDropStyleAttributes(style, props) {\r\n    const { dragIsOver, dragCanDrop } = props;\r\n    if (dragIsOver && dragCanDrop) {\r\n      CommonConfigHelper.setStyleAttribute(style, \"boxShadow\", \"0 0 8px 0 rgba(0, 0, 0, 0.5) inset\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add attributes to the given style configuration that give feedback\r\n   * highlighting a component instance as current drag source.\r\n   * \r\n   * @param {*} style The style attributes list to be modified.\r\n   * @param {*} props The props of the component instance.\r\n   */\r\n  static addIsDraggingStyleAttributes(style, props) {\r\n    const { isDragging } = props;\r\n    if (isDragging) {\r\n      CommonConfigHelper.setStyleAttribute(style, \"boxShadow\", \"0 0 8px 0 rgba(0, 0, 0, 0.5) inset\");\r\n    }\r\n  }\r\n\r\n\r\n  // -------- private stuff ----------------------------------------------------------------\r\n\r\n  /**\r\n   * Can the component instance start a drag currently?\r\n   * \r\n   * @param {*} props The full props structure of the component instance.\r\n   */\r\n  static isDragAndDropSender(props) {\r\n    const { config, runtime, path } = props;\r\n\r\n    // The TermEvaluator operator might declare a component to be a sender \r\n    // even though it has no proper drag&drop configuration.\r\n    // -> We check the necessary configuration in any case:\r\n    const dragAndDropInConfig = CommonConfigHelper.getDragAndDrop(config);\r\n    if (dragAndDropInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const { sender: senderInConfig } = dragAndDropInConfig;\r\n    if (senderInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    // Drag and drop participation can be changed by the TermEvaluator operators.\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n    const dragAndDropInState = StateAttributeAccess.extractDragAndDrop(pathState);\r\n    return dragAndDropInState.isSender;\r\n\r\n  }\r\n\r\n  /**\r\n   * Can the component instance receive a drop currently?\r\n   * \r\n   * @param {*} props The full props structure of the component instance.\r\n   */\r\n  static isDragAndDropReceiver(props) {\r\n    const { config, runtime, path } = props;\r\n\r\n    // The TermEvaluator operator might declare a component to be a receiver \r\n    // even though it has no proper drag&drop configuration.\r\n    // -> We check the necessary configuration in any case:\r\n    const dragAndDropInConfig = CommonConfigHelper.getDragAndDrop(config);\r\n    if (dragAndDropInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const { receiver: receiverInConfig } = dragAndDropInConfig;\r\n    if (receiverInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    // Drag and drop participation can be changed by the TermEvaluator operators.\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n    const dragAndDropInState = StateAttributeAccess.extractDragAndDrop(pathState);\r\n    return dragAndDropInState.isReceiver;\r\n\r\n  }\r\n\r\n\r\n  static evaluateActionTerms(actionTerms, transferredData, runtime) {\r\n    let lastEvaluationResult;\r\n    if (actionTerms !== undefined) {\r\n      actionTerms.forEach((term, index) => {\r\n        lastEvaluationResult = TermEvaluator.evaluateTerm(term, runtime, [transferredData], `drag&drop[${index}]`);\r\n      });\r\n    }\r\n    return lastEvaluationResult;\r\n  }\r\n\r\n  static relocateIfNecessary(lastEvaluationResult, endPosition, transferredData, runtime) {\r\n    if (lastEvaluationResult !== 'relocate') {\r\n      return;\r\n    }\r\n    const { startPosition } = transferredData;\r\n    if (endPosition === undefined || endPosition === null || startPosition === undefined || startPosition === null) {\r\n      console.warn(`Drag and drop without proper coordinates! -> We do not move the component instance.`);\r\n      return;\r\n    }\r\n    const translationX = endPosition.x - startPosition.x;\r\n    const translationY = endPosition.y - startPosition.y;\r\n    const { componentStateManager } = runtime;\r\n    const senderIndexPath = transferredData.indexPath;\r\n    const pathState = componentStateManager.findOrBuildStateForPathId(senderIndexPath, runtime);\r\n    const position = StateAttributeAccess.extractPosition(pathState);\r\n\r\n    position.x += translationX / runtime.app.state.scaleValue;\r\n    position.y += translationY / runtime.app.state.scaleValue;\r\n\r\n    StateAttributeAccess.setPosition(pathState, position);\r\n\r\n    componentStateManager.registerStateByPathId(senderIndexPath, pathState, runtime);\r\n    RenderingHelper.triggerRenderingViaPath(senderIndexPath, runtime);\r\n  }\r\n\r\n  static triggerStatemachineEvent(statemachineEvent, runtime) {\r\n    if (statemachineEvent !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(statemachineEvent);\r\n    }\r\n  }\r\n\r\n  static logAction(transferredData, indexPath, endPosition, traceType, operation, runtime) {\r\n    const timestamp = new Date();\r\n    const receiverUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\r\n    const senderUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(transferredData.indexPath, runtime);\r\n\r\n    runtime.incidentsAccumulator.userInteraction(timestamp.getTime(), undefined, runtime);\r\n    runtime.traceLogBuffer.reportEvent('DragAndDropReceive', timestamp, {\r\n      senderIndexPath: transferredData.indexPath,\r\n      senderUserDefIdPath,\r\n      senderUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(senderUserDefIdPath),\r\n      receiverIndexPath: indexPath,\r\n      receiverUserDefIdPath,\r\n      receiverUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(receiverUserDefIdPath),\r\n      startPosition: transferredData.startPosition,\r\n      endPosition,\r\n      sendingType: transferredData.traceType,\r\n      receivingType: traceType,\r\n      operation\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaInterpreter from './CbaInterpreter';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport DragAndDropHelper, { DndItemTypes } from '../config/DragAndDropHelper';\nimport RenderingHelper from './RenderingHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport Utils from '../utils/Utils';\n\n/**\n * A 'bare function component' used to manage the drag&drop functionality for the CbaContainer component.\n */\nconst ContainerRenderer = React.forwardRef(({ onClick, onContextMenu, title, style, className, onScroll, children, config, path, runtime }, ref) => {\n\n  const [dropCollectedProps, drop] = DragAndDropHelper.addDrop(config, path, runtime, DndItemTypes.VALUE_DISPLAY, true);\n  drop(ref);\n\n  const extendedStyle = Utils.safeDeepCopy(style);\n  DragAndDropHelper.addCanDropStyleAttributes(extendedStyle, dropCollectedProps);\n\n  return (\n    <div\n      ref={ref}\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      title={title}\n      style={extendedStyle}\n      data-cba-id={config.pageEditId}\n      className={className}\n      onScroll={onScroll}\n    >\n      {children}\n    </div>\n  );\n})\n\n\nexport default class CbaContainer extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.containerRendererRef = React.createRef();\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { runtime, config, path } = this.props;\n    const { redirectClickEventsReference } = config;\n    if (redirectClickEventsReference !== undefined) {\n      const requestingComponentPathWithoutLastPageSegment = IndexPathHelper.dropPageSegmentFromPath(path);\n      const redirectClickEventsReferencePath = IndexPathHelper.appendPageSegmentsToPath(requestingComponentPathWithoutLastPageSegment, redirectClickEventsReference);\n      runtime.eventEmitter.emit(`redirectClickEvent-${redirectClickEventsReferencePath}`, redirectClickEventsReferencePath);\n      return;\n    }\n\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  render() {\n    const { config, runtime, path: controllerPath, orientation } = this.props;\n\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = StateAttributeAccess.extractSelected(pathState);\n\n    const delegates = config.cbaChildren.map((child, index) => {\n      const childPath = IndexPathHelper.appendIndexToPageSegment(controllerPath, index);\n      return (\n        <CbaInterpreter\n          key={childPath}\n          config={child}\n          path={childPath}\n          runtime={runtime}\n          orientation={orientation}\n        />\n      )\n    });\n\n    const containerStyle = CommonConfigHelper.buildStyleByIndexPath(controllerPath, config, selectedState, orientation, runtime);\n\n    return (\n      <ContainerRenderer\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        title={CommonConfigHelper.buildTitle(config, pathState)}\n        style={containerStyle}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"overflow-hidden\")}\n        onScroll={event => event.stopPropagation()}\n        config={config}\n        path={controllerPath}\n        runtime={runtime}\n        ref={this.containerRendererRef}\n      >\n        {delegates}\n      </ContainerRenderer>\n    )\n\n  }\n\n}\n\nCbaContainer.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(true)),\n    {\n      redirectClickEventsReference: PropTypes.string,\n    }\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n}\n\nContainerRenderer.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  onContextMenu: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  style: PropTypes.object.isRequired,\n  className: PropTypes.string.isRequired,\n  onScroll: PropTypes.func.isRequired,\n  children: PropTypes.array.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(true))\n  ).isRequired,\n  path: PropTypes.string.isRequired,\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport RenderingHelper from './RenderingHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\n\nexport default class CbaRectangle extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.lineOnClickHandler = this.lineOnClickHandler.bind(this);\n    this.containerOnClickHandler = this.containerOnClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  lineOnClickHandler(event) {\n    const { config } = this.props;\n    const { blockEvents } = config;\n\n    if (!blockEvents) {\n      CommonActionsHelper.doStandardOnClick(event, undefined, this);\n    }\n  }\n\n  containerOnClickHandler(event) {\n    const { config } = this.props;\n    const { blockEvents } = config;\n\n    if (blockEvents) {\n      event.stopPropagation();\n      CommonActionsHelper.doStandardOnClick(event, undefined, this);\n    }\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  buildLineDiv(style, config, pathState) {\n    return (\n      <div\n        onClick={this.lineOnClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        title={CommonConfigHelper.buildTitle(config, pathState)}\n        style={style}\n        className=\"overflow-hidden\"\n      />\n    )\n  }\n\n  render() {\n    const { config, runtime, path: controllerPath, orientation } = this.props;\n\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = StateAttributeAccess.extractSelected(pathState);\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(controllerPath, config, selectedState, orientation, runtime);\n\n    const { lineWidth, pageEditId } = config;\n\n    const containerStyle = Object.assign({}, style, {\n      backgroundColor: \"rgba(255, 255, 255, 0)\",\n      cursor: undefined\n    })\n\n    const lineWidthString = `${lineWidth}px`;\n\n    const baseLineStyle = {\n      position: \"absolute\",\n      backgroundColor: style.backgroundColor,\n      width: lineWidthString,\n      height: lineWidthString,\n      cursor: style.cursor\n    }\n\n    const northStyle = Object.assign({}, baseLineStyle, {\n      top: 0,\n      left: 0,\n      width: \"100%\"\n    });\n\n    const eastStyle = Object.assign({}, baseLineStyle, {\n      top: 0,\n      right: 0,\n      height: \"100%\"\n    });\n\n    const southStyle = Object.assign({}, baseLineStyle, {\n      bottom: 0,\n      left: 0,\n      width: \"100%\"\n    });\n\n    const westStyle = Object.assign({}, baseLineStyle, {\n      top: 0,\n      left: 0,\n      height: \"100%\"\n    });\n\n    return (\n      <div\n        style={containerStyle}\n        data-cba-id={pageEditId}\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\n        onClick={this.containerOnClickHandler}\n      >\n        {this.buildLineDiv(northStyle, config, pathState)}\n        {this.buildLineDiv(southStyle, config, pathState)}\n        {this.buildLineDiv(eastStyle, config, pathState)}\n        {this.buildLineDiv(westStyle, config, pathState)}\n      </div>\n    )\n  }\n\n}\n\n\nCbaRectangle.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        lineWidth: PropTypes.number.isRequired,\n        blockEvents: PropTypes.bool.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n}\n","import React, { Component, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport DragAndDropHelper, { DndItemTypes } from '../config/DragAndDropHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport RenderingHelper from './RenderingHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport Utils from '../utils/Utils';\n\n/**\n * A 'bare function component' used to manage the drag&drop functionality for the CbaSimpleTextField component.\n */\nfunction SimpleTextFieldRenderer({ onClick, onContextMenu, onSelect, title, style, value, className, config, path, runtime }) {\n\n  const ref = useRef(null);\n  const [dragCollectedProps, drag, preview] = DragAndDropHelper.addDrag(\n    config, path, runtime, DndItemTypes.VALUE_DISPLAY, {\n      title,\n      style,\n      value\n    }\n  );\n\n  preview(getEmptyImage(), {\n    captureDraggingState: true\n  });\n\n  const [dropCollectedProps, drop] = DragAndDropHelper.addDrop(config, path, runtime, DndItemTypes.VALUE_DISPLAY, false);\n  drag(drop(ref));\n\n  const extendedStyle = Utils.safeDeepCopy(style);\n  DragAndDropHelper.addIsDraggingStyleAttributes(extendedStyle, dragCollectedProps);\n  DragAndDropHelper.addCanDropStyleAttributes(extendedStyle, dropCollectedProps);\n\n  if (config.renderAsDiv) {\n    CommonConfigHelper.setStyleAttribute(extendedStyle, \"whiteSpace\", \"pre-wrap\");\n    CommonConfigHelper.setStyleAttribute(extendedStyle, \"overflow\", \"auto\");\n\n    return (\n      <div\n        ref={ref}\n        readOnly\n        onClick={onClick}\n        onContextMenu={onContextMenu}\n        onSelect={onSelect}\n        title={title}\n        style={extendedStyle}\n        data-cba-id={config.pageEditId}\n        className={className}\n      >\n        {value}\n      </div>\n    )\n  }\n\n  // We use a textarea instead of a label since it preserves line breaks etc. \n  return (\n    <textarea\n      ref={ref}\n      readOnly\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      onSelect={onSelect}\n      title={title}\n      style={extendedStyle}\n      data-cba-id={config.pageEditId}\n      value={value}\n      className={className}\n    />\n  )\n}\n\nexport default class CbaSimpleTextField extends Component {\n\n  componentDidMount() {\n    const { config, runtime } = this.props;\n    const { textInputReferencePath } = config;\n    if (textInputReferencePath !== undefined) {\n      runtime.eventEmitter.addListener(`inputFieldUpdated-${textInputReferencePath}`, this.onInputFieldUpdate.bind(this));\n    }\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onInputFieldUpdate = (newTextValue) => {\n    const pathState = ComponentStateHelper.getState(this);\n    StateAttributeAccess.setTextValue(pathState, newTextValue);\n    ComponentStateHelper.registerState(this, pathState);\n    RenderingHelper.triggerRendering(this);\n  }\n\n  onClickHandler = (event) => {\n    const { runtime, path, config } = this.props;\n    const { redirectClickEventsReference } = config;\n    if (redirectClickEventsReference !== undefined) {\n      const requestingComponentPathWithoutLastPageSegment = IndexPathHelper.dropPageSegmentFromPath(path);\n      const redirectClickEventsReferencePath = IndexPathHelper.appendPageSegmentsToPath(requestingComponentPathWithoutLastPageSegment, redirectClickEventsReference);\n      runtime.eventEmitter.emit(`redirectClickEvent-${redirectClickEventsReferencePath}`, redirectClickEventsReferencePath);\n      return;\n    }\n\n    if (!config.renderAsDiv) {\n      CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, true, undefined, undefined, runtime);\n    }\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  onSelectionHandler = (event) => {\n    const { runtime, path, config } = this.props;\n    const { suppressSelections } = config;\n\n    if (suppressSelections) {\n      event.target.selectionStart = event.target.selectionEnd;\n    } else {\n      CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, true, undefined, undefined, runtime);\n    }\n\n  }\n\n  static addAttributesToInitialState(result, config, runtime) {\n    const { textInputReferencePath } = config;\n    if (textInputReferencePath !== undefined) {\n      const filteredPaths = runtime.componentStateManager.filterExistingPathIds(candidate => IndexPathHelper.getLastPageSegmentFromPath(candidate) === textInputReferencePath);\n      if (filteredPaths.length > 0) {\n        result.textValue = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTextValue, filteredPaths[0], runtime);\n      } else {\n        const providerComponent = runtime.pageConfigurationsManager.findConfigurationForPageSegment(textInputReferencePath);\n        const { text } = providerComponent.config;\n        result.textValue = text.label;\n      }\n    }\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n    const { suppressSelections } = config;\n    const additionalCssClass = suppressSelections ? \"hide-selection\" : \"\";\n    const pathState = ComponentStateHelper.getState(this);\n\n    const text = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\n    CommonConfigHelper.setStyleAttribute(style, \"resize\", \"none\");\n\n    // override browser default padding value for textarea: \n    if (config.position.padding === undefined) {\n      CommonConfigHelper.setStyleAttribute(style, \"padding\", \"0px\");\n    }\n\n    return (\n      <SimpleTextFieldRenderer\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        onSelect={this.onSelectionHandler}\n        title={CommonConfigHelper.buildTitle(config, pathState)}\n        style={style}\n        value={text}\n        className={CommonConfigHelper.getCssClassNamesValue(config, additionalCssClass)}\n        config={config}\n        path={path}\n        runtime={runtime}\n      />\n    )\n  }\n\n}\n\n\nCbaSimpleTextField.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        textInputReferencePath: PropTypes.string,\n        renderAsDiv: PropTypes.bool,\n        redirectClickEventsReference: PropTypes.string\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n}\n\nSimpleTextFieldRenderer.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  onContextMenu: PropTypes.func.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  style: PropTypes.object.isRequired,\n  value: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    {\n      dragAndDrop: PropTypes.object,\n      pageEditId: PropTypes.string,\n      renderAsDiv: PropTypes.bool\n    }\n  ).isRequired,\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n}\n","import React, { Component } from 'react';\nimport './CbaButton.css';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport MenuBuildHelper from \"./MenuBuildHelper\";\nimport SpecialClickActionsHelper from \"./SpecialClickActionsHelper\";\nimport CommonActionsHelper from \"./CommonActionsHelper\";\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport TermEvaluator from '../eval/TermEvaluator';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\nimport Utils from \"../utils/Utils\";\nimport MenuItemTree from './MenuItemTree';\n\n/**\n * A display component that displays a button.\n */\nexport default class CbaButton extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.backgroundImage = {\n      hover: \"\",\n      pressed: \"\",\n    }\n  }\n\n  componentDidMount() {\n    const { runtime, path } = this.props;\n    runtime.eventEmitter.addListener(`redirectClickEvent-${path}`, this.onRedirectClickEvent.bind(this));\n    RenderingHelper.onMount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  componentWillUnmount() {\n    const { runtime, path } = this.props;\n    runtime.eventEmitter.removeAllListeners(`redirectClickEvent-${path}`);\n    RenderingHelper.onUnmount(this);\n  }\n\n  onRedirectClickEvent = (redirectClickEventTarget) => {\n    const { path } = this.props;\n    if (path === redirectClickEventTarget) {\n      this.onMouseDown();\n      this.onMouseUp();\n      this.onClickHandler();\n    }\n  }\n\n  onMouseDown = (event) => {\n    const { config, runtime, path } = this.props;\n    if (config.toggleType === \"upDown\") {\n      const selectedImage = Utils.isEmptyObject(config.image.selected) ? \"none\" : config.image.selected;\n      this.backgroundImage.pressed = selectedImage;\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n    return false;\n  }\n\n  onMouseUp = (event) => {\n    const { config, runtime, path } = this.props;\n\n    if (config.toggleType === \"upDown\") {\n      this.backgroundImage.pressed = \"\";\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n    return false;\n  }\n\n  onMouseEnter = (event) => {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\n\n    if (config.image.hover && !isDisabled) {\n      this.backgroundImage.hover = config.image.hover;\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n    return false;\n  }\n\n  onMouseLeave = (event) => {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\n\n    if ((config.image.hover && !isDisabled) || this.backgroundImage.pressed) {\n      this.backgroundImage.hover = \"\";\n      // if user leaves button frame with mouse clicked, then reset pressed state.\n      this.backgroundImage.pressed = \"\";\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n    return false;\n  }\n\n  getBackgroundImage = () => {\n    const { runtime } = this.props;\n\n    if (this.backgroundImage.pressed === \"none\") {\n      return \"none\";\n    }\n\n    if (this.backgroundImage.pressed) {\n      return `url(${CommonConfigHelper.getProperResourcePath(this.backgroundImage.pressed, runtime)})`;\n    }\n\n    if (this.backgroundImage.hover) {\n      return `url(${CommonConfigHelper.getProperResourcePath(this.backgroundImage.hover, runtime)})`;\n    }\n\n    return \"\";\n  }\n\n  onClickHandler = (event) => {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.stopEventPropagation(event);\n    if (!CbaButton.isClipboardManagerAction(config.selectionHandlerType)) {\n      CommonActionsHelper.signalFocusChangeToClipboardManager(path, runtime);\n    }\n\n    const traceDetails = CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState);\n    if (config.subtype !== undefined) {\n      traceDetails.subtype = config.subtype;\n    }\n\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      traceDetails,\n      event, runtime);\n\n    runtime.replayStepMonitor.incrementReplayStep();\n\n    // set selected and visited state:\n    this.updateStateAndTriggerRendering(pathState);\n\n    // run configured click event handler:\n    const { selectionHandlerParam, attachedScale, increment } = config;\n    const { path: indexPath } = this.props;\n    const triggeringType = 'button';\n\n    switch (config.selectionHandlerType) {\n      case 'none':\n        SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n        break;\n      case 'switchPage':\n        runtime.taskManager.switchPage(\n          selectionHandlerParam.page,\n          undefined, undefined,\n          selectionHandlerParam.pageAreaType,\n          selectionHandlerParam.pageAreaName,\n          undefined, undefined, undefined, undefined\n        );\n        break;\n      case 'switchTask':\n        runtime.taskManager.switchTaskIntraItem(selectionHandlerParam.task);\n        break;\n      case 'switchTest':\n        runtime.taskManager.switchTaskInterTest(\n          selectionHandlerParam.test,\n          selectionHandlerParam.item,\n          selectionHandlerParam.task,\n        );\n        break;\n      case 'logTaskResult':\n        console.log(\"=== current task result: ===\", runtime.taskManager.getCurrentTaskResults());\n        break;\n      case 'recommend':\n        runtime.recommendationsManager.setRecommendations([{\n          testName: selectionHandlerParam.test,\n          taskName: selectionHandlerParam.task,\n        }]);\n        break;\n      case 'cut':\n        SpecialClickActionsHelper.cut(triggeringType, indexPath, runtime);\n        break;\n      case 'copy':\n        SpecialClickActionsHelper.copy(triggeringType, indexPath, runtime);\n        break;\n      case 'paste':\n        SpecialClickActionsHelper.paste(triggeringType, indexPath, runtime);\n        break;\n      case 'next_task':\n        SpecialClickActionsHelper.nextTask(runtime);\n        break;\n      case 'back_task':\n        SpecialClickActionsHelper.backTask(runtime);\n        break;\n      case 'cancel_task':\n        SpecialClickActionsHelper.cancelTask(runtime);\n        break;\n      case 'startFullscreen':\n        SpecialClickActionsHelper.startFullscreen(runtime);\n        break;\n      case 'stopFullscreen':\n        SpecialClickActionsHelper.stopFullscreen(runtime);\n        break;\n      case 'close':\n        SpecialClickActionsHelper.close(indexPath, runtime);\n        break;\n      case 'closeAndNextTask':\n        SpecialClickActionsHelper.close(indexPath, runtime);\n        SpecialClickActionsHelper.nextTask(runtime);\n        break;\n      case 'menu': {\n        const buttonBoundingRect = MenuItemTree.buildTriggerBoundingRect(event);\n        const menuPosition = CommonActionsHelper.computeMenuPosition(runtime, buttonBoundingRect.left, buttonBoundingRect.bottom);\n        event.clientX = menuPosition.clientX;\n        event.clientY = menuPosition.clientY;\n\n        runtime.contextMenu.openMenuItemTreeWithDynamicConfig(\n          MenuBuildHelper.buildMenuTreeItemConfiguration(\n            selectionHandlerParam.contextMenu,\n            event,\n            indexPath,\n            StateAttributeAccess.extractDefaultLinkReceiver(pathState),\n            runtime\n          ),\n          runtime\n        );\n        break;\n      }\n      case 'back':\n        SpecialClickActionsHelper.back(indexPath, {}, runtime);\n        break;\n      case 'forward':\n        SpecialClickActionsHelper.forward(indexPath, {}, runtime);\n        break;\n      case 'home':\n        SpecialClickActionsHelper.home(indexPath, {}, runtime);\n        break;\n      case 'addBookmark':\n        SpecialClickActionsHelper.addBookmark('button', indexPath, {}, runtime);\n        break;\n      case 'manageBookmarks':\n        SpecialClickActionsHelper.manageBookmark('button', indexPath, selectionHandlerParam, runtime);\n        break;\n      case 'debugOperator':\n        TermEvaluator.evaluateTerm(selectionHandlerParam, runtime, [], 'callViaDebugButton');\n        break;\n      default:\n        if (config.selectionHandlerType !== undefined) {\n          console.error(`Unknown selection handler type in button: ${config.selectionHandlerType}`);\n        }\n    }\n\n    if (attachedScale !== undefined) {\n      SpecialClickActionsHelper.incrementScale(indexPath, attachedScale, increment, runtime);\n    }\n\n    // send statemachine event depending on old toggle state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  static isClipboardManagerAction(selectionHandlerType) {\n    return selectionHandlerType === 'cut' || selectionHandlerType === 'copy' || selectionHandlerType === 'paste' || selectionHandlerType === 'menu';\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering = (pathState) => {\n    const { runtime, config, path } = this.props;\n\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    StateAttributeAccess.setVisited(pathState, true);\n\n    if (config.toggleType !== 'none') {\n      // Flip the pressed state: 'yes' <-> 'no'\n      SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n    } else {\n      // save state and rerender myself: color may change due to visited flag!\n      runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n  }\n\n  addFlexTextAlignmentToStyles = (styleObject, config) => {\n    const alignment = config.font.alignmentHorizontal;\n    let flexAlignment = \"\";\n\n    switch (alignment) {\n      case \"left\": flexAlignment = \"flex-start\"; break;\n      case \"center\": flexAlignment = \"center\"; break;\n      case \"right\": flexAlignment = \"flex-end\"; break;\n      default: flexAlignment = \"center\"; break;\n    }\n\n    return Object.assign(styleObject, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: flexAlignment\n    });\n  }\n\n  onClickFrozenHandler = (event) => {\n    const { runtime, path, config } = this.props;\n    let componentType = 'Button';\n    // subtype values prefixed by Button_: back, forward, home, tab, taskbar, taskbarStart\n    // subtype values not prefixed: menu, bookmark\n    if (config.subtype !== undefined) {\n      componentType += `_${config.subtype}`;\n      if (config.subtype === 'menu') {\n        componentType = 'Menu';\n      }\n      if (config.subtype === 'bookmark') {\n        componentType = 'Bookmark';\n      }\n    }\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, componentType);\n    event.stopPropagation();\n  }\n\n  render() {\n    const { runtime, config, path, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const pressedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    const style = this.addFlexTextAlignmentToStyles(CommonConfigHelper.buildStyleByIndexPath(path, config, pressedState, orientation, runtime), config);\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\n    const { toggleType, highlight, position: positonInConfig } = config;\n\n    if (toggleType === \"upDown\") {\n      CommonConfigHelper.setStyleAttribute(style, \"borderStyle\", pressedState ? \"inset\" : \"outset\");\n    }\n\n    let className = '';\n    switch (highlight) {\n      case 'up': className = 'CbaButton-highlight-up';\n        break;\n      case 'down': className = 'CbaButton-highlight-down';\n        break;\n      default: className = 'CbaButton';\n        break;\n    }\n    const displayText = RenderingHelper.extractMultilineText(CommonConfigHelper.buildDisplayText(config, pathState, runtime));\n\n    // Disabled state does not support hovered/pressed states.\n    // Also, mouseleave events do not fire for disabled buttons.\n    // Overriding button states here.\n    if (isDisabled) {\n      this.backgroundImage.hover = \"\";\n      this.backgroundImage.pressed = \"\";\n    }\n\n    const backgroundImageStateResult = this.getBackgroundImage();\n    if (backgroundImageStateResult) {\n      CommonConfigHelper.setStyleAttribute(style, \"backgroundImage\", backgroundImageStateResult);\n    }\n\n    return (\n      <React.Fragment>\n        <button\n          className={CommonConfigHelper.getCssClassNamesValue(config, className)}\n          onClick={this.onClickHandler}\n          onContextMenu={this.onContextMenuHandler}\n          title={CommonConfigHelper.buildTitle(config, pathState)}\n          style={style}\n          data-cba-id={config.pageEditId}\n          onMouseDown={this.onMouseDown}\n          onMouseUp={this.onMouseUp}\n          onMouseEnter={this.onMouseEnter}\n          onMouseLeave={this.onMouseLeave}\n          type=\"button\"\n          disabled={isDisabled}\n          tabIndex={config.tabIndex}\n        >\n          {CommonConfigHelper.getImageTag(pathState, config, pressedState, runtime)}\n          <span style={{\n            maxHeight: positonInConfig.height\n          }}\n          >\n            {displayText}\n          </span>\n        </button>\n        {isDisabled && <div className=\"CbaButton-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(style)} />}\n      </React.Fragment>\n    );\n  }\n\n}\n\nCbaButton.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        selectionHandlerParam: PropTypes.object,\n        selectionHandlerType: PropTypes.oneOf([\n          'none',\n          'switchPage', 'switchTask', 'switchTest',\n          'logTaskResult', 'recommend',\n          'cut', 'copy', 'paste',\n          'next_task', 'back_task', 'cancel_task',\n          'startFullscreen', 'stopFullscreen',\n          'close',\n          'menu',\n          'back', 'forward', 'home',\n          'addBookmark', 'manageBookmarks',\n          'debugOperator'\n        ]).isRequired,\n        highlight: PropTypes.oneOf(['none', 'horizontal', 'vertical']).isRequired,\n        toggleType: PropTypes.oneOf(['none', 'upDown', 'colorChange']).isRequired,\n        subtype: PropTypes.string\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\nimport './CbaRichTextField/css/repeatable.css';\n\nconst DEFAULT_LABEL_POSITION = 10;\n\nexport default class CbaRadioButton extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    const { runtime, path } = this.props;\n    runtime.eventEmitter.addListener(`redirectClickEvent-${path}`, this.onRedirectClickEvent.bind(this));\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    const { runtime, path } = this.props;\n    runtime.eventEmitter.removeAllListeners(`redirectClickEvent-${path}`);\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onRedirectClickEvent = (redirectClickEventTarget) => {\n    const { path } = this.props;\n    if (path === redirectClickEventTarget) {\n      this.onClickHandler();\n    }\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    // Flip the selected state: 'yes' <-> 'no'\n    this.updateStateAndTriggerRendering(pathState);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState) {\n    const { runtime, path } = this.props;\n\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    StateAttributeAccess.setVisited(pathState, true);\n\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n  }\n\n  static hasImage(config) {\n    const { displayMode } = config.image;\n\n    return displayMode !== \"none\";\n  }\n\n  onClickFrozenHandler = (event) => {\n    const { runtime, path } = this.props;\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, 'RadioButton');\n    event.stopPropagation();\n  }\n\n  addFlexAlignmentToStyles = (styleObject, verticalAlign, horizontalAlign) => Object.assign(styleObject, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: this.computeFlexAlignment(verticalAlign),\n    alignItems: this.computeFlexAlignment(horizontalAlign)\n  });\n\n  computeFlexAlignment = (alignment) => {\n    let flexAlignment = \"\";\n    switch (alignment) {\n      case \"top\": flexAlignment = \"flex-start\"; break;\n      case \"left\": flexAlignment = \"flex-start\"; break;\n      case \"center\": flexAlignment = \"center\"; break;\n      case \"bottom\": flexAlignment = \"flex-end\"; break;\n      case \"right\": flexAlignment = \"flex-end\"; break;\n      default: flexAlignment = \"center\"; break;\n    }\n    return flexAlignment;\n  }\n\n  computeMargins = (verticalAlign, isTop) => {\n    let marginValue = \"auto\";\n    if (verticalAlign === 'bottom' && !isTop) marginValue = 2.5;\n    if (verticalAlign === 'top' && isTop) marginValue = 2.5;\n    return marginValue;\n  }\n\n  computeControlIconPosition = (controlIconOnly, horizontalAlign, controlIconSize, width) => {\n    let controlPosition = {};\n    if (controlIconOnly) {\n      if (horizontalAlign === \"center\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: (width - controlIconSize) / 2,\n          right: 'auto'\n        });\n      } else if (horizontalAlign === \"left\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: 2.5,\n          right: 'auto'\n        })\n      } else if (horizontalAlign === \"right\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: 'auto',\n          right: 2.5\n        })\n      }\n    }\n    return controlPosition;\n  }\n\n  render() {\n    const { runtime, path, config, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    const rawText = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\n    const text = RenderingHelper.extractMultilineText(rawText);\n    const { label, textWrap, controlIconSize, horizontalAlign, verticalAlign, position } = config;\n    const { distance, position: labelPosition } = label;\n    const { width } = position;\n    const leftToRight = (labelPosition === 'right');\n\n    let wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\n    wrapperStyle = this.addFlexAlignmentToStyles(wrapperStyle, verticalAlign, horizontalAlign);\n    CommonConfigHelper.setStyleAttribute(wrapperStyle, \"backgroundImage\", \"none\");\n\n    const textWrapStyle = {\n      whiteSpace: textWrap ? \"initial\" : \"noWrap\",\n      marginLeft: leftToRight ? 20 : 0,\n      marginRight: leftToRight ? 0 : 20,\n      marginBottom: this.computeMargins(verticalAlign, false),\n      marginTop: this.computeMargins(verticalAlign, true),\n      justifyContent: this.computeFlexAlignment(horizontalAlign)\n    }\n\n    const controlIconOnly = ((rawText.length === 0) && !CbaRadioButton.hasImage(config));\n    const inputStyle = {\n      left: (leftToRight) ? 2.5 : \"auto\",\n      right: (leftToRight) ? \"auto\" : 2.5,\n      marginBottom: this.computeMargins(verticalAlign, false),\n      marginTop: this.computeMargins(verticalAlign, true),\n      cursor: \"inherit\",\n      ...this.computeControlIconPosition(controlIconOnly, horizontalAlign, controlIconSize, width)\n    }\n\n    const labelPositionDelta = distance - DEFAULT_LABEL_POSITION;\n    const textStyle = {\n      marginLeft: leftToRight ? labelPositionDelta : 0,\n      marginRight: leftToRight ? 0 : labelPositionDelta,\n      marginBottom: this.computeMargins(verticalAlign, false),\n      marginTop: this.computeMargins(verticalAlign, true),\n      display: (rawText.length > 0) ? \"inline\" : \"none\"\n    }\n\n    const imageStyle = {\n      order: leftToRight ? 0 : 1,\n    }\n\n    const labelStyle = {\n      cursor: \"inherit\"\n    }\n\n    if (CbaRadioButton.hasImage(config)) {\n      textStyle.marginLeft = 0;\n      textStyle.marginRight = 0;\n      imageStyle.marginBottom = this.computeMargins(verticalAlign, false);\n      imageStyle.marginTop = this.computeMargins(verticalAlign, true);\n      if (!leftToRight) {\n        imageStyle.paddingRight = 5;\n        imageStyle.marginRight = labelPositionDelta;\n      } else {\n        imageStyle.paddingRight = 0;\n        imageStyle.marginRight = 0;\n        imageStyle.paddingLeft = 5;\n        imageStyle.marginLeft = labelPositionDelta;\n      }\n    }\n\n    const radioWrapStyle = {\n      ...(((rawText.length > 0) || CbaRadioButton.hasImage(config)) ? {\n        transform: 'translateX(0)',\n      } : {})\n    }\n\n    const forKey = shortid.generate();\n\n    return (\n      <React.Fragment>\n        <div\n          style={wrapperStyle}\n          data-cba-id={config.pageEditId}\n          title={CommonConfigHelper.buildTitle(config, pathState)}\n          onClick={this.onClickHandler}\n          onContextMenu={this.onContextMenuHandler}\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"inputWrapper overflow-hidden\")}\n        >\n          <div className=\"radioWrap\" style={radioWrapStyle}>\n            <label\n              style={labelStyle}\n              htmlFor={forKey}\n              className=\"label\"\n              onClick={(event) => { event.stopPropagation(); }}\n            >\n              <span style={textWrapStyle}>\n                {CommonConfigHelper.getImageTag(pathState, config, selectedState, runtime, imageStyle)}\n                <span style={textStyle} className=\"inputTextWrap\">\n                  {text}\n                </span>\n              </span>\n            </label>\n            <input\n              className={`radioCheckBoxSize${controlIconSize || 13}`}\n              name={forKey}\n              style={inputStyle}\n              id={forKey}\n              type=\"radio\"\n              checked={selectedState}\n              disabled={StateAttributeAccess.extractDisabled(pathState)}\n              // using a blank function to remove the warning src: https://stackoverflow.com/questions/36715901/reactjs-error-warning\n              onChange={() => { }}\n              tabIndex={config.tabIndex}\n            />\n          </div>\n        </div>\n        {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaRadioButton-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(wrapperStyle)} />}\n      </React.Fragment>\n    );\n  }\n\n}\n\nCbaRadioButton.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        textWrap: PropTypes.bool.isRequired,\n        label: PropTypesHelper.getInputLabelConfig(),\n        controlIconSize: PropTypes.number.isRequired,\n        horizontalAlign: PropTypes.string.isRequired,\n        verticalAlign: PropTypes.string.isRequired\n      },\n      true\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\nimport './CbaRichTextField/css/repeatable.css';\n\n\nconst DEFAULT_LABEL_POSITION = 10;\n\n/**\n * A display component that displays a labeled check box.\n */\nexport default class CbaCheckbox extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    const { runtime, path } = this.props;\n    runtime.eventEmitter.addListener(`redirectClickEvent-${path}`, this.onRedirectClickEvent.bind(this));\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    const { runtime, path } = this.props;\n    runtime.eventEmitter.removeAllListeners(`redirectClickEvent-${path}`);\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onRedirectClickEvent = (redirectClickEventTarget) => {\n    const { path } = this.props;\n    if (path === redirectClickEventTarget) {\n      this.onClickHandler();\n    }\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    // Flip state: 'true' <-> 'false'\n    this.updateStateAndTriggerRendering(pathState);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on old selected state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState) {\n    const { runtime, path } = this.props;\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    StateAttributeAccess.setVisited(pathState, true);\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n  }\n\n  onClickFrozenHandler = (event) => {\n    const { runtime, path } = this.props;\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, 'CheckBox');\n    event.stopPropagation();\n  }\n\n  addFlexAlignmentToStyles = (styleObject, verticalAlign, horizontalAlign) => Object.assign(styleObject, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: this.computeFlexAlignment(verticalAlign),\n    alignItems: this.computeFlexAlignment(horizontalAlign)\n  });\n\n  computeFlexAlignment = (alignment) => {\n    let flexAlignment = \"\";\n    switch (alignment) {\n      case \"top\": flexAlignment = \"flex-start\"; break;\n      case \"left\": flexAlignment = \"flex-start\"; break;\n      case \"center\": flexAlignment = \"center\"; break;\n      case \"bottom\": flexAlignment = \"flex-end\"; break;\n      case \"right\": flexAlignment = \"flex-end\"; break;\n      default: flexAlignment = \"center\"; break;\n    }\n    return flexAlignment;\n  }\n\n  computeMargins = (verticalAlign, isTop) => {\n    let marginValue = \"auto\";\n    if (verticalAlign === 'bottom' && !isTop) marginValue = 2.5;\n    if (verticalAlign === 'top' && isTop) marginValue = 2.5;\n    return marginValue;\n  }\n\n  computeControlIconPosition = (hasLabel, horizontalAlign, controlIconSize, width) => {\n    let controlPosition = {};\n    if (!hasLabel) {\n      if (horizontalAlign === \"center\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: (width - controlIconSize) / 2,\n          right: 'auto'\n        });\n      } else if (horizontalAlign === \"left\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: 2.5,\n          right: 'auto'\n        })\n      } else if (horizontalAlign === \"right\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: 'auto',\n          right: 2.5\n        })\n      }\n    }\n    return controlPosition;\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    const text = RenderingHelper.extractMultilineText(CommonConfigHelper.buildDisplayText(config, pathState, runtime));\n    const { label, textWrap, controlIconSize, horizontalAlign, verticalAlign, text: checkboxLabel, position } = config;\n    const { distance, position: labelPosition } = label;\n    const { width } = position;\n    const leftToRight = (labelPosition === 'right');\n\n    let wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\n    wrapperStyle = this.addFlexAlignmentToStyles(wrapperStyle, verticalAlign, horizontalAlign);\n\n    const textWrapStyle = {\n      whiteSpace: textWrap ? \"initial\" : \"nowrap\",\n      marginLeft: leftToRight ? 20 : 0,\n      marginRight: leftToRight ? 0 : 20,\n      marginBottom: this.computeMargins(verticalAlign, false),\n      marginTop: this.computeMargins(verticalAlign, true),\n      justifyContent: this.computeFlexAlignment(horizontalAlign),\n    }\n\n    const inputStyle = {\n      left: (leftToRight) ? 2.5 : \"auto\",\n      right: (leftToRight) ? \"auto\" : 2.5,\n      marginBottom: this.computeMargins(verticalAlign, false),\n      marginTop: this.computeMargins(verticalAlign, true),\n      cursor: \"inherit\",\n      ...this.computeControlIconPosition(checkboxLabel.label, horizontalAlign, controlIconSize, width)\n    }\n\n    const labelPositionDelta = distance - DEFAULT_LABEL_POSITION;\n    const textStyle = {\n      marginLeft: leftToRight ? labelPositionDelta : 0,\n      marginRight: leftToRight ? 0 : labelPositionDelta,\n      display: checkboxLabel.label ? \"inline\" : \"none\"\n    }\n\n    const labelStyle = {\n      cursor: \"inherit\"\n    }\n\n    const checkBoxWrapStyle = {\n      ...((checkboxLabel.label) ? {\n        transform: 'translateX(0)'\n      } : {})\n    }\n\n    const forKey = shortid.generate();\n\n    // TODO: This class resembles CbaRadioButton pretty much \n    //       -> Merge into one class once we know that we keep implementation of both as <input> plus <div>.\n    return (\n      <React.Fragment>\n        <div\n          style={wrapperStyle}\n          data-cba-id={config.pageEditId}\n          title={CommonConfigHelper.buildTitle(config, pathState)}\n          onClick={this.onClickHandler}\n          onContextMenu={this.onContextMenuHandler}\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"inputWrapper overflow-hidden\")}\n        >\n          <div className=\"checkBoxWrap\" style={checkBoxWrapStyle}>\n            <label\n              style={labelStyle}\n              htmlFor={forKey}\n              className=\"label\"\n              onClick={(event) => { event.stopPropagation(); }}\n            >\n              <span style={textWrapStyle}>\n                <span style={textStyle} className=\"inputTextWrap\">{text}</span>\n              </span>\n            </label>\n            <input\n              className={`radioCheckBoxSize${controlIconSize || 13}`}\n              style={inputStyle}\n              id={forKey}\n              type=\"checkbox\"\n              checked={selectedState}\n              disabled={StateAttributeAccess.extractDisabled(pathState)}\n              // using a blank function to remove the warning src: https://stackoverflow.com/questions/36715901/reactjs-error-warning\n              onChange={() => { }}\n              tabIndex={config.tabIndex}\n            />\n          </div>\n        </div>\n        {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaCheckbox-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(wrapperStyle)} />}\n      </React.Fragment>\n    );\n  }\n\n}\n\nCbaCheckbox.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        textWrap: PropTypes.bool.isRequired,\n        label: PropTypesHelper.getInputLabelConfig(),\n        controlIconSize: PropTypes.number.isRequired,\n        horizontalAlign: PropTypes.string.isRequired,\n        verticalAlign: PropTypes.string.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\n\nexport default class CbaLink extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    // Update the 'selected' state: \n    this.updateStateAndTriggerRendering(pathState);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on old selected state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState) {\n    const { runtime, path } = this.props;\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    StateAttributeAccess.setVisited(pathState, true);\n\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n\n  }\n\n  // accesibility event for tab navigation\n  onKeyDown(event) {\n    if (event.keyCode === 32) {\n      // space key\n      this.onClickHandler(event);\n    }\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n\n    const selected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    const text = RenderingHelper.extractMultilineText(CommonConfigHelper.buildDisplayText(config, pathState, runtime));\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selected, orientation, runtime);\n\n    return (\n      <div\n        style={style}\n        data-cba-id={config.pageEditId}\n        title={CommonConfigHelper.buildTitle(config, pathState)}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaLink\")}\n      >\n        <span\n          onClick={this.onClickHandler}\n          onKeyDown={e => this.onKeyDown(e)}\n          onContextMenu={this.onContextMenuHandler}\n          tabIndex={config.tabIndex}\n        >\n          {CommonConfigHelper.getImageTag(pathState, config, false, runtime)}\n          {text}\n        </span>\n      </div>\n    );\n  }\n\n}\n\n\nCbaLink.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\n\nexport default class CbaPolygon extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    // Flip the selected state: 'yes' <-> 'no'\n    this.updateStateAndTriggerRendering(pathState, oldSelected);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState, oldSelected) {\n    const { runtime, path } = this.props;\n    StateAttributeAccess.setVisited(pathState, true);\n\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n  }\n\n  // accesibility event for tab navigation\n  onKeyDown(event) {\n    if (event.keyCode === 32) {\n      // space key\n      this.onClickHandler(event);\n    }\n  }\n\n\n  render() {\n    const { config, path, runtime, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n\n    const renderingSelectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    const polygonStyle = CommonConfigHelper.buildStyleSvg(pathState, config, renderingSelectedState, orientation, runtime);\n    const pointsString = CommonConfigHelper.buildPointsString(config.bendPoints);\n    const title = CommonConfigHelper.buildTitle(config, pathState);\n\n    return (\n      <polygon\n        points={pointsString}\n        style={polygonStyle}\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        tabIndex={config.tabIndex}\n        onKeyDown={e => this.onKeyDown(e)}\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\n      >\n        {title !== \"\" && <title>{title}</title>}\n      </polygon>\n    );\n\n  }\n\n\n}\n\n\nCbaPolygon.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        bendPoints: PropTypes.arrayOf(PropTypes.shape({\n          x: PropTypes.number.isRequired,\n          y: PropTypes.number.isRequired\n        }))\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaPolygon from './CbaPolygon';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport RenderingHelper from './RenderingHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\n\nexport default class CbaRegionMap extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { runtime, config, path } = this.props;\n    const { redirectClickEventsReference } = config;\n    if (redirectClickEventsReference !== undefined) {\n      const requestingComponentPathWithoutLastPageSegment = IndexPathHelper.dropPageSegmentFromPath(path);\n      const redirectClickEventsReferencePath = IndexPathHelper.appendPageSegmentsToPath(requestingComponentPathWithoutLastPageSegment, redirectClickEventsReference);\n      runtime.eventEmitter.emit(`redirectClickEvent-${redirectClickEventsReferencePath}`, redirectClickEventsReferencePath);\n      return;\n    }\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  render() {\n    const { runtime, path: controllerPath, config, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n\n    const delegates = config.regions.map((child, index) => {\n      if (child.type !== \"CbaPolygon\") console.warn(`Unexpected region type: ${child.type}`);\n      const childPath = IndexPathHelper.appendIndexToPageSegment(controllerPath, index);\n\n      return (\n        <CbaPolygon\n          key={childPath}\n          config={child.config}\n          path={childPath}\n          orientation={orientation}\n          runtime={runtime}\n        />\n      )\n    });\n    return (\n      <div\n        title={CommonConfigHelper.buildTitle(config, pathState)}\n        style={CommonConfigHelper.buildStyleByIndexPath(controllerPath, config, false, orientation, runtime)}\n        data-cba-id={config.pageEditId}\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaRegionMap\")}\n      >\n        <svg height=\"100%\" width=\"100%\">\n          {delegates}\n        </svg>\n      </div>\n    );\n  }\n\n}\n\nCbaRegionMap.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        regions: PropTypes.array.isRequired,\n        redirectClickEventsReference: PropTypes.string,\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport RenderingHelper from './RenderingHelper';\n\nexport default class CbaInnerHtml extends Component {\n\n  constructor(props) {\n    super(props);\n    this.onClickHandler = this.onClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  static sanitizeHtml(original) {\n    // TODO: Should we scan the generated HTML code?\n    return {\n      __html: original\n    };\n  }\n\n  render() {\n    const { runtime, config, path, orientation } = this.props;\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\n    return (\n      <div\n        // We will check the embedded code in our sanitize method -> disable warning here:\n        // eslint-disable-next-line react/no-danger\n        dangerouslySetInnerHTML={CbaInnerHtml.sanitizeHtml(config.innerHtml)}\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        title={CommonConfigHelper.buildTitle(config)}\n        style={style}\n        data-cba-id={config.pageEditId}\n      />\n    );\n  }\n\n}\n\nCbaInnerHtml.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        innerHtml: PropTypes.string.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport CommonActionsHelper from \"./CommonActionsHelper\";\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport RenderingHelper from './RenderingHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport Utils from '../utils/Utils';\n\nexport default class CbaExternalPageFrame extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.iframeRef = React.createRef();\n    this.currentSaveTimer = null;\n\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n    this.restoreIframeState();\n  }\n\n  componentWillUnmount() {\n    if (this.currentSaveTimer !== null) {\n      clearTimeout(this.currentSaveTimer);\n      this.currentSaveTimer = null;\n    }\n    this.saveIframeState();\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  // ----------- snapshot related ------------------------------------------------------------------------\n  /**\n   * Build the initial state in the component state manager. \n   * \n   * The component state manager will call this method to initialize state for new display component instances.\n   */\n  static addAttributesToInitialState(initialState, configProps) {\n    // activate volatile flag in state manager since state of external java code is not fully synchronized. \n    StateAttributeAccess.setVolatile(initialState, true);\n    StateAttributeAccess.setComponentClassName(initialState, \"CbaExternalPageFrame\");\n  }\n\n  updateStateInComponentStateManager() {\n    this.saveIframeState();\n  }\n\n  saveIframeState = () => {\n    const iframeWindow = this.iframeRef.current.contentWindow;\n    if (iframeWindow === undefined || iframeWindow === null) {\n      const { path } = this.props;\n      console.error(`No window in IFrame! -> We don't save state of code running in IFrame at path ${path}.`);\n      return;\n    }\n    try {\n      if (iframeWindow.getState !== undefined) {\n        const stateToSave = iframeWindow.getState();\n        const pathState = ComponentStateHelper.getState(this);\n        StateAttributeAccess.setExternalContentState(pathState, stateToSave);\n        ComponentStateHelper.registerState(this, pathState);\n      } else {\n        console.log(`No getState method found. ${this.reactionMessage(true)}`);\n      }\n    } catch (exception) {\n      if (CbaExternalPageFrame.isPermissionDeniedException(exception)) {\n        console.log(`We don't save state of code running in IFrame from another orgin. URL in IFrame is ${this.iframeRef.current.src}`);\n      } else {\n        console.error(`Exception while trying to save state. ${this.reactionMessage(true)}`, exception);\n      }\n    }\n\n  }\n\n  restoreIframeState = () => {\n    const pathState = ComponentStateHelper.getState(this);\n    const savedState = StateAttributeAccess.extractExternalContentState(pathState);\n    if (savedState !== undefined) {\n      if (this.currentSaveTimer != null) {\n        clearTimeout(this.currentSaveTimer);\n        this.currentSaveTimer = null;\n      }\n      this.currentSaveTimer = setTimeout(() => CbaExternalPageFrame.processSaveTimeout(this, savedState, 100), 20)\n    }\n  }\n\n  static processSaveTimeout(component, stateToRestore, callCount) {\n    component.currentSaveTimer = null;\n    const iframeWindow = component.iframeRef.current.contentWindow;\n    if (iframeWindow === undefined || iframeWindow === null) {\n      console.error(`No window in IFrame! ${component.reactionMessage(false)}`);\n      return;\n    }\n    try {\n      if (iframeWindow.setState !== undefined) {\n        iframeWindow.setState(stateToRestore);\n      } else if (callCount > 0) {\n        component.currentSaveTimer = setTimeout(() => CbaExternalPageFrame.processSaveTimeout(component, stateToRestore, callCount - 1), 20);\n      } else {\n        console.log(`No setState method found. ${component.reactionMessage(false)}`);\n      }\n    } catch (exception) {\n      if (CbaExternalPageFrame.isPermissionDeniedException(exception)) {\n        console.log(`We don't restore state of code running in IFrame from another orgin. URL in IFrame is ${component.iframeRef.current.src}`);\n      } else {\n        console.error(`Exception while trying to restore state ${component.reactionMessage(false)}`, exception);\n      }\n    }\n  }\n\n  static isPermissionDeniedException(exception) {\n    return exception.message.startsWith('Permission denied to access property')\n  }\n\n  reactionMessage = (isSaving) => {\n    const { path, runtime } = this.props;\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime);\n    const userDefIdPathMessage = userDefIdPath === undefined ? \"\" : ` (user defined ID path: ${userDefIdPath})`;\n    return ` -> We don't ${isSaving ? \"save\" : \"restore\"} state of code running in IFrame at index path ${path}${userDefIdPathMessage}.`\n  }\n\n  // ----------- term evaluation helpers -----------------------------------------------------------------\n  /**\n   * Get the window that contains the running external java script code.\n   */\n  getFrameWindow = () => this.iframeRef.current.contentWindow;\n\n  /**\n   * Get the URL that we use to fill the frame.\n   */\n  getFrameContentUrl = () => {\n    const { config, runtime } = this.props;\n    const urlString = CommonConfigHelper.getProperResourcePathExternalResources(config.pageAddress, runtime);\n    return urlString.startsWith('http') ? new URL(urlString) : new URL(urlString, window.location);\n\n  }\n\n  // ----------- user interaction ------------------------------------------------------------------------\n\n  onClick = (event) => {\n    const { config, path, runtime } = this.props;\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path, undefined, event, runtime);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  scroll = (x, y) => {\n    const iframeInstance = this.iframeRef.current;\n\n    if (!iframeInstance) return;\n\n    try {\n      const childDocument = iframeInstance.contentDocument ? iframeInstance.contentDocument : iframeInstance.contentWindow.document;\n      const childWindow = iframeInstance.contentWindow;\n\n      Utils.doScrollOnHTMLElement(x, y, childDocument.querySelector(\"html\"), childWindow, iframeInstance)\n\n    } catch (error) {\n      console.warn(\"Could not scroll external page \\n\", error)\n    }\n\n  }\n\n  // ----------- rendering ------------------------------------------------------------------------\n\n  static buildIframeUrl(configPageAddress, indexPath, runtime) {\n    const url = CommonConfigHelper.getProperResourcePathExternalResources(configPageAddress, runtime);\n\n    if (configPageAddress.startsWith('http')) {\n      // register foreign http server as source for post message events:\n      runtime.postMessageReceiver.registerAcceptableUrlForExternalPageFrameEvent(url);\n      return url;\n    } else {\n      const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\n\n      // add additional URL parameters for index path and user defined Id path\n      const urlContainsParametersAlready = url.indexOf('?') !== -1;\n      return `${url + (urlContainsParametersAlready ? '&' : '?')}indexPath=${indexPath}&userDefIdPath=${userDefIdPath}`;\n    }\n\n  }\n\n  render() {\n    const { path, config, runtime, orientation } = this.props;\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\n    CommonConfigHelper.setStyleAttribute(style, \"resize\", \"none\");\n\n    // <iframe> elements must have a unique title property\n    const uniqueTitle = `${config.pageAddress}-${(new Date()).getTime()}`;\n\n    const iframeUrl = CbaExternalPageFrame.buildIframeUrl(config.pageAddress, path, runtime);\n\n\n    return (\n      <iframe\n        ref={this.iframeRef}\n        title={uniqueTitle}\n        src={iframeUrl}\n        style={style}\n        data-cba-id={config.pageEditId}\n        onClick={this.onClick}\n        onContextMenu={this.onContextMenuHandler}\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\n      />\n    );\n  }\n\n}\n\nCbaExternalPageFrame.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.getStandardConfigPropTypes(false)\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport TreeUtils from './TreeUtils';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport { CbaTreeRow } from './DataGridRenderers';\r\nimport TreeTraceHelper from './TreeTraceHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport Utils from '../../utils/Utils';\r\n\r\nimport './CbaTree.css';\r\n\r\n\r\nexport default class CbaTree extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { path, runtime } = props;\r\n\r\n    this.eventEmitter = runtime.eventEmitter;\r\n    this.subscription = this.eventEmitter.addListener(TreeUtils.getTreeEventChangeName(path), this.triggerRendering);\r\n  }\r\n\r\n  static addAttributesToInitialState(initialState, config, path, runtime) {\r\n    const nodes = TreeUtils.initTreeNodes(config.nodes, config.nodeTypes, path, runtime, {\r\n      startCollapsed: config.startCollapsed\r\n    });\r\n    const treeColumns = TreeUtils.initTreeColumns(config.columns, path, runtime);\r\n    const treeState = TreeUtils.initTreeState(treeColumns);\r\n    const nodeTypes = Utils.deepCopy(config.nodeTypes);\r\n    const treeReadOnly = Utils.deepCopy(config.readOnly);\r\n\r\n    StateAttributeAccess.setTreeNodes(initialState, nodes);\r\n    StateAttributeAccess.setTreeColumns(initialState, treeColumns);\r\n    StateAttributeAccess.setTreeState(initialState, treeState);\r\n    StateAttributeAccess.setNodeTypes(initialState, nodeTypes);\r\n    StateAttributeAccess.setTreeReadOnly(initialState, treeReadOnly);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.subscription.remove();\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onRowExpandClick = (event, rowData, expandOnly) => {\r\n    if (event) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    const { path, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const nodes = StateAttributeAccess.extractTreeNodes(pathState);\r\n\r\n    const node = TreeUtils.getNode(nodes, rowData.path);\r\n    if (node.isLeaf && node.nodes.length === 0) return;\r\n\r\n    const oldExpandedValue = node.expanded;\r\n    node.expanded = expandOnly || !node.expanded;\r\n\r\n    if (oldExpandedValue !== node.expanded) {\r\n      runtime.replayStepMonitor.incrementReplayStep();\r\n      const actionType = node.expanded ? \"expandNode\" : \"collapseNode\";\r\n      TreeTraceHelper.traceNodeAction(actionType, path, rowData, runtime);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n      this.triggerRendering();\r\n    }\r\n  }\r\n\r\n  onRowSelect = (event, rowData) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const { path } = this.props;\r\n\r\n    TreeUtils.selectNodeAction(path, rowData);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", path, {\r\n      isTreeView: false,\r\n      cells: []\r\n    }, runtime);\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", path, {\r\n      isTreeView: false,\r\n      cells: []\r\n    }, runtime);\r\n  }\r\n\r\n  addRowReferences = (row = {}) => {\r\n    const { config, runtime, path } = this.props;\r\n    const { updateOnSingleClick, nodeTypes } = config;\r\n\r\n    row.onRowExpandClick = this.onRowExpandClick;\r\n    row.onRowSelect = this.onRowSelect;\r\n\r\n    row.updateOnSingleClick = updateOnSingleClick;\r\n    row.isTreeView = false\r\n\r\n    row.runtime = runtime;\r\n    row.nodeTypes = nodeTypes;\r\n    row.treePath = path;\r\n\r\n    row.isReadOnly = config.readOnly;\r\n    return row;\r\n  }\r\n\r\n  triggerRendering = () => {\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const { hideLeaves } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    const { treeNodes, treeColumns } = pathState;\r\n    const treeState = StateAttributeAccess.extractTreeState(pathState) || {};\r\n\r\n    const hideColumnsHeader = config.hideColumns || TreeUtils.isDefaultColumn(treeColumns);\r\n    const additionalCssClass = hideColumnsHeader ? \"hideColumns\" : \"\";\r\n\r\n    const displayNodes = TreeUtils.getTreeDisplayNodes(treeNodes, path, hideLeaves);\r\n    const displayTreeColumns = TreeUtils.getDisplayColumns(treeColumns, false, treeState.modifiedColumns, path, runtime);\r\n\r\n    if (config.hideColumns) {\r\n      // removes all columns except first\r\n      displayTreeColumns.length = 1;\r\n      delete displayTreeColumns[0].width;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, additionalCssClass)}\r\n        onClick={this.onClickHandler}\r\n        onContextMenu={this.onContextMenuHandler}\r\n        onScroll={event => event.stopPropagation()} // prevent scroll propagation (stops tracing)\r\n        title={CommonConfigHelper.buildTitle(config, pathState)}\r\n      >\r\n        <ReactDataGrid\r\n          columns={displayTreeColumns}\r\n          headerRowHeight={TreeUtils.const.COLUMN_HEIGHT}\r\n          rowHeight={TreeUtils.const.ROW_HEIGHT} // this needs to be provided by generator by computing font in when no columns available\r\n          rowGetter={index => this.addRowReferences(displayNodes[index])}\r\n          rowsCount={displayNodes.length}\r\n          rowRenderer={CbaTreeRow}\r\n          onColumnResize={(columnIndex, newWidth) => TreeUtils.handleColumnResize(displayTreeColumns[columnIndex].key, newWidth, this)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTree.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        hideLeaves: PropTypes.bool.isRequired,\r\n        hideColumns: PropTypes.bool.isRequired,\r\n        updateOnSingleClick: PropTypes.bool.isRequired,\r\n        \"drag&dropMode\": PropTypes.string.isRequired,\r\n        userDefinedId: PropTypes.string.isRequired,\r\n        nodes: PropTypes.array.isRequired,\r\n        nodeTypes: PropTypes.array.isRequired,\r\n        columns: PropTypes.array.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport TreeUtils from './TreeUtils';\r\nimport { CbaTreeRow } from './DataGridRenderers';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport TreeTraceHelper from './TreeTraceHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\n\r\nexport default class CbaTreeView extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { runtime } = this.props;\r\n\r\n    this.eventEmitter = runtime.eventEmitter;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n\r\n    this.subscription = this.eventEmitter.addListener(TreeUtils.getTreeEventChangeName(treePath), this.handleTreeChange);\r\n\r\n    RenderingHelper.onMount(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    this.subscription.remove();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  handleTreeChange = () => {\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onRowSelect = (event, rowData) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const { path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n\r\n    TreeUtils.selectNodeAction(treePath, rowData);\r\n\r\n    // reset sort and triggers rendering;\r\n    // cannot visually reset sort due to library only allowing setting of current column and direction only on first init.\r\n    // this.handleGridSort(null, \"NONE\");\r\n  }\r\n\r\n  handleGridSort = (columnId, sortDirection) => {\r\n    const { path, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setTreeViewSort(pathState, {\r\n      type: sortDirection,\r\n      column: columnId\r\n    });\r\n\r\n    runtime.replayStepMonitor.incrementReplayStep();\r\n\r\n    TreeTraceHelper.traceSort(path, columnId, sortDirection, runtime);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", undefined, {\r\n      isTreeView: true,\r\n      treeViewPath: path,\r\n      cells: []\r\n    }, runtime);\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", undefined, {\r\n      isTreeView: true,\r\n      treeViewPath: path,\r\n      cells: []\r\n    }, runtime);\r\n  }\r\n\r\n  addRowReferences = (row = {}) => {\r\n    const { runtime, path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const { nodeTypes, treeReadOnly } = TreeUtils.getTreeDataByPath(treePath, runtime)\r\n\r\n    row.onRowSelect = this.onRowSelect;\r\n    row.updateOnSingleClick = false;\r\n    row.isTreeView = true;\r\n\r\n    row.onRowExpandClick = () => { };\r\n\r\n    row.runtime = runtime;\r\n    row.nodeTypes = nodeTypes;\r\n    row.treePath = treePath;\r\n    row.treeViewPath = path;\r\n\r\n    row.isReadOnly = treeReadOnly;\r\n    return row;\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const { filterLeaves, sortable, treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const sort = StateAttributeAccess.extractTreeViewSort(pathState) || {\r\n      type: \"NONE\",\r\n      column: null\r\n    };\r\n\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const { treeNodes, treeColumns, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const { currentNode } = treeState;\r\n\r\n    let treeViewState = StateAttributeAccess.extractTreeState(pathState);\r\n\r\n    // init tree view state if not initialised \r\n    if (!treeViewState) {\r\n      treeViewState = TreeUtils.initTreeState(treeColumns);\r\n\r\n      StateAttributeAccess.setTreeState(pathState, treeViewState);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n    }\r\n\r\n    const displayNodes = TreeUtils.getTreeViewDisplayNodes(treeNodes, treePath, filterLeaves, currentNode, sort) || [];\r\n    const displayColumns = TreeUtils.getDisplayColumns(treeColumns, sortable, treeViewState.modifiedColumns, path, runtime) || [];\r\n    const hideColumnsHeader = TreeUtils.isDefaultColumn(treeColumns);\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        onClick={this.onClickHandler}\r\n        onContextMenu={this.onContextMenuHandler}\r\n        onScroll={event => event.stopPropagation()} // prevent scroll propagation (stops tracing)\r\n        title={CommonConfigHelper.buildTitle(config, pathState)}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, hideColumnsHeader ? \"hideColumns\" : \"\")}\r\n      >\r\n        <ReactDataGrid\r\n          columns={displayColumns}\r\n          headerRowHeight={TreeUtils.const.COLUMN_HEIGHT}\r\n          rowHeight={TreeUtils.const.ROW_HEIGHT} // this needs to be provided by generator by computing font in when no columns available\r\n          rowGetter={index => this.addRowReferences(displayNodes[index])}\r\n          rowsCount={displayNodes.length}\r\n          rowRenderer={CbaTreeRow}\r\n          onGridSort={this.handleGridSort}\r\n          sortColumn={sort.column}\r\n          sortDirection={sort.type}\r\n          onColumnResize={(columnIndex, newWidth) => TreeUtils.handleColumnResize(displayColumns[columnIndex].key, newWidth, this)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTreeView.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        filterLeaves: PropTypes.bool.isRequired,\r\n        sortable: PropTypes.bool.isRequired,\r\n        treePathId: PropTypes.string.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import { Parser } from 'hot-formula-parser'\r\nimport TableHelper from './TableHelper';\r\n\r\n/**\r\n * Internal helper method: Build a result structure that signals an error.\r\n */\r\nfunction buildErrorResult(error) {\r\n  return {\r\n    error,\r\n    result: null\r\n  }\r\n}\r\n\r\n/**\r\n * Internal helper method: Build a result structure that contains a result value.\r\n */\r\nfunction buildValueResult(value) {\r\n  return {\r\n    error: null,\r\n    result: value\r\n  }\r\n}\r\n\r\n/**\r\n * Internal helper method: Sum up the values given as nested arrays of numbers or strings representing numbers.\r\n */\r\nfunction sumUpNestedValues(values) {\r\n  if (typeof values === 'number') return values;\r\n  if (typeof values === 'string') {\r\n    const number = Number.parseFloat(values);\r\n    if (Number.isNaN(number)) throw new Error(\"#NUM!\");\r\n    return number;\r\n  }\r\n  if (Array.isArray(values)) return values.reduce((previous, current) => previous + sumUpNestedValues(current), 0);\r\n  return 0;\r\n}\r\n\r\n\r\n/**\r\n * Evaluate the value of a cell in the given spreadsheet table. \r\n * \r\n * The cells table is an array of rows, with each row being an array of cells.\r\n * Indices start with 0.\r\n * Examples: \r\n *   - cellsTable[3][8] is the cell in the 9th column of the 4th row.\r\n * \r\n * The maxCellCoordinates parameter gives the coordinates of the cell in the lower \r\n * right corner of the cells table (i.e. the index of the last column in the last row).\r\n * \r\n * We assume that the cells table contains one header row (with column titles 'A', 'B', ...)\r\n * and one header column with row numbers (1, 2, 3, ...)\r\n * Therefore, cell references like A1, B1, C5 refer to cells in the cells table with an 'offset' of 1\r\n * to ignore the header row and column:\r\n * Examples: \r\n *  - A1 refers to data[1][1]. \r\n *  - B1 refers to data[1][2].\r\n *  - C5 refers to data[5][3].\r\n * \r\n * The cellToEvaluate parameter should not include this offset: \r\n * {row:0 , col: 0} should refer to cell A1 (=data[1][1]), {row:3, col:2} should refer to cell C5 (=data[5][3]).\r\n * \r\n * The evaluatedCellsList parameter should contain the indices of the cells that\r\n * are currently part of the evaluation stack (again including the offset). \r\n * The cellToEvaluate should not be part of that list yet. \r\n * We use this list to avoid an endless loop in case of a circular dependency.\r\n * \r\n * We return errors if we detect inconsistencies with the formulas:\r\n *  - #N/A: A reference beyond the borders of our data table was detected.\r\n *  - #REF!: A Circular dependency was detected.\r\n * \r\n * @param { [[string]]} cellsTable\r\n * @param { row: int, col: int} maxCellCoordinates\r\n * @param { row: int, col: int } cellToEvaluate\r\n * @param { [{ row: int, col: int}]} evaluatedCellsList\r\n * @returns { error: string, result: string} The evaluation result or an error.\r\n */\r\nexport default function evaluateCell(cellsTable, maxCellCoordinates, cellToEvaluate, evaluatedCellsList) {\r\n\r\n  const dataCellCoordinates = {\r\n    row: cellToEvaluate.row + 1,\r\n    col: cellToEvaluate.col + 1\r\n  }\r\n\r\n  // check coordinate ranges:\r\n  if (dataCellCoordinates.row < 1 || dataCellCoordinates.col < 1) {\r\n    return buildErrorResult('#N/A');\r\n  }\r\n  if (dataCellCoordinates.row > maxCellCoordinates.row || dataCellCoordinates.col > maxCellCoordinates.col) {\r\n    return buildErrorResult('#N/A');\r\n  }\r\n\r\n  // avoid endless loop in a circular dependeny:\r\n  if (evaluatedCellsList.find(candidate => candidate.row === cellToEvaluate.row && candidate.col === cellToEvaluate.col) !== undefined) {\r\n    return buildErrorResult('#REF!');\r\n  }\r\n\r\n  const cellContent = cellsTable[dataCellCoordinates.row][dataCellCoordinates.col];\r\n\r\n  // return cell content if cell does not contain a formula\r\n  if (!TableHelper.isFormula(cellContent)) {\r\n    return buildValueResult(cellContent);\r\n  }\r\n\r\n  // extract formula from cell content\r\n  const formula = cellContent.slice(1);\r\n\r\n  // evaluate formula \r\n  const extendedCellsList = evaluatedCellsList.slice();\r\n  extendedCellsList.push(cellToEvaluate);\r\n  const parser = new Parser();\r\n\r\n  parser.on('callCellValue', (referredCoordinates, done) => {\r\n    const recursiveResult = evaluateCell(cellsTable, maxCellCoordinates, {\r\n      row: referredCoordinates.row.index,\r\n      col: referredCoordinates.column.index\r\n    }, extendedCellsList);\r\n    if (recursiveResult.error !== null) {\r\n      throw new Error(recursiveResult.error);\r\n    }\r\n    return done(recursiveResult.result)\r\n  })\r\n\r\n  parser.on('callRangeValue', (startCellCoordinates, endCellCoordinates, done) => {\r\n    const resultRows = [];\r\n\r\n    for (let row = startCellCoordinates.row.index; row <= endCellCoordinates.row.index; row += 1) {\r\n      const resultRow = [];\r\n      for (let col = startCellCoordinates.column.index; col <= endCellCoordinates.column.index; col += 1) {\r\n        const recursiveResult = evaluateCell(cellsTable, maxCellCoordinates, {\r\n          row, col\r\n        }, extendedCellsList);\r\n        if (recursiveResult.error !== null) {\r\n          throw new Error(recursiveResult.error);\r\n        }\r\n        resultRow.push(recursiveResult.result);\r\n      }\r\n      resultRows.push(resultRow);\r\n    }\r\n    return done(resultRows)\r\n  })\r\n\r\n  /**\r\n   * Introduce German 'SUMME' function (calculates the sum of all given values).\r\n   */\r\n  parser.setFunction('SUMME', params => sumUpNestedValues(params));\r\n\r\n  return parser.parse(formula);\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CbaContainer from '../CbaContainer'\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport TableHelper from './TableHelper';\r\nimport evaluateCell from './CellEvaluator';\r\n\r\nexport default class CbaTable extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.runAllAvailableFormulas = this.runAllAvailableFormulas.bind(this);\r\n    this.notifyUpdateCellValue = this.notifyUpdateCellValue.bind(this);\r\n    this.notifyShowContent = this.notifyShowContent.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { config, path, runtime } = this.props;\r\n    runtime.eventEmitter.addListener(`${path}-cellFocused`, this.onCellFocused.bind(this));\r\n\r\n    if (config.isSpreadsheet) {\r\n      // register to cell-focused and content update events if you are spreadsheet table\r\n      runtime.eventEmitter.addListener(`${path}-contentUpdate`, this.onContentUpdate.bind(this));\r\n      runtime.eventEmitter.addListener(`${path}-removeOldSelection`, this.onRemoveOldSelection.bind(this));\r\n\r\n      // when the table is rendered we should see the values and not the formulas\r\n      this.runAllAvailableFormulas(true);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    const { runtime } = this.props;\r\n    runtime.eventEmitter.removeAllListeners();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  /**\r\n   * Used when component registers its state.\r\n   * @param {*} initialState \r\n   * @param {*} configProps \r\n   */\r\n  static addAttributesToInitialState(initialState, configProps) {\r\n    StateAttributeAccess.setSelectable(initialState, configProps.selectable);\r\n    if (configProps.isSpreadsheet) {\r\n      initialState.tableData = CbaTable.buildInitialData(configProps);\r\n      StateAttributeAccess.setComponentClassName(initialState, 'CbaTable');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the initial Table data as an array of arrays. \r\n   * The cells value is represented as string if available or empty string for not available cell data.\r\n   * @param {*} configProps \r\n   */\r\n  static buildInitialData(configProps) {\r\n    const data = [];\r\n    for (let i = 0; i < configProps.rows; i += 1) {\r\n      data.push([]);\r\n    }\r\n\r\n    configProps.cbaChildren.map((child, index) => {\r\n      data[child.config.row].push(child.config.text.label !== undefined ? child.config.text.label : \"\");\r\n      return false;\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * This is callback method registered as a listener for content update events triggered from cells or cell editor. \r\n   * The method update the table state accordingly and runs all the formulas at the end as one or more formula could rely on the changed cell value.\r\n   * @param {*} value \r\n   * @param {*} row \r\n   * @param {*} column \r\n   * @param {*} isReadOnly \r\n   */\r\n  onContentUpdate(value, row, column, isReadOnly) {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const data = StateAttributeAccess.extractTableData(pathState);\r\n\r\n    let isAnUpdate = false;\r\n    if (row !== undefined && column !== undefined) {\r\n      if (value !== undefined && data[row][column] !== value) {\r\n        isAnUpdate = true;\r\n        data[row][column] = value;\r\n        this.executeFormulaAndNotifyOthers(data, row, column, isReadOnly);\r\n      }\r\n    } else {\r\n      const selectedCell = StateAttributeAccess.extractSelectedCell(pathState);\r\n      if (selectedCell !== undefined && value !== undefined && data[selectedCell.row][selectedCell.column] !== value) {\r\n        isAnUpdate = true;\r\n        data[selectedCell.row][selectedCell.column] = value;\r\n        this.executeFormulaAndNotifyOthers(data, selectedCell.row, selectedCell.column, isReadOnly);\r\n      }\r\n\r\n    }\r\n    StateAttributeAccess.setTableData(pathState, data);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n\r\n    if (isAnUpdate) {\r\n      this.runAllAvailableFormulas();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes all the available formulas and notifies the cells when required.\r\n   * @param {*} isInitialization \r\n   */\r\n  runAllAvailableFormulas(isInitialization) {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const data = StateAttributeAccess.extractTableData(pathState);\r\n\r\n    for (let i = 1; i < data.length; i += 1) {\r\n      for (let j = 1; j < data[i].length; j += 1) {\r\n        if (TableHelper.isFormula(data[i][j])) {\r\n          const { valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow } = this.executeFormulaInternal(data, i, j);\r\n          this.notifyUpdateCellValue({\r\n            row: i, column: j\r\n          }, valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow, isInitialization);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  executeFormulaAndNotifyOthers(dataTable, row, column, isReadOnly) {\r\n    const { cellToUpdate, valueToUpdate, formulaToShow, isNotValidFormula, errorMessageToShow } = this.executeFormulaInternal(dataTable, row, column);\r\n    this.notifyUpdateCellValue(cellToUpdate, valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow);\r\n    this.notifyShowContent(formulaToShow, isNotValidFormula, isReadOnly, errorMessageToShow);\r\n  }\r\n\r\n  executeFormulaInternal(dataTable, row, column) {\r\n    const cellToUpdate = {\r\n      row, column\r\n    }\r\n    const formulaToShow = dataTable[row][column];\r\n\r\n    if (!TableHelper.isFormula(formulaToShow)) {\r\n      return {\r\n        cellToUpdate,\r\n        formulaToShow,\r\n        valueToUpdate: formulaToShow,\r\n        isNotValidFormula: false,\r\n        errorMessageToShow: undefined\r\n      }\r\n    }\r\n\r\n    const { config } = this.props;\r\n    const res = evaluateCell(\r\n      dataTable,\r\n      {\r\n        row: config.rows - 1, col: config.columns - 1\r\n      },\r\n      {\r\n        row: row - 1, col: column - 1\r\n      },\r\n      []\r\n    );\r\n    const hasError = res.error !== null;\r\n\r\n    return {\r\n      cellToUpdate,\r\n      formulaToShow,\r\n      valueToUpdate: CbaTable.buildResultString(hasError, res.result),\r\n      isNotValidFormula: hasError,\r\n      errorMessageToShow: hasError ? this.buildErrorMessage(res.error) : undefined\r\n    }\r\n\r\n  }\r\n\r\n  static buildResultString(hasError, resultValue) {\r\n    if (hasError) return \"###\";\r\n    if (resultValue === Infinity) return \"####\";\r\n    return resultValue;\r\n  }\r\n\r\n  buildErrorMessage(error) {\r\n    const { config, runtime } = this.props;\r\n    let { divByZeroError, naNError, syntaxError, circularError } = config;\r\n    divByZeroError = runtime.translationManager.getTranslatedTextWithFallback('spreadsheetDiv0', divByZeroError);\r\n    naNError = runtime.translationManager.getTranslatedTextWithFallback('spreadsheetNaN', naNError);\r\n    syntaxError = runtime.translationManager.getTranslatedTextWithFallback('spreadsheetSyntax', syntaxError);\r\n    circularError = runtime.translationManager.getTranslatedTextWithFallback('spreadsheetCircDep', circularError);\r\n\r\n    switch (error) {\r\n      case '#DIV/0!':\r\n        return {\r\n          errorProperty: 'spreadsheetDiv0',\r\n          errorMessage: divByZeroError\r\n        }\r\n      case '#VALUE!':\r\n        return {\r\n          errorProperty: 'spreadsheetNaN',\r\n          errorMessage: naNError\r\n        }\r\n      case '#REF!':\r\n        return {\r\n          errorProperty: 'spreadsheetCircDep',\r\n          errorMessage: circularError\r\n        }\r\n      default:\r\n        return {\r\n          errorProperty: 'spreadsheetSyntax',\r\n          errorMessage: syntaxError\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method handles a cell focused event. \r\n   * It will forward address and content(value or formula) to the cell editor \r\n   * and will properly select the headers.\r\n   */\r\n  onCellFocused = (row, column, address, isReadOnly) => {\r\n    const { config, path, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    let currentSelection = StateAttributeAccess.extractSelectedCell(pathState);\r\n    let oldSelection = StateManagerHelper.deepCopy(currentSelection);\r\n\r\n    if (config.isSpreadsheet) {\r\n      const tableData = StateAttributeAccess.extractTableData(pathState);\r\n      const { cellToUpdate, valueToUpdate, formulaToShow, isNotValidFormula, errorMessageToShow } = this.executeFormulaInternal(tableData, row, column);\r\n      this.notifyShowAddress(address);\r\n      this.notifyShowContent(formulaToShow, isNotValidFormula, isReadOnly, errorMessageToShow);\r\n      this.notifyUpdateCellValue(cellToUpdate, valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow);\r\n    }\r\n\r\n\r\n    // handle header selection \r\n    ({ currentSelection, oldSelection } = this.handleHeaderSelection(currentSelection, row, column, oldSelection));\r\n\r\n    StateAttributeAccess.setOldSelectedCell(pathState, oldSelection);\r\n\r\n    if (currentSelection.row !== oldSelection.row || currentSelection.column !== oldSelection.column) {\r\n      this.notifyRemoveLastSelection(oldSelection);\r\n    }\r\n\r\n    StateAttributeAccess.setOldSelectedCell(pathState, oldSelection);\r\n    StateAttributeAccess.setSelectedCell(pathState, currentSelection);\r\n\r\n    const oldSelected = StateAttributeAccess.extractSelected(pathState);\r\n\r\n    StateAttributeAccess.setSelected(pathState, !oldSelected);\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n    RenderingHelper.triggerRenderingViaPath(path, runtime);\r\n\r\n  }\r\n\r\n  onRemoveOldSelection() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldSelection = StateAttributeAccess.extractOldSelectedCell(pathState);\r\n    this.notifyRemoveLastSelection(oldSelection);\r\n  }\r\n\r\n  notifyRemoveLastSelection(oldSelection) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-removeLastSelection-[${oldSelection.row},${oldSelection.column}]`);\r\n  }\r\n\r\n  notifyShowAddress(address) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-showAddress`, address);\r\n  }\r\n\r\n  notifyShowContent(value, isNotValidFormula, isReadOnly, errorMessageToShow) {\r\n    const { path, runtime } = this.props;\r\n    const errorMessage = (errorMessageToShow !== undefined ? errorMessageToShow.errorMessage : undefined);\r\n    const errorProperty = (errorMessageToShow !== undefined ? errorMessageToShow.errorProperty : undefined);\r\n    runtime.eventEmitter.emit(`${path}-showContent`, value, isNotValidFormula, isReadOnly, errorMessage, errorProperty);\r\n  }\r\n\r\n  notifyUpdateCellValue(cellToUpdate, value, isNotValidFormula, formulaToShow, errorMessageToShow, isInitialization) {\r\n    const { path, runtime } = this.props;\r\n    const errorMessage = (errorMessageToShow !== undefined ? errorMessageToShow.errorMessage : undefined);\r\n    const errorProperty = (errorMessageToShow !== undefined ? errorMessageToShow.errorProperty : undefined);\r\n    runtime.eventEmitter.emit(`${path}-updateCellValue`, cellToUpdate, value, isNotValidFormula, formulaToShow, errorMessage, errorProperty, isInitialization);\r\n  }\r\n\r\n  /**\r\n   * When a cell is selected its coresponding header cell will be highlighted.\r\n   * The current method is used for that purpose, it decides if row/column header selection changed and notifies them.\r\n   * @param {*} currentSelection \r\n   * @param {*} row \r\n   * @param {*} column \r\n   * @param {*} oldSelection \r\n   */\r\n  handleHeaderSelection(currentSelection, row, column, oldSelection) {\r\n    if (currentSelection === undefined && row !== undefined && column !== undefined) {\r\n      this.notifyRowHeaderUpdate(undefined, row);\r\n      this.notifyColumnHeaderUpdate(undefined, column);\r\n      currentSelection = {\r\n        row, column\r\n      };\r\n      oldSelection = currentSelection;\r\n    } else if (currentSelection.row !== row && currentSelection.column !== column) {\r\n      this.notifyRowHeaderUpdate(currentSelection.row, row);\r\n      this.notifyColumnHeaderUpdate(currentSelection.column, column);\r\n      currentSelection = {\r\n        row, column\r\n      };\r\n    } else if (currentSelection.row !== row) {\r\n      this.notifyRowHeaderUpdate(currentSelection.row, row);\r\n      currentSelection.row = row;\r\n    } else if (currentSelection.column !== column) {\r\n      this.notifyColumnHeaderUpdate(currentSelection.column, column);\r\n      currentSelection.column = column;\r\n    }\r\n    return {\r\n      currentSelection, oldSelection\r\n    };\r\n  }\r\n\r\n  notifyColumnHeaderUpdate(currentColumn, newColumn) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-columnHeaderUpdate`, currentColumn, newColumn);\r\n  }\r\n\r\n  notifyRowHeaderUpdate(currentRow, newRow) {\r\n    const { runtime, path } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-rowHeaderUpdate`, currentRow, newRow);\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n\r\n    return (\r\n      <CbaContainer\r\n        config={config}\r\n        path={path}\r\n        runtime={runtime}\r\n        orientation={orientation}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaTable.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        rows: PropTypes.number.isRequired,\r\n        columns: PropTypes.number.isRequired,\r\n        selectable: PropTypes.bool.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport Utils from '../../utils/Utils';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\nexport default class CbaTableCellEditor extends Component {\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { runtime } = this.props;\r\n    runtime.eventEmitter.addListener(`${this.buildAttachedTableIndexPath()}-showAddress`, this.onAddressUpdate);\r\n    runtime.eventEmitter.addListener(`${this.buildAttachedTableIndexPath()}-showContent`, this.onContentUpdate);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onChangeHandler = (event) => {\r\n    this.updateContent(event.target.value);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    // avoid container tracing \r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  onAddressUpdate = (value) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setCellEditorAddress(pathState, value);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onContentUpdate = (value, isNotValid, isReadOnly, errorMessage, errorProperty) => {\r\n    this.updateContent(value, isNotValid, isReadOnly, errorMessage, errorProperty);\r\n  }\r\n\r\n  updateContent(value, isNotValidFormula, isReadOnly, errorMessage, errorProperty) {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n\r\n    if (isNotValidFormula !== undefined) {\r\n      StateAttributeAccess.setCellEditorIsNotValid(pathState, isNotValidFormula);\r\n    }\r\n    if (errorMessage !== undefined) {\r\n      StateAttributeAccess.setCellEditorErrorMessage(pathState, errorMessage);\r\n      StateAttributeAccess.setCellEditorErrorProperty(pathState, errorProperty);\r\n    }\r\n    if (isReadOnly !== undefined) {\r\n      StateAttributeAccess.setCellEditorContentIsReadOnly(pathState, isReadOnly);\r\n    }\r\n\r\n    StateAttributeAccess.setCellEditorContent(pathState, value);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onKeyPressOnInput = (e) => {\r\n    const { runtime } = this.props;\r\n    if (e.key === 'Enter') {\r\n      runtime.eventEmitter.emit(`${this.buildAttachedTableIndexPath()}-contentUpdate`, e.target.value);\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method will compose the index path for the attached table, based on the current path.\r\n   */\r\n  buildAttachedTableIndexPath() {\r\n    const { config, path } = this.props;\r\n    const cellEditorPathWithoutLastPageSegment = IndexPathHelper.dropPageSegmentFromPath(path);\r\n    return IndexPathHelper.appendPageSegmentsToPath(cellEditorPathWithoutLastPageSegment, config.attachedTable);\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { adressTitle, contentTitle } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const address = StateAttributeAccess.extractCellEditorAddress(pathState);\r\n    const content = StateAttributeAccess.extractCellEditorContent(pathState);\r\n\r\n    const readOnly = StateAttributeAccess.extractCellEditorContentIsReadOnly(pathState);\r\n    const containerStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const addressWidth = config.cellAddressRelWidth * 100;\r\n    const contentWidth = 100 - addressWidth;\r\n    const addressrStyle = Utils.deepCopy(containerStyle);\r\n    addressrStyle.left = 0;\r\n    addressrStyle.top = 0;\r\n    addressrStyle.width = `${addressWidth}%`;\r\n    addressrStyle.height = '100%';\r\n    addressrStyle.boxSizing = \"border-box\";\r\n    addressrStyle.lineHeight = containerStyle.height;\r\n    addressrStyle.textAlign = \"center\";\r\n\r\n\r\n    const contentStyle = {\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: `${addressWidth}%`,\r\n      width: `${contentWidth}%`,\r\n      height: '100%',\r\n      boxSizing: 'border-box'\r\n    }\r\n\r\n    const isError = StateAttributeAccess.extractCellEditorIsNotValid(pathState);\r\n    let errorMessage = StateAttributeAccess.extractCellEditorErrorMessage(pathState);\r\n    const errorProperty = StateAttributeAccess.extractCellEditorErrorProperty(pathState);\r\n    errorMessage = runtime.translationManager.getTranslatedTextWithFallback(errorProperty, errorMessage);\r\n\r\n    const errorStyle = {\r\n      position: \"absolute\",\r\n      top: \"-2px\",\r\n      right: \"0\",\r\n      width: \"7px\",\r\n      height: \"8px\",\r\n      fontSize: \"8px\",\r\n      lineHeight: \"8px\",\r\n      backgroundColor: \"#d8424f\",\r\n      color: \"#fff\",\r\n      display: isError ? \"block\" : \"none\"\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={containerStyle}\r\n        data-cba-id={config.pageEditId}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaTableCellEditor\")}\r\n      >\r\n        <div style={addressrStyle} title={adressTitle}>\r\n          {address !== undefined ? address : ''}\r\n          <span style={errorStyle} title={errorMessage}>&#215;</span>\r\n        </div>\r\n        <input\r\n          style={contentStyle}\r\n          title={contentTitle}\r\n          onChange={this.onChangeHandler}\r\n          onKeyPress={this.onKeyPressOnInput}\r\n          onClick={this.onClickHandler}\r\n          type=\"text\"\r\n          value={content !== undefined ? content : ''}\r\n          readOnly={readOnly}\r\n          tabIndex={config.tabIndex}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaTableCellEditor.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.getStandardConfigPropTypes(false)\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from '../PropTypesHelper';\nimport CbaSimpleTextField from \"../CbaSimpleTextField\";\nimport RenderingHelper from '../RenderingHelper';\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\nimport IndexPathHelper from '../../state/IndexPathHelper';\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\nimport StateManagerHelper from '../../state/StateManagerHelper';\n\n/**\n * \n */\nexport default class CbaCalculatorHistory extends Component {\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n\n  static getSimpleTextFieldPath(path) {\n    return IndexPathHelper.appendIndexToPageSegment(path, 0);\n  }\n\n  static setDisplayValueInState(component, value) {\n    const myState = ComponentStateHelper.getState(component);\n    StateAttributeAccess.setTextValue(myState, value);\n    ComponentStateHelper.registerState(component, myState);\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n\n    const textValue = StateAttributeAccess.extractTextValue(ComponentStateHelper.getState(this));\n\n    // Set the new value for the CbaSimpleTextField that we use for display:\n    const simpleTextFieldPath = CbaCalculatorHistory.getSimpleTextFieldPath(path);\n    const simpleTextFieldState = runtime.componentStateManager.findOrBuildStateForPathId(simpleTextFieldPath, runtime);\n    StateAttributeAccess.setTextValue(simpleTextFieldState, textValue);\n    runtime.componentStateManager.registerStateByPathId(simpleTextFieldPath, simpleTextFieldState, runtime);\n\n    const simpleTextFieldConfig = StateManagerHelper.deepCopy(config);\n    simpleTextFieldConfig.userDefinedId = undefined;\n\n    return (\n      <CbaSimpleTextField\n        runtime={runtime}\n        path={simpleTextFieldPath}\n        config={simpleTextFieldConfig}\n        orientation={orientation}\n      />\n    );\n  }\n\n}\n\nCbaCalculatorHistory.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.getStandardConfigPropTypes(false)\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from '../PropTypesHelper';\nimport CbaSimpleTextField from '../CbaSimpleTextField';\nimport RenderingHelper from '../RenderingHelper';\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\nimport IndexPathHelper from '../../state/IndexPathHelper';\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\nimport StateManagerHelper from '../../state/StateManagerHelper';\n\n/**\n * \n */\nexport default class CbaCalculatorInput extends Component {\n\n  static keyboardShortcutsRegistered = 0;\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n\n    const { config } = this.props;\n    if (config.catchKeyboardInputEvents === true) {\n      if (!CbaCalculatorInput.keyboardShortcutsRegistered) {\n        document.addEventListener('keydown', this.keydown, false);\n        document.addEventListener('paste', this.paste, false);\n        // document.addEventListener('copy', this.copy, false);\n      }\n      CbaCalculatorInput.keyboardShortcutsRegistered += 1;\n    }\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n\n    const { config } = this.props;\n    if (config.catchKeyboardInputEvents === true) {\n      CbaCalculatorInput.keyboardShortcutsRegistered -= 1;\n      if (!CbaCalculatorInput.keyboardShortcutsRegistered) {\n        document.removeEventListener('keydown', this.keydown);\n        document.removeEventListener('paste', this.paste);\n        // document.removeEventListener('copy', this.copy);\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  keydown = (event) => {\n    // key press overrides the paste event\n    if (event.ctrlKey) {\n      return false;\n    } else {\n      event.preventDefault();\n      const { runtime } = this.props;\n      runtime.calculatorsManager.keypress(event.key);\n      return true;\n    }\n  }\n\n  paste = (event) => {\n    event.preventDefault();\n    const { runtime } = this.props;\n    runtime.calculatorsManager.paste(event.clipboardData.getData(\"Text\").toString());\n  }\n\n  static getSimpleTextFieldPath(path) {\n    return IndexPathHelper.appendIndexToPageSegment(path, 0);\n  }\n\n  static createDelegateComponent(component, path, type) {\n    const delegateComponent = StateManagerHelper.deepCopy(component);\n    delegateComponent.config.userDefinedId = undefined;\n    delegateComponent.type = type;\n    // Set the new value for the CbaSimpleTextField that we use for display:\n    const delegatePath = CbaCalculatorInput.getSimpleTextFieldPath(path);\n    return {\n      delegatePath, delegateComponent\n    };\n  }\n\n  static setDisplayValueInState(component, value) {\n    const myState = ComponentStateHelper.getState(component);\n    StateAttributeAccess.setTextValue(myState, value);\n    ComponentStateHelper.registerState(component, myState);\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n\n    const textValue = StateAttributeAccess.extractTextValue(ComponentStateHelper.getState(this));\n\n    const { delegatePath, delegateComponent } = CbaCalculatorInput.createDelegateComponent({\n      config\n    }, path, \"CbaSimpleTextField\");\n    const simpleTextFieldState = runtime.componentStateManager.findOrBuildStateForPathId(delegatePath, runtime);\n    StateAttributeAccess.setTextValue(simpleTextFieldState, textValue);\n    runtime.componentStateManager.registerStateByPathId(delegatePath, simpleTextFieldState, runtime);\n\n\n    return (\n      <CbaSimpleTextField\n        runtime={runtime}\n        path={delegatePath}\n        config={delegateComponent.config}\n        orientation={orientation}\n      />\n    );\n  }\n\n}\n\nCbaCalculatorInput.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        catchKeyboardInputEvents: PropTypes.bool.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport PropTypesHelper from './PropTypesHelper';\nimport RenderingHelper from './RenderingHelper';\nimport InputComponent from './InputComponent';\n\nexport default class CbaInputField extends Component {\n\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  focus = () => {\n    this.inputRef.current.focus();\n  }\n\n  onClickFrozenHandler = (event) => {\n    const { runtime, path } = this.props;\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, 'InputField');\n    event.stopPropagation();\n  }\n\n  render() {\n    const { config, path, runtime, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selected = StateAttributeAccess.extractSelected(pathState);\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selected, orientation, runtime);\n\n    // override browser default padding value for textarea: \n    if (config.position.padding === undefined) {\n      CommonConfigHelper.setStyleAttribute(style, \"padding\", \"0px\");\n    }\n\n    CommonConfigHelper.setStyleAttribute(style, \"resize\", \"none\");\n\n    return (\n      <React.Fragment>\n        <textarea\n          style={style}\n          data-cba-id={config.pageEditId}\n          ref={this.inputRef}\n          title={CommonConfigHelper.buildTitle(config, pathState)}\n          disabled={StateAttributeAccess.extractDisabled(pathState)}\n          value={StateAttributeAccess.extractTextValue(pathState)}\n          onClick={event => InputComponent.onClickHandler(this, event)}\n          onContextMenu={event => InputComponent.onContextMenuHandler(this, event)}\n          onChange={event => InputComponent.onChangeHandler(this, event, 'InputFieldModified', 'InputField_onChange')}\n          onSelect={event => InputComponent.onSelectionHandler(this, event, 'InputField')}\n          onFocus={event => InputComponent.onFocusHandler(this, event)}\n          onBlur={event => InputComponent.onBlurHandler(this, event)}\n          onCut={event => InputComponent.onCutCopyPaste(this, event)}\n          onCopy={event => InputComponent.onCutCopyPaste(this, event)}\n          onPaste={event => InputComponent.onCutCopyPaste(this, event)}\n          readOnly={config.readOnly}\n          tabIndex={config.tabIndex}\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaInputField\")}\n          spellCheck={config.spellCheck}\n        />\n        {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaInputField-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(style)} />}\n      </React.Fragment>\n    );\n  }\n\n}\n\n\nCbaInputField.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        validationPattern: PropTypes.string,\n        validationFailEvent: PropTypes.string,\n        sourceInputPath: PropTypes.string\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n}\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\n\r\n\r\nexport default class CbaStopWatch extends Component {\r\n\r\n  state = {\r\n    counterValue: moment(new Date(0, 0, 0, 0, 0, 0))\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n    this.reinitialiseState();\r\n    this.timer = this.startTimer();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n    this.setCounterValueToState();\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  setCounterValueToState = () => {\r\n    const { counterValue } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setCounterValue(pathState, counterValue);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n  }\r\n\r\n  reinitialiseState = () => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const rawInitialCounterValue = StateAttributeAccess.extractCounterValue(pathState);\r\n    const initialCounterValue = rawInitialCounterValue ? moment(rawInitialCounterValue) : null;\r\n\r\n    if (initialCounterValue) {\r\n      this.setState((prevState) => {\r\n        const { counterValue } = prevState;\r\n        counterValue.add(initialCounterValue.hours(), 'hours');\r\n        counterValue.add(initialCounterValue.minutes(), 'minutes');\r\n        counterValue.add(initialCounterValue.seconds(), 'seconds');\r\n\r\n        return {\r\n          counterValue\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  startTimer = () => setInterval(() => {\r\n    this.setState((prevState) => {\r\n      const { counterValue } = prevState;\r\n\r\n      counterValue.add(1, 'seconds');\r\n\r\n      return {\r\n        counterValue\r\n      }\r\n    })\r\n  }, 1000);\r\n\r\n  formatTime = (counterValue) => {\r\n    const withHoursFormat = 'HH:mm:ss';\r\n    const withoutHoursFormat = 'mm:ss';\r\n\r\n    return !counterValue.hours() ? counterValue.format(withoutHoursFormat) : counterValue.format(withHoursFormat);\r\n  }\r\n\r\n  handleTaskPauseOrResume = (enterPause) => {\r\n    window.clearInterval(this.timer);\r\n\r\n    if (!enterPause) {\r\n      this.timer = this.startTimer();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n    const { counterValue } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const pressedState = StateAttributeAccess.extractSelected(pathState);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, pressedState, orientation, runtime);\r\n\r\n    return (\r\n      <div\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"centerVerticalHorizontal\")}\r\n        title={CommonConfigHelper.buildTitle(config, pathState)}\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n      >\r\n        {this.formatTime(counterValue)}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaStopWatch.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(PropTypesHelper.getStandardConfigPropTypes(false)).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Slider from 'react-rangeslider'\r\n\r\n// To include the default styles\r\n// import 'react-rangeslider/lib/index.css'\r\nimport './slider.css'\r\nimport '../CbaRichTextField/css/repeatable.css';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\nclass CbaScaleValueInput extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.scaleValueInput = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { path, runtime } = this.props;\r\n    RenderingHelper.onMount(this);\r\n    this.subscription = runtime.eventEmitter.addListener(`${path}-incrementScale`, this.onIncrementScale.bind(this));\r\n\r\n    if (this.scaleValueInput.current) {\r\n      // set tabindex on 3rd party component slider.\r\n      // later edit, added the -1 to disable completly. This blocks tabbing across elements on the page if left to default\r\n      this.scaleValueInput.current.querySelector(\".rangeslider__handle\").tabIndex = -1 // should be config.tabIndex but does not work due to 3rd part implementation\r\n    }\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    this.subscription.remove();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    if (!pathState.disabled) {\r\n      const { config, path, runtime } = this.props;\r\n      CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, undefined, event, runtime);\r\n      CommonActionsHelper.doPageSwitchForComponent(this);\r\n    } else {\r\n      CommonActionsHelper.stopEventPropagation(event);\r\n    }\r\n  }\r\n\r\n  onChangeCompleteHandler = ()  => {\r\n    const { config, runtime } = this.props;\r\n    CommonActionsHelper.sendStandardEvent(config, runtime);\r\n  }\r\n\r\n  onChangeHandler = (value) => {\r\n    const { config, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    value = this.validateValue(value);\r\n    if (pathState.disabled || Number.isNaN(value)) {\r\n      // we should not update the statemachine variable with NaN value \r\n      return;\r\n    }\r\n\r\n    const { taskManager, variableManager, replayStepMonitor } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const oldValue = variableManager.getVariable(currentTaskId, variableName);\r\n\r\n    if (oldValue !== value) {\r\n      // set new variable only if a change occurs\r\n      variableManager.setVariable(currentTaskId, variableName, value, \"integer\", runtime);\r\n      replayStepMonitor.incrementReplayStep();\r\n      RenderingHelper.triggerRendering(this);\r\n    }\r\n  }\r\n\r\n  onKeyDownHandler = (e) => {\r\n    const { config, runtime } = this.props;\r\n    const { pageIncrement, minValue, maxValue } = config;\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n\r\n    if (e.keyCode === 33) {\r\n      let newValue = value + pageIncrement;\r\n      newValue = newValue > maxValue ? maxValue : newValue;\r\n      this.onChangeHandler(newValue);\r\n      this.onChangeCompleteHandler();\r\n      e.preventDefault();\r\n    }\r\n    if (e.keyCode === 34) {\r\n      let newValue = value - pageIncrement;\r\n      newValue = newValue < minValue ? minValue : newValue;\r\n      this.onChangeHandler(newValue);\r\n      this.onChangeCompleteHandler();\r\n      e.preventDefault();\r\n    }\r\n\r\n    // call the change complete handler for Arrow Keys - the actual logic is handled by the changeHandler\r\n    if ((e.keyCode === 37) || (e.keyCode === 38) || (e.keyCode === 39) || (e.keyCode === 40)) {\r\n      this.onChangeCompleteHandler();\r\n    }\r\n  }\r\n\r\n  onIncrementScale = (incrementValue) => {\r\n    const { config, runtime } = this.props;\r\n    const { minValue, maxValue } = config;\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n\r\n    const newValue = value + incrementValue;\r\n    let incrementedValue = newValue > maxValue ? maxValue : newValue;\r\n    incrementedValue = incrementedValue < minValue ? minValue : incrementedValue;\r\n    this.onChangeHandler(incrementedValue);\r\n  }\r\n\r\n  validateValue = (value, minValue, maxValue) => {\r\n    let numberValue = parseInt(value, 10);\r\n    numberValue = numberValue < minValue ? minValue : numberValue;\r\n    numberValue = numberValue > maxValue ? maxValue : numberValue;\r\n    return numberValue;\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { minValue, maxValue, stepIncrement, thumbSize, isHorizontal } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    let value = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\r\n    value = this.validateValue(value, minValue, maxValue);\r\n    const horizontal = `rangeslider-horizontal sliderHandleWidth${thumbSize}`;\r\n    const vertical = `rangeslider-vertical sliderHandleHeight${thumbSize}`;\r\n    const orientationClass = isHorizontal ? horizontal : vertical;\r\n\r\n    const additionalCssClass = `${orientationClass} ${pathState.disabled ? \"disabled\" : \"\"}`;\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        title={pathState.disabled ? undefined : CommonConfigHelper.buildTitle(config, pathState)}\r\n        onKeyDown={this.onKeyDownHandler}\r\n        onClickCapture={this.onClickHandler}\r\n        ref={this.scaleValueInput}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n      >\r\n        <Slider\r\n          className={additionalCssClass}\r\n          min={minValue}\r\n          max={maxValue}\r\n          tooltip={false}\r\n          step={stepIncrement}\r\n          value={value}\r\n          orientation={isHorizontal ? \"horizontal\" : \"vertical\"}\r\n          onChange={this.onChangeHandler}\r\n          onChangeComplete={this.onChangeCompleteHandler}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaScaleValueInput.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape().isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CbaScaleValueInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport NumericInput from 'react-numeric-input';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport { debounce } from 'lodash';\r\n\r\nclass CbaSpinnerValueInput extends Component {\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    if (!pathState.disabled) {\r\n      CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n    } else {\r\n      CommonActionsHelper.stopEventPropagation(event);\r\n    }\r\n  }\r\n\r\n  onChangeHandlerDebounced = debounce((value) => {\r\n    this.onChangeHandler(value);\r\n  }, 2000);\r\n\r\n  onChangeHandler = (value) => {\r\n    const { config, runtime } = this.props;\r\n    const { minValue, maxValue } = config;\r\n    if (value !== null) {\r\n      const { taskManager, variableManager, replayStepMonitor } = runtime;\r\n      const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n      const variableName = config.text.dynamic.variable;\r\n\r\n      replayStepMonitor.incrementReplayStep();\r\n      value = this.validateValue(value, minValue, maxValue);\r\n      variableManager.setVariable(currentTaskId, variableName, value, \"integer\", runtime);\r\n    }\r\n\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onInvalidHandler = (errorMessage, valueAsNumber, valueAsString) => {\r\n    // Issue with invalid handler within library - the function is not called\r\n    // see https://github.com/vlad-ignatov/react-numeric-input/issues/114\r\n    if (errorMessage !== undefined) {\r\n      const { config, runtime } = this.props;\r\n      const variableName = config.text.dynamic.variable;\r\n      const { taskManager, variableManager } = runtime;\r\n      const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n      const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n\r\n      this.onChangeHandler(value);\r\n    }\r\n  }\r\n\r\n  onKeyDownHandler = (e) => {\r\n    const { config, runtime } = this.props;\r\n    const { pageIncrement, minValue, maxValue } = config;\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n    let newValue = value;\r\n\r\n    // PageUp keyCode\r\n    if (e.keyCode === 33) {\r\n      newValue = value + pageIncrement;\r\n      newValue = newValue > maxValue ? maxValue : newValue;\r\n    }\r\n    // PageDown keyCode\r\n    if (e.keyCode === 34) {\r\n      newValue = value - pageIncrement;\r\n      newValue = newValue < minValue ? minValue : newValue;\r\n    }\r\n    // ArrowUp keyCode\r\n    if (e.keyCode === 38) {\r\n      newValue = value + 1;\r\n      newValue = newValue > maxValue ? maxValue : newValue;\r\n    }\r\n    // ArrowDown keyCode\r\n    if (e.keyCode === 40) {\r\n      newValue = value - 1;\r\n      newValue = newValue < minValue ? minValue : newValue;\r\n    }\r\n\r\n    // For all special KeyCodes above, trigger manually the onChangeHandler and prevent the default onChange delayed code\r\n    if ((e.keyCode === 33) || (e.keyCode === 34) || (e.keyCode === 38) || (e.keyCode === 40)) {\r\n      this.onChangeHandler(newValue);\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  onInputHandler = (e) => {\r\n    const inputValue = e.target.value;\r\n    const regex = /(-)?[0-9]*\\.?[0-9]*/g;\r\n\r\n    if (regex.test(inputValue)) {\r\n      this.onChangeHandlerDebounced(inputValue);\r\n    }\r\n  }\r\n\r\n  validateValue = (value, minValue, maxValue) => {\r\n    let numberValue = parseInt(value, 10);\r\n    numberValue = numberValue < minValue ? minValue : numberValue;\r\n    numberValue = numberValue > maxValue ? maxValue : numberValue;\r\n    return numberValue;\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { minValue, maxValue, stepIncrement } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    let value = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\r\n    value = this.validateValue(value, minValue, maxValue);\r\n    const childStyle = {\r\n      wrap: {\r\n        position: 'unset',\r\n        display: 'unset'\r\n      },\r\n      input: {\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: 'inherit',\r\n        fontFamily: 'inherit',\r\n        fontSize: 'inherit',\r\n        fontWeight: 'inherit',\r\n        fontStyle: 'inherit',\r\n        color: 'inherit'\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        title={CommonConfigHelper.buildTitle(config, pathState)}\r\n        onKeyDown={this.onKeyDownHandler}\r\n        onClickCapture={this.onClickHandler}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n      >\r\n        <NumericInput\r\n          style={childStyle}\r\n          disabled={pathState.disabled}\r\n          min={minValue}\r\n          max={maxValue}\r\n          value={value}\r\n          step={stepIncrement}\r\n          onChange={this.onChangeHandlerDebounced}\r\n          onInvalid={this.onInvalidHandler}\r\n          tabIndex={config.tabIndex}\r\n          onInput={this.onInputHandler}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaSpinnerValueInput.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape().isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CbaSpinnerValueInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\n\r\nimport './CbaTimer.css';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\n\r\nconst ROW = \"row\";\r\nconst COLUMN_REVERSE = \"column-reverse\";\r\n\r\nconst requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame\r\n  || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\r\n\r\nconst cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;\r\n\r\nexport default class CbaTimer extends Component {\r\n\r\n  state = {\r\n    value: '0%'\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    this.setTimerType();\r\n    this.timer = requestAnimationFrame(this.timerAnimation);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    cancelAnimationFrame(this.timer);\r\n    this.timer = null;\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  timerAnimation = () => {\r\n    const { runtime, config } = this.props;\r\n    const { timerEvent, runForward } = config;\r\n    const timerData = runtime.statemachinesManager.getTimerData(timerEvent);\r\n\r\n    if (this.timer) {\r\n      const percentage = this.computeTimerPercentage(timerData, runForward);\r\n\r\n      this.setState({\r\n        value: `${percentage}%`\r\n      });\r\n\r\n      requestAnimationFrame(this.timerAnimation);\r\n    }\r\n  }\r\n\r\n  setTimerType = () => {\r\n    const { config } = this.props;\r\n    const { verticalOrientation, runForward } = config;\r\n    this.timerType = this.computeTimerType(verticalOrientation, runForward);\r\n  }\r\n\r\n  computeTimerType = (verticalOrientation) => {\r\n    if (verticalOrientation) return COLUMN_REVERSE;\r\n    if (!verticalOrientation) return ROW;\r\n\r\n    console.error(\"Timer Flags not ok\", verticalOrientation);\r\n    return null;\r\n  }\r\n\r\n  computeTimerValue = time => ({\r\n    seconds: time ? Math.ceil(time / 1000) : 0,\r\n    miliseconds: time ? (time % 1000) : null\r\n  });\r\n\r\n  computeTimerPercentage = (timerData, runForward) => {\r\n    const { totalTime, remainingTime, isRunning } = timerData;\r\n    let percentage;\r\n\r\n    if (!isRunning && !remainingTime) {\r\n      percentage = 0;\r\n    } else {\r\n      percentage = ((remainingTime * 100) / totalTime);\r\n    }\r\n\r\n    if (runForward) {\r\n      percentage = 100 - percentage;\r\n    }\r\n\r\n    return percentage.toFixed(2);\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n    const { value } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const pressedState = StateAttributeAccess.extractSelected(pathState);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, pressedState, orientation, runtime);\r\n    const { timerEvent, showSecondsLabel } = config;\r\n\r\n    const timerStyleDirection = (this.timerType === ROW) ? \"width\" : \"height\";\r\n    const animationStyle = {\r\n      [timerStyleDirection]: value\r\n    }\r\n\r\n    const timerData = runtime.statemachinesManager.getTimerData(timerEvent);\r\n    const timerParsedValue = this.computeTimerValue(timerData.remainingTime);\r\n\r\n    return (\r\n      <div\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, `cba-timer-wrap ${this.timerType}`)}\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        title={CommonConfigHelper.buildTitle(config, pathState)}\r\n      >\r\n        <div className=\"cba-timer-animation\" style={animationStyle} />\r\n        {showSecondsLabel ? <span className=\"cba-timer-secondsLabel\">{timerParsedValue.seconds}</span> : null}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTimer.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(PropTypesHelper.getStandardConfigPropTypes(false)).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CbaList.css'\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\n\r\n\r\nfunction ListItem(props) {\r\n  const { config, selectedIds, index, itemHeight, onClickHandler, parentTabIndex, itemText } = props;\r\n  const selectedBackgroundColor = \"-webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(88, 130, 181)), to(rgb(65, 102, 147))), rgb(0, 88, 159)\";\r\n  const additionalCssClass = selectedIds.includes(index) ? \"listItemNoHover\" : \"listItem\";\r\n  // accesibility event for tab navigation\r\n  function onKeyDown(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      onClickHandler(event, index);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={CommonConfigHelper.getCssClassNamesValue(config, additionalCssClass)}\r\n      style={{\r\n        height: itemHeight,\r\n        background: selectedIds.includes(index) ? selectedBackgroundColor : config.background\r\n      }}\r\n      onClick={event => onClickHandler(event, index)}\r\n      onKeyDown={event => onKeyDown(event)}\r\n      tabIndex={parentTabIndex}\r\n    >\r\n      <div className=\"listItemChild\">\r\n        {itemText}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nListItem.propTypes = {\r\n  config: PropTypes.object.isRequired,\r\n  selectedIds: PropTypes.array.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  itemHeight: PropTypes.number.isRequired,\r\n  onClickHandler: PropTypes.func.isRequired,\r\n  parentTabIndex: PropTypes.number.isRequired,\r\n  itemText: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ListItem;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess'\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport './CbaList.css'\r\nimport ListItem from './ListItem';\r\n\r\n/**\r\n * A display component that displays a list.\r\n * \r\n * This component manages the items in the list as children of its own \r\n * in the display component instances tree.\r\n */\r\nexport default class CbaList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.comboRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  // basic state management --------------------------------------------------------------\r\n\r\n  static getItemType() {\r\n    return 'ListItem';\r\n  }\r\n\r\n  /**\r\n   * Build an array of 'standard' configuration structures for the items in the items list.\r\n   * The page configurations manager expects a structure with the attributes 'type' and 'config'. \r\n   * When accessing this structure the state manager expects a config.state object as a minimum. \r\n   */\r\n  static buildListItemsArray(itemsInConfig) {\r\n    return itemsInConfig.map((itemInConfig, index, all) => {\r\n      const configOnPathSegment = StateManagerHelper.deepCopy(itemInConfig);\r\n      const additionalState = {}\r\n      StateAttributeAccess.setSelected(additionalState, false);\r\n      StateAttributeAccess.setDisabled(additionalState, false);\r\n      StateAttributeAccess.setHidden(additionalState, false);\r\n      StateAttributeAccess.setTextValue(additionalState, itemInConfig.text);\r\n      configOnPathSegment.state = additionalState;\r\n      return {\r\n        type: CbaList.getItemType(),\r\n        config: configOnPathSegment\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the disabled status stored in state\r\n   */\r\n  getDisabledFromState = () => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    return StateAttributeAccess.extractDisabled(pathState);\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns the array of selected ids stored in state\r\n   */\r\n  getSelectedIdsFromState = () => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    return StateAttributeAccess.extractSelectedIds(pathState) || [];\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the selected settings for all list items to reflect\r\n   * the currently selected items. \r\n   */\r\n  setSelectedIdInState = (newSelectedId, isCtrlKeyEvent) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    let selectedIds = StateAttributeAccess.extractSelectedIds(pathState) || [];\r\n    const selectGroupControllerState = StateAttributeAccess.extractSelectGroupControllerState(pathState);\r\n    if (!isCtrlKeyEvent) {\r\n      // clear the previous selections\r\n      selectedIds = [];\r\n    }\r\n\r\n    if (selectGroupControllerState !== undefined\r\n      && (selectGroupControllerState.singleSelectActive\r\n      || !isCtrlKeyEvent)) {\r\n      selectedIds[0] = newSelectedId;\r\n    } else if (selectedIds.includes(newSelectedId)) {\r\n      selectedIds = selectedIds.filter(value => value !== newSelectedId)\r\n    } else {\r\n      selectedIds.push(newSelectedId);\r\n    }\r\n    StateAttributeAccess.setSelectedIds(pathState, selectedIds);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n  }\r\n\r\n  getListItemText = (itemConfig, index) => {\r\n    const { runtime, path: listPath } = this.props;\r\n    const stateManager = runtime.componentStateManager;\r\n    let optionText = itemConfig.text;\r\n    const itemPath = IndexPathHelper.appendIndexToPageSegment(listPath, index);\r\n    const itemState = stateManager.findOrBuildStateForPathId(itemPath, runtime);\r\n    if (StateAttributeAccess.extractTextValue(itemState)) {\r\n      optionText = StateAttributeAccess.extractTextValue(itemState);\r\n    }\r\n    return optionText;\r\n  }\r\n\r\n  // handle user triggered events ----------------------------------------------------------------\r\n\r\n  onClickHandler = (event, index) => {\r\n    const { runtime, config, path } = this.props;\r\n    const disabled = this.getDisabledFromState();\r\n    if (disabled === false) {\r\n      const selectedIds = this.getSelectedIdsFromState();\r\n      const oldSelectedId = selectedIds[selectedIds.length - 1];\r\n      const newSelectedId = parseInt(index, 10);\r\n      const oldSelectedItem = config.items[oldSelectedId];\r\n      const newSelectedItem = config.items[newSelectedId];\r\n\r\n      runtime.replayStepMonitor.incrementReplayStep();\r\n      this.updateStateAndTriggerRendering(newSelectedId, event);\r\n\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, CbaList.buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId), event, runtime);\r\n      CommonActionsHelper.sendStandardEvent(newSelectedItem, runtime);\r\n      const defaultLinkReceiver = CommonActionsHelper.getDefaultLinkReceiver(this);\r\n      CommonActionsHelper.doPageSwitch(newSelectedItem.link, runtime, defaultLinkReceiver, path);\r\n    } else {\r\n      CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, 'ListItem');\r\n    }\r\n\r\n    event.stopPropagation();\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  static buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId) {\r\n    // the first selection will not have an old selected id\r\n    return {\r\n      oldSelected: oldSelectedId,\r\n      oldSelectedUserDefId: oldSelectedItem !== undefined ? oldSelectedItem.userDefinedId : undefined,\r\n      newSelected: newSelectedId,\r\n      newSelectedUserDefId: newSelectedItem.userDefinedId\r\n    };\r\n  }\r\n\r\n  updateStateAndTriggerRendering = (newSelectedId, event) => {\r\n    const { runtime, path } = this.props;\r\n    this.setSelectedIdInState(newSelectedId, event.ctrlKey);\r\n    RenderingHelper.triggerRenderingViaPath(path, runtime);\r\n  }\r\n\r\n\r\n  // rendering ---------------------------------------------------------------------------------------\r\n\r\n  checkForInvalidItems = () => {\r\n    const { config } = this.props;\r\n    const { items } = config;\r\n    return !Array.isArray(items) || (Array.isArray(items) && items.length === 0);\r\n  }\r\n\r\n  generateOptions = (itemsConfig, selectedIds, itemHeight, listPath, tabIndex) => itemsConfig.map((itemConfig, mapIndex) => {\r\n    const itemPath = IndexPathHelper.appendIndexToPageSegment(listPath, mapIndex)\r\n    const listItemText = this.getListItemText(itemConfig, mapIndex);\r\n    return (\r\n      <ListItem\r\n        key={itemPath}\r\n        config={itemConfig}\r\n        selectedIds={selectedIds}\r\n        itemHeight={itemHeight}\r\n        onClickHandler={this.onClickHandler}\r\n        index={mapIndex}\r\n        parentTabIndex={tabIndex}\r\n        itemText={listItemText}\r\n      />\r\n    )\r\n  })\r\n\r\n  render() {\r\n    if (this.checkForInvalidItems()) {\r\n      return React.createElement(\r\n        'div',\r\n        null,\r\n        `Invalid item configuration for list.`\r\n      );\r\n    }\r\n\r\n\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const selectedIds = this.getSelectedIdsFromState() || [];\r\n    const options = this.generateOptions(config.items, selectedIds, config.font.size * 1.9, path, config.tabIndex);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n\r\n    return (\r\n      <div\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"list-container\")}\r\n        style={wrapperStyle}\r\n        data-cba-id={config.pageEditId}\r\n        title={CommonConfigHelper.buildTitle(config, pathState)}\r\n      >\r\n        <div className=\"list\">\r\n          {options}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nCbaList.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\r\n      {\r\n        items: PropTypes.array.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CbaContainer from './CbaContainer';\r\nimport CbaRectangle from './CbaRectangle';\r\nimport CbaSingleLineInputField from './CbaSingleLineInputField';\r\nimport CbaSimpleTextField from './CbaSimpleTextField';\r\nimport CbaButton from './CbaButton';\r\nimport CbaRadioButton from './CbaRadioButton';\r\nimport CbaCheckbox from './CbaCheckbox';\r\nimport CbaLink from './CbaLink';\r\nimport CbaPageArea from './CbaPageArea';\r\nimport CbaRegionMap from './CbaRegionMap';\r\nimport CbaInnerHtml from './CbaInnerHtml';\r\nimport CbaRichTextField from './CbaRichTextField/CbaRichTextField';\r\nimport CbaComboBox from './CbaComboBox';\r\nimport CbaMedia from './media/CbaMedia';\r\nimport CbaExternalPageFrame from './CbaExternalPageFrame';\r\nimport CbaTree from './CbaTree/CbaTree';\r\nimport CbaTreeChildArea from './CbaTree/CbaTreeChildArea';\r\nimport CbaTreeView from './CbaTree/CbaTreeView';\r\nimport CbaTable from './table/CbaTable';\r\nimport CbaTableCell from './table/CbaTableCell';\r\nimport CbaTableCellEditor from './table/CbaTableCellEditor';\r\nimport CbaCalculatorHistory from './calculator/CbaCalculatorHistory';\r\nimport CbaCalculatorInput from './calculator/CbaCalculatorInput';\r\nimport CbaInputField from './CbaInputField';\r\nimport CbaStopWatch from './CbaTimer/CbaStopWatch';\r\nimport CbaScaleValueInput from './variable/CbaScaleValueInput';\r\nimport CbaSpinnerValueInput from './variable/CbaSpinnerValueInput';\r\nimport CbaTimer from './CbaTimer/CbaTimer';\r\nimport CbaList from './list/CbaList';\r\n\r\nexport default class CbaInterpreter extends Component {\r\n\r\n\r\n  static getComponentClass(componentTypeName) {\r\n    switch (componentTypeName) {\r\n      case 'CbaContainer':\r\n        return CbaContainer;\r\n      case 'CbaRectangle':\r\n        return CbaRectangle;\r\n      case 'CbaSingleLineInputField':\r\n        return CbaSingleLineInputField;\r\n      case 'CbaSimpleTextField':\r\n        return CbaSimpleTextField;\r\n      case 'CbaButton':\r\n        return CbaButton;\r\n      case 'CbaRadioButton':\r\n        return CbaRadioButton;\r\n      case 'CbaCheckbox':\r\n        return CbaCheckbox;\r\n      case 'CbaLink':\r\n        return CbaLink;\r\n      case 'CbaPageArea':\r\n        return CbaPageArea;\r\n      case 'CbaRegionMap':\r\n        return CbaRegionMap;\r\n      case 'CbaInnerHtml':\r\n        return CbaInnerHtml;\r\n      case 'CbaRichTextField':\r\n        return CbaRichTextField;\r\n      case 'CbaComboBox':\r\n        return CbaComboBox;\r\n      case 'CbaExternalPageFrame':\r\n        return CbaExternalPageFrame;\r\n      case 'CbaMedia':\r\n        return CbaMedia;\r\n      case 'CbaTree':\r\n        return CbaTree;\r\n      case 'CbaTreeChildArea':\r\n        return CbaTreeChildArea;\r\n      case 'CbaTreeView':\r\n        return CbaTreeView;\r\n      case 'CbaTable':\r\n        return CbaTable;\r\n      case 'CbaTableCell':\r\n        return CbaTableCell;\r\n      case 'CbaTableCellEditor':\r\n        return CbaTableCellEditor;\r\n      case 'CbaCalculatorInput':\r\n        return CbaCalculatorInput;\r\n      case 'CbaCalculatorHistory':\r\n        return CbaCalculatorHistory;\r\n      case 'CbaInputField':\r\n        return CbaInputField;\r\n      case 'CbaStopWatch':\r\n        return CbaStopWatch;\r\n      case 'CbaTimer':\r\n        return CbaTimer;\r\n      case 'CbaScaleValueInput':\r\n        return CbaScaleValueInput\r\n      case 'CbaSpinnerValueInput':\r\n        return CbaSpinnerValueInput;\r\n      case 'CbaList':\r\n        return CbaList;\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { type, content } = config;\r\n\r\n    // Take care: This variable has to be capitalized for <Delegate .../> to work!\r\n    const Delegate = CbaInterpreter.getComponentClass(type);\r\n\r\n    if (Delegate === undefined) {\r\n      switch (type) {\r\n        case 'PlainText':\r\n          return React.createElement(\r\n            'div',\r\n            null,\r\n            content\r\n          );\r\n        default:\r\n          console.error(`Interpreter does not know component type ${type}`);\r\n          return React.createElement(\r\n            'div',\r\n            null,\r\n            `Interpreter does not know component type: ${type}`\r\n          );\r\n      }\r\n    } else {\r\n      return (\r\n        <Delegate\r\n          config={config.config}\r\n          path={path}\r\n          runtime={runtime}\r\n          orientation={orientation}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n\r\nCbaInterpreter.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape({\r\n    type: PropTypes.string.isRequired,\r\n    config: PropTypes.object,\r\n    content: PropTypes.string\r\n  }).isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n}\r\n","import React, { Component } from 'react';\nimport SplitPane from 'react-split-pane';\nimport PropTypes from 'prop-types';\nimport { HotKeys } from 'react-hotkeys';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaInterpreter from './CbaInterpreter';\nimport { SCORING, TRACING, STATE_MACHINE, ModalDialog } from \"../dialog/ModalManager\";\nimport Utils from \"../utils/Utils\";\nimport DialogPresenter from \"../dialog/DialogPresenter\"\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\n\nexport default class CbaTestPresenter extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isDialogOpen: false,\n      currentModal: '',\n      currentModalTitle: '',\n      currentModalContent: {},\n      isPaused: false\n    };\n\n    // TODO: Drop this reference in the runtime once we have merged the static modal dialogs into the DialogPresenter:\n    //       The SpecialClickActionsHelper would use the DialogPresenter instead of the CbaTestPresenter then and the DialogPresenter is in the runtime already. \n    props.runtime.testPresenter = this;\n\n  }\n\n  openDialog = (modalType, windowTitle, currentModalContent) => {\n    this.setState({\n      isDialogOpen: true,\n      currentModal: modalType,\n      currentModalTitle: windowTitle,\n      currentModalContent\n    });\n  }\n\n  handleClose = () => this.setState({\n    isDialogOpen: false\n  });\n\n  pause = () => this.setState({\n    isPaused: true\n  })\n\n  resume = () => this.setState({\n    isPaused: false\n  })\n\n  generateTaskStyles = cssStyles => (\n    /**\n     * Handles insertion of CSS defined by an item author #5327\n     */\n    // eslint-disable-next-line react/no-danger\n    <style dangerouslySetInnerHTML={\n      {\n        __html: cssStyles\n      }\n    }\n    />\n  );\n\n  static findPageForPageName(pageName, runtime) {\n    if (pageName === undefined) {\n      return undefined;\n    }\n\n    const page = runtime.pageConfigurationsManager.findPage(pageName);\n    if (page === undefined) {\n      console.error(`Could not find page with name ${pageName}`);\n    }\n    return page;\n  }\n\n  static buildPathForPage(pageName, pageAreaName, runtime) {\n    if (pageName === undefined) {\n      return undefined;\n    }\n\n    return IndexPathHelper.appendPageSegmentToPathRoot(\n      runtime.taskManager.getCurrentStatePathRoot(),\n      'main',\n      pageAreaName,\n      IndexPathHelper.buildPageSegment(pageName)\n    );\n  }\n\n  static isRightToLeftPage(page) {\n    if (page === undefined) return undefined;\n    return page.isRightToLeft;\n\n  }\n\n  static getPagePosition(page) {\n    if (page === undefined) return undefined;\n    if (page.content === undefined) return undefined;\n    if (page.content.config === undefined) return undefined;\n    return page.content.config.position;\n\n  }\n\n  static getPageWidth(page, defaultWidth) {\n    const position = CbaTestPresenter.getPagePosition(page);\n    return (position === undefined) ? defaultWidth : (position.width + position.x);\n  }\n\n  static getPageHeight(page, defaultHeight) {\n    const position = CbaTestPresenter.getPagePosition(page);\n    return (position === undefined) ? defaultHeight : (position.height + position.y);\n  }\n\n  static getDividerConfig(itemLayout) {\n    if (itemLayout === undefined) return undefined;\n    return itemLayout.divider;\n  }\n\n  static getDividerWidth(itemLayout) {\n    const divider = CbaTestPresenter.getDividerConfig(itemLayout);\n    if (divider === undefined) return 0;\n    return divider.width === undefined ? 0 : divider.width;\n  }\n\n  static getDividerColor(itemLayout) {\n    const divider = CbaTestPresenter.getDividerConfig(itemLayout);\n    if (divider === undefined) return 'rgb(0,0,0,1)';\n    return divider.color === undefined ? 'rgb(0,0,0,1)' : divider.color;\n  }\n\n  static getXAreaSize(itemLayout) {\n    if (itemLayout === undefined) return 0;\n    return itemLayout.xSize === undefined ? 0 : itemLayout.xSize;\n  }\n\n\n  static getXPlacement(itemLayout) {\n    if (itemLayout === undefined) return \"left\";\n    return itemLayout.xPlacement === undefined ? \"left\" : itemLayout.xPlacement;\n  }\n\n  static isHorizontalDivider(itemLayout) {\n    const xPlacement = CbaTestPresenter.getXPlacement(itemLayout);\n    return xPlacement === \"top\" || xPlacement === \"bottom\";\n  }\n\n  static isDividerMovable(itemLayout) {\n    if (itemLayout === undefined) return false;\n    return itemLayout.divider.moveable; // TYPO in JSON ?\n  }\n\n  static isXPageFirst(itemLayout) {\n    const xPlacement = CbaTestPresenter.getXPlacement(itemLayout);\n    return xPlacement === \"top\" || xPlacement === \"left\";\n  }\n\n  static getRtlOrientation(page) {\n    return CbaTestPresenter.isRightToLeftPage(page) ? \"right\" : \"left\";\n  }\n\n  static getRtlDir(page, xPage, isXPageFirst) {\n    if (isXPageFirst) {\n      return {\n        firstAreaDir: CbaTestPresenter.isRightToLeftPage(xPage) ? \"rtl\" : \"ltr\",\n        secondAreaDir: CbaTestPresenter.isRightToLeftPage(page) ? \"rtl\" : \"ltr\",\n      }\n    } else {\n      return {\n        firstAreaDir: CbaTestPresenter.isRightToLeftPage(page) ? \"rtl\" : \"ltr\",\n        secondAreaDir: CbaTestPresenter.isRightToLeftPage(xPage) ? \"rtl\" : \"ltr\",\n      }\n    }\n  }\n\n  static calculateDividerOffset(isXPageFirst, isHorizontalDivider, xAreaSize, totalHeight, totalWidth) {\n    if (isXPageFirst) return xAreaSize;\n    if (isHorizontalDivider) return totalHeight - xAreaSize;\n    return totalWidth - xAreaSize;\n  }\n\n  render() {\n    const { runtime, taskId, settings } = this.props;\n\n    const topLevelConfiguration = runtime.presenterStateManager.getTaskState(taskId);\n\n    const taskCssStyles = topLevelConfiguration.cssStyles;\n\n    const totalWidth = topLevelConfiguration !== undefined && topLevelConfiguration.itemWidth !== undefined ? topLevelConfiguration.itemWidth : 600;\n    const totalHeight = topLevelConfiguration !== undefined && topLevelConfiguration.itemHeight !== undefined ? topLevelConfiguration.itemHeight : 600;\n\n    const foundPage = CbaTestPresenter.findPageForPageName(topLevelConfiguration.standardPage, runtime);\n\n    // Declare a dummy page if we cannot find the specified top level page due to a misconfigured item: we cannot make the generator foolproof.\n    if (foundPage === undefined) {\n      console.error(`Cannot find top level page ${topLevelConfiguration.standardPage} for taskId ${taskId}, showing error page now!`, topLevelConfiguration);\n    }\n    const standardPage = foundPage === undefined\n      ? {\n        content: {\n          type: 'PlainText',\n          content: `Cannot find page ${topLevelConfiguration.standardPage}`\n        },\n        isRighToLeft: false,\n      }\n      : foundPage\n\n\n    const xPage = CbaTestPresenter.findPageForPageName(topLevelConfiguration.xPage, runtime);\n\n    const standardPath = CbaTestPresenter.buildPathForPage(topLevelConfiguration.standardPage, 'standard', runtime);\n    const xPath = CbaTestPresenter.buildPathForPage(topLevelConfiguration.xPage, 'xPage', runtime);\n\n    const { withEditContextMenu, itemLayout } = topLevelConfiguration;\n\n    const isHorizontalDivider = CbaTestPresenter.isHorizontalDivider(itemLayout);\n    const isXPageFirst = CbaTestPresenter.isXPageFirst(itemLayout);\n\n    const xAreaSize = CbaTestPresenter.getXAreaSize(itemLayout);\n    const dividerOffset = CbaTestPresenter.calculateDividerOffset(isXPageFirst, isHorizontalDivider, xAreaSize, totalHeight, totalWidth);\n    const dividerThickness = CbaTestPresenter.getDividerWidth(itemLayout);\n    const dividerGrabArea = 10;\n    const isDividerMovable = CbaTestPresenter.isDividerMovable(itemLayout);\n    const isDividerHidden = dividerThickness === 0 && !isDividerMovable;\n\n    const standardPageOrientation = CbaTestPresenter.getRtlOrientation(standardPage);\n    const xPageOrientation = CbaTestPresenter.getRtlOrientation(xPage);\n\n    const pagesAreaDir = CbaTestPresenter.getRtlDir(standardPage, xPage, isXPageFirst);\n    const standardPageDir = standardPageOrientation === \"right\" ? \"rtl\" : \"ltr\";\n\n    const itemBackgroundColor = 'rgb(192, 192, 192)';\n\n    const noDividerStyle = {\n      position: 'absolute',\n      [standardPageOrientation]: 0,\n      top: 0,\n      width: totalWidth,\n      height: totalHeight,\n      overflow: \"auto\",\n      background: itemBackgroundColor\n    }\n\n    const wrapStyle = {\n      width: totalWidth,\n      height: totalHeight,\n      position: \"absolute\",\n      [standardPageOrientation]: 0\n    };\n\n    const dividerStyle = {\n      width: isHorizontalDivider ? \"100%\" : dividerThickness + dividerGrabArea,\n      height: isHorizontalDivider ? dividerThickness + dividerGrabArea : \"100%\",\n      background: CbaTestPresenter.getDividerColor(topLevelConfiguration.itemLayout),\n      display: isDividerHidden ? \"none\" : \"block\",\n      MozBoxSizing: \"border-box\",\n      WebkitBoxSizing: \"border-box\",\n      boxSizing: \"border-box\",\n      MozBackgroundClip: \"padding\",\n      WebkitBackgroundClip: \"padding\",\n      backgroundClip: \"padding-box\",\n      transition: \"none\"\n    };\n\n    const areaWrapStyle = {\n      overflow: 'auto',\n      background: itemBackgroundColor\n    };\n\n    const areaStyle = {\n      position: 'absolute',\n      [isXPageFirst ? xPageOrientation : standardPageOrientation]: 0,\n      top: 0,\n      background: itemBackgroundColor\n    };\n\n    // define fixed hot keys as key map and keyHandlers map:\n    const keyMap = {\n      openConfigParams: ['alt+v'],\n      cut: ['ctrl+x'],\n      copy: ['ctrl+c'],\n      paste: ['ctrl+v'],\n      print: ['ctrl+p', 'ctrl+shift+p']\n    };\n\n    const keyHandlers = {\n      openConfigParams: (event) => {\n        Utils.printCbaVersion();\n      },\n      cut: (withEditContextMenu\n        ? (event) => { runtime.clipboardManager.cut('keyboard', undefined, runtime); }\n        : (event) => { }\n      ),\n      copy: (withEditContextMenu\n        ? (event) => { runtime.clipboardManager.copy('keyboard', undefined, runtime); }\n        : (event) => { }\n      ),\n      paste: (withEditContextMenu\n        ? (event) => { runtime.clipboardManager.paste('keyboard', undefined, runtime); }\n        : (event) => { }\n      ),\n      print: (event) => {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    };\n\n    // add dynamically configured debugging hot keys:\n    const { debugScoreHotKey, debugTraceHotKey, debugStatemachineHotKey } = settings;\n    if (debugTraceHotKey !== undefined && debugTraceHotKey.length > 0) {\n      keyMap.openTrace = [debugTraceHotKey];\n      keyHandlers.openTrace = (event) => {\n        event.preventDefault();\n        const currentModalContent = runtime.traceLogBuffer;\n        this.openDialog(TRACING, 'Tracing Debug Window', currentModalContent);\n      }\n    }\n    if (debugScoreHotKey !== undefined && debugScoreHotKey.length > 0) {\n      keyMap.openScoring = [debugScoreHotKey];\n      keyHandlers.openScoring = (event) => {\n        event.preventDefault();\n        const currentModalContent = runtime.taskManager.getScoring();\n        this.openDialog(SCORING, 'Scoring Debug Window', currentModalContent);\n      }\n    }\n    if (debugStatemachineHotKey !== undefined && debugStatemachineHotKey.length > 0) {\n      keyMap.openStateMachine = [debugStatemachineHotKey];\n      keyHandlers.openStateMachine = (event) => {\n        event.preventDefault();\n        const { statemachinesManager, variableManager } = runtime;\n        const currentStatemachineData = statemachinesManager.getCurrentStateMachineLeafStates();\n        const currentVariableData = variableManager.buildVariablesInfoArrayForTask(taskId);\n\n        const nullSafeStatemachineData = {\n          variables: currentVariableData === undefined ? [] : currentVariableData,\n          states: currentStatemachineData === undefined ? [] : currentStatemachineData,\n          visitedStates: statemachinesManager.getVisitedStates(),\n          raisedEvents: statemachinesManager.getRaisedEvents()\n        }\n        this.openDialog(STATE_MACHINE, 'State Machine Debug Window', nullSafeStatemachineData);\n      }\n    }\n\n    const { isDialogOpen, currentModal, currentModalTitle, currentModalContent, isPaused } = this.state;\n\n    const itemName = runtime.taskManager.getCurrentTestTaskItemNames().item;\n    const customFontsCss = CommonConfigHelper.buildCustomFontsCss(runtime.taskManager.getCustomFontMappings(itemName), runtime);\n\n    return (\n      <HotKeys className=\"appContainer\" style={{ width: totalWidth, height: totalHeight }} keyMap={keyMap} handlers={keyHandlers} tabIndex={1} >\n        {customFontsCss ? this.generateTaskStyles(customFontsCss) : null}\n        {taskCssStyles ? this.generateTaskStyles(taskCssStyles) : null}\n        {\n          (xPage === undefined\n            ? (\n              <div style={noDividerStyle} dir={CbaTestPresenter.isRightToLeftPage(standardPage) ? \"rtl\" : \"\"} onScroll={CommonActionsHelper.traceUserScroll(standardPath, runtime)}>\n                <CbaInterpreter config={standardPage.content} path={standardPath} runtime={runtime} orientation={standardPageOrientation} />\n              </div>\n            )\n            : (\n              <div key={IndexPathHelper.getRootFromPath(standardPath)} style={wrapStyle} dir={standardPageDir} onScroll={CommonActionsHelper.traceUserScroll(standardPath, runtime, xPath, isXPageFirst)}>\n                <SplitPane\n                  split={isHorizontalDivider ? \"horizontal\" : \"vertical\"}\n                  pane1Style={areaWrapStyle}\n                  pane2Style={areaWrapStyle}\n                  resizerStyle={dividerStyle}\n                  minSize={0}\n                  maxSize={dividerThickness === 0 ? -1 : -dividerThickness}\n                  defaultSize={dividerOffset}\n                  allowResize={isDividerMovable}\n                >\n                  <div style={areaStyle} dir={pagesAreaDir.firstAreaDir}>\n                    <CbaInterpreter config={isXPageFirst ? xPage.content : standardPage.content} path={isXPageFirst ? xPath : standardPath} runtime={runtime} orientation={isXPageFirst ? xPageOrientation : standardPageOrientation} />\n                  </div>\n\n                  <div style={areaStyle} dir={pagesAreaDir.secondAreaDir}>\n                    <CbaInterpreter config={isXPageFirst ? standardPage.content : xPage.content} path={isXPageFirst ? standardPath : xPath} runtime={runtime} orientation={isXPageFirst ? standardPageOrientation : xPageOrientation} />\n                  </div>\n                </SplitPane>\n              </div>\n            )\n          )\n        }\n\n        <ModalDialog isOpen={isDialogOpen} closeDialog={this.handleClose} currentModal={currentModal} currentModalTitle={currentModalTitle} currentModalContent={currentModalContent} runtime={runtime} />\n        <DialogPresenter runtime={runtime} findPageForPageName={CbaTestPresenter.findPageForPageName} />\n\n        <div className={`pause-backdrop ${!isPaused ? 'display-none' : ''}`}>\n          <div className=\"pause-button\"> </div>\n        </div>\n      </HotKeys >\n    );\n  }\n\n}\n\nCbaTestPresenter.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  taskId: PropTypes.string.isRequired,\n  settings: PropTypes.object.isRequired\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport CommonActionsHelper from './CommonActionsHelper';\r\nimport Utils from '../utils/Utils';\r\n\r\nexport default class HeaderButtons extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // temporary rerender on click\r\n    this.state = {\r\n      // eslint rule malfunction, state used in on click handler\r\n      // eslint-disable-next-line react/no-unused-state\r\n      renderHelper: 0\r\n    }\r\n  }\r\n\r\n  handleClick = (event, button, index) => {\r\n    const { runtime } = this.props;\r\n\r\n    // trace event in log\r\n    const traceDetails = {\r\n      index\r\n    };\r\n    CommonActionsHelper.addMouseEventDetails(event, traceDetails);\r\n    runtime.traceLogBuffer.reportEvent('HeaderButton', new Date(), traceDetails);\r\n\r\n    // send state machine event\r\n    CommonActionsHelper.sendEvent(button.event, runtime);\r\n\r\n\r\n    // temporary rerender on click\r\n    this.setState(oldState => ({\r\n      renderHelper: oldState.renderHelper + 1\r\n    }\r\n    ));\r\n  }\r\n\r\n  getLargestHeightFromButtons = (buttons) => {\r\n    let largestHeight = 0;\r\n    buttons.forEach((button) => {\r\n      largestHeight = largestHeight < button.height ? button.height : largestHeight;\r\n    });\r\n\r\n    return largestHeight;\r\n    // or return this buttons.map((button) => button.height).reduce((accumulator, currentValue) => (accumulator < currentValue ? currentValue : accumulator));\r\n  }\r\n\r\n  isButtonInvalid = (buttonConfig) => {\r\n    let invalid = false;\r\n\r\n    // check width and set default if none\r\n    if (!buttonConfig.width || buttonConfig.width <= 0) {\r\n      buttonConfig.width = 110;\r\n    }\r\n    // check height and set default if none\r\n    if (!buttonConfig.height || buttonConfig.height <= 0) {\r\n      buttonConfig.height = 26;\r\n    }\r\n\r\n    // check image and text\r\n    if (!buttonConfig.image && !buttonConfig.text) {\r\n      console.log(\"Button Config for \", buttonConfig, \"  has no image or no text\");\r\n      invalid = true;\r\n    }\r\n\r\n    // check event\r\n    if (!buttonConfig.event || !(typeof buttonConfig.event === 'string')) {\r\n      console.log(\"Button Config for \", buttonConfig, \" has invalid event\");\r\n      invalid = true;\r\n    }\r\n\r\n    return invalid;\r\n  }\r\n\r\n  buildButtons = (config, barWidth) => {\r\n    const largestHeight = this.getLargestHeightFromButtons(config);\r\n    let buttonTotalWidth = 0;\r\n    const { runtime } = this.props;\r\n\r\n    return config.map((button, index) => {\r\n      if (this.isButtonInvalid(button)) return null;\r\n\r\n      const buttonPadding = 5;\r\n\r\n      const buttonStyle = {\r\n        height: largestHeight || 32,\r\n        width: button.width || \"auto\",\r\n        overflow: \"hidden\",\r\n        cursor: \"pointer\"\r\n      };\r\n\r\n      const buttonWrapStyle = {\r\n        padding: buttonPadding,\r\n        display: \"inline-block\",\r\n        float: \"right\"\r\n      };\r\n\r\n      // handle image case\r\n      if (button.image) {\r\n        buttonStyle.backgroundImage = `url(${CommonConfigHelper.getProperResourcePath(button.image, runtime)})`;\r\n        buttonStyle.backgroundSize = \"contain\";\r\n        buttonStyle.backgroundPosition = \"center\";\r\n        buttonStyle.backgroundRepeat = \"no-repeat\";\r\n      }\r\n\r\n      // handle drop buttons case\r\n      buttonTotalWidth += button.width + buttonPadding * 2;\r\n      if (buttonTotalWidth > barWidth) {\r\n        return null;\r\n      }\r\n\r\n      return (\r\n        // disabled because we don't have a unique id to use as key and also the array does not change.\r\n        // eslint-disable-next-line react/no-array-index-key\r\n        <span style={buttonWrapStyle} key={index}>\r\n          <button type=\"button\" onClick={(event) => { this.handleClick(event, button, index) }} style={buttonStyle}>{button.image ? false : button.text}</button>\r\n        </span>\r\n      )\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config } = this.props;\r\n    if (!config || !Utils.isNonEmptyArray(config)) {\r\n      return null;\r\n    }\r\n\r\n    const { taskManager } = runtime;\r\n    const { itemWidth } = taskManager.getTopLevelConfiguration();\r\n    const wrapStyle = {\r\n      width: itemWidth\r\n    };\r\n\r\n    const buttons = this.buildButtons(config, itemWidth);\r\n\r\n\r\n    return <div style={wrapStyle} className=\"headerButtonsToolbar\">{buttons}</div>\r\n  }\r\n\r\n}\r\n\r\nHeaderButtons.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.array.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CarouselProvider, Slider, Slide, ButtonBack, ButtonNext } from 'pure-react-carousel';\r\nimport 'pure-react-carousel/dist/react-carousel.es.css';\r\nimport './TopButtonToolbar.css';\r\n\r\nexport default class TopButtonToolbar extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.currentSlide = 0;\r\n  }\r\n\r\n  static getButtonPadding() {\r\n    return 5;\r\n  }\r\n\r\n  static getCarouselMarginBottom() {\r\n    return 5;\r\n  }\r\n\r\n  /*\r\n  * external function that can be used to compute carousel current height\r\n  */\r\n  static getCarouselHeight = (buttonHeight) => {\r\n    const padding = TopButtonToolbar.getButtonPadding() * 2;\r\n    const marginBottom = TopButtonToolbar.getCarouselMarginBottom();\r\n\r\n    return buttonHeight + padding + marginBottom;\r\n  }\r\n\r\n  /*\r\n  * function used to build array of slides that server the carousel\r\n  */\r\n  buildSlides = buttonArray => (\r\n    buttonArray.map((item, index) => (\r\n      <Slide key={item.key} index={index}>\r\n        <span className=\"button-container\">\r\n          {item}\r\n        </span>\r\n      </Slide>\r\n    ))\r\n  )\r\n\r\n\r\n  /*\r\n  * build the config needed for the carousel\r\n  */\r\n  buildCarouselConfig = (buttonHeight, widthRatio) => {\r\n    const { itemWidth } = this.props;\r\n\r\n    const navButtonsWidth = 25;\r\n    const buttonPadding = TopButtonToolbar.getButtonPadding();\r\n    const buttonWidth = buttonHeight * widthRatio;\r\n\r\n    const carouselWidth = itemWidth - navButtonsWidth * 2 - buttonPadding * 2;\r\n    const carouselHeight = buttonHeight + buttonPadding * 2;\r\n\r\n    const slideWidth = buttonWidth + buttonPadding * 2;\r\n    const slideHeight = carouselHeight;\r\n\r\n    const leftArrow = String.fromCharCode(\"0x2039\");\r\n    const rightArrow = String.fromCharCode(\"0x203A\");\r\n\r\n    const carouselWrapStyle = {\r\n      width: itemWidth,\r\n      marginBottom: TopButtonToolbar.getCarouselMarginBottom()\r\n    }\r\n\r\n    const carouselStyle = {\r\n      width: carouselWidth,\r\n      height: carouselHeight,\r\n      margin: \"0 auto\",\r\n    }\r\n\r\n    const buttonStyle = {\r\n      height: carouselHeight\r\n    }\r\n\r\n    return {\r\n      button: {\r\n        height: buttonHeight,\r\n        width: buttonWidth,\r\n        padding: buttonPadding\r\n      },\r\n\r\n      slides: {\r\n        width: slideWidth,\r\n        height: slideHeight,\r\n        visibleSlides: Math.floor(carouselWidth / slideWidth),\r\n      },\r\n\r\n      carouselWidth, // padding for next and prev\r\n      carouselHeight, // button paddings\r\n\r\n      arrows: {\r\n        left: leftArrow,\r\n        right: rightArrow\r\n      },\r\n\r\n      styles: {\r\n        carouselStyle,\r\n        buttonStyle,\r\n        carouselWrapStyle,\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n  * computes the offset needed for the carousel to set the active button in the middle\r\n  */\r\n  computeCurrentSlideCenter = (visibleSlides, buttons) => {\r\n    let offset = 0\r\n    // only valid for more buttons than slides.\r\n    if (visibleSlides >= buttons.length) return offset;\r\n\r\n    const middlePoint = Math.ceil(visibleSlides / 2);\r\n    let activeSlide;\r\n    buttons.forEach((button, index) => {\r\n      if (button.props.className === \"active\") {\r\n        activeSlide = index + 1;\r\n      }\r\n    });\r\n\r\n    offset = activeSlide - middlePoint;\r\n\r\n    offset = offset < 0 ? 0 : offset;\r\n    offset = offset > buttons.length - visibleSlides ? buttons.length - visibleSlides : offset;\r\n\r\n    return offset;\r\n\r\n  }\r\n\r\n  computeCurrentSlideNotCenter = () => (\r\n    this.carousel ? this.carousel.carouselStore.getStoreState().currentSlide : 0\r\n  )\r\n\r\n  buildCurrentSlide = (carouselConfig, isCenter) => {\r\n    const { buttons } = this.props;\r\n    return (isCenter\r\n      ? this.computeCurrentSlideCenter(carouselConfig.slides.visibleSlides, buttons)\r\n      : this.computeCurrentSlideNotCenter()\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { buttonHeight, buttonRatio, activateCenterToolbarOnChange, className, buttons } = this.props;\r\n    const carouselConfig = this.buildCarouselConfig(buttonHeight, buttonRatio);\r\n    this.currentSlide = this.buildCurrentSlide(carouselConfig, activateCenterToolbarOnChange);\r\n\r\n    return (\r\n      <div className={`carousel-wrap ${className}`} style={carouselConfig.styles.carouselWrapStyle}>\r\n        <CarouselProvider\r\n          ref={(c) => { this.carousel = c; }}\r\n          style={carouselConfig.styles.carouselStyle}\r\n          className={className}\r\n          naturalSlideWidth={carouselConfig.slides.width}\r\n          naturalSlideHeight={carouselConfig.slides.height}\r\n          totalSlides={buttons.length}\r\n          visibleSlides={carouselConfig.slides.visibleSlides}\r\n          currentSlide={this.currentSlide}\r\n        >\r\n          <Slider style={carouselConfig.styles.carouselStyle}>\r\n            {this.buildSlides(buttons)}\r\n          </Slider>\r\n\r\n          <ButtonBack className=\"nav-buttons back\" style={carouselConfig.styles.buttonStyle}>{carouselConfig.arrows.left}</ButtonBack>\r\n          <ButtonNext className=\"nav-buttons next\" style={carouselConfig.styles.buttonStyle}>{carouselConfig.arrows.right}</ButtonNext>\r\n        </CarouselProvider>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nTopButtonToolbar.propTypes = {\r\n  className: PropTypes.string.isRequired,\r\n  buttons: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  buttonHeight: PropTypes.number.isRequired,\r\n  buttonRatio: PropTypes.number,\r\n  activateCenterToolbarOnChange: PropTypes.bool,\r\n  itemWidth: PropTypes.number\r\n}\r\n\r\nTopButtonToolbar.defaultProps = {\r\n  itemWidth: 800,\r\n  buttonRatio: 3,\r\n  activateCenterToolbarOnChange: false\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TopButtonToolBar from './TopButtonToolbar'\nimport RecommendationsManager from '../state/RecommendationsManager';\nimport CommonActionsHelper from \"./CommonActionsHelper\";\nimport './TaskNavigator.css';\n\n/**\n * Component that manages the test/task menu bars in the header area.\n */\nexport default class TaskNavigator extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recommendations: []\n    }\n\n  }\n\n  // public API -----------------------------------------------------------------------------\n\n  /**\n   * Set the currently recommended test/task combination.\n   * \n   * The method expects an array of objects. Each object must specify a testName and a taskName.\n   */\n  highlightRecommendations = (recommendations) => {\n    if (recommendations === undefined) {\n      console.error(\"Invalid recommendations in highlight call ignored!\");\n    }\n    const verifiedRecommendations = recommendations === undefined ? [] : recommendations;\n    this.setState(previousState => ({\n      recommendations: verifiedRecommendations\n    }));\n  }\n\n\n  // private stuff -----------------------------------------------------------------------------\n\n  /**\n   * Build the CCS style for all buttons that we display in our menu bars.\n   * \n   * We support two decorations: \n   *  - active marks the currently active test/task.\n   *  - recommended marks the tests currently recommended by the some adaptation logic. \n   */\n  static buildButtonStyle(buttonHeight, isActive, isRecommended) {\n    const style = {\n      height: buttonHeight\n    };\n\n    if (isActive) {\n      // compute growth of button based on the padding value\n      const growth = 1 + ((TopButtonToolBar.getButtonPadding() * 2) / buttonHeight) // padding/height\n      style.transform = `scale(${growth})`;\n    }\n    if (isRecommended) {\n      // TODO: move this to CSS class? \n      style.backgroundColor = RecommendationsManager.getRecommendationColor();\n    }\n    return style;\n  }\n\n  static buildButtonClassName(isActive, isRecommended) {\n    let className = \"\";\n    if (isActive) {\n      className += \"active\";\n    }\n\n    if (isRecommended) {\n      className += \" recommended\";\n    }\n\n    return className\n  }\n\n  /**\n   * Find the index for the test specified by the test name. \n   */\n  static findTestIndexForName(tests, testName) {\n    const testIndexForName = tests.findIndex((value, index, theArray) => value.name === testName);\n    if (testIndexForName === undefined) {\n      console.error(`Test navigator could not find test with name ${testName}`);\n      return undefined;\n    }\n    return testIndexForName;\n  }\n\n\n  /**\n   * Find the test configuration for the test specified by the test name. \n   */\n  static findTestForName(tests, testName) {\n    const testForName = tests.find((value, index, theArray) => value.name === testName);\n    if (testForName === undefined) {\n      console.error(`Test navigator could not find test with name ${testName}`);\n      return undefined;\n    }\n    return testForName;\n  }\n\n  /**\n   * Find the the first task in the given test. \n   * \n   * The method returns an object describing the task with two attributes:\n   *  - task\n   *  - item\n   */\n  static findFirstTaskInTest(test) {\n    if (test === undefined || test.taskCourse[0] === undefined) {\n      return undefined;\n    }\n    return test.taskCourse[0];\n  }\n\n  /**\n   * Find the 'default' task in the test specified by the test name.\n   *\n   * The method returns an object describing the task with two attributes:\n   *  - task\n   *  - item\n   */\n  static findDefaultTaskForTest(tests, testName) {\n    const test = TaskNavigator.findTestForName(tests, testName);\n    return TaskNavigator.findFirstTaskInTest(test)\n  }\n\n  /**\n   * Find the first task with matching task name in the test specified by the test name.\n   *\n   * The method returns an object describing the task with two attributes:\n   *  - task\n   *  - item\n   */\n  static findFirstTaskWithNameForTest(tests, testName, taskName) {\n    const targetTest = TaskNavigator.findTestForName(tests, testName);\n    if (targetTest === undefined) {\n      return undefined;\n    }\n    return targetTest.taskCourse.find((taskEntry, index, theArray) => taskEntry.task === taskName);\n  }\n\n\n  /**\n   * Render a single button in the test menu bar.\n   */\n  buildTestButton = (testName) => {\n    const { recommendations } = this.state;\n    const matchingRecommendation = RecommendationsManager.findFirstRecommendationForTest(recommendations, testName);\n    const targetTaskInfo = this.selectDefaultTaskForTest(testName, matchingRecommendation);\n    const { runtime, testButtonHeight, currentTest } = this.props;\n\n    // Do nothing on button click if the test does not exist or has no tasks assigned:\n    const buttonClickHandler = (targetTaskInfo === undefined\n      ? (event) => {\n        console.info(`Ignored navigation request to test named ${testName} since the test has no tasks assigned.`)\n      }\n      : (event) => {\n        TaskNavigator.traceNavigation(true, testName, event, runtime);\n        TaskNavigator.navigateToTest(testName, targetTaskInfo.item, targetTaskInfo.task, runtime);\n      });\n\n    return (\n      <button\n        type=\"button\"\n        key={testName}\n        onClick={buttonClickHandler}\n        title={testName}\n        style={TaskNavigator.buildButtonStyle(testButtonHeight, testName === currentTest, matchingRecommendation !== undefined)}\n        className={TaskNavigator.buildButtonClassName(testName === currentTest, matchingRecommendation !== undefined)}\n      >\n        {testName}\n      </button>\n    );\n  }\n\n  selectDefaultTaskForTest = (testName, matchingRecommendation) => {\n    const { runtime, tests } = this.props;\n    if (matchingRecommendation !== undefined && matchingRecommendation.taskName !== undefined) {\n      const taskEntry = TaskNavigator.findFirstTaskWithNameForTest(tests, testName, matchingRecommendation.taskName);\n      if (taskEntry !== undefined) {\n        return {\n          item: taskEntry.item,\n          task: taskEntry.task\n        };\n      }\n    }\n\n    const testState = runtime.taskNavigatorStateManager.getTestState(testName);\n    if (testState !== undefined) {\n      return {\n        item: testState.itemName,\n        task: testState.taskName\n      };\n    }\n\n    const defaultTask = TaskNavigator.findDefaultTaskForTest(tests, testName);\n    if (defaultTask !== undefined) {\n      return {\n        item: defaultTask.item,\n        task: defaultTask.task\n      };\n    }\n\n    return undefined;\n  }\n\n  static navigateToTest(testName, itemName, taskName, runtime) {\n    runtime.taskManager.switchTaskInterTest(testName, itemName, taskName);\n  }\n\n\n  /**\n   * Render the test menu bar.\n   */\n  buildTestNavigation = () => {\n    const { courses } = this.props;\n    return courses.map(testName => this.buildTestButton(testName));\n  }\n\n  /**\n   * Render a single button in the task menu bar.\n   */\n  buildTaskButton = (testName, itemName, taskName) => {\n\n    const { recommendations } = this.state;\n    const { runtime, taskButtonHeight, currentItem, currentTask } = this.props;\n    const matchingRecommendation = RecommendationsManager.findFirstRecommendationForTask(recommendations, testName, taskName);\n\n    // Do nothing on button click if task entry is invalid:\n    const buttonClickHandler = (taskName === undefined\n      ? (event) => { }\n      : (event) => {\n        TaskNavigator.traceNavigation(false, taskName, event, runtime);\n        TaskNavigator.navigateToTask(taskName, itemName, runtime);\n        runtime.recommendationsManager.processTaskSelected(testName, itemName, taskName);\n      });\n\n    return (\n      <button\n        type=\"button\"\n        key={`${testName}.${itemName}.${taskName}`}\n        onClick={buttonClickHandler}\n        title={taskName}\n        style={TaskNavigator.buildButtonStyle(taskButtonHeight,\n          taskName === currentTask && itemName === currentItem, matchingRecommendation !== undefined)}\n        className={TaskNavigator.buildButtonClassName(taskName === currentTask && itemName === currentItem, matchingRecommendation !== undefined)}\n      >\n        {taskName}\n      </button>\n    );\n\n  }\n\n  buildTopLayerStyle = () => {\n    const { runtime } = this.props;\n\n    return {\n      width: runtime.taskManager.getTopLevelConfiguration().itemWidth\n    }\n  }\n\n  assignRatioToButton = buttonRatio => ((button) => {\n    const width = buttonRatio * button.props.style.height;\n\n    button.props.style.width = width;\n    button.props.style.minWidth = width;\n\n    return button;\n  });\n\n  /**\n   * Trace the navigation action in the log.\n   * \n   * @param {*} isTest Is this a test navigation? If false we assume a task navigation.\n   * @param {*} navigationTarget The test/task we navigate to.\n   * @param {*} browserEvent The event that triggered the button's action.\n   * @param {*} runtime The common runtime structure.\n   */\n  static traceNavigation(isTest, navigationTarget, browserEvent, runtime) {\n    const traceDetails = {\n      navigationType: (isTest ? 'test' : 'task'),\n      navigationTarget\n    };\n    CommonActionsHelper.addMouseEventDetails(browserEvent, traceDetails);\n\n    runtime.traceLogBuffer.reportEvent('NavigationButton', new Date(), traceDetails);\n  }\n\n  /**\n   * Render the task menu bar.\n   */\n  buildTaskNavigation = () => {\n    const { tests, currentTest } = this.props;\n    const activeTest = TaskNavigator.findTestForName(tests, currentTest);\n    if (activeTest === undefined || activeTest.taskCourse === undefined) {\n      return <div>--- Test invalid, no tasks found ---</div>\n    }\n\n    return activeTest.taskCourse.map(taskEntry => this.buildTaskButton(currentTest, taskEntry.item, taskEntry.task));\n  }\n\n  static navigateToTask(taskName, itemName, runtime) {\n    runtime.taskManager.switchTaskIntraTest(itemName, taskName);\n  }\n\n  /*\n  * computes the total height of the task navigator\n  */\n  static getTaskNavigatorHeight = (testButtonHeight, taskButtonHeight) => {\n    const testNavHeight = TopButtonToolBar.getCarouselHeight(testButtonHeight);\n    const taskNavHeight = TopButtonToolBar.getCarouselHeight(taskButtonHeight);\n    const negateMargin = TopButtonToolBar.getCarouselMarginBottom();\n\n    return testNavHeight + taskNavHeight - negateMargin;\n  }\n\n  render() {\n    const { runtime, testButtonHeight } = this.props;\n    const { itemWidth } = runtime.taskManager.getTopLevelConfiguration();\n    const buttonRatio = 2;\n\n    return (\n      <div className=\"task-navigator\" style={this.buildTopLayerStyle()}>\n        <TopButtonToolBar\n          className=\"test-navigation\"\n          buttons={this.buildTestNavigation()}\n          itemWidth={itemWidth}\n          buttonHeight={testButtonHeight}\n          buttonRatio={buttonRatio}\n          activateCenterToolbarOnChange={false}\n        >\n          {/* activateCenterToolbarOnChange flag when set to false works only with fixed width items */}\n        </TopButtonToolBar>\n\n        <div className=\"task-navigation\">\n          {this.buildTaskNavigation().map(this.assignRatioToButton(buttonRatio))}\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\nTaskNavigator.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  courses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  tests: PropTypes.arrayOf((propValue, key, componentName, location, propFullName) => {\n    const testPropTypes = {\n      name: PropTypes.string.isRequired,\n      taskCourse: PropTypes.arrayOf((propValue2, key2, componentName2, location2, propFullName2) => {\n        const taskEntryPropTypes = {\n          item: PropTypes.string.isRequired,\n          task: PropTypes.string.isRequired,\n        };\n        return PropTypes.checkPropTypes(taskEntryPropTypes, propValue2[key2], propFullName2, componentName2)\n      }).isRequired\n    };\n    return PropTypes.checkPropTypes(testPropTypes, propValue[key], propFullName, componentName)\n  }).isRequired,\n  currentTest: PropTypes.string.isRequired,\n  currentItem: PropTypes.string.isRequired,\n  currentTask: PropTypes.string.isRequired,\n  testButtonHeight: PropTypes.number.isRequired,\n  taskButtonHeight: PropTypes.number.isRequired,\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Notifications from 'react-notify-toast';\nimport CbaTestPresenter from './CbaTestPresenter';\nimport HeaderButtons from './HeaderButtons';\nimport TaskNavigator from './TaskNavigator';\nimport RenderingHelper from \"./RenderingHelper\";\nimport MenuItemTree from './MenuItemTree';\n\n/**\n * Display a running task. \n */\nexport default class LoggedInView extends Component {\n\n  constructor(props) {\n    super(props);\n    this.testPresenter = React.createRef();\n    this.contextMenu = React.createRef();\n\n    const { runtime } = this.props;\n    runtime.taskManager.setTopLevelPageChangeHandler(this.handleTopLevelPageChange);\n  }\n\n  componentDidMount() {\n    // activate the automtaic send trace log mechanism while mounted\n    const { runtime } = this.props;\n    runtime.traceLogUploader.startAutomaticTransmissions();\n    runtime.contextMenu = this.contextMenu.current;\n\n    // The reactClientLoaded method exists in the Chromium environment of the ItemBuilder only. \n    //  -> Just ignore if it is missing.\n    if (window.reactClientLoaded) {\n      try {\n        window.reactClientLoaded();\n      } catch (err) {\n        console.log(err.message)\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    // stop automatic trace log transmissions (and run a final transmission immediately)\n    const { runtime } = this.props;\n    runtime.traceLogUploader.stopAutomaticTransmissions();\n  }\n\n\n  handleTopLevelPageChange = () => {\n    if (this.testPresenter.current) {\n      RenderingHelper.triggerRendering(this.testPresenter.current);\n    }\n  }\n\n  setTaskNavigator = (navigator) => {\n    const { runtime } = this.props;\n    runtime.recommendationsManager.setTaskNavigator(navigator);\n  }\n\n  buildTaskNavigator = (testButtonHeight, taskButtonHeight) => {\n    if (!this.shouldBuildNavigator()) {\n      return undefined;\n    }\n\n    const { courses, tests, runtime } = this.props;\n    const taskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\n    const { test, item, task } = taskInfo;\n    return (\n      <TaskNavigator\n        courses={courses}\n        tests={tests}\n        currentTest={test}\n        currentItem={item}\n        currentTask={task}\n        testButtonHeight={testButtonHeight}\n        taskButtonHeight={taskButtonHeight}\n        ref={this.setTaskNavigator}\n        runtime={runtime}\n      />\n    );\n  }\n\n  shouldBuildNavigator = () => {\n    const { settings } = this.props;\n    return !!settings && settings.ShowTaskNavigationBars;\n  }\n\n\n  render() {\n    // TODO: if buttons are not given by settings and are static for test and task. I would remove them from the App level.\n    const testButtonHeight = 70;\n    const taskButtonHeight = 50;\n\n    const { runtime, settings, headerButtons, scaleValue } = this.props;\n    const taskId = runtime.taskManager.getCurrentStatePathRoot();\n    const style = {\n      transform: `scale(${scaleValue})`\n    }\n\n    return (\n      <div className=\"appDiv\" style={style}>\n        <div className=\"topToolBarContainer\">\n          <HeaderButtons runtime={runtime} config={headerButtons} />\n          {this.buildTaskNavigator(testButtonHeight, taskButtonHeight)}\n        </div>\n        <Notifications />\n        <CbaTestPresenter taskId={taskId} ref={this.testPresenter} runtime={runtime} settings={settings} />\n        <MenuItemTree ref={this.contextMenu} runtime={runtime} />\n      </div>\n    );\n  }\n\n}\n\n\nLoggedInView.propTypes = {\n  courses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  tests: PropTypes.arrayOf((propValue, key, componentName, location, propFullName) => {\n    const testPropTypes = {\n      name: PropTypes.string.isRequired,\n      taskCourse: PropTypes.arrayOf((propValue2, key2, componentName2, location2, propFullName2) => {\n        const taskEntryPropTypes = {\n          item: PropTypes.string.isRequired,\n          task: PropTypes.string.isRequired,\n        };\n        return PropTypes.checkPropTypes(taskEntryPropTypes, propValue2[key2], propFullName2, componentName2)\n      }).isRequired\n    };\n    return PropTypes.checkPropTypes(testPropTypes, propValue[key], propFullName, componentName)\n  }).isRequired,\n  settings: PropTypes.object.isRequired,\n  headerButtons: PropTypes.array.isRequired,\n  runtime: PropTypes.object.isRequired,\n  scaleValue: PropTypes.number.isRequired\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Login extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.inputRef = React.createRef();\r\n\r\n    this.state = {\r\n      loggedUserName: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputRef.current.focus();\r\n  }\r\n\r\n  switchToLoginState = () => {\r\n    const { handleLogin } = this.props;\r\n    const { loggedUserName } = this.state;\r\n    handleLogin(loggedUserName);\r\n  }\r\n\r\n  handleLoginClick = (evt) => {\r\n    this.switchToLoginState();\r\n  }\r\n\r\n  updateInputLoginValue = (evt) => {\r\n    this.setState({\r\n      loggedUserName: evt.target.value\r\n    });\r\n  }\r\n\r\n  handleKeyPress = (evt) => {\r\n    if (evt.key === 'Enter') {\r\n      this.switchToLoginState();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { loggedUserName } = this.state;\r\n    const { titleLabel, fieldLabel, buttonLabel, disabled } = this.props;\r\n\r\n    const usernameInputName = 'usernameInputName';\r\n    return (\r\n      <div className=\"appDiv\">\r\n        <div className=\"login-container\">\r\n          <div className=\"login-head\">\r\n            <h3>{titleLabel}</h3>\r\n          </div>\r\n          <div className=\"login-body\">\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor={usernameInputName}>\r\n                <b>{fieldLabel}</b>\r\n                <input\r\n                  ref={this.inputRef}\r\n                  type=\"text\"\r\n                  placeholder=\"\"\r\n                  name={usernameInputName}\r\n                  value={loggedUserName}\r\n                  onChange={evt => this.updateInputLoginValue(evt)}\r\n                  onKeyPress={this.handleKeyPress}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"btn-container\">\r\n              <button className=\"btn blue-button\" type=\"button\" onClick={this.handleLoginClick} disabled={disabled}>{`${disabled ? '...' : buttonLabel}`}</button>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nLogin.propTypes = {\r\n  titleLabel: PropTypes.string.isRequired,\r\n  fieldLabel: PropTypes.string.isRequired,\r\n  buttonLabel: PropTypes.string.isRequired,\r\n  handleLogin: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool.isRequired\r\n}\r\n","import moment from 'moment';\r\nimport ifvisible from 'ifvisible';\r\n\r\nconst TYPES = {\r\n  pageBlur: 'PAGE_HIDDEN',\r\n  pageFocus: 'PAGE_SHOWN',\r\n  enterFullscreen: 'ENTER_FULLSCREEN',\r\n  exitFullscreen: 'EXIT_FULLSCREEN'\r\n};\r\n\r\n/**\r\n * Observe events related to item visibility.\r\n * \r\n * We tried to detect full screen switches via the resize events initially \r\n * and might follow this path again in the future. Therefore this class also handles \r\n * creation of full screen switch trace log entries. \r\n */\r\nexport default class PageEventsObserver {\r\n\r\n  /**\r\n   * constructor initialises the lastVisibleTime and lastFullScreenTime variables to the current time.\r\n   * \r\n   * @param {*} runtime Runtime needed to extract the reportEvent Function from the traceLogBuffer\r\n   */\r\n  constructor(runtime) {\r\n    this.lastVisibilityTime = moment();\r\n    this.lastFullScreenTime = moment();\r\n    this.reportEvent = runtime.traceLogBuffer.reportEvent;\r\n  }\r\n\r\n  // private\r\n  lastVisibilityTime = null;\r\n\r\n  lastFullScreenTime = null;\r\n\r\n  isFullScreen = null;\r\n\r\n  handleVisibility = type => () => {\r\n    const newVisibilitytime = this.getMoment();\r\n    const timeSpent = this.computeTimeDifference(newVisibilitytime, this.lastVisibilityTime);\r\n\r\n    this.traceAction(type, timeSpent);\r\n    this.lastVisibilityTime = newVisibilitytime;\r\n  }\r\n\r\n\r\n  traceAction = (type, duration) => {\r\n    switch (type) {\r\n      case TYPES.pageBlur: this.reportEvent(\"ApplicationVisibility\", new Date(), this.buildTraceDetails('pageHidden', duration)); break;\r\n      case TYPES.pageFocus: this.reportEvent(\"ApplicationVisibility\", new Date(), this.buildTraceDetails('pageShown', duration)); break;\r\n      case TYPES.enterFullscreen: this.reportEvent(\"ApplicationFullScreen\", new Date(), this.buildTraceDetails('enterFullscreen', duration)); break;\r\n      case TYPES.exitFullscreen: this.reportEvent(\"ApplicationFullScreen\", new Date(), this.buildTraceDetails('exitFullscreen', duration)); break;\r\n      default: console.warn(\"Wrong type provided in PageEventsObserverssss\");\r\n    }\r\n  }\r\n\r\n  computeTimeDifference = (time1, time2) => {\r\n    const duration = moment.duration(time1.diff(time2));\r\n    return duration.asSeconds();\r\n  }\r\n\r\n  buildTraceDetails = (type, duration) => ({\r\n    type,\r\n    alternateStateDuration: duration\r\n  })\r\n\r\n  // public API\r\n\r\n  /**\r\n   * Function initialises the visibility observers\r\n   */\r\n  initObserver() {\r\n    ifvisible.on('blur', this.handleVisibility(TYPES.pageBlur));\r\n    ifvisible.on('focus', this.handleVisibility(TYPES.pageFocus));\r\n  }\r\n\r\n  /**\r\n   * Create a full screen switch trace log entry if necessary.\r\n   * \r\n   * The method manages the 'duration' attribute in the trace log entry.\r\n   */\r\n  handleFullScreen = (isFullscreenNow) => {\r\n    const newFullScreenTime = this.getMoment();\r\n    const timeSpent = this.computeTimeDifference(newFullScreenTime, this.lastFullScreenTime);\r\n\r\n    if (this.isFullScreen !== isFullscreenNow) {\r\n      const type = isFullscreenNow ? TYPES.enterFullscreen : TYPES.exitFullscreen;\r\n\r\n      this.traceAction(type, timeSpent)\r\n\r\n      this.isFullScreen = isFullscreenNow;\r\n      this.lastFullScreenTime = newFullScreenTime;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * hook in method for testing purposes\r\n   */\r\n  getMoment = () => moment();\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\nimport LoggedInView from '../components/LoggedInView';\nimport Login from './Login';\nimport PageEventsObserver from '../components/PageEventsObserver';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Make ourselves available via the runtime context:\n    const { runtime, waitingMessageTexts } = this.props;\n    this.runtime = runtime;\n    runtime.app = this;\n\n    this.waitingMessageTexts = waitingMessageTexts;\n    this.scalingConfig = {\n      alignmentHorizontal: \"left\",\n      alignmentVertical: \"top\",\n      scalingMode: \"no-scaling\"\n    };\n\n    // Possible display modes are: 'waiting', 'showLogin', 'showTask'.\n    this.state = {\n      displayMode: 'waiting',\n      scaleValue: 1\n    }\n\n    // init observer that traces page visibility state\n    runtime.pageEventsObserver = new PageEventsObserver(runtime);\n    runtime.pageEventsObserver.initObserver();\n\n  }\n\n  /**\n   * Recalculate our scaling factor and trigger a rendering\n   * by putting it into the component state.\n   * \n   * The method does nothing if we don't have a task running currently.\n   */\n  resize = () => {\n    const { displayMode } = this.state;\n    if (displayMode === 'showTask') {\n      const scaleValue = this.computeScalingValue()\n      this.setState(() => (Object.assign({}, {\n        scaleValue\n      })))\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', debounce(this.resize, 200))\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', debounce(this.resize, 200))\n  }\n\n  /**\n   * Set new waiting messages texts.\n   * \n   * @param {*} newValues The new waiting messages 'primary' and 'secondary'.\n   */\n  setWaitingMessageTexts(newValues) {\n    this.waitingMessageTexts = newValues;\n    const { displayMode } = this.state;\n    if (displayMode === 'waiting') {\n      this.showWaiting();\n    }\n  }\n\n  /**\n   * Show the waiting page.\n   * \n   * The method implicitly stops a currently running task in the task manager.\n   */\n  showWaiting = () => {\n    this.runtime.taskManager.stopTask();\n    this.setState(prevState => ({\n      displayMode: 'waiting',\n    }));\n  }\n\n  /**\n   * Show the login dialog.\n   * \n   * @param {String} titleLabel The label to use as title of the login dialog.\n   * @param {String} fieldLabel The label to use for the input field label in the login dialog.\n   * @param {String} buttonLabel The label to use for the button label in the login dialog.\n   * @param {function} loginDialogClosedHandler A callback that accepts the field value obtained by the login dialog.\n   */\n  showLogin = (titleLabel, fieldLabel, buttonLabel, loginDialogClosedHandler) => {\n    this.setState(prevState => ({\n      displayMode: 'showLogin',\n      loginTitleLabel: titleLabel,\n      loginFieldLabel: fieldLabel,\n      loginButtonLabel: buttonLabel,\n      loginDialogClosedHandler,\n      loginDialogDisabled: false\n    }));\n  }\n\n  /**\n   * Show a running task.\n   */\n  showTask = (testName, itemName, taskName, settings, headerButtons, courseForNavigator, testsForNavigator) => {\n    const taskId = this.runtime.taskManager.switchTask(testName, itemName, taskName, false);\n    if (taskId === undefined) {\n      console.info(`Could not switch to task ${testName}/${itemName}/${taskName}.`);\n      return;\n    }\n    const scaleValue = this.computeScalingValue(this.scalingConfig.scalingMode);\n\n    App.dumpTasksViewConfigurationToTraceLog(courseForNavigator, testsForNavigator, settings, headerButtons, this.runtime.traceLogBuffer);\n    this.setState(prevState => ({\n      displayMode: 'showTask',\n      settings,\n      headerButtons,\n      courseForNavigator,\n      testsForNavigator,\n      scaleValue\n    }));\n  }\n\n  /**\n   * Show a replay of a task.\n   */\n  showReplay = (testName, itemName, taskName, settings, headerButtons, courseForNavigator, testsForNavigator) => {\n    const taskId = this.runtime.taskManager.switchTask(testName, itemName, taskName, true);\n    if (taskId === undefined) {\n      console.info(`Could not switch replay to task ${testName}/${itemName}/${taskName}.`);\n      return;\n    }\n    const scaleValue = this.computeScalingValue(this.scalingConfig.scalingMode);\n\n    App.dumpTasksViewConfigurationToTraceLog(courseForNavigator, testsForNavigator, settings, headerButtons, this.runtime.traceLogBuffer);\n    this.setState(prevState => ({\n      displayMode: 'showTask',\n      settings,\n      headerButtons,\n      courseForNavigator,\n      testsForNavigator,\n      scaleValue\n    }));\n  }\n\n  /**\n   * Set the scaling configuration that we will use to scale the display in task display mode.\n   * \n   * The setting is not active for the other display modes.\n   * The setting is not applied immediately to an already running task display mode. Call the resize method to trigger \n   * the scaling update on a running task.\n   */\n  setScalingConfig = (scalingConfig) => {\n    this.scalingConfig = scalingConfig;\n  }\n\n  /**\n   * Calculate the current scaling factor. \n   * \n   * The scaling factor depends \n   *  - on the current scaling configuration and \n   *  - the currently available display size and\n   *  - the required display size of the currently running item. \n   * \n   * Since this method needs an item in place, you should not call it without a task running currently\n   * in the task manager.\n   */\n  computeScalingValue = () => {\n    const { runtime } = this.props;\n    let value;\n\n    const horizontalScale = window.innerWidth / runtime.taskManager.getTopLevelConfiguration().itemWidth;\n    const verticalScale = window.innerHeight / runtime.taskManager.getTopLevelConfiguration().itemHeight;\n\n    switch (this.scalingConfig.scalingMode) {\n      case \"no-scaling\": value = 1; break;\n      case \"scale-up\":\n        if (horizontalScale > 1 && verticalScale > 1) {\n          value = horizontalScale < verticalScale ? horizontalScale : verticalScale\n        } else {\n          value = 1;\n        }\n        break;\n      case \"scale-down\":\n        if (horizontalScale < 1 || verticalScale < 1) {\n          value = horizontalScale < verticalScale ? horizontalScale : verticalScale;\n        } else {\n          value = 1;\n        }\n        break;\n      case \"scale-up-down\":\n        value = horizontalScale < verticalScale ? horizontalScale : verticalScale;\n        break;\n      default: value = 1;\n    }\n\n    return value;\n  }\n\n  getScalingAlignmentCssClass = () => {\n    const { alignmentHorizontal, alignmentVertical } = this.scalingConfig;\n\n    let cssClass = \"\";\n\n    switch (alignmentHorizontal) {\n      case \"left\": cssClass += \"left\"; break;\n      case \"center\": cssClass += \"horizontal-center\"; break;\n      case \"right\": cssClass += \"right\"; break;\n      default: cssClass += \"left\";\n    }\n\n    cssClass += \" \";\n\n    switch (alignmentVertical) {\n      case \"top\": cssClass += \"top\"; break;\n      case \"center\": cssClass += \"vertical-center\"; break;\n      case \"bottom\": cssClass += \"bottom\"; break;\n      default: cssClass += \"top\";\n    }\n\n    return cssClass;\n  }\n\n\n  /** \n   * The login screen is filled in -> Disable login screen and run callback with obtained field value.\n   */\n  handleLoginClick = (fieldValue) => {\n    const { loginDialogClosedHandler } = this.state;\n    this.setState(prevState => ({\n      loginDialogDisabled: true\n    }))\n    loginDialogClosedHandler(fieldValue);\n  }\n\n  /**\n   * Dump the configuration of the tasks view to the trace log.\n   * \n   * @param {*} courseForNavigator The list of tests in the navigator menu.\n   * @param {*} testsForNavigator The test configurations used by the navigator menu.\n   * @param {*} settings The general settings used.\n   * @param {*} headerButtons The configurable header buttons used.\n   * @param {*} traceLogBuffer The trace log buffer to dump to.\n   */\n  static dumpTasksViewConfigurationToTraceLog(courseForNavigator, testsForNavigator, settings, headerButtons, traceLogBuffer) {\n    traceLogBuffer.reportEvent('TasksViewVisible', new Date(), {\n      settings,\n      headerButtons,\n      upperHeaderMenu: courseForNavigator,\n      lowerHeaderMenu: testsForNavigator,\n    })\n  }\n\n  renderWaiting = () => {\n    // configNok -> wait for the configuration setting event to arrive:\n    const primary = this.waitingMessageTexts === undefined ? \"\" : this.waitingMessageTexts.primary\n    const secondary = this.waitingMessageTexts === undefined ? \"\" : this.waitingMessageTexts.secondary\n\n    return (\n      <div className=\"appDivContainer top left\">\n        <div className=\"appDiv\">\n          {primary}\n          <br />\n          <br />\n          {secondary}\n        </div>\n      </div>\n    )\n  };\n\n  renderLogin = () => {\n    const { loginTitleLabel, loginFieldLabel, loginButtonLabel, loginDialogDisabled } = this.state;\n    return (\n      <div className=\"appDivContainer horizontal-center vertical-center\">\n        <Login\n          handleLogin={this.handleLoginClick}\n          titleLabel={loginTitleLabel}\n          fieldLabel={loginFieldLabel}\n          buttonLabel={loginButtonLabel}\n          disabled={loginDialogDisabled}\n        />\n      </div>\n    )\n  };\n\n  renderTask = () => {\n    const { runtime } = this.props;\n    const { settings, headerButtons, courseForNavigator, testsForNavigator, scaleValue } = this.state;\n\n    return (\n      <div className={`appDivContainer ${this.getScalingAlignmentCssClass()} ${scaleValue === 1 ? 'overflow-auto' : ''}`}>\n        <LoggedInView\n          courses={courseForNavigator}\n          tests={testsForNavigator}\n          settings={settings}\n          headerButtons={headerButtons}\n          runtime={runtime}\n          scaleValue={scaleValue}\n        />\n      </div>\n    );\n  };\n\n  render() {\n    const { displayMode } = this.state;\n\n    switch (displayMode) {\n      case 'waiting':\n        return this.renderWaiting();\n      case 'showLogin':\n        return this.renderLogin();\n      case 'showTask':\n        return this.renderTask();\n      default:\n        return this.renderWaiting();\n    }\n  }\n\n}\n\nApp.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  waitingMessageTexts: PropTypes.object.isRequired\n}\n","import IndexPathHelper from \"./IndexPathHelper\";\r\nimport StateAttributeAccess from \"./StateAttributeAccess\";\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\nimport PathTranslationHelper from \"./PathTranslationHelper\";\r\nimport SelectGroupHelper from '../components/SelectGroupHelper';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\nimport CbaRichTextField from '../components/CbaRichTextField/CbaRichTextField';\r\nimport CbaMedia from '../components/media/CbaMedia';\r\nimport CbaTable from '../components/table/CbaTable';\r\nimport InputComponent from \"../components/InputComponent\";\r\nimport CbaTree from \"../components/CbaTree/CbaTree\";\r\nimport CbaExternalPageFrame from \"../components/CbaExternalPageFrame\";\r\nimport CbaSimpleTextField from \"../components/CbaSimpleTextField\";\r\nimport PropagationHelper from \"../eval/PropagationHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\nimport UserDefPathHelper from \"./UserDefPathHelper\";\r\nimport ComponentStateHelper from \"./ComponentStateHelper\";\r\n\r\n/**\r\n * Manage all component instance specific state that is relevant for rendering and scoring evaluation.\r\n * \r\n * The manager uses the component instance's index path ID as key to store and retrieve a component's state.\r\n * It provides convenience methods to store and retrieve state by the user defined ID path of a component instance.\r\n * \r\n * The manager implicitly creates an initial state if asked for a key without an already registered state.\r\n * It fills the state with a standard set of attributes (based on the configuration info for the component\r\n * in the page definition). For some component types it also asks the component class to add component specific\r\n * attributes. \r\n * \r\n * Usually a component's state is cloneable by JSON.parse/stringify and the component state manager \r\n * stores such a clone of the given state. \r\n * For some components their state cannot be cloned this way (e.g. due to structures of external libraries). \r\n * Such state is marked by the flag \"deep copy\" set to \"false\" and the component state manager \r\n * stores a reference to the component instance's state structure instead of building a clone.\r\n * \r\n * Some features require a serializable representation of the component instance state (e.g. preloading the \r\n * runtime with a snapshot of another assessment run or doing a replay based on a trace of state changes). \r\n * We call such a serializable representation a \"state snapshot\". \r\n * For clonable state the manager uses the clone itself as serializable representation. For non-cloneable state \r\n * the manager calls component specific methods \"toSnapshot\"/\"fromSnapshot\" to \r\n * switch between the internally stored state and the serializable state representation.\r\n * \r\n * A component instance's state might be marked as \"volatile\". Before creating the snapshot representation \r\n * for such a state the manager calls the component instance's method \"updateStateInComponentStateManager\"\r\n * (if the instance is currently mounted).\r\n * \r\n */\r\nexport default class ComponentStateManager {\r\n\r\n  constructor() {\r\n    this.stateMap = {};\r\n  }\r\n\r\n  /**\r\n   * Clear all content in the state manager.\r\n   */\r\n  clear = () => {\r\n    this.stateMap = {};\r\n  }\r\n\r\n  /**\r\n   * Get a snapshot representation of the full state. \r\n   * \r\n   * The result differs from our internal state representation: \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse \r\n   * we use a specific serializable representation.\r\n   * To obtain the specific serializable representation we ask the display component in charge.\r\n   * \r\n   * @param {ComponentDirectory} componentDirectory The directory of all currently visible component instances.\r\n   */\r\n  getStateSnapshot = componentDirectory => this.getSnapshot(entry => true, componentDirectory);\r\n\r\n\r\n  /**\r\n   * Get a snapshot representation of all state belonging to the specified task. \r\n   * \r\n   * The result differs from our internal state representation: \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse we use a specific serializable representation.\r\n   * To obtain the specific serializable representation we ask the display component in charge.\r\n   * \r\n   * @param {ComponentDirectory} componentDirectory The directory of all currently visible component instances.\r\n   */\r\n  getTaskSnapshot = (test, item, task, componentDirectory) => this.getSnapshot(entry => (IndexPathHelper.getRootFromPath(entry[0]) === IndexPathHelper.buildPathRoot(test, item, task)), componentDirectory);\r\n\r\n\r\n  /**\r\n   * Preload the given snapshot as our state memory. \r\n   * \r\n   * The expected snapshot structure differs from our internal state representation:  \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse we expect a specific serializable representation.\r\n   * To obtain the internal representation from the serializable representation we ask the display component in charge.\r\n   */\r\n  preloadWithStateSnapshot = (snapshot) => {\r\n    this.stateMap = ComponentStateManager.fromSnapshotRepresentation(Object.entries(snapshot));\r\n  }\r\n\r\n\r\n  /**\r\n   * Register the given state representation (coming from a snapshot) for the given pathId.\r\n   * \r\n   * The expected snapshot structure differs from our internal state representation: \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse we expect a specific serializable representation.\r\n   * To obtain the internal representation from the serializable representation we ask the display component in charge.\r\n   */\r\n  registerStateChangeFromSnapshot = (pathId, state) => {\r\n    this.stateMap[pathId] = ComponentStateManager.fromSnapshotRepresentationForSingleEntry(pathId, state);\r\n  }\r\n\r\n  /**\r\n   * Register the given state for the given pathId.\r\n   * \r\n   * The method stores a 'deep copy' of the state depending on the deepCopy flag in the state. \r\n   */\r\n  registerStateByPathId = (pathId, state, runtime) => {\r\n    this.stateMap[pathId] = ComponentStateManager.doDeepCopyIfRequired(state);\r\n    TraceLogHelper.dumpStateChangeToTrace('ComponentState', {\r\n      pathId, state: ComponentStateManager.toSnapshotRepresentationForSingleEntry(pathId, this.stateMap[pathId])\r\n    }, runtime.traceLogBuffer)\r\n  }\r\n\r\n  /**\r\n   * Find the state for the given path id. \r\n   * The method implicitly tries to create an initial state if there is no\r\n   * state registered yet.\r\n   * This will fail if the task loaded in the task/page manager in the runtime \r\n   * does not match the task of the given path id. \r\n   */\r\n  findOrBuildStateForPathId = (pathId, runtime) => this.findOrBuildStateForPathIdInternal(pathId, runtime);\r\n\r\n\r\n  /**\r\n   * Register the given state with a pathId corresponding to the given userDefPath. \r\n   * The method will build the pathId using the path root currently loaded in the given runtime.\r\n   */\r\n  registerStateByUserDefPath = (userDefPath, state, runtime) => {\r\n    this.registerStateByPathId(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime), state, runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Find the state for the given userDefPath. \r\n   * The method implicitly tries to create an initial state if there is no\r\n   * state registered yet. The method will implicitly register the created \r\n   * initial state with a pathId using the path root currently loaded\r\n   * in the given runtime.\r\n   */\r\n  findOrBuildStateByUserDefPath = (userDefPath, runtime) => this.findOrBuildStateForPathId(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime), runtime);\r\n\r\n\r\n  /**\r\n   * Return all already existing index paths that pass the given filter.\r\n   */\r\n  filterExistingPathIds = filterMethod => Object.keys(this.stateMap).filter(key => filterMethod(key));\r\n\r\n\r\n  // private stuff ------------------------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Find the state for the given path id. \r\n   * The method implicitly tries to create an initial state if there is no\r\n   * state registered yet.\r\n   * \r\n   * The method manages the cloning of the state (if cloning is possible).\r\n   * \r\n   * Creation of a new, initial state will fail if the task loaded in the task/page manager in the runtime \r\n   * does not match the task of the given path id. \r\n   * We build the new initial state for a component instance based on the configuration data for \r\n   * the component in the page definition. \r\n   */\r\n  findOrBuildStateForPathIdInternal = (pathId, runtime) => {\r\n    const registered = ComponentStateManager.doDeepCopyIfRequired(this.stateMap[pathId]);\r\n    if (registered !== undefined) return registered;\r\n\r\n    const rootFromPath = IndexPathHelper.getRootFromPath(pathId);\r\n    const rootInRuntime = runtime.taskManager.getCurrentStatePathRoot();\r\n    if (!rootFromPath === rootInRuntime) {\r\n      console.warn(`Cannot create state for ${pathId} since runtime is loaded for ${rootInRuntime}`);\r\n      return undefined;\r\n    }\r\n\r\n    const initialState = ComponentStateManager.buildStateFromConfig(pathId, runtime);\r\n    this.registerStateByPathId(pathId, initialState, runtime);\r\n\r\n    return initialState;\r\n  }\r\n\r\n  // Methods for building new initial state ...............................\r\n\r\n  /**\r\n   * Build a new, initial state for a component instance based on the configuration data for \r\n   * the component in the page definition. \r\n   * \r\n   * We put a standard set of attributes into the new state. \r\n   * For some component types we call the component's class to add specific attributes.\r\n   */\r\n  static buildStateFromConfig(pathId, runtime) {\r\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(pathId);\r\n    if (pageSegment === undefined) {\r\n      console.warn(`Empty page segment chopped off from path id ${pathId}`);\r\n    }\r\n    const { pageConfigurationsManager } = runtime;\r\n    const componentConfiguration = pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (componentConfiguration === undefined) {\r\n      console.error(`Cannot find configuration for path ${pageSegment}`);\r\n      return undefined;\r\n    }\r\n    const { config, type } = componentConfiguration;\r\n    const result = {};\r\n\r\n    // store and return deep copies of state per default (components may change this in their addAttributesToInitialState methods):\r\n    StateAttributeAccess.setDeepCopy(result, true);\r\n    // mark state as 'not volatile' per default (components may change this in their addAttributesToInitialState methods):\r\n    StateAttributeAccess.setVolatile(result, false);\r\n\r\n    StateAttributeAccess.setDisabled(result, CommonConfigHelper.getDisabled(config));\r\n    StateAttributeAccess.setHidden(result, CommonConfigHelper.getHidden(config));\r\n    StateAttributeAccess.setVisited(result, false);\r\n    StateAttributeAccess.setSelected(result, CommonConfigHelper.getSelected(config));\r\n    const positionInConfig = CommonConfigHelper.getPosition(config);\r\n    if (positionInConfig !== undefined) {\r\n      StateAttributeAccess.setPosition(result, {\r\n        x: positionInConfig.x,\r\n        y: positionInConfig.y\r\n      });\r\n    }\r\n    StateAttributeAccess.setDefaultLinkReceiver(result, ComponentStateManager.calculateDefaultLinkReceiver(pathId, pageConfigurationsManager));\r\n    if (config.text !== undefined && config.text.label !== undefined) {\r\n      StateAttributeAccess.setTextValue(result, config.text.label)\r\n    }\r\n    if (config.text !== undefined && config.text.mouseOver !== undefined) {\r\n      StateAttributeAccess.setMouseOverValue(result, config.text.mouseOver)\r\n    }\r\n    if (config.image !== undefined && config.image.default !== undefined) {\r\n      StateAttributeAccess.setDefaultImage(result, config.image.default);\r\n    }\r\n\r\n    const dragAndDropInConfig = CommonConfigHelper.getDragAndDrop(config);\r\n    StateAttributeAccess.setDragAndDrop(result, {\r\n      isSender: (dragAndDropInConfig !== undefined && dragAndDropInConfig.sender !== undefined),\r\n      isReceiver: (dragAndDropInConfig !== undefined && dragAndDropInConfig.receiver !== undefined)\r\n    });\r\n    PropagationHelper.addPropagationGroupControllerState(result, config);\r\n    SelectGroupHelper.addSelectGroupControllerState(result, type, pathId, config);\r\n    SelectGroupHelper.addSelectGroupMemberInfo(result, type, pathId, runtime);\r\n    switch (type) {\r\n      case \"CbaSingleLineInputField\":\r\n        InputComponent.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaSimpleTextField\":\r\n        CbaSimpleTextField.addAttributesToInitialState(result, config, runtime);\r\n        break;\r\n      case \"CbaPageArea\":\r\n        CbaPageArea.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaRichTextField\":\r\n        CbaRichTextField.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaMedia\":\r\n        CbaMedia.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaTable\":\r\n        CbaTable.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaInputField\":\r\n        InputComponent.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaTree\":\r\n        CbaTree.addAttributesToInitialState(result, config, pathId, runtime);\r\n        break;\r\n      case \"CbaExternalPageFrame\":\r\n        CbaExternalPageFrame.addAttributesToInitialState(result, config);\r\n        break;\r\n      default:\r\n      // do nothing here\r\n    }\r\n\r\n    // add translations in component state\r\n    ComponentStateManager.addTranslationsInState(pathId, config, result, runtime);\r\n\r\n    return result;\r\n  }\r\n\r\n  static addTranslationsInState(pathId, config, result, runtime) {\r\n    const { currentLanguage } = runtime.translationManager;\r\n    if (currentLanguage === '') return;\r\n\r\n    const componentType = ComponentStateHelper.getComponentTypeForIndexPath(pathId, runtime);\r\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(pathId, runtime);\r\n    let userDefId = UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath);\r\n    // single line input fields (table cells), use table cell as reference\r\n    if (componentType === 'CbaSingleLineInputField' && userDefId === undefined) {\r\n      const cellPathId = IndexPathHelper.dropIndexFromPageSegment(pathId);\r\n      const cellUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(cellPathId, runtime);\r\n      userDefId = UserDefPathHelper.getLastUserDefIdFromPath(cellUserDefIdPath);\r\n    }\r\n\r\n    const translatedText = runtime.translationManager.getTranslatedText(userDefId);\r\n    if (translatedText !== null) {\r\n      StateAttributeAccess.setTextValue(result, translatedText);\r\n      StateAttributeAccess.setLanguageValue(result, currentLanguage);\r\n      ComponentStateManager.updateTableCellParentState(componentType, pathId, config, translatedText, runtime);\r\n    }\r\n\r\n    const translatedMouseOver = runtime.translationManager.getTranslatedMouseOver(userDefId);\r\n    if (translatedMouseOver !== null) {\r\n      StateAttributeAccess.setMouseOverValue(result, translatedMouseOver);\r\n    }\r\n\r\n    let translatedImage = runtime.translationManager.getTranslatedImage(userDefId);\r\n    if (componentType === 'CbaContainer') {\r\n      const { imageMapUserDefinedId } = config;\r\n      if (imageMapUserDefinedId !== undefined) {\r\n        translatedImage = runtime.translationManager.getTranslatedImage(imageMapUserDefinedId);\r\n      }\r\n    }\r\n    if (translatedImage !== null) {\r\n      StateAttributeAccess.setDefaultImage(result, translatedImage);\r\n    }\r\n  }\r\n\r\n  static updateTableCellParentState(componentType, pathId, config, translatedText, runtime) {\r\n    if (componentType === 'CbaTableCell') {\r\n      const tableIndexPath = IndexPathHelper.dropIndexFromPageSegment(pathId);\r\n      const tableAbsoluteUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(tableIndexPath, runtime);\r\n      const tableData = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTableData, tableAbsoluteUserDefPath, runtime);\r\n      if (tableData !== undefined) {\r\n        tableData[config.row][config.column] = translatedText;\r\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractTableData, StateAttributeAccess.setTableData, tableData, tableIndexPath, runtime, false);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the default link receiver for page links that don't explicitly specify \r\n   * a receiver.\r\n   * \r\n   * The method calculates the default receiver as follows:\r\n   * - Starting from the given display component instance we climb up the\r\n   *   tree of embedding CbaPageAreas (i.e. the page segments in the index path).\r\n   * - The first CbaPageArea with its 'catchLinks' configuration option set to true \r\n   *   becomes the default receiver. \r\n   * - If there is not such CbaPageArea, the default receiver is 'undefined'. \r\n   * \r\n   * The method returns 'undefined' if an error occurs. \r\n   * \r\n   * @param {*} path The index path of the display component instance.\r\n   * @param {*} pageConfigurationManager The page configuration manager providing static display component configurations.\r\n   */\r\n  static calculateDefaultLinkReceiver(path, pageConfigurationsManager) {\r\n    // We ignore the last display component instance which can be any type of component, \r\n    // i.e. it might not even have a catch links configuration setting.\r\n    let remainingPath = IndexPathHelper.dropPageSegmentFromPath(path);\r\n\r\n    if (remainingPath !== undefined) {\r\n      let pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n      while (pageSegment !== undefined) {\r\n        const isLinkCatcher = ComponentStateManager.isLinkCatcher(pageSegment, pageConfigurationsManager, path);\r\n        if (isLinkCatcher === undefined) {\r\n          return undefined;\r\n        }\r\n        if (isLinkCatcher) {\r\n          return IndexPathHelper.trimRootAndPageAreaFromPath(remainingPath);\r\n        }\r\n        remainingPath = IndexPathHelper.dropPageSegmentFromPath(remainingPath);\r\n        pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Does the display component specified by the given index pageSegment catch links? \r\n   * \r\n   * The method returns undefined if the specified component does not have a catch link setting in its static configuration. \r\n   * \r\n   * @param {*} pageSegment The page segment specifying the display component.\r\n   * @param {*} pageConfigurationManager The page configuration manager providing static display component configurations.\r\n   * @param {*} path The full path (used for log messages only).\r\n   */\r\n  static isLinkCatcher(pageSegment, pageConfigurationsManager, path) {\r\n    // The last display component of a page segment that is followed by another page segment\r\n    // has to be a CbaPageArea component (or more specifically: it has to have a 'catchLink' property at least).\r\n    const linkCatcherConfiguration = pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (linkCatcherConfiguration === undefined) {\r\n      console.error(`Missing page embedding component at end of inner page segment: ${pageSegment} in path ${path}`);\r\n      return undefined;\r\n    }\r\n    const catchLinkSetting = linkCatcherConfiguration.config.catchLinks;\r\n    if (catchLinkSetting === undefined) {\r\n      console.error(`Missing catch link configuration for page embedding component at end of inner page segment: ${pageSegment} in path ${path}`);\r\n      return undefined;\r\n    }\r\n    return catchLinkSetting === true;\r\n  }\r\n\r\n\r\n  // Methods for cloning and serializable representations ...............................\r\n\r\n  /**\r\n   * Return a clone of the given state if the state is marked as cloneable by JSON.stringify/parse.\r\n   * Otherwise return the given state itself.\r\n   */\r\n  static doDeepCopyIfRequired(state) {\r\n    if (state === undefined) return undefined;\r\n\r\n    // set deepCopy per default:\r\n    if (StateAttributeAccess.extractDeepCopy(state) === undefined) {\r\n      StateAttributeAccess.setDeepCopy(state, true);\r\n    }\r\n\r\n    return StateAttributeAccess.extractDeepCopy(state) === false ? state : StateManagerHelper.deepCopy(state);\r\n  }\r\n\r\n  /**\r\n   * Apply updateVolatiles and toSnapshotRepresentation on those entries in our state map that match the given filter.\r\n   */\r\n  getSnapshot(entryFilter, componentDirectory) {\r\n    ComponentStateManager.updateVolatiles(Object.entries(this.stateMap).filter(entryFilter), componentDirectory);\r\n    return ComponentStateManager.toSnapshotRepresentation(Object.entries(this.stateMap).filter(entryFilter));\r\n  }\r\n\r\n  /**\r\n   * Update all state entries marked as 'volatile' by calling the update method on their component instances.\r\n   * \r\n   * The method skips component instances that are not visible currently. \r\n   * \r\n   * @param {*} entries The entries to be updated.\r\n   * @param {ComponentDirectory} componentDirectory The directory of all currently visible component instances.\r\n   */\r\n  static updateVolatiles(entries, componentDirectory) {\r\n    entries.forEach((entry) => {\r\n      const [path, state] = entry;\r\n      if (StateAttributeAccess.extractVolatile(state)) {\r\n        const componentInstance = componentDirectory.findComponent(path);\r\n        if (componentInstance !== undefined) {\r\n          // Components that set the 'volatile' flag to true must implement a 'updateStateInComponentStateManager method:\r\n          componentInstance.updateStateInComponentStateManager();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a snapshot representation for the given list of state entries.\r\n   * \r\n   * The snapshot representation is cloneable.\r\n   * \r\n   * @param {*} entries The entries to be transformed\r\n   */\r\n  static toSnapshotRepresentation(entries) {\r\n    const result = {};\r\n    entries.forEach((entry) => {\r\n      const [path, state] = entry;\r\n      result[path] = this.toSnapshotRepresentationForSingleEntry(path, state);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Create a snapshot state representation for the given internal component state representation\r\n   * for the given path.\r\n   * \r\n   * @param {*} state The component state to be transformed.\r\n   */\r\n  static toSnapshotRepresentationForSingleEntry(path, state) {\r\n    if (StateAttributeAccess.extractDeepCopy(state)) {\r\n      return StateManagerHelper.deepCopy(state);\r\n    } else {\r\n      return ComponentStateManager.toSnapshotRepresentationByComponent(path, state);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a proper component state representation for the given list of snapshot entries.\r\n   * \r\n   * @param {*} entries The snapshot entries to be transformed.\r\n   */\r\n  static fromSnapshotRepresentation(entries) {\r\n    const result = {};\r\n    entries.forEach((entry) => {\r\n      const [path, state] = entry;\r\n      result[path] = this.fromSnapshotRepresentationForSingleEntry(path, state);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Create a proper component state representation for the given snapshot state representation\r\n   * for the given path.\r\n   * \r\n   * @param {*} state The snapshot state to be transformed.\r\n   */\r\n  static fromSnapshotRepresentationForSingleEntry(path, state) {\r\n    if (StateAttributeAccess.extractDeepCopy(state)) {\r\n      return StateManagerHelper.deepCopy(state);\r\n    } else {\r\n      return ComponentStateManager.fromSnapshotRepresentationByComponent(path, state);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a proper component state representation for the given snapshot state\r\n   * representation, which is not cloneable and therefore needs a component specific\r\n   * transformation.  \r\n   * \r\n   * @param {*} state The snapshot state to be transformed.\r\n   */\r\n  static toSnapshotRepresentationByComponent(path, state) {\r\n    const componentClassName = StateAttributeAccess.extractComponentClassName(state);\r\n    if (componentClassName === undefined) {\r\n      console.error(`Cannot create snapshot for component state in path ${path}`, state);\r\n      return undefined;\r\n    } else {\r\n      switch (componentClassName) {\r\n        case \"CbaRichTextField\":\r\n          return CbaRichTextField.toSnapshot(path, state);\r\n        case \"CbaTable\": // this is probably unreachable: there is not CbaTable.toSnapshot and CbaTable does not set deepCopy flag -> verify in debugger\r\n          return CbaTable.toSnapshot(path, state);\r\n        default:\r\n          console.error(`Unexpected component class ${componentClassName} for snapshot in path ${path}`, state);\r\n          return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a snapshot representation for the given internal component state\r\n   * representation, which is not cloneable and therefore needs a component specific\r\n   * transformation.  \r\n   * \r\n   * @param {*} state The component state to be transformed.\r\n   */\r\n  static fromSnapshotRepresentationByComponent(path, state) {\r\n    const componentClassName = StateAttributeAccess.extractComponentClassName(state);\r\n    if (componentClassName === undefined) {\r\n      console.error(`Cannot extract component state from snapshot for path ${path}`, state);\r\n      return undefined;\r\n    } else {\r\n      switch (componentClassName) {\r\n        case \"CbaRichTextField\":\r\n          return CbaRichTextField.fromSnapshot(path, state);\r\n        case \"CbaTable\":\r\n          return CbaTable.fromSnapshot(path, state);\r\n        default:\r\n          console.error(`Unexpected component class ${componentClassName} in snapshot in path ${path}`, state);\r\n          return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * A catalog of components. \r\n * \r\n * Components are identified by their index path. \r\n * \r\n * While the different instances of this catalog could be used \r\n * we currently have a single instance of it only that \r\n * keeps a catalog of all currently rendering components.\r\n */\r\nexport default class ComponentDirectory {\r\n\r\n  constructor() {\r\n    this.componentList = {};\r\n\r\n    this.clear = this.clear.bind(this);\r\n    this.registerComponent = this.registerComponent.bind(this);\r\n    this.deregisterComponent = this.deregisterComponent.bind(this);\r\n    this.findComponent = this.findComponent.bind(this);\r\n  }\r\n\r\n  clear() {\r\n    this.componentList = {};\r\n  }\r\n\r\n  registerComponent(path, component) {\r\n    this.componentList[path] = component;\r\n  }\r\n\r\n  deregisterComponent(path) {\r\n    this.componentList[path] = undefined;\r\n  }\r\n\r\n  findComponent(path) {\r\n    return this.componentList[path];\r\n  }\r\n\r\n  findByComponentType(componentType) {\r\n    return Object.values(this.componentList).filter(c => c instanceof componentType);\r\n  }\r\n\r\n  /**\r\n   * don't use this method in constructor, because page isn't loaded yet, hence an empty array will be return\r\n   * @param {*} pageName \r\n   */\r\n  findComponentsByPageName(pageName) {\r\n    return Object.keys(this.componentList).map((path) => {\r\n      if (path.indexOf(`page=${pageName}`) !== -1) {\r\n        return this.componentList[path];\r\n      }\r\n      return undefined;\r\n    }).filter(x => !!x);\r\n  }\r\n\r\n  findSubTreeComponentsWithinAPage(pageName, treeInstnancesUserDefinedIds) {\r\n    const pageComponents = this.findComponentsByPageName(pageName);\r\n    const treeComnOnPage = [];\r\n    for (let i = 0, len = treeInstnancesUserDefinedIds.length; i < len; i += 1) {\r\n      for (let j = 0, lenComp = pageComponents.length; j < lenComp; j += 1) {\r\n        if (pageComponents[j].props.config.userDefinedId === treeInstnancesUserDefinedIds[i]) {\r\n          treeComnOnPage.push(pageComponents[j]);\r\n        }\r\n      }\r\n    }\r\n    return treeComnOnPage;\r\n  }\r\n\r\n\r\n  findTreeViewComponentsWithinAPage(pageName, treeInstnancesUserDefinedIds, treeChildAreaIdToIgnore) {\r\n    const cbaTrees = this.findSubTreeComponentsWithinAPage(pageName, treeInstnancesUserDefinedIds);\r\n    const subTreeIds = cbaTrees[0].props.config.treeInstnancesUserDefinedIds;\r\n    const subTreeViewIds = subTreeIds.filter(comp => comp !== treeChildAreaIdToIgnore);\r\n    const pageComponents = this.findComponentsByPageName(pageName);\r\n\r\n    const treeViewComnOnPage = [];\r\n    for (let i = 0, len = subTreeViewIds.length; i < len; i += 1) {\r\n      for (let j = 0, lenComp = pageComponents.length; j < lenComp; j += 1) {\r\n        if (pageComponents[j].props.config.userDefinedId === subTreeViewIds[i]) {\r\n          treeViewComnOnPage.push(pageComponents[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return treeViewComnOnPage;\r\n  }\r\n\r\n\r\n}\r\n","import StateManagerHelper from './StateManagerHelper';\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\nexport default class IncidentsAccumulator {\r\n\r\n  constructor() {\r\n    this.taskValuesList = {};\r\n    this.currentTaskPath = undefined;\r\n    this.startTimeOfCurrentTask = undefined;\r\n    this.startOfCurrentPause = undefined;\r\n    this.timeSpentPausedInCurrentTask = undefined;\r\n    this.firstReactionSeen = undefined;\r\n    this.lastContinuingInteractionKey = undefined;\r\n  }\r\n\r\n  // update values ------------------------------------------------------------------\r\n\r\n  enterTask = (taskPath, atTime, runtime) => {\r\n    this.leaveTask(atTime, runtime);\r\n\r\n    this.currentTaskPath = taskPath;\r\n    this.startTimeOfCurrentTask = atTime;\r\n    this.startTimeOfCurrentPause = undefined;\r\n    this.timeSpentPausedInCurrentTask = 0;\r\n    this.firstReactionSeen = false;\r\n    this.lastContinuingInteractionKey = undefined;\r\n    const values = this.getOrInitializeValuesForTask(taskPath);\r\n    values.nbUserInteractions = 0;\r\n    values.firstReactionTime = undefined;\r\n    values.taskExecutionTime = 0;\r\n    IncidentsAccumulator.dumpStateChangeToTrace(this.currentTaskPath, values, runtime);\r\n  }\r\n\r\n  /**\r\n   * Count a single user interaction. \r\n   * \r\n   * If a continuingInteractionKey is given \r\n   * the method will ignore all but the first call of a consecutive sequence of calls \r\n   * that use the same continuingInteractionKey.  \r\n   * \r\n   * @param {*} atTime The timestamp of the interaction, used for first reaction timing.\r\n   * @param {{type: String, value: String}} continuingInteractionKey The key used to identify a user interaction that might trigger \r\n   *  several consecutive calls to this method but should be counted once only. \r\n   */\r\n  userInteraction = (atTime, continuingInteractionKey, runtime) => {\r\n    if (this.lastContinuingInteractionKey\r\n      && continuingInteractionKey\r\n      && this.lastContinuingInteractionKey.type === continuingInteractionKey.type\r\n      && this.lastContinuingInteractionKey.value === continuingInteractionKey.value) {\r\n      return;\r\n    }\r\n    this.lastContinuingInteractionKey = continuingInteractionKey;\r\n    if (this.currentTaskPath !== undefined) {\r\n      const values = this.getOrInitializeValuesForTask(this.currentTaskPath);\r\n      values.nbUserInteractions += 1;\r\n      values.nbUserInteractionsTotal += 1;\r\n\r\n      if (!this.firstReactionSeen) {\r\n        values.firstReactionTime = IncidentsAccumulator.getNonPausedTimeSpentInCurrentTask(atTime, this.startTimeOfCurrentTask, this.timeSpentPausedInCurrentTask, this.startTimeOfCurrentPause);\r\n        values.firstReactionTimeTotal += values.firstReactionTime;\r\n        this.firstReactionSeen = true;\r\n      }\r\n      IncidentsAccumulator.dumpStateChangeToTrace(this.currentTaskPath, values, runtime);\r\n    }\r\n  }\r\n\r\n  leaveTask = (atTime, runtime) => {\r\n    if (this.currentTaskPath !== undefined) {\r\n      const values = this.getOrInitializeValuesForTask(this.currentTaskPath);\r\n      values.taskExecutionTime = IncidentsAccumulator.getNonPausedTimeSpentInCurrentTask(atTime, this.startTimeOfCurrentTask, this.timeSpentPausedInCurrentTask, this.startTimeOfCurrentPause);\r\n      values.taskExecutionTimeTotal += values.taskExecutionTime;\r\n      IncidentsAccumulator.dumpStateChangeToTrace(this.currentTaskPath, values, runtime);\r\n    }\r\n    this.currentTaskPath = undefined;\r\n    this.startTimeOfCurrentTask = undefined;\r\n    this.startTimeOfCurrentPause = undefined;\r\n    this.timeSpentPausedInCurrentTask = undefined;\r\n    this.firstReactionSeen = undefined;\r\n    this.lastContinuingInteractionKey = undefined;\r\n  }\r\n\r\n  pauseTask = (atTime) => {\r\n    if (this.startTimeOfCurrentPause === undefined) {\r\n      this.startTimeOfCurrentPause = atTime;\r\n    }\r\n  }\r\n\r\n  resumeTask = (atTime) => {\r\n    if (this.startTimeOfCurrentPause !== undefined) {\r\n      // tolerate resume calls without any active task:\r\n      if (this.timeSpentPausedInCurrentTask !== undefined) {\r\n        this.timeSpentPausedInCurrentTask += atTime - this.startTimeOfCurrentPause;\r\n      }\r\n      this.startTimeOfCurrentPause = undefined;\r\n    }\r\n  }\r\n\r\n\r\n  // get values --------------------------------------------------------------------\r\n  nbUserInteractions = taskPath => this.getValuesForTask(taskPath).nbUserInteractions\r\n\r\n  nbUserInteractionsTotal = taskPath => this.getValuesForTask(taskPath).nbUserInteractionsTotal\r\n\r\n  firstReactionTime = taskPath => this.getValuesForTask(taskPath).firstReactionTime\r\n\r\n  firstReactionTimeTotal = taskPath => this.getValuesForTask(taskPath).firstReactionTimeTotal\r\n\r\n  taskExecutionTime = (taskPath, atTime) => {\r\n    if (taskPath === this.currentTaskPath) {\r\n      return IncidentsAccumulator.getNonPausedTimeSpentInCurrentTask(atTime, this.startTimeOfCurrentTask, this.timeSpentPausedInCurrentTask, this.startTimeOfCurrentPause);\r\n    } else {\r\n      return this.getValuesForTask(taskPath).taskExecutionTime;\r\n    }\r\n  }\r\n\r\n  taskExecutionTimeTotal = (taskPath, atTime) => (this.getValuesForTask(taskPath).taskExecutionTimeTotal + this.taskExecutionTime(taskPath, atTime));\r\n\r\n  /**\r\n   * Get a structure containing all values for the given task (for use in trace log e.g.).\r\n   */\r\n  getAllValuesForTask = (taskPath, atTime) => {\r\n    // The taskExecutionTime in the values array is not updated until we leave a task.\r\n    // -> Get the the current value for our result:\r\n    const result = StateManagerHelper.deepCopy(this.getValuesForTask(taskPath));\r\n    result.taskExecutionTime = this.taskExecutionTime(taskPath, atTime);\r\n    result.taskExecutionTimeTotal = this.taskExecutionTimeTotal(taskPath, atTime);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the historical state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.taskValuesList);\r\n\r\n  /**\r\n   * Drop history for all tasks.\r\n   */\r\n  clearTasksState = () => { this.taskValuesList = {}; };\r\n\r\n  /**\r\n   * Preload the historical tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.taskValuesList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change for a task triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, state) => {\r\n    this.taskValuesList[taskPath] = state;\r\n  }\r\n\r\n\r\n  // private stuff --------------------------------------------------------------------\r\n  static getTimeSpentInPausedState(atTime, timeSpentInEarlierPauses, startTimeOfCurrentPause) {\r\n    return timeSpentInEarlierPauses + (startTimeOfCurrentPause === undefined ? 0 : atTime - startTimeOfCurrentPause);\r\n  }\r\n\r\n  static getNonPausedTimeSpentInCurrentTask(atTime, startTimeOfCurrentTask, timeSpentPausedInCurrentTask, startTimeOfCurrentPause) {\r\n    return atTime - startTimeOfCurrentTask - IncidentsAccumulator.getTimeSpentInPausedState(atTime, timeSpentPausedInCurrentTask, startTimeOfCurrentPause);\r\n  }\r\n\r\n  getValuesForTask = (taskPath) => {\r\n    if (this.taskValuesList[taskPath] === undefined) {\r\n      return IncidentsAccumulator.buildInitialValues();\r\n    }\r\n    return this.taskValuesList[taskPath];\r\n  }\r\n\r\n  getOrInitializeValuesForTask = (taskPath) => {\r\n    if (this.taskValuesList[taskPath] === undefined) {\r\n      this.taskValuesList[taskPath] = IncidentsAccumulator.buildInitialValues();\r\n    }\r\n    return this.taskValuesList[taskPath];\r\n  }\r\n\r\n  static buildInitialValues() {\r\n    return {\r\n      nbUserInteractions: 0,\r\n      nbUserInteractionsTotal: 0,\r\n      firstReactionTime: undefined,\r\n      firstReactionTimeTotal: 0,\r\n      taskExecutionTime: 0,\r\n      taskExecutionTimeTotal: 0\r\n    }\r\n  }\r\n\r\n  static dumpStateChangeToTrace(taskPath, state, runtime) {\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'IncidentsAccumulatorState',\r\n      {\r\n        taskPath,\r\n        state\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","import TermEvaluator from './TermEvaluator';\r\n\r\nexport default class ConditionalLinkHelper {\r\n\r\n  static evaluateConditionalLink(conditionalLink, runtime) {\r\n    if (conditionalLink === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    // find the first branch that fulfills its condition:\r\n    const { branches } = conditionalLink;\r\n    if (branches === undefined) {\r\n      ConditionalLinkHelper.logUndefinedMessage('branches array');\r\n      ConditionalLinkHelper.logCalculation('undefined (branches undefined)');\r\n      return undefined;\r\n    }\r\n\r\n    const chosenBranch = branches.find((branch, index) => {\r\n      if (branch.condition === undefined) {\r\n        ConditionalLinkHelper.logUndefinedMessage('condition in branch');\r\n        return false;\r\n      }\r\n      return TermEvaluator.evaluateTerm(branch.condition, runtime, [], `guard[${index}]`) === true\r\n    });\r\n    if (chosenBranch === undefined) {\r\n      ConditionalLinkHelper.logCalculation('undefined (no branch chosen)');\r\n      return undefined;\r\n    }\r\n\r\n    // execute the actions of the fulfilling branch:\r\n    if (chosenBranch.actions === undefined) {\r\n      ConditionalLinkHelper.logUndefinedMessage('actions in chosen branch');\r\n    } else {\r\n      chosenBranch.actions.forEach((action, index) => {\r\n        if (action === undefined) {\r\n          ConditionalLinkHelper.logUndefinedMessage('action in action array of chosen branch');\r\n        } else {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `action[${index}]`);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (chosenBranch.page === undefined) {\r\n      ConditionalLinkHelper.logUndefinedMessage('page in selected branch');\r\n      ConditionalLinkHelper.logCalculation('undefined (no page in chosen branch)');\r\n      return undefined;\r\n    }\r\n\r\n    const result = chosenBranch.page;\r\n    ConditionalLinkHelper.logCalculation(result);\r\n    return result;\r\n  }\r\n\r\n\r\n  static logUndefinedMessage(propertyName) {\r\n    console.log(`Conditional link definition contains undefined ${propertyName}`);\r\n  }\r\n\r\n  static logCalculation(result) {\r\n    console.log(`Conditional link evaluates to `, result);\r\n  }\r\n\r\n}\r\n","import CommonConfigHelper from \"./CommonConfigHelper\";\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport CbaComboBox from '../components/CbaComboBox';\r\nimport CbaRichTextField from '../components/CbaRichTextField/CbaRichTextField';\r\nimport CbaCalculatorInput from \"../components/calculator/CbaCalculatorInput\";\r\nimport CbaTableCell from \"../components/table/CbaTableCell\";\r\nimport CbaList from \"../components/list/CbaList\";\r\n\r\n/**\r\n * Provide access to the configuration of the currently active item.\r\n */\r\nexport default class PageConfigurationsManager {\r\n\r\n  /**\r\n   * Create a configuration manager to provide access to the configuration of the given item.\r\n   * \r\n   * @param {*} item The configuration of the item. \r\n   */\r\n  constructor(item) {\r\n    this.pagesList = item.pages;\r\n    this.buildMappings(item.pages);\r\n\r\n    this.findPage = this.findPage.bind(this);\r\n    this.findPageSegmentForUserDefId = this.findPageSegmentForUserDefId.bind(this);\r\n    this.findConfigurationForPageSegment = this.findConfigurationForPageSegment.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Get the configuration object for the specified page.\r\n   */\r\n  findPage(pageName) {\r\n    return this.pagesList.find((value, index, theArray) => value.name === pageName);\r\n  }\r\n\r\n  /**\r\n   * Get page segment (for use in index paths) of the display component specified by the given UserDefinedId.\r\n   * \r\n   * The page segment starts with the name of the parent page followed by an index \r\n   * into the children array for each CbaContainer from the page root to the display component identified\r\n   * by the UserDefinedId, e.g. \r\n   *   /page=pageA/index=3/index=1\r\n   */\r\n  findPageSegmentForUserDefId(userDefinedId) {\r\n    const result = this.userDefinedIdCatalog[userDefinedId];\r\n    if (result === undefined) {\r\n      console.warn(`Cannot find page segment for user defined id ${userDefinedId}`)\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get page segment (for use in index paths) of the text block specified by the given text block name.\r\n   * \r\n   * The page segment starts with the name the parent page followed by an index \r\n   * into the children array for each CbaContainer from the page root to the rich text component \r\n   * owning the text block, e.g. \r\n   *   /page=pageA/index=3/index=1\r\n   */\r\n  findPageSegmentForTextBlockOwner(blockName) {\r\n    // The method is called to test whether an ID is a block name, therefore not finding any hit is no error.\r\n    return this.textBlockNameCatalog[blockName];\r\n  }\r\n\r\n  /**\r\n   * Get the configuration object for the display component specified by the given page segment. \r\n   * \r\n   * You may obtain the page segment for a display component by calling findPageSegmentForUserDefId(...).\r\n   */\r\n  findConfigurationForPageSegment(pageSegment, supressWarning) {\r\n    const result = this.pageSegmentCatalog[pageSegment];\r\n    if (!supressWarning && result === undefined) {\r\n      console.warn(`Cannot find configuration for page segment ${pageSegment}`)\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  // private stuff --------------------------------------------------------------------------\r\n  buildMappings(pages) {\r\n\r\n    // map (userDefinedId) -> (page segment for component to be used in index path)\r\n    this.userDefinedIdCatalog = {};\r\n\r\n    // map (text block name) -> (page segment for CbaRichText component containing the text block to be used in index path)\r\n    this.textBlockNameCatalog = {}\r\n\r\n    // map (page segment from index path) -> (description structure for component as given in item description JSON)\r\n    this.pageSegmentCatalog = {};\r\n\r\n    pages.forEach((page, index, all) => {\r\n      this.addMappingsForPage(page);\r\n    })\r\n  }\r\n\r\n  addMappingsForPage(page) {\r\n    const pageName = page.name;\r\n    this.addMappingsForComponent(IndexPathHelper.buildPageSegment(pageName), page.content);\r\n  }\r\n\r\n\r\n  addMappingsForComponent(pageSegment, component) {\r\n    if (component === undefined || component.config === undefined) {\r\n      console.warn(`Found invalid component configuration at page segment ${pageSegment}`);\r\n    }\r\n\r\n    this.addMappings(pageSegment, component);\r\n\r\n    const { type, config } = component;\r\n    switch (type) {\r\n      case 'CbaContainer':\r\n        this.addMappingsForComponentList(pageSegment, component.config.cbaChildren);\r\n        break;\r\n      case 'CbaRegionMap':\r\n        this.addMappingsForComponentList(pageSegment, component.config.regions);\r\n        break;\r\n      case 'CbaComboBox':\r\n        this.addMappingsForComponentList(pageSegment, CbaComboBox.buildComboBoxItemsArray(component.config.items));\r\n        break;\r\n      case 'CbaList':\r\n        this.addMappingsForComponentList(pageSegment, CbaList.buildListItemsArray(component.config.items));\r\n        break;\r\n      case 'CbaRichTextField':\r\n        this.addMappingsForComponentList(CbaRichTextField.addLinkIndex(pageSegment), CbaRichTextField.buildLinkConfigurationsArray(component.config));\r\n        if (config.contentModifiers !== undefined) {\r\n          this.addMappingsForComponentList(CbaRichTextField.addContentModifierIndex(pageSegment), component.config.contentModifiers);\r\n        }\r\n        if (config.textBlocks !== undefined) {\r\n          component.config.textBlocks.forEach((textBlock, index, all) => {\r\n            this.textBlockNameCatalog[textBlock.name] = pageSegment;\r\n          });\r\n        }\r\n        break;\r\n      case 'CbaTable':\r\n        this.addMappingsForComponentList(pageSegment, config.cbaChildren);\r\n        break;\r\n      case 'CbaTableCell':\r\n        if (config.isSpreadsheet === true) {\r\n          if (config.items !== undefined) {\r\n            const comboboxCopy = CbaTableCell.createCellCopy(component, pageSegment, \"CbaComboBox\");\r\n            this.addMappings(comboboxCopy.path, comboboxCopy);\r\n            this.addMappingsForComponentList(comboboxCopy.path, CbaComboBox.buildComboBoxItemsArray(config.items));\r\n          } else {\r\n            const inputCopy = CbaTableCell.createCellCopy(component, pageSegment, \"CbaSingleLineInputField\");\r\n            this.addMappings(inputCopy.path, inputCopy);\r\n          }\r\n        }\r\n        this.addMappingsForComponentList(pageSegment, config.cbaChildren);\r\n        break;\r\n      case 'CbaCalculatorInput':\r\n      {\r\n        const { delegatePath, delegateComponent } = CbaCalculatorInput.createDelegateComponent(component, pageSegment, 'CbaSimpleTextField')\r\n        this.addMappings(delegatePath, delegateComponent);\r\n        break;\r\n      }\r\n      case 'CbaCalculatorHistory':\r\n      {\r\n        const { delegatePath, delegateComponent } = CbaCalculatorInput.createDelegateComponent(component, pageSegment, 'CbaSimpleTextField')\r\n        this.addMappings(delegatePath, delegateComponent);\r\n        break;\r\n      }\r\n      case 'CbaMedia':\r\n        this.addMappingsForComponentList(pageSegment, config.cbaChildren);\r\n        break;\r\n      default:\r\n        // nothing to do for other component types.\r\n    }\r\n  }\r\n\r\n  addMappings(pageSegment, component) {\r\n    this.pageSegmentCatalog[pageSegment] = component;\r\n    const userDefinedId = CommonConfigHelper.getUserDefinedId(component.config);\r\n    if (userDefinedId !== undefined) {\r\n      this.userDefinedIdCatalog[userDefinedId] = pageSegment;\r\n    }\r\n  }\r\n\r\n  addMappingsForComponentList(rootPath, components) {\r\n    if (components !== undefined) {\r\n      components.forEach((component, index, all) => {\r\n        const path = IndexPathHelper.appendIndexToPageSegment(rootPath, index);\r\n        this.addMappingsForComponent(path, component);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","export default class CalculationsConfigurationManager {\r\n\r\n  constructor(item) {\r\n    this.tasksList = item.tasks;\r\n    this.variables = item.variables;\r\n    this.implicitVariables = item.implicitVariables;\r\n  }\r\n\r\n  /**\r\n   * Find the calculation with the given name configured for the given task.\r\n   * \r\n   * The method returns 'undefined' if no matching calculation exists.\r\n   * \r\n   */\r\n  findCalculationByTaskName = (taskName, calculationName) => {\r\n    const calculationEntry = this.findAllCalculationsByTaskName(taskName).find((value, index, all) => value.name === calculationName);\r\n    return calculationEntry === undefined ? undefined : calculationEntry.calculation;\r\n  }\r\n\r\n  /**\r\n   * Find all named calculations configured for the given task.\r\n   * \r\n   * The method returns a list of calculation configurations.\r\n   * \r\n   */\r\n  findAllCalculationsByTaskName = (taskName) => {\r\n    const task = this.tasksList.find((value, index, theArray) => value.name === taskName);\r\n    if (task === undefined) {\r\n      console.error(`Cannot find task configuration for task name ${taskName}`);\r\n      return [];\r\n    }\r\n    return task.namedCalculations;\r\n  }\r\n\r\n  /**\r\n   * Find the score result list with the given name for the given task.\r\n   */\r\n  findScoreResultListByTaskName = (taskName, listName) => {\r\n    const allResultLists = this.findAllScoreResultListsByTaskName(taskName);\r\n    const list = allResultLists.find((value, index, theArray) => value.name === listName);\r\n    if (list === undefined) {\r\n      console.log(`Cannot find score result list configuration for task name ${taskName} and list name ${listName}`);\r\n      return [];\r\n    }\r\n    return list.elements;\r\n  }\r\n\r\n\r\n  /**\r\n   * Find all result lists that are part of the score result for a given task.\r\n   * \r\n   */\r\n  findAllScoreResultListsByTaskName = (taskName) => {\r\n    const task = this.tasksList.find((value, index, theArray) => value.name === taskName);\r\n    if (task === undefined) {\r\n      console.error(`Cannot find task configuration for task name ${taskName}`);\r\n      return [];\r\n    }\r\n    return task.scoreResult.lists;\r\n  }\r\n\r\n  /**\r\n   * Find the attributes structure of the score result for a given task.\r\n   */\r\n  findScoreResultAttributesByTaskName = (taskName) => {\r\n    const task = this.tasksList.find((value, index, theArray) => value.name === taskName);\r\n    if (task === undefined) {\r\n      console.error(`Cannot find task configuration for task name ${taskName}`);\r\n      return [];\r\n    }\r\n    return task.scoreResult.attributes;\r\n  }\r\n\r\n  /**\r\n   * Find the relevant variables that must be provided as result variables in the scoring result structure for a given task.\r\n   * Not Relevant -> the variables that are used in hit conditions for the given task.\r\n   *              -> their names are provided in the 'excludedVariablesList' structure.\r\n   */\r\n  findRelevantVariablesForTask = (taskName, implicitVariables) => {\r\n    const task = this.tasksList.find((value, index, theArray) => value.name === taskName);\r\n    if (task === undefined) {\r\n      console.error(`Cannot find task configuration for task name ${taskName}`);\r\n      return [];\r\n    }\r\n\r\n    let targetVariables = this.variables;\r\n    if (implicitVariables) targetVariables = this.implicitVariables;\r\n\r\n    const excludedVariables = this.findScoreResultListByTaskName(taskName, 'excludedVariablesList');\r\n    return targetVariables.filter(obj => !excludedVariables.includes(obj.name));\r\n  }\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\n/**\r\n * Keep the state of all tasks. \r\n * \r\n * The task state contains:\r\n * - The names of the currently loaded pages in the standard and xPage areas.\r\n * - The list of dialog windows and the name of the page loaded in each.\r\n * - The size (width and height) of the item defining the task.\r\n * - The layout configuration (space used for xPage area, size and color of divider etc.) of the task.\r\n * - The highlight color of the item defining the task.\r\n */\r\nexport default class PresenterStateManager {\r\n\r\n  constructor() {\r\n    this.taskEntriesList = {};\r\n  }\r\n\r\n\r\n  /**\r\n   * Save the given task state for the task identified by the task path.\r\n   */\r\n  saveTaskState = (taskPath, state, runtime) => {\r\n    const newState = StateManagerHelper.deepCopy(state);\r\n    this.taskEntriesList[taskPath] = newState;\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'PresenterStateManagerState',\r\n      {\r\n        taskPath,\r\n        state: newState\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * Get the task state for the task identified by the task path.\r\n   */\r\n  getTaskState = taskPath => StateManagerHelper.deepCopy(this.taskEntriesList[taskPath]);\r\n\r\n  /**\r\n  * Remove a dialog or a modal dialog from task state.\r\n  *\r\n  * The method does nothing if no dialog with the given name and type exists.\r\n  * \r\n  * @param {string} pageAreaName The name of the dialog to be removed\r\n  * @param {string} pageAreaType The type of dialog being removed\r\n  * @param {string} taskPath The task from which is being removed\r\n  * \r\n  */\r\n  removeDialog = (pageAreaName, pageAreaType, taskPath, runtime) => {\r\n    const taskState = this.taskEntriesList[taskPath];\r\n\r\n    taskState.dialogs = taskState.dialogs.filter(dialog => dialog.pageAreaName !== pageAreaName || dialog.type !== pageAreaType);\r\n\r\n    this.saveTaskState(taskPath, taskState, runtime);\r\n  }\r\n\r\n  /**\r\n  * Mark a dialog or a modal dialog as not visible from task state.\r\n  *\r\n  * The method does nothing if no dialog with the given name and type exists.\r\n  * \r\n  * @param {string} pageAreaName The name of the dialog to be removed\r\n  * @param {string} pageAreaType The type of dialog being removed\r\n  * @param {string} taskPath The task from which is being removed\r\n  * \r\n  */\r\n  hideDialog = (pageAreaName, pageAreaType, taskPath, runtime) => {\r\n    const taskState = this.taskEntriesList[taskPath];\r\n\r\n    const removableDialog = taskState.dialogs.find(dialog => dialog.pageAreaName === pageAreaName && dialog.type === pageAreaType);\r\n    if (removableDialog) {\r\n      removableDialog.visible = false;\r\n    } else {\r\n      console.warn(\"Dialog not found - \", pageAreaType, pageAreaName);\r\n    }\r\n\r\n    this.saveTaskState(taskPath, taskState, runtime);\r\n  }\r\n\r\n  /**\r\n  * Mark a dialog or a modal dialog as not visible from task state.\r\n  *\r\n  * The method does nothing if no dialog with the given page name exists.\r\n  * \r\n  * @param {string} pageName The name of the specific dialog page to be removed\r\n  * @param {string} taskPath The task from which is being removed\r\n  * \r\n  */\r\n    hideSpecificPageDialog = (pageName, taskPath, runtime) => {\r\n      const taskState = this.taskEntriesList[taskPath];\r\n\r\n      const removableDialog = taskState.dialogs.find(dialog => dialog.pageName === pageName);\r\n      if (removableDialog) {\r\n        removableDialog.visible = false;\r\n      } else {\r\n        console.warn(\"Dialog not found - \", pageName);\r\n      }\r\n\r\n      this.saveTaskState(taskPath, taskState, runtime);\r\n    }\r\n\r\n  /**\r\n  * Update the position of a dialog or a modal dialog in task state.\r\n  * \r\n  * The method implicitly sets the focus flag to true for the given dialog \r\n  * and false for all other dialogs.\r\n  *\r\n  * The method does not complain if no dialog with the given name and type exists.\r\n  * \r\n  * @param {string} pageAreaName The name of the dialog to be modified\r\n  * @param {string} pageAreaType The type of the dialog to be modified\r\n  * @param {string} taskPath The task from which is being removed\r\n  * @param {x:int, y:int} newPosition The new position to set for the dialog\r\n  * \r\n  */\r\n  updatePositionAndFocusDialog = (pageAreaName, pageAreaType, taskPath, newPosition, runtime) => {\r\n    const currentTaskState = this.taskEntriesList[taskPath];\r\n\r\n    currentTaskState.dialogs.forEach((dialog, index) => {\r\n      if (dialog.pageAreaName === pageAreaName && dialog.type === pageAreaType) {\r\n        dialog.position = newPosition;\r\n        dialog.focused = true;\r\n      } else {\r\n        dialog.focused = false;\r\n      }\r\n    });\r\n\r\n    this.saveTaskState(taskPath, currentTaskState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Build an initial task state object. \r\n   * \r\n   * @param {string} standardPage The name of the page loaded in the standard area.\r\n   * @param {string} xPage The name of the page loaded in the XPage area.\r\n   * @param {number} itemWidth The width of the item defining the task.\r\n   * @param {number} itemHeight The height of the item defining the task.\r\n   * @param {boolean} withEditContextMenu Should we include the edit context menu (and the keyboard shortcuts for cut/copy/paste)?\r\n   * @param {*} itemLayout The layout of the task (i.e. standard vs. xPage division).\r\n   * @param {string} itemHighlightColor The highlight color of the item defining the task.\r\n   * @param {string} cssStyles The string containing task CSS styles\r\n   */\r\n  static buildInitialTaskStateObject(standardPage, xPage, itemWidth, itemHeight, itemLayout, withEditContextMenu, itemHighlightColor, highlightColors, cssStyles) {\r\n    return {\r\n      standardPage,\r\n      xPage,\r\n      itemWidth,\r\n      itemHeight,\r\n      itemLayout,\r\n      withEditContextMenu,\r\n      dialogs: [],\r\n      itemHighlightColor,\r\n      highlightColors,\r\n      cssStyles\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Modify the page name and position for the given page area in the given task state.\r\n   * \r\n   * @param {string} pageName The new page name to set.\r\n   * @param {{ x: integer, y: integer}} position The new position of the page area to set. Not used for main page areas.\r\n   * @param {string} pageAreaType The type of the page area to modify.\r\n   * @param {string} pageAreaName The name of the page area to modify.\r\n   * @param {*} taskState The task state object containing the page area configurations to be changed.\r\n   */\r\n  static setPageForPageAreaInTaskState(pageName, position, pageAreaType, pageAreaName, taskState) {\r\n    switch (pageAreaType) {\r\n      case 'main':\r\n        PresenterStateManager.setMainAreaPage(pageName, pageAreaName, taskState);\r\n        break;\r\n      case 'dialog':\r\n        PresenterStateManager.changeOrCreatePageArea(pageName, position, pageAreaName, \"dialog\", taskState.dialogs);\r\n        break;\r\n      case 'modal':\r\n        PresenterStateManager.changeOrCreatePageArea(pageName, position, pageAreaName, \"modal\", taskState.dialogs);\r\n        break;\r\n      default:\r\n        console.error(`Unknown page area type: ${pageAreaType}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the page name for the standard or xPage area.\r\n   * \r\n   * @param {string} pageName The new page name to set.\r\n   * @param {string} pageAreaName The name of the page area: 'standard' or 'xPage'.\r\n   * @param {string} taskState \r\n   * @param {*} taskState The task state object containing the page area configurations to be changed.\r\n   */\r\n  static setMainAreaPage(pageName, pageAreaName, taskState) {\r\n    switch (pageAreaName) {\r\n      case 'standard':\r\n        taskState.standardPage = pageName;\r\n        break;\r\n      case 'xPage':\r\n        taskState.xPage = pageName;\r\n        break;\r\n      default:\r\n        console.error(`Unknown page area name for 'main' page area type: ${pageAreaName}`);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Set the page name and position for a page area identified by the given area name and area type residing in the given page area list.\r\n   * \r\n   * The method implicitly creates an entry for the page area if there is no such entry yet.\r\n   * \r\n   * @param {string} pageName The new page name to set.\r\n   * @param {{ x: integer, y: integer}} position The new position of the page area to set.\r\n   * @param {string} pageAreaName The name of the page area.\r\n   * @param {string} pageAreaType The type of the page area.\r\n   * @param {[]} pageAreaList The list of page areas to modify.\r\n   */\r\n  static changeOrCreatePageArea(pageName, position, pageAreaName, pageAreaType, pageAreaList) {\r\n    const pageAreaEntry = pageAreaList.find(value => value.pageAreaName === pageAreaName && value.type === pageAreaType);\r\n    if (pageAreaEntry === undefined) {\r\n      pageAreaList.push({\r\n        pageAreaName,\r\n        type: pageAreaType,\r\n        pageName,\r\n        position,\r\n        visible: true\r\n      });\r\n    } else {\r\n      pageAreaEntry.pageName = pageName;\r\n      pageAreaEntry.position = position;\r\n      pageAreaEntry.visible = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.taskEntriesList);\r\n\r\n  /**\r\n   * Drop all tasks.\r\n   */\r\n  clearTasksState = () => { this.taskEntriesList = {}; };\r\n\r\n  /**\r\n   * Preload the tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.taskEntriesList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change for a task triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, state) => {\r\n    this.taskEntriesList[taskPath] = state;\r\n  }\r\n\r\n}\r\n","import TermEvaluator from \"./TermEvaluator\";\r\n\r\n/**\r\n * Service to map values to strings using value maps configured in the item configuration.\r\n */\r\nexport default class ValueMapper {\r\n\r\n  // ---------- public API ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build a value mapper service. \r\n   */\r\n  constructor(item, runtime) {\r\n    this.valueMaps = item.valueMaps;\r\n    this.runtime = runtime;\r\n  }\r\n\r\n  /**\r\n   * Map a value using the specified map.\r\n   * \r\n   * The method returns undefined if the specified value map does not exist \r\n   * or the given value cannot not find an accepting guard.\r\n   */\r\n  getMappedValue = (valueMapName, valueToMap) => {\r\n    const valueMapToUse = this.valueMaps.find(valueMap => valueMap.name === valueMapName);\r\n    if (valueMapToUse === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const acceptingGuard = valueMapToUse.guards.find(\r\n      (guard, index) => TermEvaluator.evaluateTerm(guard.guardTerm, this.runtime, [valueToMap], `guard[${index}]_${valueMapName}`) === true\r\n    );\r\n    if (acceptingGuard === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    return acceptingGuard.value;\r\n  }\r\n\r\n}\r\n","import IndexPathHelper from './IndexPathHelper';\r\nimport ConditionalLinkHelper from '../eval/ConditionalLinkHelper';\r\nimport PageConfigurationsManager from '../config/PageConfigurationsManager';\r\nimport CalculationsConfigurationManager from '../config/CalculationsConfigurationManager';\r\nimport PresenterStateManager from './PresenterStateManager';\r\nimport TraceLogHelper from './TraceLogHelper';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\nimport CommonActionsHelper from '../components/CommonActionsHelper';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport TermEvaluator from '../eval/TermEvaluator';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport ValueMapper from '../eval/ValueMapper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\nimport Utils from '../utils/Utils';\r\nimport ComponentStateHelper from './ComponentStateHelper';\r\n\r\nexport default class TaskManager {\r\n\r\n  /**\r\n   * @param {*} runtime Access to the global services. \r\n   */\r\n  constructor(runtime) {\r\n\r\n    this.itemInfoEntries = [];\r\n    this.handleTopLevelPageChange = undefined;\r\n    this.switchCallback = undefined;\r\n    this.availabilityCallback = undefined;\r\n    this.runtime = runtime;\r\n\r\n    this.activeTestName = undefined;\r\n    this.activeItemName = undefined;\r\n    this.activeTaskName = undefined;\r\n\r\n    this.activeResourcePath = undefined;\r\n    this.activeExternalResourcePath = undefined;\r\n  }\r\n\r\n\r\n  // -------- public API -------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Set the callback that we will call each time a top level page changes.\r\n   */\r\n  setTopLevelPageChangeHandler = (topLevelPageChangeHandler) => {\r\n    this.handleTopLevelPageChange = topLevelPageChangeHandler;\r\n  }\r\n\r\n  /**\r\n   * Add an item to our item configurations array.\r\n   */\r\n  addItem = (itemConfiguration, resourcePath, externalResourcePath) => {\r\n    this.itemInfoEntries.push({\r\n      itemConfiguration, resourcePath, externalResourcePath\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Clear all items in our item configurations array.\r\n   */\r\n  clearItems = () => {\r\n    this.itemInfoEntries = [];\r\n  }\r\n\r\n  /**\r\n   * Set the callback that we will use to trigger task switches.\r\n   */\r\n  setSwitchCallback = (switchCallback) => {\r\n    this.switchCallback = switchCallback;\r\n  }\r\n\r\n  /**\r\n   * Set the callback that we will ask about availability of task switches.\r\n   */\r\n  setAvailabilityCallback = (availabilityCallback) => {\r\n    this.availabilityCallback = availabilityCallback;\r\n  }\r\n\r\n\r\n  /**\r\n   * Trigger a switch to the first task with the given name inside a specific test (i.e. we ignore the source item).\r\n   */\r\n  switchFirstMatchingTaskInterTest = (newTestName, newTaskName) => {\r\n    this.triggerGoToTask(newTestName, undefined, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to the first task with a matching name in the current test (i.e. we ignore the source item). \r\n   */\r\n  switchFirstMatchingTaskIntraTest = (newTaskName) => {\r\n    this.switchFirstMatchingTaskInterTest(this.activeTestName, newTaskName);\r\n  };\r\n\r\n  /**\r\n   * Trigger a switch to the specified task in the specified test. \r\n   */\r\n  switchTaskInterTest = (newTestName, newItemName, newTaskName) => {\r\n    this.triggerGoToTask(newTestName, newItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to the specified task in the current test. \r\n   */\r\n  switchTaskIntraTest = (newItemName, newTaskName) => {\r\n    this.triggerGoToTask(this.activeTestName, newItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to another task inside the active item.\r\n   */\r\n  switchTaskIntraItem = (newTaskName) => {\r\n    this.triggerGoToTask(this.activeTestName, this.activeItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to the next task in our test course. \r\n   */\r\n  switchTaskNext = () => {\r\n    this.triggerTaskSwitch('nextTask', undefined, undefined, undefined);\r\n  }\r\n\r\n  /**\r\n   * Could we currently perform a switch to the next task?\r\n   */\r\n  nextTaskAvailable = () => this.checkAvailableTask('nextTask', undefined, undefined, undefined);\r\n\r\n  /**\r\n   * Trigger a switch to the previous task in our test course.\r\n   */\r\n  switchTaskPrevious = () => {\r\n    this.triggerTaskSwitch('previousTask', undefined, undefined, undefined);\r\n  }\r\n\r\n  /**\r\n   * Could we currently perform a switch to the previous task?\r\n   */\r\n  previousTaskAvailable = () => this.checkAvailableTask('previousTask', undefined, undefined, undefined);\r\n\r\n  /**\r\n   * Trigger to cancel the currently running task.\r\n   */\r\n  cancelTask = () => {\r\n    this.triggerTaskSwitch('cancelTask', undefined, undefined, undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to another page inside the same item (no task switch).\r\n   * \r\n   * This is a method combining all page switching types implied by the config.link configuration variants. \r\n   * // TODO: Simplify the link configuration structure and the TermEvaluator.switchPage operator parameters.\r\n   * \r\n   * @param {String} newPageName The name of a default page to load into the page area if no conditional link is given or it does not return a page.\r\n   * @param {Object} conditionalLink A conditional link configuration to be evaluated and to obtain a page to be loaded.\r\n   * @param {String} pageUrl The URL to use for the new page.\r\n   * @param {String} pageAreaType The type of the page area in the test presenter resp. containing the receiver.\r\n   * @param {String} pageAreaName The name of the page area in the test presenter resp. containing the receiver.\r\n   * @param {String} receiver The index path (without path root and page area type/name) of the CbaPageArea that should be modified.\r\n   * @param {{name: String, image: String}} receiverTab The tab in the CbaPageArea to load the page into (optional). \r\n   * @param {String} historyMove The kind of 'move' in the page history: 'forward', 'back' or 'home'\r\n   * @param {{x: integer, y: integer}} position The position where we should open the dialog window (not used for pageAreaType='main'). \r\n   * If not specified we will use the postion of the top level frame. \r\n   * If not specified the dialog will open at its previous position or centered if it was not opened before.\r\n   * \r\n   */\r\n  switchPage = (newPageName, conditionalLink, pageUrl, pageAreaType, pageAreaName, receiver, receiverTab, historyMove, position) => {\r\n    if (receiver === undefined) {\r\n      const evaluationResult = ConditionalLinkHelper.evaluateConditionalLink(conditionalLink, this.runtime);\r\n      if (evaluationResult === undefined) {\r\n        if (newPageName === undefined) {\r\n          console.error(`No page chosen by link specification: default page: ${newPageName} conditionalLink: ${conditionalLink}`);\r\n        } else {\r\n          const combinedPosition = (position === undefined)\r\n            ? CommonActionsHelper.getTopComponentPosition(newPageName, this.runtime.pageConfigurationsManager)\r\n            : position;\r\n          this.switchTopLevelPage(pageAreaType, pageAreaName, newPageName, combinedPosition);\r\n        }\r\n      } else {\r\n        this.switchTopLevelPage(\r\n          evaluationResult.pageAreaType,\r\n          evaluationResult.pageAreaName,\r\n          evaluationResult.pageName,\r\n          evaluationResult.position\r\n        );\r\n      }\r\n    } else {\r\n      const fullReceiverPath = IndexPathHelper.appendPageSegmentToPathRoot(this.getCurrentStatePathRoot(), pageAreaType, pageAreaName, receiver);\r\n      if (historyMove === undefined) {\r\n        const evaluationResult = ConditionalLinkHelper.evaluateConditionalLink(conditionalLink, this.runtime);\r\n        if (evaluationResult === undefined) {\r\n          if (newPageName === undefined) {\r\n            console.error(`No page chosen by link specification: default page: ${newPageName} conditionalLink: ${conditionalLink}`);\r\n          } else {\r\n            this.switchEmbeddedPage(fullReceiverPath, newPageName, pageUrl, receiverTab);\r\n          }\r\n        } else {\r\n          const { pageAreaType: evaluatedPageAreaType } = evaluationResult;\r\n          if (evaluatedPageAreaType === 'main') {\r\n            this.switchEmbeddedPage(fullReceiverPath, evaluationResult.pageName, evaluationResult.pageUrl, evaluationResult.receiverTab);\r\n          } else {\r\n            this.switchTopLevelPage(\r\n              evaluatedPageAreaType,\r\n              evaluationResult.pageAreaName,\r\n              evaluationResult.pageName,\r\n              evaluationResult.position\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        this.doHistoryMove(fullReceiverPath, historyMove);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch the top level page of a page area in the test presenter.\r\n   * \r\n   * @param {String} pageAreaType The type of the page area in the test presenter.\r\n   * @param {String} pageAreaName The name of the page area in the test presenter.\r\n   * @param {String} newPageName The name of the page to load into the page area.\r\n   * @param {{x: integer, y: interger}} position The position of the the page area (for 'dialog' page areas only).\r\n   */\r\n  switchTopLevelPage = (pageAreaType, pageAreaName, newPageName, position) => {\r\n    this.runtime.traceLogBuffer.reportEvent('PageSwitchTopLevel', new Date(),\r\n      {\r\n        pageAreaType,\r\n        pageAreaName,\r\n        newPageName,\r\n        position\r\n      });\r\n\r\n    TaskManager.preparePageSwitchInPresenterState(\r\n      this.activeTestName, this.activeItemName, this.activeTaskName,\r\n      pageAreaType, pageAreaName, newPageName, position,\r\n      this.runtime\r\n    );\r\n    if (this.handleTopLevelPageChange !== undefined) {\r\n      this.handleTopLevelPageChange();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch the currently embedded page in a CbaPageArea display component instance to an explicitly given page.\r\n   * \r\n   * @param {String} fullReceiverPath The full index path of the CbaPageArea display component instance to modify.\r\n   * @param {String} newPageName The name of the page to load into the page area.\r\n   * @param {String} pageUrl The URL to use for the new page.\r\n   * @param {{name: String, image: String}} receiverTab The tab in the CbaPageArea to load the page into (optional). \r\n   */\r\n  switchEmbeddedPage = (fullReceiverPath, newPageName, pageUrl, receiverTab) => {\r\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(fullReceiverPath, this.runtime);\r\n    this.runtime.traceLogBuffer.reportEvent('PageSwitchEmbedded', new Date(),\r\n      {\r\n        indexPath: fullReceiverPath,\r\n        userDefIdPath,\r\n        userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\r\n        tab: receiverTab === undefined ? undefined : receiverTab.name,\r\n        newPageName\r\n      });\r\n    CbaPageArea.setPageName(fullReceiverPath, receiverTab, newPageName, pageUrl, this.runtime);\r\n    RenderingHelper.triggerRenderingViaPath(fullReceiverPath, this.runtime);\r\n  }\r\n\r\n  /**\r\n   * Switch the currently embedded page in a CbaPageArea to the next or previous page in the page history.\r\n   * \r\n   * @param {String} fullReceiverPath The full index path of the CbaPageArea display component instance to modify.\r\n   * @param {String} historyMove The kind of 'move' in the page history: 'forward', 'back' or 'home'\r\n   */\r\n  doHistoryMove = (fullReceiverPath, historyMove) => {\r\n    CbaPageArea.doHistoryMove(fullReceiverPath, historyMove, this.runtime);\r\n    RenderingHelper.triggerRenderingViaPath(fullReceiverPath, this.runtime);\r\n  }\r\n\r\n  /**\r\n   * Get the path root for the current task (which is the same as the task ID returned by the methods above).\r\n   */\r\n  getCurrentStatePathRoot = () => IndexPathHelper.buildPathRoot(this.activeTestName, this.activeItemName, this.activeTaskName);\r\n\r\n  /**\r\n   * Get the path root for the given task (taking the current test and item for the other path components).\r\n   */\r\n  getStatePathRootForTask = taskName => IndexPathHelper.buildPathRoot(this.activeTestName, this.activeItemName, taskName);\r\n\r\n  /**\r\n   * The the names of the currently active test/item/task.\r\n   */\r\n  getCurrentTestTaskItemNames = () => ({\r\n    test: this.activeTestName,\r\n    item: this.activeItemName,\r\n    task: this.activeTaskName\r\n  });\r\n\r\n\r\n  /**\r\n   * Get the names of the pages currently displayed in the standard page area and the Xpage area.\r\n   */\r\n  getCurrentPageNames = () => {\r\n    const taskId = IndexPathHelper.buildPathRoot(this.activeTestName, this.activeItemName, this.activeTaskName);\r\n    const taskEntry = this.runtime.presenterStateManager.getTaskState(taskId);\r\n    return {\r\n      standardPage: taskEntry === undefined ? undefined : taskEntry.standardPage,\r\n      xPage: taskEntry === undefined ? undefined : taskEntry.xPage\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Calculate the results for all named calculations of the current task and save them in the task results manager. \r\n   */\r\n  saveCurrentTaskResults = () => {\r\n    const calculations = this.runtime.calculationsConfigurationManager.findAllCalculationsByTaskName(this.activeTaskName);\r\n    this.runtime.taskResultsManager.saveTaskResults(this.getCurrentStatePathRoot(), calculations, this.runtime);\r\n  }\r\n\r\n  /**\r\n   * Calculate the results for all named calculations of the current task, save them in the task results manager\r\n   * and return them as an object.\r\n   * The result object has one attribute per named calculation:\r\n   * The attribute name is the calculation name, the attribute's value is the calculation result. \r\n   */\r\n  getCurrentTaskResults = () => {\r\n    this.saveCurrentTaskResults();\r\n    return this.runtime.taskResultsManager.getResultsListForTask(this.getCurrentStatePathRoot());\r\n  }\r\n\r\n  /**\r\n   * Get the results for all named calculations of the given task from the task results manager\r\n   * and return them as an object.\r\n   * The result object has one attribute per named calculation:\r\n   * The attribute name is the calculation name, the attribute's value is the calculation result. \r\n   * \r\n   * The method does not recalculate anything. You should probably not use it for the currently running task!\r\n   * Use getCurrentTaskResults() to get up-to-date results for the currently running task. \r\n   */\r\n  getOldTaskResults = (task, item, test) => this.runtime.taskResultsManager.getResultsListForTask(IndexPathHelper.buildPathRoot(test, item, task));\r\n\r\n\r\n  /**\r\n   * Calculate the scoring results as specified in the scoring results configuration.\r\n   */\r\n  getScoring = () => {\r\n\r\n    const evaluationResult = {\r\n      hitRows: this.buildScoringHitMissListEvaluationResult('hitList'),\r\n      missRows: this.buildScoringHitMissListEvaluationResult('missList'),\r\n      hitClassRows: this.buildScoringClassListEvaluationResult('hitClassList'),\r\n      missClassRows: this.buildScoringClassListEvaluationResult('missClassList')\r\n    }\r\n\r\n    this.addScoringAttributesEvaluationResult(evaluationResult);\r\n    this.addResultVariablesEvaluationResult(evaluationResult);\r\n\r\n    return evaluationResult;\r\n  }\r\n\r\n\r\n  /*\r\n  * Gets the top level configuration of the current item\r\n  */\r\n  getTopLevelConfiguration = () => this.runtime.presenterStateManager.getTaskState(this.getCurrentStatePathRoot());\r\n\r\n\r\n  /**\r\n   * Get the resource path for the currently active item.\r\n   */\r\n  getResourcePath = () => this.activeResourcePath;\r\n\r\n  /**\r\n   * Get the external resource path for the currently active item.\r\n   */\r\n  getExternalResourcePath = () => this.activeExternalResourcePath;\r\n\r\n  /**\r\n   * Stop the currently running task.\r\n   * \r\n   * When calling this method you should make sure that the App does not show the LoggedInView\r\n   * since there will be no current task available after the call.\r\n   */\r\n  stopTask = () => {\r\n    // nothing to do if there is no task currently running\r\n    if (this.activeTaskName === undefined) {\r\n      return;\r\n    }\r\n\r\n    const { runtime } = this;\r\n    this.saveCurrentTaskResults();\r\n    TraceLogHelper.dumpSnapshotToTrace(runtime);\r\n\r\n    // Trace task switch\r\n    runtime.traceLogBuffer.reportEvent('TaskSwitch', new Date(),\r\n      {\r\n        oldTask: this.activeTaskName,\r\n        oldItem: this.activeItemName,\r\n        oldTest: this.activeTestName,\r\n        newTask: undefined,\r\n        newItem: undefined,\r\n        newTest: undefined,\r\n        taskResult: runtime.taskResultsManager.getResultsListForTask(this.getCurrentStatePathRoot()),\r\n      });\r\n\r\n    runtime.incidentsAccumulator.leaveTask(new Date().getTime(), runtime);\r\n    runtime.statemachinesManager.stopCurrentStatemachine();\r\n    this.activeTaskName = undefined;\r\n    runtime.traceLogBuffer.setTestItemTaskNames(this.activeTestName, this.activeItemName, this.activeTaskName);\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to a new test/task setting.\r\n   * \r\n   * The method returns the task ID or undefined if it could not do the switch.\r\n   * \r\n   * In replay mode the method does not run a state machine and does not configure\r\n   * the managers dealing the state that may change while running a task. \r\n   * (It switches the purely item configuration related managers to the new item \r\n   * in both modes.) \r\n   */\r\n  switchTask = (newTestName, newItemName, newTaskName, replayMode) => {\r\n    const { runtime } = this;\r\n    if (!(this.activeTaskName === undefined)) {\r\n      this.saveCurrentTaskResults();\r\n      TraceLogHelper.dumpSnapshotToTrace(runtime);\r\n    }\r\n\r\n    // Make sure we know the new item and task:\r\n    const itemInfo = TaskManager.getItemInfoForName(this.itemInfoEntries, newItemName);\r\n    if (itemInfo === undefined) {\r\n      return undefined;\r\n    }\r\n    const { itemConfiguration } = itemInfo;\r\n\r\n    const newTask = TaskManager.getTaskForName(itemConfiguration, newTaskName);\r\n    if (newTask === undefined) {\r\n      return undefined;\r\n    }\r\n    const newTaskId = IndexPathHelper.buildPathRoot(newTestName, newItemName, newTaskName);\r\n    runtime.translationManager.setupTranslation(itemConfiguration);\r\n\r\n    // Do the switch: We cannot bail out now anymore...\r\n\r\n    // Trace task switch\r\n    runtime.traceLogBuffer.reportEvent('TaskSwitch', new Date(),\r\n      {\r\n        oldTask: this.activeTaskName,\r\n        oldItem: this.activeItemName,\r\n        oldTest: this.activeTestName,\r\n        newTask: newTaskName,\r\n        newItem: newItemName,\r\n        newTest: newTestName,\r\n        taskResult: runtime.taskResultsManager.getResultsListForTask(this.getCurrentStatePathRoot()),\r\n      });\r\n    runtime.traceLogBuffer.setTestItemTaskNames(newTestName, newItemName, newTaskName);\r\n\r\n\r\n    // Switch configurations managers to new item if necessary:\r\n    if (newItemName !== this.activeItemName) {\r\n      runtime.pageConfigurationsManager = new PageConfigurationsManager(itemConfiguration);\r\n      runtime.calculationsConfigurationManager = new CalculationsConfigurationManager(itemConfiguration);\r\n      runtime.valueMapper = new ValueMapper(itemConfiguration, runtime);\r\n      runtime.traceLogBuffer.reportEvent('ItemSwitch', new Date(), {\r\n        item: itemConfiguration,\r\n      })\r\n      this.activeResourcePath = itemInfo.resourcePath;\r\n      this.activeExternalResourcePath = itemInfo.externalResourcePath;\r\n    }\r\n\r\n    this.activeTestName = newTestName;\r\n    this.activeItemName = newItemName;\r\n    this.activeTaskName = newTaskName;\r\n\r\n    if (replayMode) {\r\n      runtime.statemachinesManager.stopCurrentStatemachine();\r\n      runtime.calculatorsManager.setOrInitializeCurrentCalculator(newTaskId, runtime);\r\n      runtime.statemachinesManager.switchCurrentStatemachineWithoutStarting(newTaskId);\r\n    } else {\r\n      runtime.incidentsAccumulator.enterTask(newTaskId, new Date().getTime(), runtime);\r\n\r\n      runtime.statemachinesManager.stopCurrentStatemachine();\r\n      runtime.variableManager.initializeVariablesForTask(\r\n        newTaskId, itemConfiguration.variables, TaskManager.getTaskForName(itemConfiguration, newTaskName).traceVariableValues, runtime\r\n      );\r\n      TaskManager.prepareTaskSwitchInPresenterAndNavigatorState(newTestName, newItemName, newTaskName, newTaskId, newTask, runtime);\r\n      runtime.calculatorsManager.setOrInitializeCurrentCalculator(newTaskId, runtime);\r\n      runtime.statemachinesManager.startOrInitializeCurrentStatemachine(newTaskId, itemConfiguration.statemachine, runtime);\r\n      TraceLogHelper.dumpFullStateToTrace(runtime);\r\n    }\r\n\r\n\r\n    return newTaskId;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => {\r\n    const {\r\n      componentStateManager,\r\n      componentDirectory,\r\n      variableManager,\r\n      statemachinesManager,\r\n      incidentsAccumulator,\r\n      presenterStateManager,\r\n      taskNavigatorStateManager,\r\n      taskResultsManager,\r\n      clipboardManager,\r\n      calculatorsManager\r\n    } = this.runtime;\r\n\r\n    return {\r\n      componentsState: componentStateManager.getStateSnapshot(componentDirectory),\r\n      statemachines: statemachinesManager.getStatemachinesPreloadData(),\r\n      variables: variableManager.getAllTasksState(),\r\n      incidents: incidentsAccumulator.getAllTasksState(),\r\n      presenterState: presenterStateManager.getAllTasksState(),\r\n      taskNavigatorState: taskNavigatorStateManager.getAllTasksState(),\r\n      taskResults: taskResultsManager.getAllTasksState(),\r\n      clipboard: clipboardManager.getAllTasksState(),\r\n      calculators: calculatorsManager.getAllTasksState()\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clear the current state of all state managers.\r\n   */\r\n  clearTasksState = () => {\r\n    const {\r\n      componentStateManager,\r\n      variableManager,\r\n      statemachinesManager,\r\n      incidentsAccumulator,\r\n      presenterStateManager,\r\n      taskNavigatorStateManager,\r\n      taskResultsManager,\r\n      clipboardManager,\r\n      calculatorsManager\r\n    } = this.runtime;\r\n    componentStateManager.clear();\r\n    variableManager.clearTasksState();\r\n    statemachinesManager.clearStatemachines(this.runtime);\r\n    incidentsAccumulator.clearTasksState();\r\n    presenterStateManager.clearTasksState();\r\n    taskNavigatorStateManager.clearTasksState();\r\n    taskResultsManager.clearTasksState();\r\n    clipboardManager.clearTasksState();\r\n    calculatorsManager.clearTasksState();\r\n  }\r\n\r\n  /**\r\n   * Preload the state managers with the state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    const {\r\n      componentStateManager,\r\n      variableManager,\r\n      statemachinesManager,\r\n      incidentsAccumulator,\r\n      presenterStateManager,\r\n      taskNavigatorStateManager,\r\n      taskResultsManager,\r\n      clipboardManager,\r\n      calculatorsManager\r\n    } = this.runtime;\r\n    componentStateManager.preloadWithStateSnapshot(allTasksState.componentsState);\r\n    variableManager.preloadTasksState(allTasksState.variables);\r\n    statemachinesManager.preloadStatemachinesData(allTasksState.statemachines, this.runtime);\r\n    incidentsAccumulator.preloadTasksState(allTasksState.incidents);\r\n    presenterStateManager.preloadTasksState(allTasksState.presenterState);\r\n    taskNavigatorStateManager.preloadTasksState(allTasksState.taskNavigatorState);\r\n    taskResultsManager.preloadTasksState(allTasksState.taskResults);\r\n    clipboardManager.preloadTasksState(allTasksState.clipboard);\r\n    calculatorsManager.preloadTasksState(allTasksState.calculators);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {string} itemName Name of the item.\r\n   * \r\n   * @returns {Array} Item resources\r\n   */\r\n  getItemResources = (itemName) => {\r\n    const itemInfo = this.getItemInfo(itemName);\r\n\r\n    if (!itemInfo) {\r\n      console.error(\"Could not find item\", itemName);\r\n      return null;\r\n    }\r\n    const { itemConfiguration, externalResourcePath, resourcePath } = itemInfo;\r\n    const { usedResources } = itemConfiguration;\r\n\r\n    const externalResources = Utils.mapResourcePath(usedResources.externalResources, externalResourcePath, true);\r\n    const internalResources = Utils.mapResourcePath(usedResources.resources, resourcePath, false);\r\n    const resources = externalResources.concat(internalResources);\r\n\r\n    return resources;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {string} itemName Name of the item.\r\n   * \r\n   * @returns {Array} Font file/font family name Objects\r\n   */\r\n  getCustomFontMappings = (itemName) => {\r\n    const itemInfo = this.getItemInfo(itemName);\r\n\r\n    if (!itemInfo) {\r\n      console.error(\"Could not find item\", itemName);\r\n      return null;\r\n    }\r\n    const { itemConfiguration } = itemInfo;\r\n    const { usedResources } = itemConfiguration;\r\n\r\n    return usedResources.fontMappings;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} itemName Name of the item.\r\n   * \r\n   * @returns {*} Item configuration object.\r\n   */\r\n  getItemInfo = itemName => this.itemInfoEntries.find(itemInfoEntry => itemInfoEntry.itemConfiguration.name === itemName);\r\n\r\n  // --- private stuff -------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Check the availability of a task switch using the availabilty callback.\r\n   */\r\n  checkAvailableTask = (requestType, newTestName, newItemName, newTaskName) => {\r\n    const callback = this.availabilityCallback;\r\n    return (callback !== undefined\r\n      ? callback(requestType, newTestName, newItemName, newTaskName)\r\n      : false);\r\n  }\r\n\r\n  /**\r\n   * Trigger a task switch to the specified task using the swich callback.\r\n   */\r\n  triggerGoToTask = (newTestName, newItemName, newTaskName) => {\r\n    this.triggerTaskSwitch('goToTask', newTestName, newItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a task switch using the swich callback.\r\n   */\r\n  triggerTaskSwitch = (requestType, newTestName, newItemName, newTaskName) => {\r\n    const callback = this.switchCallback;\r\n    if (callback !== undefined) {\r\n      callback(requestType, newTestName, newItemName, newTaskName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evaluate the given conditional link and return the calculated target page name. \r\n   * \r\n   * The method returns the given default page name if there is no conditional link \r\n   * or none of the guard conditions evaluate to true.\r\n   */\r\n  static evaluateConditionalLink(defaultPageName, conditionalLink, runtime) {\r\n    if (conditionalLink === undefined) return defaultPageName;\r\n\r\n    const conditionalLinkResult = ConditionalLinkHelper.evaluateConditionalLink(conditionalLink, runtime);\r\n    return conditionalLinkResult === undefined ? defaultPageName : conditionalLinkResult;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the item info object for the specified item.\r\n   * \r\n   * The method returns the item info object, i.e. an object with attributes \r\n   *  - itemConfiguration (which has attributes name, pages, statemachine, tasks)\r\n   *  - resourcePath\r\n   *  - externalResourcePath\r\n   */\r\n  static getItemInfoForName(items, itemName) {\r\n    const result = items.find((value, index, theArray) => value.itemConfiguration.name === itemName);\r\n    if (result === undefined) {\r\n      console.error(`Could not find info for item ${itemName}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the task configuration object for the specified task defined by the specified \r\n   * item configuration object.\r\n   * \r\n   * The method returns the task configuration object, i.e. an object with attributes \r\n   *  - name\r\n   *  - initialPage\r\n   *  - itemWidth\r\n   *  - ...\r\n   */\r\n  static getTaskForName(item, taskName) {\r\n    const result = item.tasks.find((value, index, theArray) => value.name === taskName);\r\n    if (result === undefined) {\r\n      console.error(`Could not find task ${taskName} in item ${item.name}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the state of the given test and task in the TaskNavigatorStateManager and the PresenterStateManager\r\n   * according to the current task switch.\r\n   * \r\n   * The method will always set the new item/task name in the test state.\r\n   * The method will not change an already existing task state but will create an initial task state if there is none yet.\r\n   * To build the initial task state it will evaluate the task initialization rule.\r\n   */\r\n  static prepareTaskSwitchInPresenterAndNavigatorState(\r\n    testName, itemName, taskName,\r\n    taskId, task, runtime\r\n  ) {\r\n    const { taskNavigatorStateManager, presenterStateManager } = runtime;\r\n    taskNavigatorStateManager.saveTestState(\r\n      testName,\r\n      {\r\n        itemName,\r\n        taskName,\r\n      },\r\n      runtime\r\n    );\r\n\r\n    const oldTaskEntry = presenterStateManager.getTaskState(taskId);\r\n    if (oldTaskEntry === undefined) {\r\n      const initialTaskEntry = PresenterStateManager.buildInitialTaskStateObject(\r\n        task.initialPage, task.initialXPage,\r\n        task.itemWidth, task.itemHeight, task.itemLayout,\r\n        task.withEditContextMenu,\r\n        task.itemHighlightColor, task.highlightColors,\r\n        task.cssStyles\r\n      );\r\n      presenterStateManager.saveTaskState(taskId, initialTaskEntry, runtime);\r\n\r\n      const conditionResult = ConditionalLinkHelper.evaluateConditionalLink(task.initRule, runtime);\r\n      if (conditionResult !== undefined) {\r\n        const afterConditionEvaluationTaskEntry = presenterStateManager.getTaskState(taskId);\r\n        PresenterStateManager.setPageForPageAreaInTaskState(\r\n          conditionResult.pageName,\r\n          conditionResult.position,\r\n          conditionResult.pageAreaType,\r\n          conditionResult.pageAreaName,\r\n          afterConditionEvaluationTaskEntry\r\n        );\r\n        presenterStateManager.saveTaskState(taskId, afterConditionEvaluationTaskEntry, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the state of the current task in the PresenterStateManager\r\n   * according to the current page switch.\r\n   * \r\n   * The method will set the new page (and for dialogs the new position) in the task state.\r\n   */\r\n  static preparePageSwitchInPresenterState(testName, itemName, taskName, pageAreaType, pageAreaName, newPage, position, runtime) {\r\n    const taskId = IndexPathHelper.buildPathRoot(testName, itemName, taskName);\r\n    const taskEntry = runtime.presenterStateManager.getTaskState(taskId);\r\n    if (taskEntry === undefined) {\r\n      console.error(`Switch to page ${newPage} for not existing task: ${taskId}`);\r\n    } else {\r\n      PresenterStateManager.setPageForPageAreaInTaskState(newPage, position, pageAreaType, pageAreaName, taskEntry);\r\n      runtime.presenterStateManager.saveTaskState(taskId, taskEntry, runtime);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Helper method that calculates the attributes of a scoring result configuration.\r\n   */\r\n  addScoringAttributesEvaluationResult = (evaluationResult) => {\r\n    const attributes = this.runtime.calculationsConfigurationManager.findScoreResultAttributesByTaskName(this.activeTaskName);\r\n    Object.keys(attributes).forEach((key) => {\r\n      evaluationResult[key] = TermEvaluator.evaluateTerm(attributes[key], this.runtime, [], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the elements of a hit/miss scoring results list.\r\n   */\r\n  buildScoringHitMissListEvaluationResult = (scoringListName) => {\r\n    const scoringList = this.runtime.calculationsConfigurationManager.findScoreResultListByTaskName(this.activeTaskName, scoringListName);\r\n\r\n    const resultRows = [];\r\n    scoringList.forEach((calculation) => {\r\n      if (TermEvaluator.evaluateTerm(calculation.result, this.runtime, [], calculation.name)) {\r\n        const resultText = TermEvaluator.evaluateTerm(calculation.resultText, this.runtime, [], `${calculation.name}_text`);\r\n        resultRows.push({\r\n          name: calculation.name,\r\n          weight: calculation.weight,\r\n          class: calculation.class,\r\n          resultText\r\n        });\r\n      }\r\n    });\r\n    return resultRows;\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the elements of a class scoring results list.\r\n   */\r\n  buildScoringClassListEvaluationResult = (scoringListName) => {\r\n    const scoringList = this.runtime.calculationsConfigurationManager.findScoreResultListByTaskName(this.activeTaskName, scoringListName);\r\n\r\n    return scoringList.map(calculation => ({\r\n      name: calculation.name,\r\n      comment: calculation.comment,\r\n      value: TermEvaluator.evaluateTerm(calculation.value, this.runtime, [], calculation.name),\r\n      result: calculation.result === undefined ? undefined : TermEvaluator.evaluateTerm(calculation.result, this.runtime, [], `${calculation.name}_result`)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the result variables included in the scoring result structure.\r\n   */\r\n  addResultVariablesEvaluationResult = (evaluationResult) => {\r\n    // compute result variables for classes\r\n    const classResultVariables = this.computeClassResultVariables(evaluationResult);\r\n\r\n    // compute result variables for explicit variables \r\n    const explicitResultVariables = this.computeExplicitResultVariables();\r\n\r\n    // compute result variables for implicit variables \r\n    const implicitResultVariables = this.simplifyImplicitVariablesName(this.computeImplicitResultVariables());\r\n\r\n    const sortedClassResultVariables = [...classResultVariables].sort((a, b) => a.name.localeCompare(b.name));\r\n    evaluationResult.resultVariables = [...sortedClassResultVariables, ...explicitResultVariables, ...implicitResultVariables];\r\n  }\r\n\r\n  simplifyImplicitVariablesName = implicitVariablesResult => implicitVariablesResult.map(implicitVariableResult => ({\r\n    ...implicitVariableResult,\r\n    name: this.simplifyImplicitVariableName(implicitVariableResult)\r\n  }))\r\n\r\n  simplifyImplicitVariableName = implicitVariableResult => UserDefPathHelper.simplifyUserDefIdPath(implicitVariableResult.name);\r\n\r\n  computeClassResultVariables = (evaluationResult) => {\r\n    const { hitRows, hitClassRows } = evaluationResult;\r\n    const attributes = this.runtime.calculationsConfigurationManager.findScoreResultAttributesByTaskName(this.activeTaskName);\r\n    const isFirstActiveMode = (attributes.classScoringModeHit === 'firstActive');\r\n\r\n    return hitClassRows.map((hitClass) => {\r\n      const winnerHit = this.retrieveWinnerHit(hitRows, hitClass, isFirstActiveMode);\r\n      const textResult = this.computeTextResultForClassVariable(winnerHit);\r\n      const nameResult = this.computeNameResultForClassVariable(winnerHit);\r\n      const labelResult = this.computeLabelResultForClassVariable(winnerHit);\r\n      return this.createResultVariable(hitClass.name, textResult, nameResult, labelResult);\r\n    });\r\n  }\r\n\r\n  computeExplicitResultVariables = () => {\r\n    const explicitVariables = this.runtime.calculationsConfigurationManager.findRelevantVariablesForTask(this.activeTaskName, false);\r\n    return explicitVariables.map((variable) => {\r\n      const { name, calculatedValue } = variable;\r\n      const value = TermEvaluator.evaluateTerm(calculatedValue, this.runtime, [], name);\r\n      return this.createResultVariable(name, value, value, '');\r\n    });\r\n  }\r\n\r\n  computeImplicitResultVariables = () => {\r\n    const implicitVariables = this.runtime.calculationsConfigurationManager.findRelevantVariablesForTask(this.activeTaskName, true);\r\n    return implicitVariables.flatMap((variable) => {\r\n      const { name } = variable;\r\n      const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(name, this.runtime);\r\n      const { scoringResultPerMember } = this.runtime.pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config;\r\n\r\n      return scoringResultPerMember ? this.createPerMemberImplicitResultVariablesFor(variable) : this.createDefaultImplicitResultVariablesFor(variable);\r\n    });\r\n  }\r\n\r\n  createDefaultImplicitResultVariablesFor = (variable) => {\r\n    const { name, calculatedValue, selectGroupNumber } = variable;\r\n    const variableName = (selectGroupNumber === undefined) ? name : (`${name}_${selectGroupNumber}`);\r\n    const variableValue = TermEvaluator.evaluateTerm(calculatedValue, this.runtime, [], name);\r\n    const resultVariable = this.createResultVariable(variableName, variableValue, variableValue, '');\r\n\r\n    // variable embedded in page areas\r\n    const retrieveImplicitVariablesEmbeddedInPageAreas = this.retrieveImplicitVariablesEmbeddedInPageAreasAsAbsoluteUDI(name);\r\n    const resultVariablesInPageAreas = retrieveImplicitVariablesEmbeddedInPageAreas.map((variableUdi) => {\r\n      const adaptedCalculatedValue = this.adaptValueForCalculation(calculatedValue, name, variableUdi);\r\n      const pageAreaVariableName = (selectGroupNumber === undefined) ? variableUdi : (`${variableUdi}_${selectGroupNumber}`);\r\n      const pageAreaVariableValue = TermEvaluator.evaluateTerm(adaptedCalculatedValue, this.runtime, [], name);\r\n      return this.createResultVariable(pageAreaVariableName, pageAreaVariableValue, pageAreaVariableValue, '');\r\n    })\r\n\r\n    return [resultVariable, ...resultVariablesInPageAreas];\r\n  }\r\n\r\n  createPerMemberImplicitResultVariablesFor = (variable) => {\r\n    const { name, calculatedValue, selectGroupNumber } = variable;\r\n    const adaptedCalculatedValue = this.adaptValueForCalculation(calculatedValue, 'getImplicitVariable', 'getInternalImplicitVariable');\r\n    const perMemberState = TermEvaluator.evaluateTerm(adaptedCalculatedValue, this.runtime, [], name);\r\n    const resultVariables = perMemberState.map((memberState) => {\r\n      const { userDefIdPath, selected } = memberState;\r\n      const variableName = (selectGroupNumber === undefined) ? (`${name}_${userDefIdPath}`) : (`${name}_${selectGroupNumber}_${userDefIdPath}`);\r\n      return this.createResultVariable(variableName, selected, selected, '');\r\n    })\r\n\r\n    // variable embedded in page areas\r\n    const retrieveImplicitVariablesEmbeddedInPageAreas = this.retrieveImplicitVariablesEmbeddedInPageAreasAsAbsoluteUDI(name);\r\n    const resultVariablesInPageAreas = retrieveImplicitVariablesEmbeddedInPageAreas.flatMap((variableUdi) => {\r\n      const adaptedIdCalculatedValue = this.adaptValueForCalculation(calculatedValue, name, variableUdi);\r\n      const adaptedOpCalculatedValue = this.adaptValueForCalculation(adaptedIdCalculatedValue, 'getImplicitVariable', 'getInternalImplicitVariable');\r\n      const pageAreaValuesPerMember = TermEvaluator.evaluateTerm(adaptedOpCalculatedValue, this.runtime, [], name);\r\n      const resultVariablesInPageAreasPerMember = pageAreaValuesPerMember.map((memberState) => {\r\n        const { userDefIdPath, selected } = memberState;\r\n        const pageAreaVariableName = (selectGroupNumber === undefined) ? (`${variableUdi}_${userDefIdPath}`) : (`${variableUdi}_${selectGroupNumber}_${userDefIdPath}`);\r\n        return this.createResultVariable(pageAreaVariableName, selected, selected, '');\r\n      })\r\n      return resultVariablesInPageAreasPerMember;\r\n    })\r\n\r\n    return [...resultVariables, ...resultVariablesInPageAreas];\r\n  }\r\n\r\n  createResultVariable = (nameValue, textResultValue, nameResultValue, labelResultValue) => ({\r\n    name: nameValue,\r\n    value: textResultValue,\r\n    valueHit: nameResultValue,\r\n    valueLabel: labelResultValue\r\n  })\r\n\r\n  adaptValueForCalculation = (obj, oldValue, newValue) => {\r\n    let jsonString = JSON.stringify(obj);\r\n    jsonString = jsonString.replace(new RegExp(`\"${oldValue}\"`, 'g'), `\"${newValue}\"`);\r\n    return JSON.parse(jsonString);\r\n  }\r\n\r\n  retrieveImplicitVariablesEmbeddedInPageAreasAsAbsoluteUDI = (implicitVariableAbsoluteUdi) => {\r\n    const implicitVariablesEmbeddedInPageAreas = [];\r\n    const implicitVariableUdi = UserDefPathHelper.getLastUserDefIdFromPath(implicitVariableAbsoluteUdi);\r\n    const pageAreaPathList = ComponentStateHelper.findIndexPathsInCurrentTaskOfComponentWithType('CbaPageArea', this.runtime);\r\n    pageAreaPathList.forEach((path) => {\r\n      const pageAreaAbsoluteUserDefId = PathTranslationHelper.getUserDefPathForIndexPath(path, this.runtime);\r\n      const pageAreaUserDefId = UserDefPathHelper.getLastUserDefIdFromPath(pageAreaAbsoluteUserDefId);\r\n      if (pageAreaUserDefId !== undefined && !pageAreaUserDefId.startsWith('$')) {\r\n        const memberPaths = ComponentStateHelper.findIndexPathsOfDescendants(path, this.runtime);\r\n        memberPaths.forEach((memberPath) => {\r\n          const memberAbsoluteUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(memberPath, this.runtime);\r\n          const memberUserDefId = UserDefPathHelper.getLastUserDefIdFromPath(memberAbsoluteUserDefPath);\r\n          if (memberUserDefId === implicitVariableUdi && !implicitVariablesEmbeddedInPageAreas.includes(memberAbsoluteUserDefPath)) {\r\n            implicitVariablesEmbeddedInPageAreas.push(memberAbsoluteUserDefPath);\r\n          }\r\n        });\r\n      }\r\n    })\r\n    return implicitVariablesEmbeddedInPageAreas;\r\n  }\r\n\r\n  retrieveWinnerHit = (hitRows, hitClass, isFirstActiveMode) => {\r\n    const findWinnerHitForAccumulatedMode = (rows, targetClass) => {\r\n      const filteredRows = rows.filter(row => row.class === targetClass);\r\n      return filteredRows.reduce((maxObject, currentObject) => {\r\n        if (currentObject.weight > (maxObject ? maxObject.weight : -Infinity)) {\r\n          return currentObject;\r\n        }\r\n        return maxObject;\r\n      }, null);\r\n    };\r\n\r\n    const findWinnerHitForFirstActiveMode = (rows, hitName, targetClass) => {\r\n      const filteredRows = rows.filter(row => row.class === targetClass && row.name === hitName);\r\n      if (filteredRows.length !== 1) return null;\r\n      return filteredRows[0];\r\n    };\r\n\r\n    const { name, value } = hitClass;\r\n    const winnerHit = (isFirstActiveMode ? findWinnerHitForFirstActiveMode(hitRows, value, name)\r\n      : findWinnerHitForAccumulatedMode(hitRows, name));\r\n    return winnerHit;\r\n  }\r\n\r\n  computeTextResultForClassVariable = (winnerHit) => {\r\n    if (winnerHit === undefined || winnerHit === null) return '';\r\n    return (winnerHit.resultText !== '') ? winnerHit.resultText : winnerHit.name;\r\n  }\r\n\r\n  computeNameResultForClassVariable = (winnerHit) => {\r\n    if (winnerHit === undefined || winnerHit === null) return '';\r\n    return winnerHit.name;\r\n  }\r\n\r\n  computeLabelResultForClassVariable = (winnerHit) => {\r\n    if (winnerHit === undefined || winnerHit === null) return '';\r\n\r\n    let labelResult = '';\r\n    const scoringList = this.runtime.calculationsConfigurationManager.findScoreResultListByTaskName(this.activeTaskName, 'hitList');\r\n    scoringList.map((calculation) => {\r\n      if (calculation.name === winnerHit.name) {\r\n        labelResult = TermEvaluator.evaluateTerm(calculation.resultLabel, this.runtime, [], calculation.name);\r\n      }\r\n      return labelResult;\r\n    });\r\n    return labelResult;\r\n  }\r\n\r\n  computeResultVariablesEvaluationResult = (currentResults) => {\r\n    const evaluationStructure = {};\r\n    evaluationStructure.hitRows = this.buildHitRowsFromCalculations(currentResults);\r\n    evaluationStructure.hitClassRows = this.buildHitClassRowsFromCalculations(currentResults);\r\n    this.addResultVariablesEvaluationResult(evaluationStructure);\r\n    return evaluationStructure;\r\n  }\r\n\r\n  buildHitRowsFromCalculations = (results) => {\r\n    const hitRows = [];\r\n    Object.keys(results).forEach((key) => {\r\n      if (key.startsWith('hit.')) {\r\n        const suffix = key.split('.')[1];\r\n        if (results[`hit.${suffix}`]) {\r\n          const hitRow = {\r\n            name: `${suffix}`,\r\n            class: results[`hitClass.${suffix}`],\r\n            weight: results[`hitWeighted.${suffix}`],\r\n            resultText: results[`hitText.${suffix}`]\r\n          };\r\n          hitRows.push(hitRow);\r\n        }\r\n      }\r\n    });\r\n    return hitRows;\r\n  }\r\n\r\n  buildHitClassRowsFromCalculations = (results) => {\r\n    const hitClassRows = [];\r\n    Object.keys(results).forEach((key) => {\r\n      if (key.startsWith('classHitWeighted.')) {\r\n        const suffix = key.split('.')[1];\r\n        const firstActiveHit = results[`classFirstActiveHit.${suffix}`];\r\n        const hitClassRow = {\r\n          name: `${suffix}`,\r\n          value: (firstActiveHit !== undefined) ? firstActiveHit : results[`classHitWeighted.${suffix}`],\r\n        };\r\n        hitClassRows.push(hitClassRow);\r\n      }\r\n    });\r\n    return hitClassRows;\r\n  }\r\n\r\n}\r\n","import TermEvaluator from '../eval/TermEvaluator';\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\nexport default class TaskResultsManager {\r\n\r\n  constructor() {\r\n    this.taskEntriesList = {};\r\n  }\r\n\r\n  // set values ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Calculate the results of all given named calculations for the given task and\r\n   * store them in the task results catalog.\r\n   * \r\n   * Note: Be aware that some operators in the TermEvaluator use the currently active task implicitly. \r\n   * So you cannot freely use a taskPath here if those operators are involved (and they are involved usually).\r\n   * You have to use the current task path then.\r\n   */\r\n  saveTaskResults = (taskPath, calculations, runtime) => {\r\n    // We start with a cleared task result, i.e. we calculate everything from sratch:\r\n    this.taskEntriesList[taskPath] = {};\r\n    const resultsForTask = this.taskEntriesList[taskPath];\r\n\r\n    calculations.forEach((value, index, all) => {\r\n      // Performance improvement:\r\n      // Since we calculate everything from scratch we can assume that already calculated values are up-to-date\r\n      // -> activate reuse of existing calculation results in the evaluateNamedCalculation operator:\r\n      resultsForTask[value.name] = TermEvaluator.evaluateTerm(value.calculation, runtime, [{\r\n        useExistingCalculationResults: true, taskPath\r\n      }], value.name);\r\n    });\r\n\r\n    const { resultVariables } = runtime.taskManager.computeResultVariablesEvaluationResult(resultsForTask);\r\n    // eslint-disable-next-line dot-notation\r\n    resultsForTask['resultVariables'] = resultVariables;\r\n  }\r\n\r\n\r\n  // get values --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get a stored result for a given named calculation in the given task.\r\n   */\r\n  getResult = (taskPath, calculationName) => this.getResultsListForTask(taskPath)[calculationName];\r\n\r\n\r\n  /**\r\n   * Get all stored calculation results for the given task.\r\n   */\r\n  getResultsListForTask = (taskPath) => {\r\n    if (this.taskEntriesList[taskPath] === undefined) {\r\n      return {};\r\n    }\r\n    return this.taskEntriesList[taskPath];\r\n  }\r\n\r\n  /**\r\n   * Get the stored calculation results for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.taskEntriesList);\r\n\r\n  /**\r\n   * Drop stored calculation results for all tasks.\r\n   */\r\n  clearTasksState = () => { this.taskEntriesList = {}; };\r\n\r\n  /**\r\n   * Preload the stored calculation results for all tasks returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.taskEntriesList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n}\r\n","\r\n/**\r\n * A catalog of all timed events of a single statemachine.\r\n * \r\n * A timed event in our catalog always keeps these attributes:\r\n *  - name\r\n *  - trigger interval\r\n *  - accepting states list\r\n * While a timed event is 'running' it also keeps these attributes\r\n *  - handle of the 'timeout' scheduled on the global 'window'\r\n *  - planned point in time for the 'timeout' to trigger\r\n * While a timed event is 'paused' it also keeps these attributes:\r\n *  - remaining milli seconds when 'pause' state was entered\r\n * \r\n * The lifecycle states of an event entry are:\r\n *  - stopped: The timed event is declared but was stopped or was never started at all.\r\n *  - running: The timed event was started and now waits for the timeout interval to run out.\r\n *  - paused: A previously started event was paused, i.e. it has interrupted the run down of the timeout interval.\r\n * \r\n * The lifecycle state changes are:\r\n * - An event is created in the 'stopped' state: name, trigger interval and accepting states list are given explicitly.\r\n * - Starting an event establishes a timeout on the global window and stores the planned trigger time (planned time is 'now' + 'trigger interval').\r\n * - Pausing an event clears the timeout on the global window and stores the remaining interval (by comparing the current time with the planned trigger time).\r\n * - Resuming an event establishes a timeout on the global window with a new planned trigger time (planned time is 'now' + 'remaining millis').\r\n * - Stopping an event clears the timeout on the global window (if 'running') and clears the remaining millis (if 'paused').\r\n * - A triggering timeout sets the event back to 'stopped' state before triggering the statemachine action. \r\n * \r\n * An event in state 'running' or 'paused' is filtered as 'scheduled', an event in 'stopped' state is 'unscheduled'.\r\n */\r\nexport default class TimedEventsCatalog {\r\n\r\n  constructor() {\r\n    this.timedEventsList = [];\r\n  }\r\n\r\n  // ------------- public API -------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Put a timed event entry into our catalog.\r\n   * \r\n   * The method will update the entry if an entry for the given name exists already.\r\n   * \r\n   * @param {String} name The name of the timed event.\r\n   * @param {Number} triggerInterval The interval (in milliseconds) that will elapse between starting the timer and triggering the event.\r\n   * @param {[String]} acceptingStatesList The list of state machine states accepting the timed event.\r\n   */\r\n  putEntry = (name, triggerInterval, acceptingStatesList) => {\r\n    const oldEntry = this.getEntry(name);\r\n    if (oldEntry !== undefined) {\r\n      console.warn(`Updating already existing timed event with name ${name}`);\r\n      oldEntry.triggerInterval = triggerInterval;\r\n      oldEntry.acceptingStatesList = acceptingStatesList;\r\n    } else {\r\n      this.timedEventsList.push(TimedEventsCatalog.buildTimedEventEntry(name, triggerInterval, acceptingStatesList, undefined, undefined, undefined));\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Find a timed event entry in our catalog by event name.\r\n   * \r\n   * @param {String} name The name of the timed event.\r\n   */\r\n  getEntry = name => this.timedEventsList.find(entry => entry.name === name);\r\n\r\n  /**\r\n   * Get an excerpt of the event entry for logging purposes.\r\n   * \r\n   * @param {*} eventEntry The event entry to get the excerpt from.\r\n   * @param {*} now The current point in time as base for remaining time calculation.\r\n   */\r\n  static getEventData(eventEntry, now) {\r\n    const isRunning = eventEntry.scheduledTimeoutHandle !== undefined;\r\n    const remainingInterval = isRunning ? eventEntry.scheduledTriggerTime.getTime() - now.getTime() : eventEntry.remainingInterval;\r\n    return {\r\n      totalTime: eventEntry.triggerInterval,\r\n      isRunning,\r\n      remainingTime: remainingInterval\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is the given event paused currently?\r\n   * \r\n   * @param {*} eventEntry \r\n   */\r\n  static isPaused(eventEntry) {\r\n    return eventEntry.remainingInterval !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Find the entries of the timed events that the given state accepts and that are not scheduled currently.\r\n   * \r\n   * @param {String} stateName The name of the state that must accept the matching events.\r\n   */\r\n  findUnscheduledEventsByState(stateName) {\r\n    return this.timedEventsList.filter(\r\n      eventEntry => eventEntry.acceptingStatesList.includes(stateName)\r\n      && eventEntry.scheduledTimeoutHandle === undefined\r\n      && eventEntry.scheduledTriggerTime === undefined\r\n      && eventEntry.remainingInterval === undefined\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Find the entries of the timed events that the given state accepts and that are scheduled currently.\r\n   * \r\n   * @param {String} stateName The name of the state that must accept the matching events.\r\n   */\r\n  findScheduledEventsByState(stateName) {\r\n    return this.timedEventsList.filter(\r\n      eventEntry => eventEntry.acceptingStatesList.includes(stateName)\r\n      && (\r\n        eventEntry.scheduledTimeoutHandle !== undefined\r\n        || eventEntry.scheduledTriggerTime !== undefined\r\n        || eventEntry.remainingInterval !== undefined)\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * Find the entries of all timed events that are scheduled currently.\r\n   */\r\n  findScheduledEvents() {\r\n    return this.timedEventsList.filter(\r\n      eventEntry => eventEntry.scheduledTimeoutHandle !== undefined\r\n      || eventEntry.scheduledTriggerTime !== undefined\r\n      || eventEntry.remainingInterval !== undefined\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a map eventName -> interval of the current event interval settings.\r\n   */\r\n  getTimerIntervals = () => {\r\n    const result = {};\r\n    this.timedEventsList.forEach((entry) => {\r\n      result[entry.name] = entry.triggerInterval;\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * (Re)start the timed event. \r\n   * \r\n   * The method will schedule the event with a full trigger interval.\r\n   * \r\n   * @param {*} timedEventEntry \r\n   * @param {*} statemachine \r\n   */\r\n  startTimedEvent(timedEventEntry, statemachine) {\r\n    this.scheduleTimedEvent(timedEventEntry, timedEventEntry.triggerInterval, statemachine);\r\n  }\r\n\r\n  /**\r\n   * Resume the timed event. \r\n   * \r\n   * The method will schedule the event with the remaining interval\r\n   * as calculated when the event was paused.\r\n   * \r\n   * @param {*} timedEventEntry \r\n   * @param {*} statemachine \r\n   */\r\n  resumeTimedEvent(timedEventEntry, statemachine) {\r\n    // Don't try to resume an event that is not paused (should not happen):\r\n    if (timedEventEntry.remainingInterval !== undefined) {\r\n      this.scheduleTimedEvent(timedEventEntry, timedEventEntry.remainingInterval, statemachine);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the running timer for the given timer info structure.\r\n   * \r\n   * @param {*} timedEventEntry \r\n   */\r\n  stopTimedEvent(timedEventEntry) {\r\n    // The event might be 'paused': handle is undefined but remainingInterval is set.\r\n    // -> Reset to fully stopped state.\r\n    if (timedEventEntry.scheduledTimeoutHandle !== undefined) {\r\n      this.clearTimeoutHook(timedEventEntry.scheduledTimeoutHandle);\r\n    }\r\n    TimedEventsCatalog.setScheduledDataInTimedEventEntry(undefined, undefined, undefined, timedEventEntry);\r\n  }\r\n\r\n  /**\r\n   * Pause the running timer for the given timer info structure.\r\n   * \r\n   * @param {*} timedEventEntry The timed event entry to modify.\r\n   * @param {Date} now The current time (as base to calculate the remaining time).\r\n   */\r\n  pauseTimedEvent(timedEventEntry, now) {\r\n    // There is nothing to do if the event is paused already or is not scheduled at all:\r\n    if (timedEventEntry.scheduledTimeoutHandle !== undefined) {\r\n      this.clearTimeoutHook(timedEventEntry.scheduledTimeoutHandle);\r\n      const remainingInterval = timedEventEntry.scheduledTriggerTime.getTime() - now.getTime();\r\n      TimedEventsCatalog.setScheduledDataInTimedEventEntry(undefined, undefined, remainingInterval, timedEventEntry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change the trigger interval in a timed event entry.\r\n   * \r\n   * @param {Number} triggerInterval The new value for the trigger interval.\r\n   * @param {*} entryToModify The timer entry that the method will modify.\r\n   */\r\n  static setTriggerIntervalInEventEntry(triggerInterval, entryToModify) {\r\n    entryToModify.triggerInterval = triggerInterval;\r\n  }\r\n\r\n\r\n  // ------------ private stuff ----------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Schedule the given event to trigger at the given interval from now. \r\n   * \r\n   * Due to the startInterval parameter we can use this method to restart \r\n   * an event completely or to just resume the event after a pause.\r\n   * \r\n   * @param {*} timedEventEntry The event to schedule.\r\n   * @param {*} startInterval The interval (in milliseconds) from now to the triggering point in time.\r\n   * @param {*} statemachine The statemachine providing the 'now' time and the callback to be triggered.\r\n   */\r\n  scheduleTimedEvent(timedEventEntry, startInterval, statemachine) {\r\n\r\n    // Determine point in time to trigger event action:\r\n    const now = statemachine.getNow();\r\n    const targetTime = new Date(now.getTime() + startInterval);\r\n    if (targetTime === undefined) {\r\n      console.error(`Invalid target time to schedule event: ${timedEventEntry.name} with start interval ${startInterval}`);\r\n      return;\r\n    }\r\n\r\n    // Check and normalize event scheduling status: \r\n    if (timedEventEntry.scheduledTimeoutHandle !== undefined) {\r\n      console.warn(`Rescheduling scheduled event: ${timedEventEntry.name} from ${timedEventEntry.scheduledTriggerTime} to ${targetTime}`);\r\n      this.clearTimeoutHook(timedEventEntry.scheduledTimeoutHandle);\r\n    }\r\n\r\n    // Schedule event in global event loop:\r\n    const timeoutId = this.setTimeoutHook((eventEntry) => {\r\n      // Drop schedule handler in event entry in timed events catalog as soon as scheduled event is triggered.\r\n      // Do this before triggering the event on the state machine since this might restart the timeout!\r\n      TimedEventsCatalog.setScheduledDataInTimedEventEntry(undefined, undefined, undefined, eventEntry);\r\n      // Actually trigger the event. \r\n      statemachine.triggerEvent(eventEntry.name);\r\n    },\r\n    startInterval,\r\n    timedEventEntry);\r\n\r\n    // Set scheduling data in event entry:\r\n    TimedEventsCatalog.setScheduledDataInTimedEventEntry(timeoutId, targetTime, undefined, timedEventEntry);\r\n  }\r\n\r\n  /**\r\n   * Update the scheduling related data in a timed event entry.\r\n   * \r\n   * @param {*} scheduledTimeoutHandle The handle to the object keeping track of the scheduled action that will trigger the event.\r\n   * @param {Date} scheduledTriggerTime The point in time when the timer will trigger the event the next time.\r\n   * @param {Number} remainingInterval The new value for the remaining interval.\r\n   * @param {*} entryToModify The timer entry that the method will modify.\r\n   */\r\n  static setScheduledDataInTimedEventEntry(scheduledTimeoutHandle, scheduledTriggerTime, remainingInterval, entryToModify) {\r\n    entryToModify.scheduledTimeoutHandle = scheduledTimeoutHandle;\r\n    entryToModify.scheduledTriggerTime = scheduledTriggerTime;\r\n    entryToModify.remainingInterval = remainingInterval;\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a timed event entry to be kept in our catalog.\r\n   * \r\n   * @param {String} name The name of the timed event.\r\n   * @param {Number} triggerInterval The interval (in milliseconds) that will elapse between starting the timer and triggering the event.\r\n   * @param {[String]} acceptingStatesList The list of state machine states accepting the timed event.\r\n   * @param {*} scheduledTimeoutHandle The handle to the object keeping track of the scheduled action that will trigger the event.\r\n   * @param {Date} scheduledTriggerTime The point in time when the timer will trigger the event the next time.\r\n   * @param {Number} remainingInterval The rest of the triggerInterval (in milliseconds) remaining once the state machine resumes operation after a pause. \r\n   * This is undefined while the state machine is not paused.\r\n   */\r\n  static buildTimedEventEntry(name, triggerInterval, acceptingStatesList, scheduledTimeoutHandle, scheduledTriggerTime, remainingInterval) {\r\n    const statesList = acceptingStatesList === undefined ? [] : acceptingStatesList.map(value => value);\r\n    return {\r\n      name,\r\n      triggerInterval,\r\n      acceptingStatesList: statesList,\r\n      scheduledTimeoutHandle,\r\n      scheduledTriggerTime,\r\n      remainingInterval\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Test helper: Mock hook for window.clearTimeout calls.\r\n   */\r\n  clearTimeoutHook = (handle) => {\r\n    window.clearTimeout(handle);\r\n  }\r\n\r\n  /**\r\n   * Test helper: Mock hook for window.setTimeout calls.\r\n   */\r\n  setTimeoutHook = (callback, interval, argument) => window.setTimeout(callback, interval, argument);\r\n\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\n\r\n/**\r\n * A history of triggered events for a single state machine.\r\n */\r\nexport default class StatemachineEventHistory {\r\n\r\n  constructor(snapshot) {\r\n    // all events that were given to the interpreter.gen() method (in triggerEvent)\r\n    const initialValues = (snapshot !== undefined) ? StateManagerHelper.deepCopy(snapshot) : {\r\n      raisedEvents: [],\r\n      raisedEventsPerState: [],\r\n      totalNbOfRaisedEvents: 0,\r\n      visitedStates: [],\r\n      valuesPerVariable: [],\r\n      valuesPerVariableAfterLastArtificialEvent: []\r\n    }\r\n\r\n    this.raisedEvents = initialValues.raisedEvents;\r\n\r\n    // all events that were raised in a given state, each entry is: {state, [events]}\r\n    this.raisedEventsPerState = initialValues.raisedEventsPerState;\r\n\r\n    // the total number of events raised\r\n    this.totalNbOfRaisedEvents = initialValues.totalNbOfRaisedEvents;\r\n\r\n    // all states that were visited\r\n    this.visitedStates = initialValues.visitedStates;\r\n\r\n    // all values that were assigned to a given variable, each entry is: {variable, [values]}\r\n    this.valuesPerVariable = initialValues.valuesPerVariable;\r\n\r\n    // the values of all variables that were assigned after the last artificial event (i.e. event name starts with dot: '.init' etc.)\r\n    this.valuesPerVariableAfterLastArtificialEvent = initialValues.valuesPerVariableAfterLastArtificialEvent;\r\n\r\n  }\r\n\r\n  // ------------- public API -------------------------------------------------------------------------\r\n\r\n  getHistoryDataForSnapshot = () => (\r\n    StateManagerHelper.deepCopy(\r\n      {\r\n        raisedEvents: this.raisedEvents,\r\n        raisedEventsPerState: this.raisedEventsPerState,\r\n        totalNbOfRaisedEvents: this.totalNbOfRaisedEvents,\r\n        visitedStates: this.visitedStates,\r\n        valuesPerVariable: this.valuesPerVariable,\r\n        valuesPerVariableAfterLastArtificialEvent: this.valuesPerVariableAfterLastArtificialEvent\r\n      }\r\n    )\r\n  )\r\n\r\n\r\n  /**\r\n   * Report the status before processing an event.\r\n   * \r\n   * @param {String} eventName The name of the event that was processed.\r\n   * @param {[String]} activeStates The list of states that were active when the event occured.\r\n   * @param {[{variable, value}]} variableValues The list of statemachine variables with their values when the event occured.\r\n   */\r\n  reportBeforeEvent = (eventName, activeStates, variableValues) => {\r\n    this.addVisitedStates(activeStates);\r\n\r\n    if (!StatemachineEventHistory.isArtificialEvent(eventName)) {\r\n      this.addRaisedEvent(eventName);\r\n      this.addRaisedEventPerStates(activeStates, eventName);\r\n\r\n      // Insert the variable values from the end of the last preceeding event now:\r\n      if (this.valuesPerVariableAfterLastArtificialEvent.length !== 0) {\r\n        this.addVariableValues(this.valuesPerVariableAfterLastArtificialEvent);\r\n        this.valuesPerVariableAfterLastArtificialEvent = [];\r\n      }\r\n      this.addVariableValues(variableValues);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Report the status after processing an event.\r\n   * \r\n   * @param {String} eventName The name of the event that was processed.\r\n   * @param {[String]} activeStates The list of states that were active when the event processing finished.\r\n   * @param {[{variable, value}]} variableValues The list of statemachine variables with their values when the event processing finished.\r\n   */\r\n  reportAfterEvent = (eventName, activeStates, variableValues) => {\r\n    this.addVisitedStates(activeStates);\r\n\r\n    // If that is the last event before the next real event\r\n    // we should put the variable values to the history. \r\n    // --> Remember values now and put them into history if the next event is not artificial.\r\n    // Copy memorized entries to detach from statemachine's variable table:\r\n    this.valuesPerVariableAfterLastArtificialEvent = variableValues.map(entry => ({\r\n      name: entry.name,\r\n      value: entry.value\r\n    }));\r\n  }\r\n\r\n\r\n  /**\r\n   * Get an array of all events that were raised. \r\n   */\r\n  getRaisedEvents = () => this.raisedEvents.slice();\r\n\r\n  /**\r\n   * Get an array of all events that were raised while the given state was active.\r\n   */\r\n  getRaisedEventsInState = (state) => {\r\n    const match = this.raisedEventsPerState.find(entry => entry.state === state);\r\n    return match === undefined ? [] : match.events.slice();\r\n  };\r\n\r\n  /**\r\n   * Get the total number of events that were raised. \r\n   */\r\n  getTotalNbOfRaisedEvents = () => this.totalNbOfRaisedEvents;\r\n\r\n  /**\r\n   * Get an array of all states that were visited.\r\n   */\r\n  getVisitedStates = () => this.visitedStates.slice();\r\n\r\n  /**\r\n   * Get an array of all values that a variable had before or after triggering an event.\r\n   */\r\n  getValuesOfVariable = (variable) => {\r\n    const matchInHistory = this.valuesPerVariable.find(entry => entry.name === variable);\r\n    const matchInPendingMemory = this.valuesPerVariableAfterLastArtificialEvent.find(entry => entry.name === variable);\r\n    if (matchInHistory === undefined && matchInPendingMemory === undefined) {\r\n      return [];\r\n    }\r\n    if (matchInHistory === undefined) {\r\n      return [matchInPendingMemory.value];\r\n    }\r\n    // Copy result to detach from our history:\r\n    const result = matchInHistory.values.slice();\r\n    if (matchInPendingMemory !== undefined && !result.includes(matchInPendingMemory.value)) {\r\n      result.push(matchInPendingMemory.value);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // ------------ private stuff ----------------------------------------------------------------------------\r\n  static isArtificialEvent(eventName) {\r\n    return eventName.startsWith('.');\r\n  }\r\n\r\n  static isArtificialVariable(variableName) {\r\n    return variableName.indexOf('.') !== -1;\r\n  }\r\n\r\n  addRaisedEvent = (event) => {\r\n    this.totalNbOfRaisedEvents += 1;\r\n    if (!this.raisedEvents.includes(event)) {\r\n      this.raisedEvents.push(event);\r\n    }\r\n  }\r\n\r\n  addRaisedEventPerState = (state, event) => {\r\n    const oldEntry = this.raisedEventsPerState.find(entry => entry.state === state);\r\n    if (oldEntry === undefined) {\r\n      this.raisedEventsPerState.push({\r\n        state,\r\n        events: [event]\r\n      })\r\n    } else if (!oldEntry.events.includes(event)) {\r\n      oldEntry.events.push(event);\r\n    }\r\n  }\r\n\r\n  addRaisedEventPerStates = (states, event) => {\r\n    states.forEach((state) => {\r\n      this.addRaisedEventPerState(state, event)\r\n    });\r\n  }\r\n\r\n  addVisitedState = (state) => {\r\n    if (!this.visitedStates.includes(state)) {\r\n      this.visitedStates.push(state);\r\n    }\r\n  }\r\n\r\n  addVisitedStates = (states) => {\r\n    states.forEach((stateToAdd) => {\r\n      this.addVisitedState(stateToAdd)\r\n    });\r\n  }\r\n\r\n  addValuePerVariable = (variable, value) => {\r\n    if (!StatemachineEventHistory.isArtificialVariable(variable)) {\r\n      const oldEntry = this.valuesPerVariable.find(entry => entry.name === variable);\r\n      if (oldEntry === undefined) {\r\n        this.valuesPerVariable.push({\r\n          name: variable,\r\n          values: [value]\r\n        })\r\n      } else if (!oldEntry.values.includes(value)) {\r\n        oldEntry.values.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  addVariableValues = (variableInfos) => {\r\n    variableInfos.forEach((variableInfo) => { this.addValuePerVariable(variableInfo.name, variableInfo.value); });\r\n  }\r\n\r\n}\r\n","import 'babel-polyfill';\r\nimport scxml from '../../node_modules/scxml/dist/scxml';\r\nimport TermEvaluator from '../eval/TermEvaluator';\r\nimport TimedEventsCatalog from './TimedEventsCatalog';\r\nimport StatemachineEventHistory from './StatemachineEventHistory';\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\n/**\r\n * A state machine for a single task.\r\n * \r\n * Our implementation is a wrapper around the SCXML state machine \r\n * provided by the SCXML library.\r\n * \r\n * This wrapper transforms our state machine model configuration\r\n * to the configuration exepected by the SCXML implementation \r\n * and provides additional functionality: \r\n *  - state machine variables\r\n *  - timed events\r\n */\r\nexport default class Statemachine {\r\n\r\n  /**\r\n   * @param {*} model The statemachine model as provided by the item config structure.\r\n   * @param {*} timedEventDefaults A map eventName -> interval of changes for event intervals that should override the intervals given in the model.\r\n   * @param {*} statePageMapDefaults A map stateName -> {pageName, areaType, areaName} that defines an (optional) page switch assigned to each state.\r\n   * @param {*} snapshot An (optional) snapshot to continue the state machine where we left off the last time. Use the result of a getSnapshot() call.\r\n   * @param {*} historySnapshot An (optional) snapshot to restore the history where we left off the last time. Use the result of a getHistoryData() call.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  constructor(model, timedEventDefaults, statePageMapDefaults, snapshot, historySnapshot, runtime) {\r\n    this.interpreter = undefined;\r\n    this.pendingEventQueue = [];\r\n    this.pendingTaskSwitch = undefined;\r\n    this.timedEvents = new TimedEventsCatalog();\r\n    this.statePageMap = Statemachine.buildStatePageMap(model.statePageAssignments, statePageMapDefaults);\r\n    this.history = new StatemachineEventHistory(historySnapshot);\r\n    this.running = false;\r\n    this.paused = false;\r\n    this.eventProcessingRuns = false;\r\n    this.runtime = runtime;\r\n    this.elapsedTimeStateMap = {};\r\n\r\n    this.buildStateMachine(model, timedEventDefaults, runtime, snapshot);\r\n    if (snapshot === undefined || snapshot === null) {\r\n      this.interpreter.start();\r\n    }\r\n  }\r\n\r\n\r\n  // public API ---------------------------------------------------------------------------------------------------\r\n  /**\r\n   * Start the state machine for the first time. \r\n   * \r\n   * The method triggers the special .init. event.\r\n   */\r\n  start = () => {\r\n    this.running = true;\r\n    this.triggerEvent(\".init.\");\r\n  }\r\n\r\n  /**\r\n   * Stop the state machine. \r\n   * \r\n   * The method stops all timed events.\r\n   */\r\n  stop = () => {\r\n    this.stopTimedEvents();\r\n    this.running = false;\r\n  }\r\n\r\n  /**\r\n   * Continue state machine (after having stopped it).\r\n   * \r\n   * The method will start the timed events again.\r\n   * The method will quit a 'paused' state implicitly.\r\n   * \r\n   */\r\n  continue = () => {\r\n    this.running = true;\r\n    this.paused = false;\r\n    this.getCurrentStates().forEach((state) => {\r\n      this.startTimedEvents(state)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Pause the state machine: Pause all timed events.\r\n   * \r\n   * Use the resume method to restart the state machine execution.\r\n   */\r\n  pause = () => {\r\n    this.paused = true;\r\n    this.pauseTimedEvents();\r\n  }\r\n\r\n  /**\r\n   * Resume the state machine after a pause.\r\n   * \r\n   * Call this after a call to pause to resume the state machine execution.\r\n   */\r\n  resume = () => {\r\n    this.resumeTimedEvents();\r\n    this.paused = false;\r\n  }\r\n\r\n  /**\r\n   * Trigger the event with the given event name.\r\n   * \r\n   * The method triggers the given event and all events\r\n   * created by executing the given event:\r\n   * Execution of the initial event might put one or more \r\n   * new events on the pending events queue. \r\n   * We will execute these new events one by one which might\r\n   * put more events on the queue. \r\n   * \r\n   * Event execution is blocked while the statemachine\r\n   * is stopped or 'paused'.\r\n   * \r\n   * @param {String} event Name of event to be triggered.\r\n   */\r\n  triggerEvent = (event) => {\r\n    if (this.running === true && this.paused === false) {\r\n      if (this.eventProcessingRuns) {\r\n        this.enqueueEventLastOut(event);\r\n      } else {\r\n\r\n        this.eventProcessingRuns = true;\r\n        this.runSingleEventWithHistoryReports(event);\r\n        this.eventProcessingRuns = false;\r\n\r\n        const pendingEventFromQueue = this.pendingEventQueue.pop();\r\n        if (pendingEventFromQueue !== undefined) {\r\n          this.triggerEvent(pendingEventFromQueue);\r\n        } else if (this.pendingTaskSwitch !== undefined) {\r\n          const switchToExecute = this.pendingTaskSwitch;\r\n          this.pendingTaskSwitch = undefined;\r\n          Statemachine.executePendingTaskSwitch(switchToExecute, this.runtime);\r\n\r\n        }\r\n      }\r\n    } else {\r\n      console.warn(`Event ${event} ignored since statmachine is not running currently.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set a task switch call to be executed as soon as the last event in the pending events queue is finished.\r\n   * \r\n   * The method will not trigger any event or the pending event queue processing. \r\n   */\r\n  setPostponedTaskSwitch = (switchCall) => {\r\n    this.pendingTaskSwitch = switchCall;\r\n  }\r\n\r\n  /**\r\n   * Get the timer data for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n   */\r\n  getTimerData = (eventName) => {\r\n    const eventEntry = this.timedEvents.getEntry(eventName);\r\n    if (eventEntry === undefined) {\r\n      return undefined;\r\n    }\r\n    return TimedEventsCatalog.getEventData(eventEntry, this.getNow());\r\n  }\r\n\r\n  /**\r\n   * Set the trigger interval for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n  */\r\n  setTimedEventInterval = (eventName, interval) => {\r\n    const eventEntry = this.timedEvents.getEntry(eventName);\r\n    if (eventEntry !== undefined) {\r\n      TimedEventsCatalog.setTriggerIntervalInEventEntry(\r\n        interval,\r\n        eventEntry\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a map of the current timed event interval settings. \r\n   * \r\n   * You may use the returned structure as timed event defaults parameter\r\n   * in our constructor to restore the timed event intervals to \r\n   * the point in time of this call. \r\n   */\r\n  getCurrentTimerIntervals = () => this.timedEvents.getTimerIntervals();\r\n\r\n  /**\r\n   * Get the full map of state page assignments. \r\n   * \r\n   * You may use the returned structure as statePageMap defaults parameter\r\n   * in our constructor to restore the state page assignments to \r\n   * the point in time of this call. \r\n   */\r\n  getStatePageAssignments = () => StateManagerHelper.deepCopy(this.statePageMap);\r\n\r\n  /**\r\n   * Set the page assignment for a state.\r\n   * \r\n   * @param {String} state The name of the state to assign the page to.\r\n   * @param {String} pageName The page to assign to the state.\r\n   * @param {String} areaType The type of the page area that will get the new page at the state switch.\r\n   * @param {String} areaName The name of the page area that will get the new page at the state switch.\r\n   */\r\n  setStatePageAssignment = (state, pageName, areaType, areaName) => {\r\n    const oldEntryIndex = this.statePageMap.findIndex(entry => entry.state === state);\r\n    if (oldEntryIndex === -1) {\r\n      this.statePageMap.push({\r\n        state, pageName, areaType, areaName\r\n      });\r\n    } else {\r\n      this.statePageMap[oldEntryIndex] = {\r\n        state, pageName, areaType, areaName\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a map of all variables with their current values. \r\n   * \r\n   * You may use the returned structure as variable default values parameter\r\n   * in our constructor to restore the variable values to \r\n   * the point in time of this call. \r\n   */\r\n  getCurrentVariableValues = () => {\r\n    const { taskManager, variableManager } = this.runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const currentVariableValues = variableManager.getVariableValuesMapForTask(currentTaskId);\r\n\r\n    return StateManagerHelper.deepCopy(currentVariableValues);\r\n  }\r\n\r\n  /**\r\n   * Get the history data like raised events, variable values and visited states.\r\n   * \r\n   * You may use the returned structure as parameter \r\n   * in our constructor to restore the statemachine history to \r\n   * the point in time of this call. \r\n   */\r\n  getHistoryData = () => this.history.getHistoryDataForSnapshot()\r\n\r\n  /**\r\n   * Get the currently active leaf states.\r\n   */\r\n  getCurrentLeafStates = () => this.interpreter.getConfiguration();\r\n\r\n  /**\r\n   * Get the currently active states including non-leaf states.\r\n   */\r\n  getCurrentStates = () => this.interpreter.getFullConfiguration().filter(state => !state.startsWith('$generated-state-'));\r\n\r\n  /**\r\n   * Get the currently active states including non-leaf states.\r\n   * \r\n   * States returned contain also some generated by the library : \"$generated-state-0\", \"$generated-state-1\"\r\n   */\r\n  getAllCurrentStates = () => this.interpreter.getFullConfiguration();\r\n\r\n  /**\r\n   * Get an array of all events that were raised. \r\n   */\r\n  getRaisedEvents = () => this.history.getRaisedEvents();\r\n\r\n  /**\r\n   * Get an array of all events that were raised while the given state was active.\r\n   */\r\n  getRaisedEventsInState = state => this.history.getRaisedEventsInState(state);\r\n\r\n  /**\r\n   * Get the total number of events that were raised. \r\n   */\r\n  getTotalNbOfRaisedEvents = () => this.history.getTotalNbOfRaisedEvents();\r\n\r\n  /**\r\n   * Get an array of all states that were visited.\r\n   */\r\n  getVisitedStates = () => this.history.getVisitedStates();\r\n\r\n  /**\r\n   * Get an array of all values that a variable had before or after triggering an event.\r\n   */\r\n  getValuesOfVariable = variable => this.history.getValuesOfVariable(variable);\r\n\r\n  /**\r\n   * Get the time in milliseconds spent in a certain state.\r\n   */\r\n  elapsedTimeInState = state => this.getElapsedTimeInState(state);\r\n\r\n\r\n  /**\r\n   * Get a 'snapshot' of the state machine. \r\n   * \r\n   * You may use the returned snapshot as parameter \r\n   * in our constructor to restore the statemachine to \r\n   * the point in time of the snapshot. (Make sure you use the same model value as before!)\r\n   */\r\n  getSnapshot = () => StateManagerHelper.deepCopy(this.interpreter.getSnapshot());\r\n\r\n  // private stuff -------------------------------------------------------------------------------------------------\r\n\r\n  getElapsedTimeInState = (stateName) => {\r\n    const currentArray = this.elapsedTimeStateMap[stateName] || [];\r\n    const totalTime = currentArray.reduce((acc, entry) => {\r\n      if (entry.exitTime === null) {\r\n        return acc + (this.getNow() - entry.entryTime);\r\n      }\r\n      return acc + (entry.exitTime - entry.entryTime);\r\n    }, 0);\r\n    return totalTime;\r\n  }\r\n\r\n  static buildStatePageMap(modelPageAssignments, dynamicPageAssignments) {\r\n    const result = [];\r\n    modelPageAssignments.forEach((value) => {\r\n      result.push({\r\n        state: value.state,\r\n        pageName: value.pageName,\r\n        areaType: value.areaType,\r\n        areaName: value.areaName\r\n      })\r\n    })\r\n    if (dynamicPageAssignments !== undefined) {\r\n      dynamicPageAssignments.forEach((dynamicAssignment) => {\r\n        const oldAssignmentIndex = result.findIndex(existingAssignment => existingAssignment.state === dynamicAssignment.state);\r\n        if (oldAssignmentIndex === -1) {\r\n          result.push({\r\n            state: dynamicAssignment.state,\r\n            pageName: dynamicAssignment.pageName,\r\n            areaType: dynamicAssignment.areaType,\r\n            areaName: dynamicAssignment.areaName\r\n          });\r\n        } else {\r\n          result[oldAssignmentIndex] = {\r\n            state: dynamicAssignment.state,\r\n            pageName: dynamicAssignment.pageName,\r\n            areaType: dynamicAssignment.areaType,\r\n            areaName: dynamicAssignment.areaName\r\n          };\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  buildStateMachine = (machineModel, timedEventDefaults, runtime, snapshot) => {\r\n    this.timedEvents = Statemachine.buildTimedEventsCatalog(machineModel.timedEvents, machineModel.states);\r\n    Object.keys(timedEventDefaults).forEach((event) => { this.setTimedEventInterval(event, timedEventDefaults[event]); });\r\n\r\n    this.interpreter = new scxml.scion.Statechart(this.transformMachineModel(machineModel.states, runtime), {\r\n      snapshot\r\n    });\r\n\r\n    this.interpreter.on(\"onError\", (errorInfo) => {\r\n      console.error(`Caught statemachine error on ${errorInfo.tagname} in line/col ${errorInfo.line}/${errorInfo.column} : ${errorInfo.reason}`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Build our interval catalog of timed events.\r\n   * \r\n   * @param {[{String, Number}]} timedEventsList The list of timed events as given in the item config structure.\r\n   * @param {[*]} statesList The list of statemachine states as given in the item config structure.\r\n   */\r\n  static buildTimedEventsCatalog(timedEventsList, statesList) {\r\n    const catalog = new TimedEventsCatalog();\r\n    timedEventsList.forEach((event) => {\r\n      const acceptingStatesList = Statemachine.findAcceptingStates(event.name, statesList);\r\n      catalog.putEntry(event.name, event.interval, acceptingStatesList);\r\n    });\r\n    return catalog;\r\n  }\r\n\r\n  /**\r\n   * Find a list of states (as list of state names) that accept the given event.\r\n   * \r\n   * @param {String} eventName The name of the event to find accepting states for.\r\n   * @param {[*]} statesList The list of statemachine states as given in the item config structure.\r\n   */\r\n  static findAcceptingStates(eventName, statesList) {\r\n    const result = [];\r\n    statesList.forEach((state) => {\r\n      if (state.transitions !== undefined && state.transitions.some(transition => transition.event === eventName)) {\r\n        result.push(state.id);\r\n      }\r\n      if (state.states !== undefined) {\r\n        const recursionResult = this.findAcceptingStates(eventName, state.states);\r\n        recursionResult.forEach((recursionResultState) => {\r\n          result.push(recursionResultState);\r\n        })\r\n      }\r\n    })\r\n    return result;\r\n  }\r\n\r\n  transformMachineModel = (originalStates, runtime) => {\r\n    // Transform configuration machine model to SCION machine model:\r\n    //   Copy all arrays and attributes 1:1\r\n    //   After that change all \r\n    //   - cond attributes in all transition objects\r\n    //   - action array attributes in all transition objects\r\n    //   For these inject function definitions calling the TermEvaluator with the terms given in the original model.\r\n    //   Add a state entry action for each state that triggers a page switch according to our state->page map. \r\n    const statesCopy = Statemachine.modelCopy(originalStates);\r\n    this.transformStates(statesCopy, \"\", runtime);\r\n    return {\r\n      states: statesCopy\r\n    };\r\n  }\r\n\r\n\r\n  transformStates = (stateArray, parentStatePath, runtime) => {\r\n    stateArray.forEach((state) => {\r\n      const hasSubstates = state.states !== undefined && state.states.length > 0;\r\n      const statePath = Statemachine.buildStatePath(parentStatePath, state.id);\r\n      this.transformEntryExitActions(state, hasSubstates ? Statemachine.buildInitEventName(statePath) : undefined, runtime);\r\n      state.transitions.forEach((transition) => {\r\n        Statemachine.transformTransition(state, transition, parentStatePath, runtime);\r\n      });\r\n      // recursive call for substates\r\n      if (hasSubstates) {\r\n        this.transformStates(state.states, statePath, runtime);\r\n      }\r\n    });\r\n  }\r\n\r\n  static buildStatePath(parentPath, stateId) {\r\n    return `${parentPath}.${stateId}`;\r\n  }\r\n\r\n  static buildInitEventName(parentStatePath) {\r\n    return `.init${parentStatePath}`;\r\n  }\r\n\r\n  transformEntryExitActions = (state, initEventName, runtime) => {\r\n    state.onEntry = this.buildOnEntryFunction(state, state.onEntry, initEventName, runtime);\r\n    // if (state.onExit !== undefined) {\r\n    //   state.onExit = Statemachine.buildOnExitFunction(state, state.onExit, runtime);\r\n    // }\r\n    state.onExit = this.buildOnExitFunction(state, state.onExit, runtime);\r\n  }\r\n\r\n  static transformTransition(state, transition, parentStatePath, runtime) {\r\n    if (transition.event === undefined) {\r\n      transition.event = Statemachine.buildInitEventName(parentStatePath);\r\n    }\r\n    if (transition.cond !== undefined) {\r\n      transition.cond = Statemachine.buildConditionFunction(transition.cond, runtime);\r\n    }\r\n    transition.onTransition = Statemachine.buildOnTransitionFunction(state, transition.target, transition.actions, runtime);\r\n    delete transition.actions;\r\n  }\r\n\r\n\r\n  buildOnEntryFunction = (state, actions, initEventName, runtime) => {\r\n    const putEventOnQueue = this.enqueueEventFirstOut;\r\n    const startMyTimedEvents = this.startTimedEvents;\r\n    const stateToPageMap = this.statePageMap;\r\n    const result = (event) => {\r\n      if (actions !== undefined) {\r\n        actions.forEach((action, index, all) => {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `in-action:${event.name}[${index}]`);\r\n        })\r\n      }\r\n      const assignedPageSwitch = stateToPageMap\r\n        .filter(value => value.state === state.id)\r\n        .map(value => ({\r\n          pageName: value.pageName, areaType: value.areaType, areaName: value.areaName\r\n        }))\r\n        .find(value => true);\r\n      if (assignedPageSwitch !== undefined) {\r\n        runtime.taskManager.switchPage(\r\n          assignedPageSwitch.pageName,\r\n          undefined, undefined,\r\n          assignedPageSwitch.areaType,\r\n          assignedPageSwitch.areaName,\r\n          undefined, undefined, undefined, undefined\r\n        );\r\n      }\r\n      if (initEventName !== undefined) {\r\n        putEventOnQueue(initEventName);\r\n      }\r\n      startMyTimedEvents(state.id);\r\n      this.addEntryTimeInStateMap(state.id, this.getNow());\r\n    }\r\n    return result;\r\n  }\r\n\r\n  buildOnExitFunction(state, actions, runtime) {\r\n    const result = (event) => {\r\n      if (actions !== undefined) {\r\n        actions.forEach((action, index, all) => {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `ex-action:${event.name}[${index}]`);\r\n        })\r\n      }\r\n      this.addExitTimeInStateMap(state.id, new Date());\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  static buildOnTransitionFunction(sourceState, targetState, actions, runtime) {\r\n    const result = (event) => {\r\n      if (actions !== undefined) {\r\n        actions.forEach((action, index, all) => {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `tr-action:${event.name}[${index}]`);\r\n        })\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static buildConditionFunction(term, runtime) {\r\n    const result = event => TermEvaluator.evaluateTerm(term, runtime, [], `event:${event.name}`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * (Re-)start all timed events that the given state can accept.\r\n   * \r\n   * The method schedules execution of the triggerEvent method\r\n   * using window.setTimeout(...) and registers the schedule handlers in the event catalog.\r\n   * \r\n   * The method overrides the 'paused' state of the affected events.\r\n   * \r\n   * @param {*} timedEventsArray \r\n   */\r\n  startTimedEvents = (stateName) => {\r\n\r\n    // stop all accepted timed events that are already running:\r\n    this.timedEvents.findScheduledEventsByState(stateName).forEach((timedEventEntry) => {\r\n      this.timedEvents.stopTimedEvent(timedEventEntry);\r\n    });\r\n\r\n    // start all accepted timed events:\r\n    this.timedEvents.findUnscheduledEventsByState(stateName).forEach((timedEventEntry) => {\r\n      this.timedEvents.startTimedEvent(timedEventEntry, this);\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n   * Stop all currently scheduled timed events. \r\n   * \r\n   * The method uses the timed events catalog to find all schedule handles to be cleared. \r\n   * The method overrides the 'paused' state of the events.\r\n   */\r\n  stopTimedEvents = () => {\r\n    this.timedEvents.findScheduledEvents().forEach((timedEventEntry) => {\r\n      this.timedEvents.stopTimedEvent(timedEventEntry);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Pause all currently scheduled timed events. \r\n   * \r\n   * The method uses the timed events catalog to find all schedule handles to be paused. \r\n   */\r\n  pauseTimedEvents = () => {\r\n    const now = this.getNow();\r\n    this.timedEvents.findScheduledEvents().forEach((timedEventEntry) => {\r\n      this.timedEvents.pauseTimedEvent(timedEventEntry, now);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Resume all currently scheduled timed events. \r\n   * \r\n   * The method uses the timed events catalog to find all schedule handles to be resumed. \r\n   */\r\n  resumeTimedEvents = () => {\r\n    this.timedEvents.findScheduledEvents().forEach((timedEventEntry) => {\r\n      if (TimedEventsCatalog.isPaused(timedEventEntry)) {\r\n        this.timedEvents.resumeTimedEvent(timedEventEntry, this);\r\n      }\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n   * Run a single event on the statemachine interpreter and report \r\n   * the before and after states/variables to our history.\r\n   */\r\n  runSingleEventWithHistoryReports = (event) => {\r\n    this.history.reportBeforeEvent(\r\n      event,\r\n      this.getCurrentStates(),\r\n      this.buildVariablesInfoArray()\r\n    )\r\n\r\n    this.interpreter.gen({\r\n      name: event,\r\n      data: undefined\r\n    });\r\n\r\n    this.history.reportAfterEvent(\r\n      event,\r\n      this.getCurrentStates(),\r\n      this.buildVariablesInfoArray()\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Put an event on the 'last out' positon of our pending events queue.\r\n   * \r\n   * @param {*} event Name of the event to be put on the queue. \r\n   */\r\n  enqueueEventLastOut = (event) => {\r\n    this.pendingEventQueue.unshift(event);\r\n  }\r\n\r\n  /**\r\n   * Put an event on the 'first out' position of our event queue.\r\n   * \r\n   * @param {String} event Name of the event to put on the queue.\r\n   */\r\n  enqueueEventFirstOut = (event) => {\r\n    this.pendingEventQueue.push(event);\r\n  }\r\n\r\n  /**\r\n   * Build an array of variable/value pairs describing our variables.\r\n   */\r\n  buildVariablesInfoArray = () => {\r\n    const { taskManager, variableManager } = this.runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    return variableManager.buildVariablesInfoArrayForTask(currentTaskId);\r\n  }\r\n\r\n  /**\r\n   * Add entry time to a specific state.\r\n   */\r\n  addEntryTimeInStateMap = (stateName, entryTime) => {\r\n    const currentArray = this.elapsedTimeStateMap[stateName] || [];\r\n    const newEntry = {\r\n      entryTime,\r\n      exitTime: null\r\n    };\r\n    this.elapsedTimeStateMap[stateName] = [...currentArray, newEntry];\r\n  }\r\n\r\n  /**\r\n   * Add exit time to the most recent entryTime for a specific state.\r\n   */\r\n  addExitTimeInStateMap = (stateName, exitTime) => {\r\n    const currentArray = this.elapsedTimeStateMap[stateName] || [];\r\n    const indexToUpdate = currentArray.findIndex(entry => entry.exitTime === null);\r\n\r\n    if (indexToUpdate !== -1) {\r\n      currentArray[indexToUpdate].exitTime = exitTime;\r\n      this.elapsedTimeStateMap[stateName] = currentArray;\r\n    }\r\n  };\r\n\r\n\r\n  static executePendingTaskSwitch(switchToExecute, runtime) {\r\n    TermEvaluator.evaluateTerm(switchToExecute, runtime, [], 'postp-task');\r\n  }\r\n\r\n  /**\r\n   * Build a deep copy of the given model structure.\r\n   */\r\n  static modelCopy(model) {\r\n    if (model === undefined) return undefined;\r\n    return JSON.parse(JSON.stringify(model));\r\n  }\r\n\r\n  /**\r\n   * Test hook: get Date representing 'now'.\r\n   */\r\n  getNow = () => new Date();\r\n\r\n}\r\n","import Statemachine from \"./Statemachine\";\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\n/**\r\n * Manager for all state machines.\r\n * \r\n * We keep one state machine per task. \r\n * Our operations targeting a single state machine operate on the state machine \r\n * assigned to the currently running task. We call this state machine the 'currently active' \r\n * state machine. \r\n * We need to be informed about the currently running task to switch our 'currently active' \r\n * state machine accordingly.\r\n */\r\nexport default class StatemachinesManager {\r\n\r\n  constructor() {\r\n    this.statemachinesList = {};\r\n    this.statemachineModelsList = {};\r\n    this.currentMachine = undefined;\r\n    this.timedEventDefaults = {};\r\n    this.statePageMapDefaults = [];\r\n    this.preInitTriggeredEvents = [];\r\n  }\r\n\r\n  /**\r\n   * Stop the currently running state machine. \r\n   */\r\n  stopCurrentStatemachine = () => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.stop();\r\n      this.currentMachine = undefined;\r\n    }\r\n    this.timedEventDefaults = {};\r\n    this.statePageMapDefaults = [];\r\n    this.preInitTriggeredEvents = [];\r\n  }\r\n\r\n  /**\r\n   * Start a state machine as currently active state machine.\r\n   * \r\n   * The method will: \r\n   *  - Create and start a new state machine for the given task if no such state machine exists yet.\r\n   *  - Continue the state machine for the given task if it does exist already.\r\n   * \r\n   * @param taskPath The path of the new task to switch to.\r\n   * @param model The state machine model to create a new state machine with. We will use this only if there is no state machine for the given task yet.\r\n   * @param runtime The common runtime context structure. \r\n   */\r\n  startOrInitializeCurrentStatemachine = (taskPath, model, runtime) => {\r\n    if (this.currentMachine !== undefined) {\r\n      console.error('Cannot run two state machines in parallel.', taskPath);\r\n      this.stopCurrentStatemachine();\r\n    }\r\n    const existingMachine = this.statemachinesList[taskPath];\r\n    if (existingMachine === undefined) {\r\n      this.statemachineModelsList[taskPath] = model;\r\n      const newMachine = model === undefined ? undefined : new Statemachine(model, this.timedEventDefaults, this.statePageMapDefaults, undefined, undefined, runtime);\r\n      this.statemachinesList[taskPath] = newMachine;\r\n      this.currentMachine = newMachine;\r\n      // The new state machine must be the 'current' state machine before we start it (Term evaluation!)\r\n      if (this.currentMachine !== undefined) {\r\n        this.currentMachine.start();\r\n        this.preInitTriggeredEvents.forEach((event) => { this.currentMachine.triggerEvent(event); });\r\n      }\r\n    } else {\r\n      this.currentMachine = existingMachine;\r\n      this.currentMachine.continue();\r\n    }\r\n    this.timedEventDefaults = {};\r\n    this.statePageMapDefaults = [];\r\n    this.preInitTriggeredEvents = [];\r\n\r\n    // rerender each variable observer. DNI: could be unnecessary\r\n    runtime.variableManager.triggerRerenderForAllChangeObservers(runtime);\r\n  }\r\n\r\n  /**\r\n   * Switch the current state machine without starting it. \r\n   * \r\n   * @param {*} taskPath \r\n   */\r\n  switchCurrentStatemachineWithoutStarting = (taskPath) => {\r\n    this.currentMachine = this.statemachinesList[taskPath];\r\n  }\r\n\r\n  /**\r\n   * Pause the currently running state machine. \r\n   * \r\n   * Pausing the state machines pauses all timed events and blocks event execution. \r\n   * Use resumeCurrentStatemachine() to finish the pause. This will continue the \r\n   * paused timed events where they left off. (A stop-continue sequence will \r\n   * restart all interrupted timed events from the start instead.)\r\n   */\r\n  pauseCurrentStatemachine = () => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.pause();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resume the currently running but 'paused' state machine. \r\n   * \r\n   * This will continue the paused timed events where they left off. \r\n   * (A stop-continue sequence will restart all interrupted timed events from their start instead.)\r\n   * In a sequence pause-continue the 'continue' call will switch the state machine to a non-paused, \r\n   * running state and restart all paused timed events from their start.\r\n   */\r\n  resumeCurrentStatemachine = () => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.resume();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Trigger an event on the currently running state machine.\r\n   * \r\n   * The method implicitly triggers all events on the queue of pending events of the currently running state machine.\r\n   * \r\n   * If there is no state machine running yet the method keeps the event in a buffer to be exectued as soon as\r\n   * a state machine is created.\r\n   */\r\n  triggerEvent = (event) => {\r\n    if (this.currentMachine === undefined) {\r\n      this.preInitTriggeredEvents.push(event);\r\n    } else {\r\n      this.currentMachine.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Postpone a task switch on the currently running state machine.\r\n   * \r\n   * The method sets the postponed task switch member of the current state machine.\r\n   * \r\n   * If there is no state machine running yet the method ignores the call.\r\n   */\r\n  setPostponedTaskSwitch = (taskSwitchCall) => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.setPostponedTaskSwitch(taskSwitchCall);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the timer data for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n   */\r\n  getTimerData = (eventName) => {\r\n    if (this.currentMachine === undefined) {\r\n      // Note: We cannot return our buffered value here since the state machine will return more details than we have.\r\n      return undefined;\r\n    } else {\r\n      return this.currentMachine.getTimerData(eventName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the trigger interval for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n  */\r\n  setTimedEventInterval = (eventName, interval) => {\r\n    if (this.currentMachine === undefined) {\r\n      this.timedEventDefaults[eventName] = interval;\r\n    } else {\r\n      this.currentMachine.setTimedEventInterval(eventName, interval);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign a page to a state. \r\n   * \r\n   * @param {*} state The name of the state to assign the page to.\r\n   * @param {*} pageName The name of the page to assign to the state.\r\n   * @param {*} areaType The type of the area that will get the page assigned at the state switch.\r\n   * @param {*} areaName The name of the area that will get the page assigned at the state switch. \r\n   */\r\n  setStatePageAssignment = (state, pageName, areaType, areaName) => {\r\n    if (this.currentMachine === undefined) {\r\n      const existingEntryIndex = this.statePageMapDefaults.findIndex(value => value.state === state);\r\n      if (existingEntryIndex === -1) {\r\n        this.statePageMapDefaults.push({\r\n          state, pageName, areaType, areaName\r\n        });\r\n      } else {\r\n        this.statePageMapDefault[existingEntryIndex] = {\r\n          state, pageName, areaType, areaName\r\n        };\r\n      }\r\n    } else {\r\n      this.currentMachine.setStatePageAssignment(state, pageName, areaType, areaName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The states array contains the currently active leaf-states.\r\n   */\r\n  getCurrentStateMachineLeafStates = () => ((this.currentMachine === undefined) ? [] : this.currentMachine.getCurrentLeafStates());\r\n\r\n  /**\r\n   * Get the history data accumulated by the current state machine.\r\n   */\r\n  getHistoryStatemachineData = () => ((this.currentMachine === undefined) ? {} : this.currentMachine.getHistoryData());\r\n\r\n  /**\r\n   * Get an array of all events that were raised in the current statemachine. \r\n   */\r\n  getRaisedEvents = () => ((this.currentMachine === undefined) ? [] : this.currentMachine.getRaisedEvents());\r\n\r\n  /**\r\n   * Get an array of all events that were raised while the given state was active in the current statemachine.\r\n   */\r\n  getRaisedEventsInState = state => ((this.currentMachine === undefined) ? [] : this.currentMachine.getRaisedEventsInState(state));\r\n\r\n  /**\r\n   * Get the total number of events that were raised in the current statemachine. \r\n   */\r\n  getTotalNbOfRaisedEvents = () => ((this.currentMachine === undefined) ? 0 : this.currentMachine.getTotalNbOfRaisedEvents());\r\n\r\n  /**\r\n   * Get an array of all states that were visited in the current statemachine.\r\n   */\r\n  getVisitedStates = () => ((this.currentMachine === undefined) ? [] : this.currentMachine.getVisitedStates());\r\n\r\n  /**\r\n   * Get an array of all values that a variable had before or after triggering an event in the current statemachine.\r\n   */\r\n  getValuesOfVariable = variable => ((this.currentMachine === undefined) ? [] : this.currentMachine.getValuesOfVariable(variable));\r\n\r\n  /**\r\n   * Get the time in milliseconds spent in a certain state.\r\n   */\r\n  elapsedTimeInState = state => ((this.currentMachine === undefined) ? [] : this.currentMachine.elapsedTimeInState(state));\r\n\r\n  /**\r\n   * Get a snapshot of our statemachines that is compatible \r\n   * as parameter for the preloadStatemachinesData method.\r\n   */\r\n  getStatemachinesPreloadData = () => {\r\n    const result = {};\r\n    Object.keys(this.statemachinesList).forEach((taskPath) => {\r\n      const machine = this.statemachinesList[taskPath];\r\n      if (machine !== undefined) {\r\n        result[taskPath] = {\r\n          timerIntervals: machine.getCurrentTimerIntervals(),\r\n          statePageMap: machine.getStatePageAssignments(),\r\n          snapshot: machine.getSnapshot(),\r\n          historyData: machine.getHistoryData(),\r\n          model: StateManagerHelper.deepCopy(this.statemachineModelsList[taskPath]),\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Drop all exisiting state machines.\r\n   */\r\n  clearStatemachines = (runtime) => {\r\n    this.stopCurrentStatemachine();\r\n    this.statemachinesList = {};\r\n    this.statemachineModelsList = {};\r\n  }\r\n\r\n  /**\r\n   * Preload statemachines.\r\n   * \r\n   * The method implicitly drops all existing state machines before creating new machines according \r\n   * to the preload data.\r\n   * \r\n   * @param preloadData: Preload data obtained by calling getStatemachinesPreloadData on another instance.\r\n   */\r\n  preloadStatemachinesData = (preloadData, runtime) => {\r\n    this.clearStatemachines(runtime);\r\n\r\n    Object.keys(preloadData).forEach((taskPath) => {\r\n      const machineData = preloadData[taskPath];\r\n      this.statemachinesList[taskPath] = new Statemachine(\r\n        machineData.model,\r\n        machineData.timerIntervals,\r\n        machineData.statePageMap,\r\n        machineData.snapshot,\r\n        machineData.historyData,\r\n        runtime\r\n      );\r\n      this.statemachineModelsList[taskPath] = machineData.model;\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\nexport default class TaskNavigatorStateManager {\r\n\r\n  constructor() {\r\n    this.testEntriesList = {};\r\n  }\r\n\r\n  saveTestState = (testName, state, runtime) => {\r\n    this.testEntriesList[testName] = StateManagerHelper.deepCopy(state);\r\n\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'TaskNavigatorStateManagerState',\r\n      {\r\n        name: testName,\r\n        value: this.testEntriesList[testName]\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n\r\n  }\r\n\r\n  getTestState = testName => StateManagerHelper.deepCopy(this.testEntriesList[testName])\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n   getAllTasksState = () => StateManagerHelper.deepCopy(this.testEntriesList);\r\n\r\n   /**\r\n    * Drop all state.\r\n    */\r\n   clearTasksState = () => {\r\n     this.testEntriesList = {};\r\n   };\r\n\r\n   /**\r\n    * Preload the state returned by a call to getAllTasksState.\r\n    */\r\n   preloadTasksState = (allTasksState) => {\r\n     this.testEntriesList = StateManagerHelper.deepCopy(allTasksState);\r\n   }\r\n\r\n  /**\r\n   * Inject a change for a test entry triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (testName, state) => {\r\n    this.testEntriesList[testName] = StateManagerHelper.deepCopy(state)\r\n  }\r\n\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\n\r\nexport default class TraceLogBuffer {\r\n\r\n  constructor() {\r\n    this.logEntriesList = [];\r\n    this.entryCounter = 0;\r\n    this.newEntryListener = undefined;\r\n    this.withReplaySupport = false;\r\n    this.withExtendedMetaData = false;\r\n    this.withoutItemConfiguration = false;\r\n    this.withoutSnapshot = false;\r\n    this.withoutScoring = false;\r\n    this.item = undefined;\r\n    this.task = undefined;\r\n    this.scope = undefined;\r\n    this.traceContextId = undefined;\r\n  }\r\n\r\n  // public API for components ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Report an event that is relevant for the trace log.\r\n   * \r\n   * The method expects these parameters:\r\n   * - entryType: A String representing the type of the event.\r\n   * - timestamp: A Date representing the timestamp to log for the event.\r\n   * - entryContent: All further attributes of the event to be logged.\r\n   * \r\n   * The method will implicitly assign a unique log entry counter to the logged event.\r\n   * The method will create a deep copy of the given entryContent to decouple the log\r\n   * from further modifications on the entryContent.\r\n   * \r\n   * The method filters entries according to their entry type if a filter configuration\r\n   * is active (like \"filter out all replay support entries\").\r\n   * \r\n   */\r\n  reportEvent = (entryType, timestamp, entryContent) => {\r\n    if (!this.withReplaySupport && TraceLogBuffer.isReplaySupportType(entryType)) {\r\n      return;\r\n    }\r\n    if (this.withoutSnapshot && entryType === 'Snapshot') {\r\n      return;\r\n    }\r\n\r\n    const newEntry = {\r\n      entryId: this.getNextCount().toString(),\r\n      timestamp: TraceLogBuffer.buildTimeString(timestamp),\r\n      type: entryType,\r\n      details: StateManagerHelper.deepCopy(entryContent)\r\n    }\r\n\r\n    if (this.withExtendedMetaData) {\r\n      newEntry.item = this.item;\r\n      newEntry.task = this.task;\r\n      newEntry.scope = this.scope;\r\n      newEntry.sessionId = this.traceContextId;\r\n    }\r\n    if (this.withoutItemConfiguration && entryType === 'ItemSwitch') {\r\n      newEntry.details.item = undefined;\r\n    }\r\n    if (this.withoutScoring && entryType === 'TaskSwitch') {\r\n      newEntry.details.taskResult = undefined;\r\n    }\r\n\r\n    this.logEntriesList.push(newEntry);\r\n    if (this.newEntryListener !== undefined) {\r\n      this.newEntryListener();\r\n    }\r\n  }\r\n\r\n\r\n  // public API for log consumers --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the next bunch of log entries for delivery to the server and drop them from our queue.\r\n   * \r\n   * Note: This method must be called from the GUI thread to avoid multithreading issues!\r\n   * \r\n   * The method returns a list of log entry objects. I returns an empty list of no log entries are pending.\r\n   */\r\n  popEntries = () => {\r\n    const deliveredEntries = this.logEntriesList;\r\n    this.logEntriesList = [];\r\n    return deliveredEntries;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the list of current log entries (without dropping them).\r\n   * \r\n   * The method returns a list of log entry objects. I returns an empty list of no log entries are pending.\r\n   */\r\n  peekEntries = () => StateManagerHelper.deepCopy(this.logEntriesList);\r\n\r\n  /**\r\n   * Set a function to call each time we receive a new entry.\r\n   * \r\n   * We support a single entry listener only. The entry listener is called after the new log entry is put into our buffer.\r\n   * \r\n   * @param callback The function to call each time a new entry is put into our buffer.\r\n   */\r\n  setNewEntryListener = (callback) => {\r\n    this.newEntryListener = callback;\r\n  }\r\n\r\n  // public API for task player  ------------------------------------------------------------------\r\n  /**\r\n   * (De)Activate additional trace log entries required for replay functionality.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithReplaySupport = (value) => {\r\n    this.withReplaySupport = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate the additional header fields in each trace log entry.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithExtendedMetaData = (value) => {\r\n    this.withExtendedMetaData = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate dropping the item configuration attribute from ItemSwitch log entries.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithoutItemConfiguration = (value) => {\r\n    this.withoutItemConfiguration = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate dropping the Snapshot log entries.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithoutSnapshot = (value) => {\r\n    this.withoutSnapshot = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate dropping the task result attribute (i.e. scoring) from TaskSwitch log entries.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithoutScoring = (value) => {\r\n    this.withoutScoring = value;\r\n  }\r\n\r\n  /**\r\n   * Set the current trace context id (=sessionId) to be included in each trace log entry header.\r\n   * @param {*} value \r\n   */\r\n  setTraceContextId = (value) => {\r\n    this.traceContextId = value;\r\n  }\r\n\r\n  // public API for task manager  ------------------------------------------------------------------\r\n  /**\r\n   * Set the currently running test/task/item to be included in each trace log entry header.\r\n   */\r\n  setTestItemTaskNames = (test, item, task) => {\r\n    this.scope = test;\r\n    this.item = item;\r\n    this.task = task;\r\n  }\r\n\r\n  // private stuff --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Is the given type one of the entry types used exclusively the replay support feature?\r\n   */\r\n  static isReplaySupportType =\r\n    entryType => entryType === 'FullState'\r\n              || entryType === 'StateChange'\r\n              || entryType === 'RenderTriggered'\r\n              || entryType === 'ContextMenu'\r\n              || entryType === 'ScrollTriggered';\r\n\r\n\r\n  /**\r\n   * Get a string representation of the given time which is helpful in the trace log:\r\n   */\r\n  static buildTimeString(date) {\r\n    // Hint: We could use the momentjs library here:\r\n    // DNI: example: return moment(date).format(\"YYYY-MM-DD THH:mm:ss.SSS Z\");\r\n    return `${\r\n      TraceLogBuffer.padLeadingZeroes(date.getFullYear(), 4)}-${\r\n      TraceLogBuffer.padLeadingZeroes((date.getMonth() + 1), 2)}-${\r\n      TraceLogBuffer.padLeadingZeroes(date.getDate(), 2)}T${\r\n      TraceLogBuffer.padLeadingZeroes(date.getHours(), 2)}:${\r\n      TraceLogBuffer.padLeadingZeroes(date.getMinutes(), 2)}:${\r\n      TraceLogBuffer.padLeadingZeroes(date.getSeconds(), 2)}.${\r\n      TraceLogBuffer.padLeadingZeroes(date.getMilliseconds(), 3)}${\r\n      TraceLogBuffer.buildTimeZoneOffsetString(date.getTimezoneOffset())}`;\r\n  }\r\n\r\n  static buildTimeZoneOffsetString(offsetInMinutes) {\r\n    const absoluteOffsetInMinutes = Math.abs(offsetInMinutes);\r\n    const minutesOffset = absoluteOffsetInMinutes % 60;\r\n    const hoursOffset = (absoluteOffsetInMinutes - minutesOffset) / 60;\r\n    return (offsetInMinutes > 0 ? '-' : '+') + TraceLogBuffer.padLeadingZeroes(hoursOffset.toString(), 2) + TraceLogBuffer.padLeadingZeroes(minutesOffset.toString(), 2);\r\n  }\r\n\r\n  static padLeadingZeroes(number, size) {\r\n    let result = `${number}`;\r\n    while (result.length < size) {\r\n      result = `0${result}`;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the next entry count value and increase the counter.\r\n   */\r\n  getNextCount = () => {\r\n    this.entryCounter += 1;\r\n    return this.entryCounter;\r\n  }\r\n\r\n}\r\n","import StateManagerHelper from './StateManagerHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\nimport TraceLogHelper from './TraceLogHelper';\r\n\r\n/**\r\n * Manage a global clipboard. \r\n */\r\nexport default class ClipboardManager {\r\n\r\n  constructor(traceLogBuffer) {\r\n    this.traceLog = traceLogBuffer;\r\n    this.clipboardContent = undefined;\r\n    this.currentSelectionHolder = undefined;\r\n    this.currentInsertPosition = undefined;\r\n  }\r\n\r\n  // public API ------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Do the cut operation: Grab the current selection from the current selection holder and put\r\n   * it into our clipboard buffer. Tell the current selection holder to drop the selected text.\r\n   * \r\n   * If no selection is registered currently or the selection is read-only \r\n   * the method will write just a trace log and skip the operation.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  cut = (triggeringType, indexPath, runtime) => {\r\n    // keep a reference to the selection holder: the getSelectionCallback might deregister the selection holder!\r\n    const selectionHolderEntry = this.currentSelectionHolder;\r\n    if (selectionHolderEntry !== undefined && selectionHolderEntry.isReadOnlyCallback() === false) {\r\n      this.setClipboardContent(selectionHolderEntry.getSelectionCallback(true));\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'cut',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        true,\r\n        runtime\r\n      );\r\n      this.currentSelectionHolder = undefined;\r\n      this.currentInsertPosition = undefined;\r\n    } else {\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'cut',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        false,\r\n        runtime\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Could we perform a cut operation currently? \r\n   */\r\n  cutEnabled = () => this.currentSelectionHolder !== undefined && this.currentSelectionHolder.isReadOnlyCallback() === false\r\n\r\n  /**\r\n   * Do the copy operation: Grab the current selection from the current selection holder and put\r\n   * it into our clipboard buffer.\r\n   * \r\n   * If no selection is registered currently the method will write just a trace log and skip the operation.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  copy = (triggeringType, indexPath, runtime) => {\r\n    // keep a reference to the selection holder: the getSelectionCallback might deregister the selection holder!\r\n    const selectionHolderEntry = this.currentSelectionHolder;\r\n    if (selectionHolderEntry !== undefined) {\r\n      this.setClipboardContent(selectionHolderEntry.getSelectionCallback(false));\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'copy',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        true,\r\n        runtime\r\n      );\r\n      this.currentSelectionHolder = undefined;\r\n      this.currentInsertPosition = undefined;\r\n    } else {\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'copy',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        false,\r\n        runtime\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Could we perform a copy operation currently? \r\n   */\r\n  copyEnabled = () => this.currentSelectionHolder !== undefined\r\n\r\n\r\n  /**\r\n   * Do the paste operation: Tell the current insert position holder to put in the text in our clipboard buffer.\r\n   * \r\n   * If no insert position is registered currently or we do not have any content in the clipboard buffer yet\r\n   * the method will just write a trace log entry and skip the operation.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  paste = (triggeringType, indexPath, runtime) => {\r\n    // keep a reference to the input position: the insertCallback might deregister the input position!\r\n    const insertPositionEntry = this.currentInsertPosition;\r\n    if (this.currentInsertPosition !== undefined && this.clipboardContent !== undefined) {\r\n      this.currentInsertPosition.insertCallback(this.clipboardContent);\r\n      this.tracePaste(\r\n        triggeringType,\r\n        indexPath,\r\n        insertPositionEntry,\r\n        true,\r\n        runtime\r\n      );\r\n      this.currentSelectionHolder = undefined;\r\n      this.currentInsertPosition = undefined;\r\n    } else {\r\n      this.tracePaste(\r\n        triggeringType,\r\n        indexPath,\r\n        insertPositionEntry,\r\n        false,\r\n        runtime\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Could we perform a paste operation currently? \r\n   */\r\n  pasteEnabled = () => this.currentInsertPosition !== undefined && this.clipboardContent !== undefined\r\n\r\n  /**\r\n   * Register the currently active selection.\r\n   * \r\n   * @param {String} indexPath The index path of the display component instance carrying the currently active selection.\r\n   * @param {*} getSelectionCallback A method to obtain the currently selected text. \r\n   *    The method supports a boolean flag to drop the selected content in the source component. \r\n   * @param {*} isReadOnlyCallback A method to obtain the current read only status of the component instance. \r\n   */\r\n  registerSelection = (indexPath, getSelectionCallback, isReadOnlyCallback) => {\r\n    this.currentSelectionHolder = {\r\n      indexPath,\r\n      getSelectionCallback,\r\n      isReadOnlyCallback\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deregister a previously registered selection.\r\n   * \r\n   * @param indexPath The index path of the display component instance deregistering the selection.\r\n   */\r\n  deregisterSelection = (indexPath) => {\r\n    if (this.currentSelectionHolder !== undefined && this.currentSelectionHolder.indexPath === indexPath) {\r\n      this.currentSelectionHolder = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register the current paste insert position.\r\n   * \r\n   * The registering component should not be read-only, i.e. it should be possible to really insert content\r\n   * at the insert position.\r\n   * \r\n   * @param indexPath The index path of the display component instance carrying the current insert position.\r\n   * @param insertCallback A method to insert text at the insert position.\r\n   */\r\n  registerInsertPosition = (indexPath, insertCallback) => {\r\n    this.currentInsertPosition = {\r\n      indexPath,\r\n      insertCallback\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deregister a previously registered insert position.\r\n   * \r\n   * @param indexPath The index path of the display component instance deregistering the insert position.\r\n   */\r\n  deregisterInsertPosition = (indexPath) => {\r\n    if (this.currentInsertPosition !== undefined && this.currentInsertPosition.indexPath === indexPath) {\r\n      this.currentInsertPosition = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register that a component recieved the input focus. \r\n   * \r\n   * We will deregister any other component as selection or insert position provider.\r\n   */\r\n  registerFocus = (indexPath) => {\r\n    if (this.currentInsertPosition !== undefined && this.currentInsertPosition.indexPath !== indexPath) {\r\n      this.currentInsertPosition = undefined;\r\n    }\r\n    if (this.currentSelectionHolder !== undefined && this.currentSelectionHolder.indexPath !== indexPath) {\r\n      this.currentSelectionHolder = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a representation of our internal state that can be written to the trace log.\r\n   */\r\n  getStateForTracing = () => (\r\n    StateManagerHelper.deepCopy({\r\n      clipboardContent: this.clipboardContent,\r\n      selectionHolder: this.currentSelectionHolder === undefined ? undefined : {\r\n        indexPath: this.currentSelectionHolder.indexPath\r\n      },\r\n      insertPosition: this.currentInsertPosition === undefined ? undefined : {\r\n        indexPath: this.currentInsertPosition.indexPath\r\n      }\r\n    })\r\n  )\r\n\r\n  /**\r\n   * Get the full state. (Our state is not task specific.)\r\n   * \r\n   * The current selections for cut/copy and paste operations don't survive a state preload. \r\n   * The user will have to restart an interrupted cut/copy or paste command. \r\n   * But she may reuse the content put into the clipboard by a cut/copy operation before the interruption\r\n   * for a paste operation after the interruption.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.clipboardContent);\r\n\r\n  /**\r\n    * Drop all state (our state is not task specific).\r\n   */\r\n  clearTasksState = () => {\r\n    this.clipboardContent = undefined;\r\n    this.currentSelectionHolder = undefined;\r\n    this.currentInsertPosition = undefined;\r\n  };\r\n\r\n  /**\r\n    * Preload the tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.clipboardContent = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (state) => {\r\n    this.clipboardContent = state;\r\n  }\r\n\r\n  // private stuff ------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Change our clipboard content and trace a state change log entry.\r\n   */\r\n  setClipboardContent = (newContent) => {\r\n    this.clipboardContent = newContent;\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'ClipboardState',\r\n      {\r\n        state: newContent\r\n      },\r\n      this.traceLog\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a trace log entry for a cut or copy operation\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} operationType The operation type to trace: CUT, COPY\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance.\r\n   * @param {*} selectionHolderEntry The selection holder entry that was used to perform the operation. \r\n   * @param {boolean} wasPerformed A flag indicating whether the requested action was performed or denied.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  traceCutCopy = (triggeringType, operation, indexPath, selectionHolderEntry, wasPerformed, runtime) => {\r\n    this.trace(\r\n      triggeringType,\r\n      operation,\r\n      indexPath,\r\n      selectionHolderEntry === undefined ? undefined : selectionHolderEntry.indexPath,\r\n      wasPerformed ? this.clipboardContent : undefined,\r\n      wasPerformed,\r\n      runtime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a trace log entry for a cut or copy operation\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance.\r\n   * @param {*} insertPositionEntry The insert position entry that was used to perform the operation. \r\n   * @param {boolean} wasPerformed A flag indicating whether the requested action was performed or denied.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  tracePaste = (triggeringType, indexPath, insertPositionEntry, wasPerformed, runtime) => {\r\n    this.trace(\r\n      triggeringType,\r\n      'paste',\r\n      indexPath,\r\n      insertPositionEntry === undefined ? undefined : insertPositionEntry.indexPath,\r\n      wasPerformed ? this.clipboardContent : undefined,\r\n      wasPerformed,\r\n      runtime\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a trace log entry.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} operationType The operation type to trace: 'cut', 'copy', 'paste'\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance. Might be undefined (keyboard triggers).\r\n   * @param {String} contentDealerIndexPath The index path of the display component instance providing resp. accepting content.\r\n   * @param {String} content The content that was transferred\r\n   * @param {boolean} wasPerformed A flag indicating whether the requested action was performed or denied.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  trace = (triggeringType, operationType, triggeringIndexPath, contentDealerIndexPath, content, wasPerformed, runtime) => {\r\n    const triggerUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(triggeringIndexPath, runtime);\r\n    const contentUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(contentDealerIndexPath, runtime);\r\n    this.traceLog.reportEvent(\r\n      'CutCopyPaste',\r\n      new Date(),\r\n      {\r\n        triggerType: triggeringType,\r\n        triggerIndexPath: triggeringIndexPath,\r\n        triggerUserDefIdPath,\r\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggerUserDefIdPath),\r\n        operation: operationType,\r\n        contentIndexPath: contentDealerIndexPath,\r\n        contentUserDefIdPath,\r\n        contentUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(contentUserDefIdPath),\r\n        content,\r\n        isPerformed: wasPerformed\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","/**\r\n * Basic helper methods for string usage.\r\n */\r\nexport default class StringUtils {\r\n\r\n  /**\r\n   * This is a helper function that can be used to capitalize the first letter of the received argument. \r\n   * @param {*} word \r\n   */\r\n  static toFirstUpper(word) {\r\n    if (typeof word !== 'string') return ''\r\n    return word.charAt(0).toUpperCase() + word.slice(1)\r\n  }\r\n\r\n}\r\n","import axios from 'axios';\r\nimport moment from 'moment';\r\nimport { notify } from 'react-notify-toast';\r\nimport StringUtils from '../utils/StringUtils';\r\n\r\n/**\r\n * Manage the transfer of user session related result data (trace log, media recordings) to the server. \r\n * \r\n * This is a base implementation used by the two specific uploaders that we currently have: TraceLogUploader and RecordingUploader.\r\n * \r\n * We support transmission of user result data entries \r\n *  - via HTTP PUT calls or\r\n *  - window.postMessage events sent to the given target domain origin or\r\n *  - writing the user result data to the console.\r\n */\r\nexport default class UserDataUploader {\r\n\r\n  constructor(userDataBuffer, buildUserDataPostContentCallback, dataType) {\r\n    this.dataType = dataType;\r\n    this.userDataBuffer = userDataBuffer;\r\n    this.buildUserDataPostContentCallback = buildUserDataPostContentCallback;\r\n\r\n    this.userDataEntriesList = [];\r\n    this.lastSentFailCount = 0;\r\n    this.isMaxFailCountError = false;\r\n    this.notificationToaster = notify;\r\n\r\n    this.transmitterPromise = undefined;\r\n    this.transmitterPromiseIsResolved = false;\r\n\r\n    this.sessionContext = {};\r\n\r\n    this.transmissionChannel = 'console';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = undefined;\r\n\r\n    this.transmitInterval = undefined;\r\n    this.currentTimer = undefined;\r\n\r\n  }\r\n\r\n  // ------- public API -----------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Set the session context that we will use in the meta data of our transmissions to the server.\r\n   * \r\n   * The session context consists of \r\n   * - the session id\r\n   * - the user name\r\n   * - the timestamp of the user login\r\n   */\r\n  setSessionContext = (sessionId, username, loginTimestamp) => {\r\n    this.sessionContext = {\r\n      sessionId,\r\n      username,\r\n      loginTimestamp\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the session context that we use in the meta data of our transmissions to the server.\r\n   */\r\n  getSessionContext = () => this.sessionContext;\r\n\r\n  /**\r\n   * Start the scheduled automatic transmissions. \r\n   */\r\n  startAutomaticTransmissions = () => {\r\n    if (this.transmitInterval > 0) {\r\n      this.setNewTimer();\r\n    } else {\r\n      this.setImmediateCallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the scheduled automatic transmissions.\r\n   * \r\n   * We will run a final transmission after cancelling the scheduled one.\r\n   */\r\n  stopAutomaticTransmissions = () => {\r\n    this.stopOldTimer();\r\n    this.dropImmediateCallback();\r\n  }\r\n\r\n  /**\r\n   * Grab all userData entries from user data buffer and put them onto our internal list of entries to transmit.\r\n   * Start transmission of all entries on our internal list. \r\n   * \r\n   * The method will not start another transmission attempt if the maximum failures threshold is reached. \r\n   * The method triggers an asynchronous transmission: It returns immediately after initiating the transmission\r\n   * and will not wait for the transmission to be completed.\r\n   * \r\n   */\r\n  collectEntriesAndTriggerTransmission = () => {\r\n    if (this.transmitterPromise === undefined || this.transmitterPromiseIsResolved === true) {\r\n      this.transmitterPromiseIsResolved = false;\r\n      this.transmitterPromise = this.collectEntriesAndBuildTransmitPromise().then(() => { this.transmitterPromiseIsResolved = true; });\r\n    } else {\r\n      this.transmitterPromise = this.transmitterPromise.then(() => {\r\n        this.transmitterPromiseIsResolved = false;\r\n        return this.collectEntriesAndBuildTransmitPromise().then(() => { this.transmitterPromiseIsResolved = true; });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Grab all user data entries from user data buffer and put them onto our internal list of entries to transmit.\r\n   * Return a promise that transmits all entries on our internal list and clips the internal list accordingly. \r\n   * \r\n   * The method will return a resolved promise if the maximum failures threshold is reached or no user data entries are to be transmitted. \r\n   * \r\n   */\r\n  collectEntriesAndBuildTransmitPromise = () => {\r\n    const { notificationToaster } = this;\r\n\r\n    // Grab all user data entries from user data buffer and add them to our internal list of user data entries to be sent to the server.\r\n    this.addUserDataEntries(this.userDataBuffer.popEntries());\r\n\r\n    if (this.getUserDataEntriesList().length === 0) {\r\n      // No user data entries pending -> do nothing this time.\r\n      return Promise.resolve();\r\n    }\r\n\r\n    if (!this.shouldTryAgainToSend()) {\r\n      // Maximum number of failed transmission attempts reached -> Display error message if we did not do so already.\r\n\r\n      if (!this.isMaxFailCountErrorDisplayed()) {\r\n        const notifyErrorMsg = `Max tries of error send occurred on the ${this.getFailCount()}th time and will not try again.`;\r\n        console.log('postTrace: ', notifyErrorMsg);\r\n        this.setMaxFailCountErrorDisplayed();\r\n\r\n        // to not be overridden with earlier toasts, just delay for 3 seconds the output of the toast\r\n        setTimeout(() => {\r\n          try {\r\n            notificationToaster.show(notifyErrorMsg, 'error')\r\n          } catch (ex) {\r\n            console.warn(`Did not inform user about max transmission failures. This might happen when an error occurs before we have a task running.`)\r\n          }\r\n        }, 3000);\r\n      }\r\n      return Promise.resolve();\r\n    }\r\n\r\n    // Build message to transmit.\r\n    const userDataRequestBody = this.buildUserDataPostContentCallback(moment().format(), this.getSessionContext(), this.getUserDataEntriesList());\r\n    // Return a promise that transmits the messages and clips our pending entries list:\r\n    return this.getTransmittingPromise(userDataRequestBody).then((response) => {\r\n      this.updateUserDataEntriesListAfterSuccessfulSend(response.noOfEntriesTransmitted);\r\n    }, (error) => {\r\n      console.log(error)\r\n      this.increaseNextSentFailCount();\r\n      try {\r\n        notificationToaster.show(`Error sending ${this.dataType}s! Fail count:${this.getFailCount()}`, 'warning');\r\n      } catch (ex) {\r\n        console.warn(`Did not inform user about the previous transmission failure. This might happen when an error occurs before we have a task running.`)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set our transmission channel to 'postMessage'. \r\n   * \r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window)\r\n   * @param {String} domainUri The domain URI we should use as target origin to post messages to.\r\n   */\r\n  setPostMessageTransmissionChannel = (targetWindowType, domainUri, interval) => {\r\n    this.transmissionChannel = 'postMessage';\r\n    this.targetWindowType = targetWindowType;\r\n    this.domainUri = domainUri;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = undefined;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n  /**\r\n   * Set our transmission channel to 'callback'.\r\n   */\r\n  setCallbackTransmissionChannel = (transmitCallback, interval) => {\r\n    this.transmissionChannel = 'callback';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = transmitCallback;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n\r\n  /**\r\n   * Set our transmission channel to 'console'.\r\n   */\r\n  setConsoleTransmissionChannel = (interval) => {\r\n    this.transmissionChannel = 'console';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = undefined;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n  /**\r\n   * Set our transmission channel to 'http'. \r\n   * \r\n   * @param {*} transmitUrl The target URL to put user data entries to.\r\n   */\r\n  setHttpTransmissionChannel = (transmitUrl, interval, httpTimeout) => {\r\n    this.transmissionChannel = 'http';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n\r\n    this.axiosInstance = axios.create({\r\n      baseURL: transmitUrl,\r\n      timeout: httpTimeout === undefined ? 30000 : httpTimeout,\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    });\r\n\r\n    this.transmitCallback = undefined;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n\r\n  /**\r\n   * Set a non-standard notification toaster mechanism. \r\n   * \r\n   * This is useful for testing without a GUI where the standard notify toaster is not available. \r\n   * The given toaster must provide a method show(messageString, levelString)\r\n   * \r\n   * @param {*} toaster A callback that we use to send notifications to the user. \r\n   */\r\n  setNotificationToaster = (toaster) => {\r\n    this.notificationToaster = toaster;\r\n  }\r\n\r\n  // ------- private stuff --------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Reset our maximum failure count to 0. \r\n   * \r\n   * This is used when a new transmission configuration is established since \r\n   * the new configuration might solve the underlying problem.\r\n   */\r\n  resetMaxFailCount = () => {\r\n    this.isMaxFailCountError = false;\r\n    this.lastSentFailCount = 0;\r\n  }\r\n\r\n  /**\r\n   * Set our transmit interval. \r\n   * \r\n   * If necessary we stop and restart our automatic transmissions to take a new transmit interval into account.\r\n   */\r\n  setTransmitInterval = (newTransmitInterval) => {\r\n    if (newTransmitInterval !== this.transmitInterval) {\r\n      this.stopOldTimer();\r\n      this.dropImmediateCallback();\r\n      this.transmitInterval = newTransmitInterval;\r\n      if (this.transmitInterval > 0) {\r\n        this.setNewTimer();\r\n      } else {\r\n        this.setImmediateCallback();\r\n      }\r\n    }\r\n  }\r\n\r\n  setImmediateCallback = () => {\r\n    this.userDataBuffer.setNewEntryListener(this.collectEntriesAndTriggerTransmission);\r\n  }\r\n\r\n  dropImmediateCallback = () => {\r\n    if (this.traceLogBuffer !== undefined) {\r\n      this.traceLogBuffer.setNewEntryListener(undefined);\r\n    }\r\n  }\r\n\r\n  stopOldTimer = () => {\r\n    if (this.currentTimer !== undefined) {\r\n      clearInterval(this.currentTimer);\r\n      this.currentTimer = undefined;\r\n      this.collectEntriesAndTriggerTransmission();\r\n    }\r\n  }\r\n\r\n  setNewTimer = () => {\r\n    this.stopOldTimer();\r\n    this.currentTimer = setInterval(() => this.collectEntriesAndTriggerTransmission(), this.transmitInterval);\r\n  }\r\n\r\n  /**\r\n   *  Increase the transmission failures counter.\r\n   */\r\n  increaseNextSentFailCount = () => {\r\n    this.lastSentFailCount += 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of failed transmission attempts.\r\n   */\r\n  getFailCount = () => this.lastSentFailCount;\r\n\r\n\r\n  isMaxFailCountErrorDisplayed = () => this.isMaxFailCountError;\r\n\r\n\r\n  setMaxFailCountErrorDisplayed = () => {\r\n    this.isMaxFailCountError = true;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the number of failed transmission attempts has not yet reached our threshold.\r\n   */\r\n  shouldTryAgainToSend = () => this.getFailCount() < 10;\r\n\r\n  /**\r\n   * Retuns our internal list of user data entries to be sent to the server.\r\n   */\r\n  getUserDataEntriesList = () => this.userDataEntriesList;\r\n\r\n  /**\r\n   * Add the given user data entries to our internal list of entries to be sent to the server.\r\n   */\r\n  addUserDataEntries = (newUserDataEntries) => {\r\n    if (newUserDataEntries.length > 0) {\r\n      this.userDataEntriesList = this.userDataEntriesList.concat(newUserDataEntries);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update our internal structures after a successful transmission of data to the server:\r\n   * \r\n   * Remove the transmitted user data entries from our internal entries list.\r\n   * Reset the last failure count to zero.\r\n   * \r\n   * @param noOfTransmittedEntries The number of entries that were transmitted by the successful transmission.\r\n   */\r\n  updateUserDataEntriesListAfterSuccessfulSend = (noOfTransmittedEntries) => {\r\n    this.userDataEntriesList = this.userDataEntriesList.filter((data, index) => index > noOfTransmittedEntries);\r\n    this.lastSentFailCount = 0;\r\n  }\r\n\r\n  /**\r\n   * Get the appropriate Promise to transmit our user data data.\r\n   */\r\n  getTransmittingPromise = (dataToTransmit) => {\r\n    switch (this.transmissionChannel) {\r\n      case 'postMessage':\r\n        return UserDataUploader.transmitViaPostMessage(dataToTransmit, this.targetWindowType, this.domainUri, this);\r\n      case 'callback':\r\n        return UserDataUploader.transmitViaCallback(dataToTransmit, this.transmitCallback, this);\r\n      case 'console':\r\n        return UserDataUploader.transmitViaConsole(dataToTransmit, this);\r\n      case 'http':\r\n        return UserDataUploader.transmitViaHttp(dataToTransmit, this.axiosInstance, this)\r\n      default:\r\n        return UserDataUploader.transmitViaConsole(dataToTransmit, this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket via a postMessage event.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToTransmit The bucket of user data entries with wrapping meta data ready to be sent to the server.\r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window, useful for testing only)\r\n   * @param {String} targetOriginUri The domain URI we should use as target origin to post messages to.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaPostMessage(dataToTransmit, targetWindowType, targetOriginUri, uploaderInstance) {\r\n    return new Promise((resolve, reject) => {\r\n      const messageToSend = {\r\n        eventType: `${uploaderInstance.dataType}Transmission`,\r\n        [`${uploaderInstance.dataType}Data`]: dataToTransmit\r\n      }\r\n      const targetWindow = UserDataUploader.getTargetWindow(targetWindowType)\r\n      if (targetWindow === undefined) {\r\n        console.error(`Cannot find target window for target window type ${targetWindowType}`);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s via post message.`);\r\n      }\r\n      try {\r\n        targetWindow.postMessage(JSON.stringify(messageToSend), targetOriginUri);\r\n        resolve({\r\n          noOfEntriesTransmitted: dataToTransmit[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`].length\r\n        });\r\n      } catch (e) {\r\n        console.error(`Cannot deliver ${uploaderInstance.dataType}s via postMessage`, e);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s via post message.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the target window specified by the given target window type.\r\n   * \r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window, useful for testing only)\r\n   */\r\n  static getTargetWindow(targetWindowType) {\r\n    switch (targetWindowType) {\r\n      case 'parent':\r\n        return window.parent;\r\n      case 'opener':\r\n        return window.opener;\r\n      case 'self':\r\n        return window;\r\n      default:\r\n        console.error('Unknown target window type!')\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket via the externally given transmission callback.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToTransmit The bucket of user data entries with wrapping meta data ready to be sent to the callback.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaCallback(dataToTransmit, transmitCallback, uploaderInstance) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        transmitCallback(dataToTransmit);\r\n      } catch (e) {\r\n        console.error(`Cannot deliver ${uploaderInstance.dataType}s via callback`, e);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s via callback`);\r\n      }\r\n      resolve({\r\n        noOfEntriesTransmitted: dataToTransmit[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`].length\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n  static getDataType = dataType => (dataType === \"recording\" ? dataType : \"log\")\r\n\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket via a HTTP POST request.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToTransmit The bucket of user data entries with wrapping meta data ready to be sent to the server.\r\n   * @param {*} axiosInstance The instance of the axios transmission library to put the user data entries to.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaHttp(dataToTransmit, axiosInstance, uploaderInstance) {\r\n    const nbOfEntriesInTransmission = dataToTransmit[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`].length;\r\n    return axiosInstance.post('', dataToTransmit)\r\n      .then(response => (\r\n        {\r\n          noOfEntriesTransmitted: nbOfEntriesInTransmission\r\n        }\r\n      ))\r\n      .catch((error) => {\r\n        if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          // that falls out of the range of 2xx\r\n          console.error(error.response.status, `Error: Cannot deliver ${uploaderInstance.dataType}s to URL ${error.response.config.url}`);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n          // http.ClientRequest in node.js\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          console.log('Error', error.message);\r\n        }\r\n        console.log(error.config);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s to server.`);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket to the console.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToLog The bucket of user data entries with wrapping meta data ready to be user dataged to the console.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaConsole(dataToLog, uploaderInstance) {\r\n    const entriesList = dataToLog[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`]\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const capitalizedDataType = StringUtils.toFirstUpper(uploaderInstance.dataType);\r\n        // force the browser to not show a 'live' view of the data in the console -> JSON.parse(JSON.stringify(...))\r\n        // (see https://developer.mozilla.org/en-US/docs/Web/API/console/log, chapter 'Logging objects')\r\n        console.log(`${capitalizedDataType} message sent to console: `, JSON.parse(JSON.stringify(dataToLog)));\r\n      } catch (e) {\r\n        console.error(`Cannot deliver ${uploaderInstance.dataType}s to console`, e);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s to console`);\r\n      }\r\n      resolve({\r\n        noOfEntriesTransmitted: entriesList.length\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import Utils from '../utils/Utils';\r\nimport UserDataUploader from './UserDataUploader';\r\n\r\n/**\r\n * Manage the transfer of the trace log to the server. \r\n * \r\n * We support transmission of the trace log entries \r\n *  - via HTTP PUT calls or\r\n *  - window.postMessage events sent to the given target domain origin or\r\n *  - writing the trace logs to the console.\r\n */\r\nexport default class TraceLogUploader extends UserDataUploader {\r\n\r\n  constructor(traceLogBuffer) {\r\n    super(traceLogBuffer, TraceLogUploader.buildTracePostContent, \"traceLog\")\r\n    this.transmitInterval = 20000;\r\n  }\r\n\r\n  // ------- public API -----------------------------------------------------------------------------\r\n\r\n  // See the base class UserDataUploader for our public API.\r\n\r\n  // ------- private stuff --------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build the content of a trace transmission to the server. \r\n   * \r\n   * This consists of a meta data structure and the list of log entries to transmit.\r\n   * We take the list of log entries from our internal log entries list but\r\n   * we do not drop the entries from this list yet.\r\n   * \r\n   * @param {String} sendTimestamp The time of send operation.\r\n   * @param {*} runtime \r\n   */\r\n  static buildTracePostContent = (sendTimestamp, sessionContext, logEntriesList) => {\r\n    const { sessionId, username, loginTimestamp } = sessionContext;\r\n    if (sessionId === undefined) {\r\n      console.warn(\"Sending trace log with dummy session id!\");\r\n    }\r\n    const metaData = {\r\n      userId: username,\r\n      sessionId: sessionId === undefined ? 'dummySessionId' : sessionId,\r\n      loginTimestamp,\r\n      sendTimestamp,\r\n      cbaVers: Utils.getCbaVersion()\r\n    };\r\n\r\n    const tracePostContent = {\r\n      metaData,\r\n      logEntriesList\r\n    };\r\n\r\n    return tracePostContent;\r\n  }\r\n\r\n}\r\n","import UrlLib from 'url';\r\nimport Utils from '../utils/Utils';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\n\r\n\r\n/**\r\n * Receive Windows.postMessage() events.\r\n */\r\nexport default class PostMessageReceiver {\r\n\r\n  constructor() {\r\n    this.acceptedExternalPageFrameUrlsList = [];\r\n    this.defaultAcceptedUrl = undefined;\r\n\r\n    this.availableTaskSwitches = [];\r\n\r\n    // Access point for test code to intercept the response event sending:\r\n    this.responder = (eventToSend, triggeringEventOrigin, triggeringEventSourceWindow) => {\r\n      try {\r\n        const messageString = JSON.stringify(eventToSend);\r\n        const eventOrigin = (triggeringEventOrigin === undefined || triggeringEventOrigin == null || triggeringEventOrigin.length === 0 || triggeringEventOrigin === 'null') ? '*' : triggeringEventOrigin;\r\n        triggeringEventSourceWindow.postMessage(messageString, eventOrigin);\r\n      } catch (error) {\r\n        console.error('Sending a response message failed.', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ---------- public API ---------------------------------------\r\n\r\n\r\n  /**\r\n   * Register a URL as source of events from external JavaScript code involved via an external page frame component.\r\n   * \r\n   * We don't accept runtime control events (i.e. events that are part of the task player API) from these registered URLs.\r\n   */\r\n  registerAcceptableUrlForExternalPageFrameEvent = (url) => {\r\n\r\n    // trim to the http(s)://<host>:<port> part:\r\n    const parsedUrl = PostMessageReceiver.tryToParseURL(url);\r\n    if (parsedUrl === undefined) {\r\n      console.log(`We don't accept invalid URLs as source URLs for post message events.  Ignored URL is: ${url}`);\r\n      return;\r\n    }\r\n    const { origin } = parsedUrl;\r\n\r\n    if (origin === undefined || origin.length < 1) {\r\n      console.log(`We only accept http(s) protocols as source URLs for post message events.  Ignored URL is: ${url}`);\r\n      return;\r\n    }\r\n\r\n    if (!this.acceptedExternalPageFrameUrlsList.includes(origin)) {\r\n      this.acceptedExternalPageFrameUrlsList.push(origin);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Start to receive events.\r\n   * \r\n   * @param runtime The global runtime context structure.\r\n   */\r\n  startReceiving = (runtime, taskPlayer) => {\r\n    if (runtime === undefined) {\r\n      console.error('Cannot start receiving events without a runtime context.')\r\n      return;\r\n    }\r\n    if (taskPlayer === undefined) {\r\n      console.error('Cannot start receiving events without a task player reference.')\r\n      return;\r\n    }\r\n    this.runtime = runtime;\r\n    this.taskPlayer = taskPlayer;\r\n    const href = Utils.getCallingUrlWithoutPath();\r\n    this.defaultAcceptedUrl = (href === 'file:' || href === 'atom:') ? 'null' : href;\r\n    this.acceptedExternalPageFrameUrlsList.push(this.defaultAcceptedUrl);\r\n    window.addEventListener('message', this.receiveEvent, false);\r\n  }\r\n\r\n  /**\r\n   * Send the 'task player is ready' message to the given window using the given target origin URI.\r\n   */\r\n  sendTaskPlayerReadyEvent = (domainUri, windowType) => {\r\n    PostMessageReceiver.sendResponseEvent(\r\n      {\r\n        eventType: 'taskPlayerReady'\r\n      },\r\n      domainUri,\r\n      this.getTargetWindow(windowType),\r\n      this.responder\r\n    );\r\n  }\r\n\r\n  // ---------- private stuff ---------------------------------------\r\n\r\n  static tryToParseURL(url) {\r\n    try {\r\n      const parsedUrl = new URL(url);\r\n      return parsedUrl;\r\n    } catch (ex) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Process an icoming event.\r\n   */\r\n  receiveEvent = (event) => {\r\n    const { origin, source, data: dataInEvent } = event;\r\n\r\n    // check event origin\r\n    if (this.defaultAcceptedUrl !== origin && !this.acceptedExternalPageFrameUrlsList.includes(origin)) {\r\n      console.log(`PostMessageReceiver ignored event from origin ${origin}, our default accepted url is ${this.defaultAcceptedUrl}, additional accepted URLs:`, this.acceptedExternalPageFrameUrlsList);\r\n      return;\r\n    }\r\n\r\n    const data = PostMessageReceiver.tryJsonParse(dataInEvent);\r\n    if (data === undefined) {\r\n      console.log(`PostMessageReceiver ignored event with non-JSON data: ${dataInEvent}`);\r\n      return;\r\n    }\r\n\r\n    const eventTime = new Date();\r\n\r\n    // chain of event processors starts here: \r\n    let eventProcessed = false;\r\n    if (!eventProcessed) {\r\n      eventProcessed = this.processRuntimeControlEvent(origin, source, data);\r\n    }\r\n    if (!eventProcessed) {\r\n      eventProcessed = this.processIfExternalPageFrameEvent(eventTime, origin, source, data);\r\n    }\r\n    if (!eventProcessed) {\r\n      console.log(`PostMessageReceiver ignored unknown event with data: ${dataInEvent}`);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Try to parse the given string as JSON object. \r\n   * \r\n   * The method silently returns undefined if parsing fails.\r\n   * @param {String} data \r\n   */\r\n  static tryJsonParse(data) {\r\n    try {\r\n      return JSON.parse(data);\r\n    } catch (e) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Try to process the event as event coming from code in an external page frame. \r\n   * \r\n   * The method silently ignores the event if it does \r\n   * neither contain trace log data nor state machine event nor variable get/set data.\r\n   * \r\n   * @param {Date} eventTime The time the event is processed.\r\n   * @param {String} origin The event origin.\r\n   * @param {*} source The window the event came from.\r\n   * @param {*} data The data contained in the event.\r\n   * @return True if the event was processed, false otherwise.\r\n   */\r\n  processIfExternalPageFrameEvent = (eventTime, origin, source, data) => {\r\n\r\n    // check event origin\r\n    if (!this.acceptedExternalPageFrameUrlsList.includes(origin)) {\r\n      return false;\r\n    }\r\n\r\n    const { traceMessage, traceType, microfinEvent, microfinVariable, setVariable, getVariable, indexPath, userDefIdPath } = data;\r\n    const { taskManager, variableManager } = this.runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    if (PostMessageReceiver.isEmptyOrNoValue(traceMessage)\r\n      && PostMessageReceiver.isEmptyOrNoValue(microfinEvent)\r\n      && PostMessageReceiver.isEmptyOrNoValue(microfinVariable)\r\n      && PostMessageReceiver.isNoValue(setVariable)\r\n      && PostMessageReceiver.isEmptyOrNoValue(getVariable)) {\r\n      return false;\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(traceMessage)) {\r\n      const safeIndexPath = PostMessageReceiver.isEmptyOrNoValue(indexPath) ? undefined : indexPath;\r\n      const safeUserDefIdPath = PostMessageReceiver.isEmptyOrNoValue(userDefIdPath) ? undefined : userDefIdPath;\r\n      // create an entry in the trace log\r\n      this.runtime.traceLogBuffer.reportEvent('JavaScriptInjected', eventTime, {\r\n        indexPath: safeIndexPath,\r\n        userDefIdPath: safeUserDefIdPath,\r\n        userDefId: safeUserDefIdPath === undefined ? undefined : UserDefPathHelper.getLastUserDefIdFromPath(safeUserDefIdPath),\r\n        origin,\r\n        message: traceMessage,\r\n        type: traceType\r\n      })\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(microfinVariable)) {\r\n      const { variableName, newValue } = microfinVariable;\r\n      if (!PostMessageReceiver.isEmptyOrNoValue(variableName) && !PostMessageReceiver.isEmptyOrNoValue(newValue)) {\r\n        variableManager.setVariable(currentTaskId, variableName, newValue, undefined, this.runtime);\r\n      }\r\n    }\r\n\r\n    if (!PostMessageReceiver.isNoValue(setVariable)) {\r\n      const { variableName, newValue, newType } = setVariable;\r\n      if (!PostMessageReceiver.isEmptyOrNoValue(variableName) && !PostMessageReceiver.isNoValue(newValue)) {\r\n        variableManager.setVariable(currentTaskId, variableName, newValue, newType, this.runtime);\r\n      }\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(microfinEvent)) {\r\n      this.runtime.statemachinesManager.triggerEvent(microfinEvent);\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(getVariable)) {\r\n      const { variableName, callId } = getVariable;\r\n      if (!PostMessageReceiver.isEmptyOrNoValue(variableName) && !PostMessageReceiver.isEmptyOrNoValue(callId)) {\r\n\r\n        // obtain variable value\r\n        const result = variableManager.getVariable(currentTaskId, variableName, true);\r\n\r\n        const messagePayload = {\r\n          result,\r\n          callId\r\n        }\r\n\r\n        // send back result via acceptor method\r\n        if (source !== undefined) {\r\n          try {\r\n            source.postMessage(JSON.stringify(messagePayload), origin)\r\n          } catch (e) {\r\n            console.error(`Cannot send variable value result,`, e);\r\n            throw new Error(`Cannot send variable value result.`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // signal user interactions\r\n    for (let index = 0; index < PostMessageReceiver.getUserInteractionCount(data); index += 1) {\r\n      this.runtime.incidentsAccumulator.userInteraction(eventTime, undefined, this.runtime);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check whether a parameter coming in from external JavaScript code\r\n   * does not contain a 'substantial' value, i.e. \r\n   *  - it is undefined or\r\n   *  - it is null or\r\n   *  - it is empty\r\n   * @param {*} value \r\n   */\r\n  static isEmptyOrNoValue(value) {\r\n    return value === undefined || value === null || value === '';\r\n  }\r\n\r\n  /**\r\n   * Check whether a parameter coming in from external JavaScript code\r\n   * does not contain any value, i.e. \r\n   *  - it is undefined or\r\n   *  - it is null \r\n   * @param {*} value \r\n   */\r\n  static isNoValue(value) {\r\n    return value === undefined || value === null;\r\n  }\r\n\r\n  /**\r\n   * Process an arriving message setting the \r\n   * availability of a task switch. \r\n   * \r\n   * @param {*} data The data contained in the availability setting event.\r\n   */\r\n  processAvailabilityMessage = (data) => {\r\n    const oldEntry = this.availableTaskSwitches.find(entry => (\r\n      entry.request === data.request\r\n      && entry.scope === data.scope\r\n      && entry.item === data.item\r\n      && entry.task === data.task));\r\n    if (oldEntry === undefined) {\r\n      this.availableTaskSwitches.push({\r\n        request: data.request,\r\n        scope: data.scope,\r\n        item: data.item,\r\n        task: data.task,\r\n        value: data.value\r\n      })\r\n    } else {\r\n      oldEntry.value = data.value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is the requested task switch available currently?\r\n   * \r\n   * We do a lookup in our availability map. If there is \r\n   * not entry for the given request we return false as default.\r\n   */\r\n  isTaskSwitchAvailable = (request, scope, item, task) => {\r\n    const existingEntry = this.availableTaskSwitches.find(entry => (\r\n      entry.request === request\r\n      && entry.scope === scope\r\n      && entry.item === item\r\n      && entry.task === task));\r\n    return existingEntry === undefined ? false : existingEntry.value;\r\n  }\r\n\r\n  /**\r\n   * Try to process the event as event coming from some runtime controller. \r\n   * \r\n   * The method silently ignores the event if \r\n   *  - the data does not contain the eventType field.\r\n   *  - the event origin is not our defaultAcceptedUrl.\r\n   * \r\n   * @param {String} origin The event origin.\r\n   * @param {*} sourceWindow The source window where the event came from.\r\n   * @param {*} data The data contained in the event.\r\n   * @return True if the event was processed, false otherwise.\r\n   */\r\n  processRuntimeControlEvent = (origin, sourceWindow, data) => {\r\n    const { runtime } = this;\r\n\r\n    // check event origin\r\n    if (this.defaultAcceptedUrl !== origin) {\r\n      return false;\r\n    }\r\n\r\n    if (data.eventType === undefined) {\r\n      return false;\r\n    }\r\n\r\n    switch (data.eventType) {\r\n      // ---- Initialization ---------------------------------------------\r\n      case 'taskPlayerReady':\r\n        // ignore my own initialization done event (happens when running together with controller in one window)\r\n        console.info('Task player ready (outgoing event) ignored.');\r\n        break;\r\n      // ---- Configuration Control ---------------------------------------------\r\n      case 'setWaitMessages':\r\n        this.taskPlayer.setWaitMessages(data.primary, data.secondary);\r\n        break;\r\n      case 'addItem':\r\n        this.taskPlayer.addItem(data.itemConfig, data.resourcePath, data.externalResourcePath, data.libraryPathsMap);\r\n        break;\r\n      case 'clearItems':\r\n        this.taskPlayer.clearItems();\r\n        break;\r\n      case 'setScalingConfiguration':\r\n        this.taskPlayer.setScalingConfiguration({\r\n          scalingMode: data.scalingMode, alignmentHorizontal: data.alignmentHorizontal, alignmentVertical: data.alignmentVertical\r\n        });\r\n        break;\r\n      case 'setPreload':\r\n        {\r\n          const preloadPromise = this.taskPlayer.setPreload(data.itemName);\r\n          if (preloadPromise !== undefined) {\r\n            preloadPromise.then((resources) => {\r\n              PostMessageReceiver.sendResponseEvent(\r\n                {\r\n                  eventType: 'setPreloadReturn',\r\n                  requestId: data.requestId,\r\n                  isSuccess: true,\r\n                  message: {\r\n                    images: resources[0],\r\n                    videos: resources[1],\r\n                    audios: resources[2]\r\n                  }\r\n                },\r\n                origin,\r\n                sourceWindow,\r\n                this.responder\r\n              );\r\n            }, (error) => {\r\n              PostMessageReceiver.sendResponseEvent(\r\n                {\r\n                  eventType: 'setPreloadReturn',\r\n                  requestId: data.requestId,\r\n                  isSuccess: false,\r\n                  message: error\r\n                },\r\n                origin,\r\n                sourceWindow,\r\n                this.responder\r\n              );\r\n            });\r\n          }\r\n        }\r\n        break;\r\n      case 'setPreloadReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for setPreload request (outgoing event) ignored.');\r\n        break;\r\n      // ---- Trace Control ---------------------------------------------\r\n      case 'insertMessageInTrace':\r\n        this.taskPlayer.insertMessageInTrace(data.message);\r\n        break;\r\n      case 'logStateToTrace':\r\n        this.taskPlayer.logStateToTrace();\r\n        break;\r\n      case 'flushTrace':\r\n        this.taskPlayer.flushTrace();\r\n        break;\r\n      case 'setTraceLogTransmissionChannel':\r\n        if (data.channel === 'http') {\r\n          runtime.traceLogUploader.setHttpTransmissionChannel(data.transmitUrl, data.interval, data.httpTimeout);\r\n        } else if (data.channel === 'postMessage') {\r\n          if (PostMessageReceiver.isValidTargetOrigin(data.targetOrigin)) {\r\n            runtime.traceLogUploader.setPostMessageTransmissionChannel(data.targetWindowType, data.targetOrigin, data.interval);\r\n          } else {\r\n            console.warn(`Trace log channel configuration with invalid target origin setting ignored: ${data.targetOrigin}`);\r\n          }\r\n        } else if (data.channel === 'console') {\r\n          runtime.traceLogUploader.setConsoleTransmissionChannel(data.interval);\r\n        } else {\r\n          console.error(`Invalid trace log channel setting ignored: ${data.channel}`);\r\n        }\r\n        break;\r\n      case 'traceLogTransmission':\r\n        // this is a trace log event not meant for us -> ignore.\r\n        console.info('Trace log event echo (outgoing event) ignored.');\r\n        break;\r\n      case 'setTraceContextId':\r\n        this.taskPlayer.setTraceContextId(data.contextId);\r\n        break;\r\n      case 'setTraceContentFilter':\r\n        this.taskPlayer.setTraceContentFilter(data.replaySupport, data.withExtendedMetaData, data.withoutItemConfiguration, data.withoutSnapshot, data.withoutScoring);\r\n        break;\r\n        // ---- Recordings Control -------------------------------------\r\n      case 'setRecordingTransmissionChannel':\r\n        if (data.channel === 'http') {\r\n          runtime.recordingUploader.setHttpTransmissionChannel(data.transmitUrl, undefined, data.httpTimeout);\r\n        } else if (data.channel === 'postMessage') {\r\n          if (PostMessageReceiver.isValidTargetOrigin(data.targetOrigin)) {\r\n            runtime.recordingUploader.setPostMessageTransmissionChannel(data.targetWindowType, data.targetOrigin, undefined);\r\n          } else {\r\n            console.warn(`Recording channel configuration with invalid target origin setting ignored: ${data.targetOrigin}`);\r\n          }\r\n        } else if (data.channel === 'console') {\r\n          runtime.recordingUploader.setConsoleTransmissionChannel(undefined);\r\n        } else {\r\n          console.error(`Invalid trace log channel setting ignored: ${data.channel}`);\r\n        }\r\n        break;\r\n      case 'recordingTransmission':\r\n        // this is a recording transmission event not meant for us -> ignore.\r\n        console.info('Recording transmission event echo (outgoing event) ignored.');\r\n        break;\r\n      case 'setRecordingContextId':\r\n        this.taskPlayer.setRecordingContextId(data.contextId);\r\n        break;\r\n      // ---- User Control ---------------------------------------------\r\n      case 'setUserId':\r\n        this.taskPlayer.setUserId(data.id);\r\n        break;\r\n      case 'logout':\r\n        this.taskPlayer.logout();\r\n        break;\r\n      case 'getUserId':\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getUserIdReturn',\r\n            requestId: data.requestId,\r\n            id: this.taskPlayer.getUserId()\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      case 'getUserIdReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getUserId request (outgoing event) ignored.');\r\n        break;\r\n      case 'showLogin':\r\n        this.taskPlayer.showLogin(\r\n          data.titleLabel,\r\n          data.fieldLabel,\r\n          data.buttonLabel,\r\n          (fieldValue) => {\r\n            PostMessageReceiver.sendResponseEvent(\r\n              {\r\n                eventType: 'loginDialogClosed',\r\n                requestId: data.requestId,\r\n                fieldValue\r\n              },\r\n              origin,\r\n              sourceWindow,\r\n              this.responder\r\n            )\r\n          }\r\n        );\r\n        break;\r\n      case 'loginDialogClosed':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for showLogin request (outgoing event) ignored.');\r\n        break;\r\n        // ---- Task Control ---------------------------------------------\r\n      case 'startTask':\r\n        this.taskPlayer.startTask(data.scope, data.item, data.task);\r\n        break;\r\n      case 'stopTask':\r\n        this.taskPlayer.stopTask();\r\n        break;\r\n      case 'pauseTask':\r\n        this.taskPlayer.pauseTask();\r\n        break;\r\n      case 'resumeTask':\r\n        this.taskPlayer.resumeTask();\r\n        break;\r\n      case 'getTask': {\r\n        const taskInfo = this.taskPlayer.getTask();\r\n        const { scope, item, task } = (taskInfo === undefined ? {} : taskInfo);\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getTaskReturn',\r\n            requestId: data.requestId,\r\n            scope,\r\n            item,\r\n            task\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      }\r\n      case 'getTaskReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getTask request (outgoing event) ignored.');\r\n        break;\r\n      case 'setTaskSequencer': {\r\n        const responderFunction = this.responder;\r\n        const targetWindow = this.getTargetWindow(data.targetWindowType);\r\n        if (!PostMessageReceiver.isValidTargetOrigin(data.targetOrigin)) {\r\n          console.warn(`Task sequencer configuration with invalid target origin ignored: ${data.targetOrigin}`);\r\n        } else {\r\n          this.taskPlayer.setTaskSequencer(\r\n            (request, scope, item, task) => {\r\n              PostMessageReceiver.sendResponseEvent(\r\n                {\r\n                  eventType: 'taskSwitchRequest',\r\n                  request,\r\n                  scope,\r\n                  item,\r\n                  task\r\n                },\r\n                data.targetOrigin,\r\n                targetWindow,\r\n                responderFunction\r\n              );\r\n            },\r\n            (request, scope, item, task) => this.isTaskSwitchAvailable(request, scope, item, task)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case 'taskSwitchRequest':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Task switch request (outgoing event) ignored.');\r\n        break;\r\n      case 'setSwitchAvailability':\r\n        this.processAvailabilityMessage(data);\r\n        break;\r\n      // ---- Task State Control ---------------------------------------------\r\n      case 'getTasksState':\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getTasksStateReturn',\r\n            requestId: data.requestId,\r\n            userId: this.taskPlayer.getUserId(),\r\n            state: this.taskPlayer.getTasksState()\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      case 'getTasksStateReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getTasksState request (outgoing event) ignored.');\r\n        break;\r\n      case 'clearTasksState':\r\n        this.taskPlayer.clearTasksState();\r\n        break;\r\n      case 'preloadTasksState':\r\n        this.taskPlayer.preloadTasksState(data.state);\r\n        break;\r\n      case 'replay':\r\n        this.taskPlayer.replay(data.story);\r\n        break;\r\n        // ---- Scoring Control -------------------------------------------------\r\n      case 'getScoringResult': {\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getScoringResultReturn',\r\n            requestId: data.requestId,\r\n            result: this.taskPlayer.getScoringResult(),\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      }\r\n      case 'getScoringResultReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getScoringResult request (outgoing event) ignored.');\r\n        break;\r\n      case 'getOldScoringResult': {\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getOldScoringResultReturn',\r\n            requestId: data.requestId,\r\n            result: this.taskPlayer.getOldScoringResult(data.scope, data.item, data.task),\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      }\r\n      case 'getOldScoringResultReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getOldScoringResult request (outgoing event) ignored.');\r\n        break;\r\n      // ---- Statemachine Control ---------------------------------------------\r\n      case 'sendStatemachineEvent':\r\n        this.taskPlayer.sendStatemachineEvent(data.event);\r\n        break;\r\n      // ---- Header Control ---------------------------------------------\r\n      case 'setHeaderButtons':\r\n        this.taskPlayer.setHeaderButtons(data.headerButtons);\r\n        break;\r\n      case 'setMenuCarousels':\r\n        this.taskPlayer.setMenuCarousels(data.course, data.scopes);\r\n        break;\r\n      // ---- Developer Mode Control ---------------------------------------------\r\n      case 'activateDebuggingWindows':\r\n        this.taskPlayer.activateDebuggingWindows(data.scoreHotKey, data.traceHotKey, data.statemachineHotKey);\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  static sendResponseEvent(eventToSend, triggeringEventOrigin, triggeringEventSourceWindow, responder) {\r\n    responder(eventToSend, triggeringEventOrigin, triggeringEventSourceWindow);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the posting window specified by the given target window type.\r\n   * \r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window, useful for testing only)\r\n   */\r\n  getTargetWindow = (targetWindowType) => {\r\n    switch (targetWindowType) {\r\n      case 'parent':\r\n        return window.parent;\r\n      case 'opener':\r\n        return window.opener;\r\n      case 'self':\r\n        return window;\r\n      default:\r\n        console.error(`Unknown target window type ${targetWindowType}`)\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the number of user interactions to signal for this event. \r\n   * \r\n   * The method return 0 if it cannot detect a valid trace count in the event data.\r\n   * \r\n   * @param {*} data The data contained in the event.\r\n   */\r\n  static getUserInteractionCount(data) {\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(data.traceCount) && data.traceCount >= 0) {\r\n      return data.traceCount;\r\n    }\r\n    console.warn(`Invalid traceCount in external page frame event ignored: ${data.traceCount}`);\r\n    return 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * Check whether the given string is a valid target origin for postMessage calls.\r\n   */\r\n  static isValidTargetOrigin(originAsString) {\r\n\r\n    if (originAsString === '*') return true;\r\n\r\n    try {\r\n      const parsedUrl = UrlLib.parse(originAsString);\r\n      return originAsString === `${parsedUrl.protocol}//${parsedUrl.host}`;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n}\r\n","export default class EvaluatorHelper {\n\n  static ANGLE_DEGREE = \"Degree\";\n\n  static ANGLE_RADIAN = \"Radian\";\n\n  static fak = (n) => {\n    if (n < 0 || n > 170) {\n      return NaN;\n    } else if (!EvaluatorHelper.isInt(n)) {\n      return NaN;\n    } else if (n <= 1) {\n      return 1;\n    } else {\n      return n * EvaluatorHelper.fak(n - 1);\n    }\n  }\n\n  static nthroot = (x, n) => {\n    const negate = n % 2 === 1 && x < 0;\n    if (negate) x = -x;\n    const possible = x ** (1 / n);\n    const check = possible ** n;\n    if (Math.abs(x - check) < 1 && ((x > 0) === (check > 0))) {\n      return negate ? -possible : possible;\n    }\n    return NaN;\n  }\n\n  static isInt = n => n % 1 === 0;\n\n  static isBigger = displayWidth => displayWidth > 10;\n\n\n  static isMultipleOfPi(value, frequency, offset, deg) {\n    const unit = deg ? 180 : Math.PI;\n    return ((value - offset*unit) / frequency / unit) % 1 === 0;\n  }\n\n}\n","import StateManagerHelper from '../../state/StateManagerHelper';\nimport EvaluatorHelper from \"./EvaluatorHelper\"\n\n/**\n * Mechanism to evaluate formulas built with binary operators\n * taking operator precedence (ranking) into account.\n * \n * Formulas are built by sending pairs of a value and a (value terminating) operator \n * via calls of calc(operator, value). \n * \n * Supported operators are (with ascending precedence):\n *  '=', \n *  '+', '-' (with alternate symbol '–' (long dash)),  \n *  '*' (with alternate symbol '×'), '/' (with alternate symbol '÷')\n *  'yx' (calculating x^y), 'x√y', 'log' and 'EE'\n *\n * The calc(operator, value) call will evaluate the formula given up till now\n * as far as possible taking operator precedence into account.\n * \n * Sending the '=' operator will calculate the final result and erase the formula.\n * \n * The mechanism supports a special feature for repeated '=' calls:\n * If multiple '=' calls follow each other without any other operators between,\n * the calc method will return the following calculation result:\n *  <operand of current '=' call> <operator before first '=' call> <operand of first '=' call>\n * Example call sequence:\n *  - call('+', 420) returns 420 (nothing to caculate yet)\n *  - call('-', 30)  returns 450 (same precedence, can calculate 420 + 30 already)\n *  - call('=', 70)  returns 380 (formula complete, total result is 420 + 30 - 70)\n *  - call('=', 200) returns 130 (applies - 70 to new given value 200, i.e. 200 - 70)\n *  - call('=', 100) returns  30 (applies - 70 to new given value 100, i.e. 100 - 70)\n */ \nexport default class ExpressionEvaluator {\n\n  static RANK = {\n    '=': 0,\n    '+': 1,\n    '-': 1,\n    '/': 2,\n    '*': 2,\n    yx: 3,\n    'x√y': 3,\n    log: 3,\n    EE: 3\n  };\n\n  constructor() {\n    this.reset();\n  }\n\n  // ------------------ public API --------------------------------------------------\n\n  /**\n   * Get our full state for the task state backup/restore mechanism.\n   */\n  getFullState = () => ({\n    stack: StateManagerHelper.deepCopy(this.stack),\n    num: this.num,\n    repeatingRunStatus: StateManagerHelper.deepCopy(this.repeatingRunStatus)\n  });\n\n  /**\n   * Set our internal full state (obtained by getFullState()) to be used by the task state backup/restore mechanism.\n   */\n  restoreState = (state) => {\n    this.stack = StateManagerHelper.deepCopy(state.stack);\n    this.num = state.num;\n    this.repeatingRunStatus = StateManagerHelper.deepCopy(state.repeatingRunStatus);\n  }\n\n  /**\n   * Extend the current formula with the given value followed by the given operator\n   * and return the result of the formula evaluation (as far as evaluation is possible already\n   * due to operator precedences).\n   */\n  calc = (val, operator) => {\n\n    const key = this.translateKey(operator);\n\n    this.updateRepeatingRunStatus(key, val);\n\n    if (this.isStackEmpty()) {\n\n      if (key === '=') {\n        // New operand with '=' operator received.\n        if (this.repeatingRunIsActive()) {\n          // Operator and second operand for the repeating runs are there already.\n          // -> Do a repeating '=' calculation with the new first operand and return that as result.\n          //    (The stack remains empty.)\n          return `${this.calcValue(val, this.getRepeatingRunKey(), this.getRepeatingRunValue())}`;\n        } else {\n          // pressing '=' without anything in stack\n          // -> Return given value as result.\n          //    (The stack remains empty.)\n          return `${val}`;\n        }\n      } else {\n        // First operand with first binary operator received (maybe after stack reset by the last '=' operator).\n        // -> Create first stack entry waiting for second operand and return the given value as result.\n        this.pushStackEntry(val, key);\n        return `${val}`;\n      }\n\n    } else {\n\n      let returnValue = 0;\n\n      // the rank of the new key\n      const newRank = this.getRankForKey(key);\n\n      // the previous key and its rank\n      const previousKey = this.peekStackKey();\n      const previousValue = this.peekStackValue();\n\n      if (newRank > this.getRankForKey(previousKey)) {\n        // The new operation has higher precendence than the previous one (e.g. +, *)\n        // -> An operator with even higher precedence might follow. Therefore the given value might belong to that one\n        //    and we have to postpone the evaluation.\n        // -> Add a new pending entry to the stack.\n        this.pushStackEntry(val, key);\n        returnValue = val;\n      } else {\n        // The new operation has same or lower precendence than the previous one (e.g. *, + or *, *)\n        // -> Evaluate previous operator with its first operand and the current value as second operand\n        //    and pop the pending operation\n        const result = this.calcValue(previousValue, previousKey, val);\n        this.popStackEntry();\n\n        // We might be able to go even further down the stack:\n        if (!this.isStackEmpty() && newRank <= this.getRankForKey(this.peekStackKey())) {\n          // The new operation has lower precendence than 2 steps ago -> (e.g.  +, *, = or *, yx, +)\n          // -> Recursive call with the calculated value and our current operator.\n          returnValue = this.calc(result, key);\n        } else {\n          // The new operation has a higher precedence the the one 2 steps ago (or there is nothing left in the stack). \n          // -> We have to wait for further input.\n          // -> Push the result as first operand together with the new operator on the stack. \n          this.pushStackEntry(result, key);\n          returnValue = result;\n        }\n      }\n\n      // erase the stack if we got a '='\n      if (key === '=') {\n        this.resetStack();\n      }\n\n      return `${returnValue}`;\n\n    }\n\n\n  }\n\n  /**\n   * Erase the formula given so far and drop the repeating run status.\n   */\n  reset = () => {\n    this.resetStack();\n    this.resetRepeatingRun();\n  }\n\n  // ----------------- calculate complete operator expression -----------------------\n\n  // operands are strings!\n  calcValue = (o1, operator, o2) => {\n    let result;\n    switch (operator) {\n      case 'log':\n        result = Math.log(o1) / Math.log(o2);\n        break;\n      case 'yx':\n        result = o1 ** o2;\n        break;\n      case 'x√y':\n        result = EvaluatorHelper.nthroot(o1, o2);\n        break;\n      case 'EE':\n        result = o1 * (10 ** o2);\n        break;\n      case '+':\n        result = (+o1) + (+o2);\n        break;\n      case '-':\n        result = o1 - o2;\n        break;\n      case '*':\n        result = o1 * o2;\n        break;\n      case '/':\n        result = o1 / o2;\n        break;\n      default:\n        throw new Error(`NO case for operator ${operator}`);\n    }\n    return result;\n  }\n\n\n  // ------------ the repeating run status structure ------------------\n  // The repeating run status is used to process repeated inputs of an operand with a '='-key \n  // It contains the operator to evaluate and the static second operand to use for each operand that arrives with '='-key.\n  // The lifecycle is: \n  //  - Operator other than '=' arrives: Remember operator in run status, drop second operand value in run status. \n  //    The repeat feature is inactive now.\n  //  - First operator '=' arrives after any other operator: Save operand value in run status. \n  //    The repeat feature is active now.\n  //  - Another operator '=' arrives after an '=' operator: Use the accompanying value as first operand, the \n  //    operator stored in the run status as operator and the value stored in the run status as second operand\n  //    and evaluate that as result. (After an '=' operator the stack is always empty.)\n\n  resetRepeatingRun = () => {\n    this.repeatingRunStatus = {\n      key: undefined,\n      value: undefined\n    };\n  }\n\n  updateRepeatingRunStatus = (key, val) => {\n    if (key !== '=') {\n      // repeating run is broken by new operator\n      // -> erase old second operand and remember new operator for potential next run\n      this.setRepeatingRunValue(undefined);\n      this.setRepeatingRunKey(key);\n    } else if (this.getRepeatingRunValue() === undefined) {\n      // first '=' operator after another operator sets second operand for repeat calculations\n      this.setRepeatingRunValue(val);\n    }\n  }\n\n  repeatingRunIsActive = () => this.getRepeatingRunKey() !== undefined && this.getRepeatingRunValue !== undefined;\n\n  getRepeatingRunValue = () => this.repeatingRunStatus.value;\n\n  getRepeatingRunKey = () => this.repeatingRunStatus.key;\n\n  setRepeatingRunKey = (key) => {\n    this.repeatingRunStatus.key = key;\n  }\n\n  setRepeatingRunValue = (value) => {\n    this.repeatingRunStatus.value = value;\n  }\n\n\n  // ------------ the stack structure --------------------------\n  // The stack is an array of [val, key] entries. \n  // Each entry represents a calculation step with a binary operator \n  // that waits for the second operand to become available:\n  // Due to the operator ranking the value following the operator in the\n  // input stream might belong as first operand to a higher ranking operator following later.\n  // The val is the first operand and the key is the binary operator of the pending calculation.\n  // The num member is the index of the top of the stack. \n  // (We don't drop entries from the array. We just decrease the num pointer to move 'top' of the stack.)\n\n  resetStack = () => {\n    this.stack = [];\n    this.num = 0;\n  }\n\n  isStackEmpty = () => this.num <= 0;\n\n  peekStackValue = () => this.stack[this.num - 1][0];\n\n  peekStackKey = () => this.stack[this.num - 1][1];\n\n  pushStackEntry = (val, key) => {\n    this.stack[this.num] = [val, key];\n    this.num += 1;\n  }\n\n  popStackEntry = () => {\n    this.num -= 1;\n    return this.stack[this.num];\n  }\n\n  // -------------- other helper methods ------------------------\n\n  translateKey = (key) => {\n    if (key === '×') return '*';\n    if (key === '÷') return '/';\n    if (key === '–') return '-';\n    return key;\n  }\n\n  getRankForKey = key => ExpressionEvaluator.RANK[key];\n\n\n}\n","import EvaluatorHelper from './EvaluatorHelper';\nimport ExpressionEvaluator from './ExpressionEvaluator';\nimport StateManagerHelper from '../../state/StateManagerHelper';\n\n/* \n * This evaluator calculates the current value that the calculator should display\n * and then sends commands to history and input display to render the new value. \n * TODO: These commands look like a depedendency between evaluator and history/input display. \n *       In some cases the evaluator knows that sending AC will reset the history.\n *       Should we remove this dependency somehow?\n */\nexport default class Evaluator {\n\n  static getSupportedOperations = () => Object.keys(Evaluator.buildHardcodedCommandsList(undefined));\n\n  constructor(displayWidth, angle) {\n\n    // A boolean flag signalling an error that will block the calculator until AC clears everything.\n    this.isError = false;\n\n    // The memory of values that is used by M+/M-/MS/MR/MC operations.\n    this.memory = {};\n\n    // The stack of nested expressions.\n    // The top level expression has level 0, each open bracket pair adds another level. \n    this.resetExpressionsStack();\n\n    // The current result that is to be displayed.\n    // We use strings for this since we need to represent things like '-0' or '12.' while building number values.\n    this.setCurrentEvaluationResult('0');\n\n    // A buffer that contains all key inputs until '=' is hit.\n    // The buffer is reset at the first key after the '=' or at a 'AC' key.\n    // Useful for backspace implementation and getting the previous key in some cases.\n    // Entry structure is: {key, isEndOfTerm, shouldResetHistoryIfDigitOnNextKey, }\n    this.resetKeysBuffer();\n\n    // The (hard coded) list of supported actions triggered by key inputs.\n    // Each triggered function receives an object { key, operand, dispVal } and returns the new evaluated value.\n    this.operations = Evaluator.buildHardcodedCommandsList(this);\n\n    this.setConfiguration(displayWidth, angle);\n  }\n\n  // ------------------ public API -----------------------------------------------------------\n  /**\n   * Set our configuration.\n   */\n  setConfiguration = (displayWidth, angle, silentOnErrors = true) => {\n    this.angle = angle || EvaluatorHelper.ANGLE_DEGREE;\n    this.bigger = EvaluatorHelper.isBigger(displayWidth);\n    this.silentOnErrors = silentOnErrors;\n  }\n\n  /**\n   * Get our full state for the task state backup/restore mechanism.\n   */\n  getFullState = () => {\n    const state = {};\n    state.expressions = StateManagerHelper.deepCopy(this.expressions.map(expression => expression.getFullState()));\n    state.expressionNestingDepth = this.expressionNestingDepth;\n    state.isError = this.isError;\n    state.memory = StateManagerHelper.deepCopy(this.memory);\n    state.resultBuffer = this.resultBuffer;\n    state.keysBuffer = StateManagerHelper.deepCopy(this.keysBuffer);\n    state.angle = this.angle;\n    state.bigger = this.bigger;\n    return state;\n  }\n\n  /**\n   * Set our internal full state (obtained by getFullState()) to be used by the task state backup/restore mechanism.\n   */\n  restoreState = (state) => {\n\n    this.expressions = state.expressions.map((s) => {\n      const calc = new ExpressionEvaluator();\n      calc.restoreState(s);\n      return calc;\n    });\n    this.expressionNestingDepth = state.expressionNestingDepth;\n\n    this.isError = state.isError;\n    this.memory = state.memory;\n    this.resultBuffer = state.resultBuffer;\n    this.keysBuffer = state.keysBuffer;\n    this.angle = state.angle;\n    this.bigger = state.bigger;\n  }\n\n  /**\n   * Get a number value from our memory. The value is rounded to an integer. \n   */\n  getMem = (memIdx) => {\n    memIdx = memIdx || 0;\n    if (this.memory[memIdx]) {\n      return Math.round(Number(this.memory[memIdx]))\n    }\n    return 0;\n  }\n\n  /**\n   * Parse the given string as number, put it into the result buffer \n   * and return the required render commands.\n   * (naive implementation - same in library)\n   */\n  paste = (text) => {\n    this.initRenderCommands();\n\n    const newValue = Number.parseFloat(text).toString();\n    this.setCurrentEvaluationResult(newValue)\n    this.sendToRender(newValue);\n\n    return this.getRenderCommands();\n  }\n\n  /**\n   * Process the given key and operand and return the required render commands.\n   */\n  evalKey = (key, operand) => {\n    this.initRenderCommands();\n    this.evalKeyInternal(key, operand);\n    return this.getRenderCommands();\n  }\n\n  // ----------------- private stuff ---------------------------------------------- \n\n  // hardcoded commands list -------------------------------------------------\n\n  /*\n   * Create the hardcoded list of calculation commands. \n   * \n   * The methods creates two variants of the same list:\n   *  - Called with valid this pointer it returns the full list for use in the class instance doing actual calculations.\n   *  - Called without this pointer it returns a dummy list that contains the supported keys only with now calculation actions assigned. \n   */\n  static buildHardcodedCommandsList(withThis) {\n    return {\n      // trignonometry\n      sin: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsin),\n      csc: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcsc),\n      \"sin-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsin1),\n      cos: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcos),\n      sec: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsec),\n      \"cos-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcos1),\n      tan: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltan),\n      cot: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcot),\n      \"tan-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltan1),\n      sinh: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsinh),\n      \"sinh-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsinh1),\n      cosh: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcosh),\n      \"cosh-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcosh1),\n      tanh: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltanh),\n      \"tanh-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltanh1),\n      π: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalPI),\n      // special arithmetics\n      \"1/x\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval1perx),\n      x2: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalx2),\n      x3: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalx3),\n      yx: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"2x\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval2x),\n      ex: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalex),\n      operandyx: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandyx),\n      operandex: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandex),\n      \"2√\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval2root),\n      \"3√\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval3root),\n      \"x√y\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"operandx√y\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandxrooty),\n      \"x!\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalfactorial),\n      ln: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalln),\n      log: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      log2: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evallog2),\n      log10: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evallog10),\n      operandlog: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandlog),\n      Rand: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalRandom),\n      // basic arithmetics\n      \"(\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalLeftBracket),\n      \")\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalRightBracket),\n      \"×\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"÷\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"+\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"–\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"+/–\": withThis === undefined ? null : withThis.evalPlusMinus,\n      \"=\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalEquals),\n      // number input\n      0: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      1: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      2: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      3: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      4: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      5: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      6: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      7: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      8: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      9: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      \".\": withThis === undefined ? null : withThis.evalDecimalPoint,\n      // memory\n      mc: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMClear),\n      ms: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMSave),\n      \"m+\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMAdd),\n      \"m-\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMMinus),\n      mr: withThis === undefined ? null : withThis.evalOperation(withThis.evalMRead),\n      // basic input\n      AC: withThis === undefined ? null : withThis.evalOperation(withThis.evalAC),\n      C: withThis === undefined ? null : withThis.evalOperation(withThis.evalC),\n      back: withThis === undefined ? null : withThis.evalOperation(withThis.evalBackspace),\n    }\n  }\n\n  static buildUnaryOperatorCommand(withThis, calcFunction) {\n    return withThis.evalEndOfTerm(withThis.evalShouldResetHistoryIfDigitOnNextKey(withThis.evalOperation(calcFunction)));\n  }\n\n  // TODO: improve the name of this method once we fully understand the things going on here.\n  static buildBinaryOperatorCommand(withThis, calcFunction) {\n    return withThis.evalEndOfTerm(withThis.evalOperation(calcFunction));\n  }\n\n\n  // render commands management ------------------------------------\n  /**\n   * (Re-)initialize the renderCommands member.\n   */\n  initRenderCommands = () => {\n    this.renderCommands = {\n      render: [],\n      history: []\n    }\n  }\n\n  /**\n   * Get the current render commands structure\n   */\n  getRenderCommands = () => this.renderCommands;\n\n  /**\n   * Add an entry with a value to display to the render commands list in the renderCommands member. \n   */\n  sendToRender = (value) => {\n    this.renderCommands.render.push(value);\n  }\n\n  /**\n   * Add an entry with with a key, an operand and a value to the render-history commands list in the renderCommands member. \n   * \n   * The operand parameter is the operand used in immediate operations(like x3 => operand is 3).\n   * The value is the result to be displayed currently.\n   * The method pushes an AC key instead if there is an error registered currently in the isError member. \n   */\n  sendToRenderHistory = (key, operand, value) => {\n    // there was an error in evaluation\n    if (this.isError) {\n      this.renderCommands.history.push({\n        key: \"AC\"\n      });\n    } else {\n      this.renderCommands.history.push({\n        key,\n        operand,\n        value\n      });\n    }\n  }\n\n  // nested expressions stack --------------------------------------\n  // The stack is an array of entries. Each entry contains an ExpressionEvaluator instance.\n  // Each entry represents a nested level. \n  // The top level expression has level 0, each open bracket pair adds another level. \n\n  resetExpressionsStack = () => {\n    this.expressionNestingDepth = 0;\n    this.expressions = [];\n    this.expressions[0] = new ExpressionEvaluator();\n  }\n\n  pushNestedExpression = () => {\n    this.expressionNestingDepth += 1;\n    this.expressions[this.expressionNestingDepth] = new ExpressionEvaluator();\n  }\n\n  popNestedExpression = () => {\n    const result = this.expressions[this.expressionNestingDepth];\n    this.expressionNestingDepth -= 1;\n    return result;\n  }\n\n  peekNestedExpression = () => this.expressions[this.expressionNestingDepth];\n\n  /**\n   * Is there any nested expression or are we at the top level of the expressions stack?\n   */\n  hasNestedExpression = () => this.expressionNestingDepth > 0;\n\n\n  // result buffer ------------------------------------\n\n  /**\n   * Set a number value to the result buffer. \n   * \n   * If the given value is a pseudo number (NaN, Inf, Error) \n   * the method implicitly sets '0' instead and registers an error in the isError member.\n   */\n  setCurrentEvaluationResult = (value) => {\n    if (value.match(/NaN|Inf|Error/)) {\n      this.resultBuffer = '0';\n      this.isError = true;\n    } else {\n      this.resultBuffer = value;\n    }\n  }\n\n  getCurrentEvaluationResult = () => this.resultBuffer;\n\n  // keysBuffer --------------------------\n\n  resetKeysBuffer = () => {\n    this.keysBuffer = [];\n  }\n\n  /**\n   * Push the given key to the keysBuffer member.\n   * \n   * If the key is AC it will replace the whole key buffer content.\n   * If \n   *  - the last key in the buffer was '=' (i.e. the last formula was completely evaluated and dropped) and\n   *  - the new key is not '=' (i.e. we are not in repeating '=' mode but starting a new formula instead)\n   * the new key replaces the whole buffer content.\n   */\n  pushKeyToKeysBuffer = (key) => {\n\n    // add the key to buffer\n    this.keysBuffer.push({\n      key\n    });\n\n    const { key: previousKey } = this.getPreviousKey();\n    // reset keys buffer if previous key was 'equals' or current key is 'AC'\n    if ((previousKey === '=' && key !== '=') || this.isKeyAC(key)) {\n      this.keysBuffer = [{\n        key\n      }];\n    }\n  }\n\n  popKeyFromKeysBuffer = () => this.keysBuffer.pop();\n\n  getKeysBufferLength = () => this.keysBuffer.length;\n\n  /**\n   * Returns the second last entry in the keysBuffer (or {} if there is no second last entry).\n   */\n  getPreviousKey = () => this.keysBuffer[this.keysBuffer.length - 2] || {};\n\n  /**\n   * Returns last entry in the keysBuffer (or {} if there is no entry).\n   */\n  getCurrentKey = () => this.keysBuffer[this.keysBuffer.length - 1] || {};\n\n\n  // evaluation of keys ------------------------------\n\n  /**\n   * Process the given key and operand. \n   * \n   * The method implicitly puts required render commands in the renderCommands member.\n   * \n   * If we currently have an error registered in the isError we don't process any\n   * keys except AC and C. \n   * We clear the isError flag before starting the actual processing.\n   * \n   * Steps to process the key/operand are:\n   * - push the key to the keysBuffer\n   * - select the operation for the key from the operations array \n   * - call the selected operation with the given key, the given operand and the current evaluation result value.\n   * \n   */\n  evalKeyInternal = (key, operand) => {\n\n    if (this.isError && !this.isKeyAC(key) && !this.isKeyC(key)) {\n      return;\n    }\n\n    this.isError = false;\n\n    this.pushKeyToKeysBuffer(key);\n\n    this.operations[key]({\n      key,\n      operand,\n      dispVal: this.getCurrentEvaluationResult()\n    });\n\n  }\n\n\n  // ---- higher order functions wrapping basic evaluator functions to add general behaviour ------------\n  /**\n   * Puts a wrapper around the given function which does the following:\n   * - Enclose all actions in a try-catch that will return undefined if anything goes wrong.\n   * - Put the function call result in the result buffer.\n   * - Put the function call result to the render command list in the renderCommands member.\n   * - Put the key and operand given as parameters to the history-render command list in the renderCommands member.\n   * - Return the function call result as string.\n   * \n   * The wrapping function expects the same parameters as the wrapped function (dispVal, key and operand)\n   * and transfers these down to the wrapped function.\n   * \n   * The wrapped function should return the new current value of the calculator.\n   * If sending events to render/history is to be avoided the wrapped function should throw an exception.\n   */\n  evalOperation = (functionForEval) => {\n    const result = ({ dispVal, key, operand }) => {\n      try {\n        // it changes the  type of the value => maybe some function up the stream needs it originally\n        const originalResult = functionForEval({\n          key,\n          operand,\n          dispVal\n        });\n        const resultAsString = originalResult === undefined ? undefined : originalResult.toString();\n\n        this.setCurrentEvaluationResult(resultAsString);\n        this.sendToRender(resultAsString);\n        this.sendToRenderHistory(key, operand, this.getCurrentEvaluationResult());\n\n        return resultAsString;\n\n      } catch (ex) {\n        if (!this.silentOnErrors) {\n          console.warn(`---> Ignored key ${key} with operand ${operand} at current value ${dispVal}: ${ex.toString()}`)\n        }\n        return undefined;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Puts a wrapper around the given function that does the following:\n   *  - Call the wrapped function.\n   *  - Set the flag 'shouldResetHistoryIfDigitOnNextKey' in the current key in the keysBuffer. \n   *  \n   * If that flag is set and the next key is a digit we should reset the entire history.\n   * Example: 90, sin, 23 => 23 resets the history. \n   * (TODO: i think this behaviour should be in history renderer.)\n   */\n  evalShouldResetHistoryIfDigitOnNextKey = functionForEval => (\n    (dispValKeyOperand) => {\n      const value = functionForEval(dispValKeyOperand);\n      this.getCurrentKey().shouldResetHistoryIfDigitOnNextKey = true;\n      return value;\n    }\n  )\n\n  /**\n   * Puts a wrapper around the given function that does the following:\n   *  - Call the wrapped function\n   *  - Set the flag 'isEndOfTerm' in the current key in the keysBuffer. \n   * \n   * If the flag is set on a key the next digit input will start a new value. \n   * The flag is set by all operators except those that help to build up a number \n   * value: digits, +/-, backspace.\n  */\n  evalEndOfTerm = functionForEval => (\n    (dispValKeyOperand) => {\n      const value = functionForEval(dispValKeyOperand);\n      this.getCurrentKey().isEndOfTerm = true;\n      return value;\n    }\n  )\n\n\n  // --- basic evaluator functions implementing the specific keys -------------------------------------------\n\n  // trigonometry\n\n  // sinus\n  evalsin = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return 0;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0.5, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1.5, this.deg())) return -1;\n    return Math.sin(this.getRadiantValue(dispVal));\n  }\n\n  // cosecans\n  evalcsc = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return NaN;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0.5, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1.5, this.deg())) return -1;\n    return 1/Math.sin(this.getRadiantValue(dispVal));\n  }\n\n  // arcus sinus\n  evalsin1 = ({ dispVal }) => this.getDisplayValueFromRadiant(Math.asin(dispVal));\n\n  // cosinus\n  evalcos = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return 0;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1, this.deg())) return -1;\n    return Math.cos(this.getRadiantValue(dispVal));\n  }\n\n  // secans\n  evalsec = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return NaN;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1, this.deg())) return -1;\n    return 1/Math.cos(this.getRadiantValue(dispVal));\n  }\n\n  // arcus cosinus\n  evalcos1 = ({ dispVal }) => this.getDisplayValueFromRadiant(Math.acos(dispVal));\n\n  // tangens\n  evaltan = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return 0;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return NaN;\n    return Math.tan(this.getRadiantValue(dispVal));\n  }\n\n  // cotangens\n  evalcot = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return NaN;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return 0;\n    return 1/Math.tan(this.getRadiantValue(dispVal));\n  }\n\n  // arcus tangens\n  evaltan1 = ({ dispVal }) => this.getDisplayValueFromRadiant(Math.atan(dispVal));\n\n  // sinus hyperbolicus\n  evalsinh = ({ dispVal }) => (((Math.E ** dispVal) - (Math.E ** -dispVal)) / 2);\n\n  // area sinus hyperbolicus\n  evalsinh1 = ({ dispVal }) => Math.log(+dispVal + Math.sqrt(1 + (dispVal ** 2)));\n\n  // cosinus hyperbolicus\n  evalcosh = ({ dispVal }) => (((Math.E ** dispVal) + (Math.E ** -dispVal)) / 2);\n\n  // area cosinus hyperbolicus\n  evalcosh1 = ({ dispVal }) => 2 * Math.log(Math.sqrt((+dispVal + 1) / 2) + Math.sqrt((+dispVal - 1) / 2));\n\n  // tangens hyperbolicus\n  evaltanh = ({ dispVal }) => {\n    const e1 = (Math.E ** dispVal);\n    const e2 = (Math.E ** -dispVal);\n    return (e1 - e2) / (e1 + e2);\n  }\n\n  // area tangens hyperbolicus\n  evaltanh1 = ({ dispVal }) => (Math.log(+dispVal + 1) - Math.log(1 - dispVal)) / 2;\n\n  // pi\n  evalPI = ({ dispVal }) => Math.PI;\n\n  /**\n   * Translate the given display value (given as specified by the this.deg() flag) to a radiant value.\n  */\n  getRadiantValue(displayValue) {\n    return displayValue * (this.deg() ? Math.PI/180 : 1);\n  }\n\n  /**\n   * Translate the given radiant value to a display value as specified by the this.deg() flag.\n   */\n  getDisplayValueFromRadiant(radiantValue) {\n    return radiantValue * (this.deg() ? 180/Math.PI : 1);\n  }\n\n  /**\n   * Returns true if we expect display values for cos/sin/tan to be given as angle values in degrees (like 45, 90, 360), \n   * returns false if we expect them to be radiant values (like PI, 0.5*PI, 2*PI).\n   */\n  deg = () => this.angle === EvaluatorHelper.ANGLE_DEGREE;\n\n\n  // special arithmetics\n\n  // 1/x\n  eval1perx = ({ dispVal }) => (1 / dispVal);\n\n  // x^2\n  evalx2 = ({ dispVal }) => dispVal ** 2;\n\n  // x^3\n  evalx3 = ({ dispVal }) => dispVal ** 3;\n\n  // 2^x\n  eval2x = ({ dispVal }) => (2 ** (dispVal));\n\n  // e^x \n  evalex = ({ dispVal }) => Math.exp(dispVal);\n\n  // x^operand\n  evaloperandyx = ({ dispVal, operand }) => dispVal ** operand;\n\n  // operand^x \n  evaloperandex = ({ dispVal, operand }) => operand ** dispVal;\n\n  // 2√x\n  eval2root = ({ dispVal }) => Math.sqrt(dispVal);\n\n  // 3√x\n  eval3root = ({ dispVal }) => EvaluatorHelper.nthroot(dispVal, 3);\n\n  // operand√x\n  evaloperandxrooty = ({ dispVal, operand }) => EvaluatorHelper.nthroot(dispVal, operand);\n\n  // x!\n  evalfactorial = ({ dispVal }) => EvaluatorHelper.fak(dispVal);\n\n  // ln(x)\n  evalln = ({ dispVal }) => Math.log(dispVal);\n\n  // log2(x)\n  evallog2 = ({ dispVal }) => Math.log(dispVal) / Math.log(2);\n\n  // log10(x)\n  evallog10 = ({ dispVal }) => Math.log(dispVal) / Math.log(10);\n\n  // logoperand(x)\n  evaloperandlog = ({ dispVal, operand }) => Math.log(dispVal) / Math.log(operand);\n\n  // rand()\n  evalRandom = ({ dispVal }) => Math.random();\n\n  // basic arithmetics\n\n  /**\n   * Start a new nested expression level for the bracket content.\n   */\n  evalLeftBracket = ({ dispVal }) => {\n    this.pushNestedExpression();\n    return dispVal;\n  }\n\n  /**\n   * Evaluate the expression in the brackets. Ignore the call if there is no matching opening bracket.\n   */\n  evalRightBracket = ({ dispVal }) => (this.hasNestedExpression() ? this.popNestedExpression().calc(dispVal, '=') : dispVal);\n\n  evalPlusMinus = ({ dispVal, key }) => {\n    const { isEndOfTerm } = this.getPreviousKey();\n\n    const displayValue = isEndOfTerm ? '0' : dispVal;\n\n    // change the sign (Note: we may return '-0' to prepend a minus sign to the digits that may follow.)\n    const resultValue = !(displayValue.replace(/e[+|-]/, '')).match('-')\n      ? `-${displayValue}`\n      : displayValue.replace(/^-/, '');\n\n    // Note: Since we return a string we don't want to use the generic evalOperation method to do this post processing:\n    //       The originalResult there could be a String without doing any harm. But the code in evalOperation does not look \n    //      like a String would be returned. \n    this.setCurrentEvaluationResult(resultValue);\n    this.sendToRender(resultValue);\n    this.sendToRenderHistory(key, undefined, this.getCurrentEvaluationResult());\n\n    return resultValue;\n  }\n\n  evalEquals = ({ dispVal }) => {\n    // Heal inconsistent input: evaluate all nested brackets that are left open when '=' arrives. \n    let resultValue = dispVal;\n    while (this.hasNestedExpression()) {\n      resultValue = this.popNestedExpression().calc(resultValue, '=')\n      // NOTE: This implicitly sets the error flag:\n      this.setCurrentEvaluationResult(resultValue);\n    }\n    // Evaluate the top level formula:\n    resultValue = this.peekNestedExpression().calc(resultValue, '=')\n    this.setCurrentEvaluationResult(resultValue);\n\n    return resultValue;\n  }\n\n  // number input\n\n  evalDigitOrDecimalPoint = ({ dispVal, key }) => {\n    const { shouldResetHistoryIfDigitOnNextKey, isEndOfTerm } = this.getPreviousKey();\n    // resets the current value if it is end-of-term (e.g a completed pair of brackets, a sin operation) \n    // or if there is nothing in the keysBuffer except this key (e.g. keysBuffer was reset by previous key '=')\n\n    const displayValue = (isEndOfTerm || this.getKeysBufferLength() === 1) ? '0' : dispVal;\n\n    if (this.willOverflow(displayValue, key)) {\n      // remove last key inserted in buffer\n      this.popKeyFromKeysBuffer();\n      throw Error(`cannot add key ${key} to number due to value overflow`)\n    }\n\n    if (this.isAlreadyDecimalPoint(displayValue, key)) {\n      // remove last key inserted in buffer\n      this.popKeyFromKeysBuffer();\n      throw Error(`cannot add key ${key} to number since we have a decimal point already`)\n    }\n\n    // resets the history after an immediate function\n    // e.g user does 90 , sin, 23 => 23 will reset the history\n    if (shouldResetHistoryIfDigitOnNextKey) {\n      this.sendToRenderHistory('AC');\n    }\n\n    // Append the key and drop the 0 in the initial -0 once the first real digit appears, e.g. -09 becomes -9:\n    return (displayValue + key).replace(/^(-)*?0(\\d)$/, '$1$2');\n  }\n\n  evalDecimalPoint = ({ dispVal, key }) => {\n    let value;\n    try {\n      value = this.evalDigitOrDecimalPoint({\n        dispVal,\n        key\n      });\n      this.setCurrentEvaluationResult(value);\n      this.sendToRender(value);\n      this.sendToRenderHistory(key, undefined, this.getCurrentEvaluationResult());\n    } catch (err) {\n      value = dispVal;\n    }\n\n    return value;\n  }\n\n  willOverflow = (dispVal, key) => (Math.abs(+(dispVal + key)) > (this.bigger ? 1e15 : 1e9)\n  || dispVal.replace(/^-/, '').length > 15\n  || (dispVal.replace('-', '').replace(/\\./g, '').length > (this.bigger ? 14 : 8)));\n\n  isAlreadyDecimalPoint = (dispVal, key) => dispVal.match(/\\.|e\\+/) && key === '.';\n\n  // memory\n\n  evalMClear = ({ dispVal, operand }) => {\n    delete this.memory[operand];\n    return dispVal;\n  }\n\n  evalMSave = ({ dispVal, operand }) => {\n    this.memory[operand] = dispVal;\n    return dispVal;\n  }\n\n  evalMAdd = ({ dispVal, operand }) => {\n    this.doMemoryOperation(operand, '+', dispVal);\n    return dispVal;\n  }\n\n  evalMMinus = ({ dispVal, operand }) => {\n    this.doMemoryOperation(operand, '-', dispVal);\n    return dispVal;\n  }\n\n  evalMRead = ({ operand }) => {\n    if (this.memory[operand] === undefined) {\n      throw new Error(`No value in memory for key ${operand}`);\n    }\n    const valueFromMemory = this.getMemoryValue(operand);\n    return `${valueFromMemory}`;\n  }\n\n  /** \n   * Use an ExpressionEvaluator to evaluate the given operation with the \n   * value obtained from the memory as first operand and the given operand parameter\n   * as second operand. \n   * Put the result back into the memory.\n   */\n  doMemoryOperation = (location, operation, operand) => {\n    const calculator = new ExpressionEvaluator();\n    calculator.calc(this.getMemoryValue(location), operation);\n    const res = calculator.calc(operand, '=');\n    this.memory[location] = res;\n  }\n\n  getMemoryValue = location => this.memory[location] || 0;\n\n\n  // basic input  \n\n  evalAC = ({ key }) => {\n    this.resetExpressionsStack();\n    // TODO: Should AC clear memory values too?\n    return \"0\"\n  }\n\n  evalC = ({ key }) => \"0\"\n\n  /**\n   *  Delete the last digit or decimal point or the last +/- operation from the number currently built up.\n   *  Drop the corresponding keys from the keys buffer.\n   */ \n  evalBackspace = ({ dispVal }) => {\n    // remove \"back\" key from keysbuffer\n    this.popKeyFromKeysBuffer();\n\n    const { isEndOfTerm } = this.getCurrentKey();\n    if (isEndOfTerm) {\n      throw Error(\"Cannot delete beyond last number's input.\");\n    }\n\n    let currentValue = dispVal;\n    if (this.getCurrentKey().key === '+/–') {\n      // Last operation on number was a sign toggle.\n      // -> Evaluate the sign toggle operation once more in order to invert the sign.\n      this.evalKeyInternal('+/–');\n      this.popKeyFromKeysBuffer();// removes the inverting +/- from keysBuffer\n      this.popKeyFromKeysBuffer();// removes the orginal +/- from keysBuffer\n      currentValue = this.getCurrentEvaluationResult()\n    } else if (dispVal.match(/-\\d$/)) {\n      // The current value is a negative, single digit value.\n      // -> replace the value by '-0' (i.e. retain the negative sign).\n      this.popKeyFromKeysBuffer();\n      currentValue = \"-0\";\n    } else if (dispVal.match(/^\\d$/)) {\n      // The current value is a positive, single digit value.\n      // -> replace that digit by a plain 0.\n      this.popKeyFromKeysBuffer();\n      currentValue = \"0\";\n    } else if (dispVal.length > 0) {\n      // The current value contains more than one digit.\n      // -> Just drop the last digit (or decimal point).\n      this.popKeyFromKeysBuffer();\n      currentValue = currentValue.substring(0, currentValue.length - 1);\n    } else {\n      throw Error(\"Cannot delete beyond last number's input.\");\n    }\n\n    // If after deletion there is decimal point, delete that also.\n    if (this.getCurrentKey().key === '.') {\n      this.popKeyFromKeysBuffer();\n      currentValue = currentValue.substring(0, currentValue.length - 1);\n    }\n\n    return currentValue;\n  }\n\n\n  /**\n   * Process the given input via the expression at the current nesting level.\n   */\n  evalViaExpressionEvaluator = ({ dispVal, key }) => {\n    const { key: lastKey } = this.getPreviousKey()\n    if (lastKey === '(') {\n      switch (key) {\n        case '+':\n        case '–':\n        case '×':\n        case '÷':\n        case 'yx':\n        case 'x√y':\n          dispVal = 0;\n          break;\n        case 'log':\n          dispVal = 1;\n          break;\n        default:\n          // do not change dispVal\n      }\n    }\n    // Delegate evaluation to expression evaluator for current nested expression:\n    return (this.peekNestedExpression().calc(dispVal, key));\n  }\n\n  // --------------------- further helper methods ----------------------------------------\n\n  isKeyAC = key => key === \"AC\";\n\n  isKeyC = key => key === \"C\";\n\n}\n","import Evaluator from './Evaluator';\n\nexport default class KeyboardHelper {\n\n  // TODO: there might be a problem with bindings - if the calculator does not contain ln for example  - user can still press l to get it\n  // (same problem exists in RAP -  but there only numbers and simple operators are bind - so having a calculator without those is improbable to have)\n  // 1. find a way itembuilder calculates what it supports (it is not so trivial) OR\n  // 2. implement keybindings for buttons\n  // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n  static fromKeyStrokeToCalculatorSupportedOperation = (pressedKey) => {\n    // it can be that some operations are not in the keyboards -  (e.g. mr -> is not supported without a memory index)\n    const keyboardShortcutsWithOperations = '+|+|=|=|,|.|-|–|/|÷|*|×|#|+/–|x|x!|E|EE|e|ex| |2nd|r|x√y|R|2√|^|yx|\\'|yx|\"|yx|m|mr|v|mc|b|m+|n|m-|'\n      + 's|sin|c|cos|t|tan|S|sin-1|C|cos-1|T|tan-1|l|ln|L|log|\\\\|1/x|X|2x|'\n      + 'Enter|=|Backspace|back|0|0|1|1|2|2|3|3|4|4|5|5|6|6|7|7|8|8|9|9|0|0';\n\n    // maybe to added by using maybe a alt, ctrl or shift\n    // p|π|d|Degree|°|Degree\n    // keyMatchHold = ('sin|sinh|cos|cosh|tan|tanh|m-|Rand|Deg|Rand|sin-1|sinh-1|cos-1|cosh-1|tan-1|tanh-1|' +\n    // '1|1/x|2|x2|3|x3|x√y|√|ln|log2|ex|2x').split('|');\n\n\n    let calculatorOperation = KeyboardHelper.isSupportedOperation(pressedKey) ? pressedKey : undefined;\n    if (!calculatorOperation) {\n      calculatorOperation = KeyboardHelper.lookupForOperation(pressedKey, keyboardShortcutsWithOperations);\n    }\n    return calculatorOperation;\n  }\n\n  static fromStatemachineToCalculatorSupportedOperation = (operation) => {\n    const statemachineOperations = 'clear|C|clearall|AC|equals|=|add|+|subtract|–|multiply|×|divide|÷|power|operandyx|'\n      + 'npower|yx|root|operandx√y|nroot|x√y|sin|sin|cos|cos|tan|tan|csc|csc|sec|sec|cot|cot|'\n      + 'e|ex|exp|operandex|ln|ln|log|operandlog|invmult|1/x|invpower|log|leftbr|(|rightbr|)|fact|x!|'\n      + 'mclear|mc|mread|mr|msave|ms|madd|m+|msubtract|m-';\n    const calculatorOperation = KeyboardHelper.lookupForOperation(operation, statemachineOperations);\n    return calculatorOperation;\n  }\n\n  static isSupportedOperation = calculatorOperation => Evaluator.getSupportedOperations().includes(calculatorOperation);\n\n  static isDigitKey = key => '0123456789'.indexOf(key) !== -1;\n\n  // private \n\n  static lookupForOperation(key, operationsString) {\n    let calculatorOperation;\n    const operationsArray = operationsString.split('|');\n    for (let n = 0, m = operationsArray.length; n < m; n += 2) {\n      if (key === operationsArray[n]) {\n        calculatorOperation = operationsArray[n + 1];\n        break;\n      }\n    }\n    return KeyboardHelper.isSupportedOperation(calculatorOperation) ? calculatorOperation : undefined;\n  }\n\n}\n","import * as ValueFormatter from \"./ValueFormatter\";\nimport EvaluatorHelper from \"./EvaluatorHelper\";\n\n/**\n * Render a value given as string with dot as decimal separator (and maybe a trailing decimal dot)\n * to the string representation used for display to the user.\n * \n * The transformation takes into account: \n *  - the format (specifying the characters to use as decimal separator and thousands grouping separator)\n *  - whether to include thousands grouping separators\n *  - the display width \n * \n * The renderer compresses the value (by rounding) if it would take too much space in the display. \n * (In fact we support two display width classes only: small/big. And the compressing is a bit weird, see below...)\n */\nexport default class Renderer {\n\n  static msg = {\n    errorMessage: \"Err\",\n    nroot: \"nroot\"\n  };\n\n  /**\n   * Format a value given as string with dot as decimal separator\n   * according to our format and withThousandSeparator members. \n   * \n   * We implicitly translate 'NaN, 'Inf', 'Error' to the string 'Err'.\n   * We implicitly translate very long numbers to an exponential notation that fits into our display width.\n   * We preserve a trainling dot by translating it into a trailing decimal separator character.\n   */\n  static render = (value, displayWidth, withThousandSeparator, format) => {\n    const bigger = EvaluatorHelper.isBigger(displayWidth);\n\n    if (value.match(/NaN|Inf|Error/)) {\n      return Renderer.msg.errorMessage;\n    }\n\n    const trailingDot = value.match(/\\.$/);\n    const valueWithoutTrailingDot = trailingDot ? value.substring(0, value.length - 1) : value;\n\n    if (valueWithoutTrailingDot.length === 0) {\n      return value;\n    }\n\n    const shortenedResult = Renderer.shortenValue(valueWithoutTrailingDot, bigger);\n    const unformattedResult = Renderer.limitFractionalDigits(shortenedResult, bigger);\n    const formattedResult = ValueFormatter.formatValue(unformattedResult, withThousandSeparator, trailingDot, format);\n\n    return formattedResult;\n  }\n\n  // ----------------- private stuff ------------------------------------------------\n\n  static shortenValue = (value, bigger) => {\n    const valAbs = Math.abs(+value);\n    if (!bigger && valAbs >= 1e+10) {\n      return (+value).toExponential(8).toString();\n    }\n    if (valAbs >= 1e+16) {\n      return (+value).toExponential(13).toString();\n    }\n    return value;\n  }\n\n  /**\n   * Returns a string representation of the given numerical value with a limited number of fractional digits.\n   * \n   * If bigger is true, it allows up to 15 fractional digits.\n   * If bigger is false and there is an exponent, it allows 6 fractional digits.\n   * If bigger is false and there is no exponent, it allows 8 fractional digits.\n   * \n   * The method applies proper rounding to reduce the number of fractional digits.\n   * \n   */\n  static limitFractionalDigits(value, bigger) {\n    const valueComponents = Renderer.splitValue(value);\n\n    if (valueComponents.fractionalPart === undefined) {\n      // the easy case: nothing to change:\n      return value;\n    }\n\n    const targetDigitsCount = Renderer.calculateTargetDigitCount(bigger, valueComponents.exponentPart !== undefined);\n    const { digits: reducedFractionalDigits, overflow: roundingOverflow } = Renderer.roundFractionalDigits(valueComponents.fractionalPart, targetDigitsCount);\n\n    const integralPart = +valueComponents.integralPart + (roundingOverflow ? 1 : 0); // transfer overflow from digits rounding\n    const fractionalPart = reducedFractionalDigits !== '' ? `.${reducedFractionalDigits}` : ''; // drop decimal point if no fractional digits are left\n    const exponentPart = valueComponents.exponentPart === undefined ? '' : `e${valueComponents.exponentPart}`; // rebuild the exponent part\n\n    return `${valueComponents.sign}${integralPart}${fractionalPart}${exponentPart}`;\n\n  }\n\n  static splitValue(value) {\n    if (value === undefined || value === null) return {};\n\n    const [beforeDecimalPart, postDecimalPart] = value.split('.');\n    const sign = (beforeDecimalPart[0] === '-') ? '-' : '';\n    const integralPart = beforeDecimalPart.replace(/^-/, '');\n    const [fractionalPart, exponentPart] = postDecimalPart ? postDecimalPart.split('e') : [postDecimalPart, undefined];\n    return {\n      sign,\n      integralPart,\n      fractionalPart,\n      exponentPart\n    };\n  }\n\n  static calculateTargetDigitCount(bigger, withExponent) {\n    if (bigger) return 15;\n    if (withExponent) return 6;\n    return 8;\n  }\n\n\n  /**\n   * Round the given fractional digits to the given number of digits remaining.\n   */\n  static roundFractionalDigits(digits, targetDigitsCount) {\n    if (targetDigitsCount > digits.length) {\n      // digits fit in -> nothing to change\n      return {\n        digits,\n        overflow: false\n      }\n    }\n    const numberForRounding = +(`1.${digits}`);\n    // add one digit for the integral 1:\n    const roundedValue = numberForRounding.toPrecision(targetDigitsCount + 1).toString();\n    const overflowOccured = roundedValue >= 2;\n    return {\n      digits: overflowOccured ? '' : roundedValue.substr(2).padEnd(targetDigitsCount, \"0\"), // skip integral part and pad trailing 0s.\n      overflow: overflowOccured\n    }\n  }\n\n\n}\n","import StateManagerHelper from '../../state/StateManagerHelper';\nimport Renderer from \"./Renderer\";\n\nexport default class HistoryRenderer {\n\n  constructor(displayWidth, withThousandSeparator, format) {\n    this.displayWidth = displayWidth;\n    this.withThousandSeparator = withThousandSeparator;\n    this.format = format;\n\n    this.historyEntries = [];\n  }\n\n  calcSettings = (displayWidth, withThousandSeparator, format) => {\n    this.displayWidth = displayWidth;\n    this.withThousandSeparator = withThousandSeparator;\n    this.format = format;\n  }\n\n  getFullState = () => {\n    const state = {}\n    state.historyEntries = StateManagerHelper.deepCopy(this.historyEntries);\n    state.displayWidth = this.displayWidth;\n    state.withThousandSeparator = this.withThousandSeparator;\n    state.format = StateManagerHelper.deepCopy(this.format);\n    return state;\n  }\n\n  restoreState = (state) => {\n    this.historyEntries = state.historyEntries;\n    this.displayWidth = state.displayWidth;\n    this.withThousandSeparator = state.withThousandSeparator;\n    this.format = state.format;\n  }\n\n  /** \n   * @param key - current key pressed\n   * @param value - the current value calculator is displaying. It is the value used by history when equals is pressed.\n   * @param operand - fixed operand used for functions like exponential, log, square.\n  */\n  render = (key, value, operand) => {\n    this.pushToHistory(key, value, operand);\n    return this.recalculateHistoryString();\n  }\n\n  // private \n\n  pushToHistory = (key, value, operand) => {\n    if (this.isKeyAC(key)) {\n      this.pushToHistoryAC(key, value);\n    } else if (this.isKeyC(key)) {\n      this.pushToHistoryC(key, value);\n    } else if (this.isKeyOneOperatorAfterAnotherOperator(key)) {\n      this.pushToHistoryOneOperatorAfterAnotherOperator(key, value);\n    } else if (this.isKeyBackspace(key, value)) {\n      this.pushToHistoryBackspace();\n    } else if (this.isKeyEquals(key)) {\n      this.pushKeyToHistoryEquals(key, value);\n    } else if (key.match(/2nd|Degree|Radian|m/)) {\n      // ignore it -> do not add anything to history\n    } else if (this.isKeyUsingOperand(operand)) {\n      this.pushToHistoryKey(`operand${operand}`, value);\n      this.pushToHistoryKey(key, value);\n    } else {\n      this.pushToHistoryKey(key, value);\n    }\n  }\n\n  // Do not log operators multiple times in succession / last replaces previous ones\n  pushToHistoryOneOperatorAfterAnotherOperator = (key, value) => {\n    this.historyEntries[this.historyEntries.length - 1] = key;\n  }\n\n  pushToHistoryBackspace = (key, value) => {\n    const len = this.historyEntries.length;\n    const prevKey = (len > 0) ? this.historyEntries[len - 1] : undefined;\n\n    if (prevKey !== undefined && prevKey.match(/^(\\.|\\d|\\(|\\))/)) {\n      this.historyEntries.pop();\n      if (this.historyEntries[this.historyEntries.length - 1] === '.') {\n        this.historyEntries.pop();\n      }\n    }\n  }\n\n  pushKeyToHistoryEquals = (key, value) => {\n    this.historyEntries = [`=${value}`];\n  }\n\n\n  pushToHistoryAC = (key, value) => {\n    // AC drops everything\n    this.historyEntries = [];\n  }\n\n  pushToHistoryC = (key, value) => {\n    // C drops the last number, i.e. all digits, dots and commas in a row\n    // TODO: What about a leading minus sign? We should drop that too but \n    // we cannot decide whether this is a minus sign or a minus operator.\n    let lastPopped = this.historyEntries.pop();\n    while (lastPopped !== undefined && lastPopped.match(/\\d/)) {\n      lastPopped = this.historyEntries.pop();\n    }\n    // put back the first key we should not have popped:\n    if (lastPopped !== undefined) {\n      this.historyEntries.push(lastPopped);\n    }\n  }\n\n  pushToHistoryKey = (key, value) => {\n    this.handleCaseOfEqualsFollowedByAnOperationOrByAnOperand(key);\n    this.historyEntries.push(key);\n  }\n\n  handleCaseOfEqualsFollowedByAnOperationOrByAnOperand = (key) => {\n    const previousKey = this.historyEntries[this.historyEntries.length - 1];\n    // previous key was a number starting with = (it was inserted when = was pressed)\n    if (previousKey !== undefined && previousKey.match(/^=-?\\d/)) {\n      if (Number.isNaN(Number(key))) {\n        // is it a function ?\n        this.historyEntries[this.historyEntries.length - 1] = previousKey.substring(1);\n      } else {\n        // is it an operand ?\n        this.historyEntries = [];\n      }\n    }\n  }\n\n  isKeyC = key => key === 'C';\n\n  isKeyAC = key => key === 'AC';\n\n  isKeyOneOperatorAfterAnotherOperator = (key) => {\n    const len = this.historyEntries.length;\n    const prevKey = (len > 0) ? this.historyEntries[len - 1] : undefined;\n    const isOperatorOneAfterTheOther = prevKey !== undefined && prevKey.match(/^(\\+|–|÷|×|yx|log|x√y|E)+$/) && key.match(/^(\\+|–|÷|×|yx|log|x√y|E)+$/);\n    return isOperatorOneAfterTheOther;\n  }\n\n  isKeyBackspace = key => key === \"back\";\n\n  isKeyEquals = key => key === \"=\";\n\n  isKeyUsingOperand = operand => operand !== undefined;\n\n  recalculateHistoryString = () => {\n    let historyString = \"\";\n    let brackets = 0;\n    let betweenOperatorsStack = [];\n\n    this.historyEntries.forEach((key) => {\n      key = key.replace('÷', '/').replace('-', '–');\n      if (key === '+' || key === '×' || key === '/' || key === '–') {\n        historyString += this.recalculateHistoryForStackBetweenOperators(betweenOperatorsStack);\n        historyString += key;\n        betweenOperatorsStack = [];\n      } else if (key === '(') {\n        brackets += 1;\n        betweenOperatorsStack.push(key);\n      } else if (key === ')') {\n        if (brackets > 0) {\n          brackets -= 1;\n          betweenOperatorsStack.push(key);\n        }\n      } else if (key.startsWith(\"=\")) {\n        // handleCaseOfEqualsFollowedByAnOperationOrByAnOperand + pushKeyToHistoryEquals\n        betweenOperatorsStack.push(key.substring(1));\n      } else {\n        betweenOperatorsStack.push(key);\n      }\n    });\n\n    historyString += this.recalculateHistoryForStackBetweenOperators(betweenOperatorsStack);\n\n    historyString = this.formatAllNumbers(historyString);\n    return historyString;\n  }\n\n  recalculateHistoryForStackBetweenOperators = (stack) => {\n    let ret = \"\";\n    for (let i = 0; i < stack.length; i += 1) {\n      const key = stack[i];\n      if (key === \"ex\") {\n        ret = `e^(${ret})`;\n      } else if (key === \"ln\") {\n        ret = `ln(${ret})`;\n      } else if (key === \"x3\") {\n        ret = `${ret}^3`;\n      } else if (key === \"x2\") {\n        ret = `${ret}^2`;\n      } else if (key === \"yx\") {\n        ret = `${ret}^`;\n      } else if (key === \"x√y\") {\n        ret = `${ret} ${Renderer.msg.nroot} `;\n      } else if (key === \"3√\") {\n        ret = `${ret} ${Renderer.msg.nroot} 3`;\n      } else if (key === \"2√\") {\n        ret = `${ret} ${Renderer.msg.nroot} 2`;\n      } else if (key === \"x!\") {\n        ret = `${ret}!`;\n      } else if (key === \"+/–\") {\n        // switch minus\n        ret = ret.startsWith(\"-\") ? ret.substring(1) : `-${ret}`;\n      } else if (key === \"1/x\") {\n        ret = `1/${ret}`;\n      } else if (key === \"sin\" || key === \"csc\" || key === \"cos\" || key === \"sec\" || key === \"tan\" || key === \"cot\" || key === \"sin–1\" || key === \"cos–1\" || key === \"tan–1\") {\n        ret = `${key}(${ret})`;\n      } else if (key === \"operandlog\") {\n        ret = `${ret}log${this.getOperandValue(stack, i)}`;\n      } else if (key === \"operandyx\") {\n        ret = `${ret}^${this.getOperandValue(stack, i)}`;\n      } else if (key === \"operandx√y\") {\n        ret = `${ret} ${Renderer.msg.nroot} ${this.getOperandValue(stack, i)}`;\n      } else if (key === \"operandex\") {\n        ret = `${this.getOperandValue(stack, i)}^(${ret})`;\n      } else if (key.startsWith(\"operand\")) {\n        // it is the base of a log or the power of an exponent\n        // ignore it as it is needed in operator evaluation\n      } else {\n        ret += key;\n      }\n    }\n    return ret;\n  }\n\n  getOperandValue = (stack, index) => {\n    let operand = index > 0 ? stack[index - 1] : \"\";\n    operand = operand.startsWith(\"operand\") ? operand : \"\";\n    const ret = operand.substring(\"operand\".length);\n    return ret;\n  }\n\n  /**\n   * The regular expression we use to detect numbers in the history string.\n   */\n  numberDetectorRegEx = new RegExp(`([0-9]+\\\\.?[0-9]*)`, \"g\");\n\n  /**\n   * formats all numbers in the history string\n   */\n   formatAllNumbers = historyString => historyString.replace(this.numberDetectorRegEx, (str, value) => Renderer.render(value, this.displayWidth, this.withThousandSeparator, this.format));\n\n\n}\n","\nimport CbaCalculatorHistory from \"./CbaCalculatorHistory\";\nimport CbaCalculatorInput from \"./CbaCalculatorInput\";\nimport RenderingHelper from \"../RenderingHelper\";\nimport StateManagerHelper from '../../state/StateManagerHelper';\nimport KeyboardHelper from \"./KeyboardHelper\";\nimport Renderer from \"./Renderer\";\nimport HistoryRenderer from \"./HistoryRenderer\";\nimport Evaluator from \"./Evaluator\";\nimport * as ValueFormatter from \"./ValueFormatter\";\nimport EvaluatorHelper from \"./EvaluatorHelper\";\n\n/**\n * Using the algorithm from https://github.com/DIPFtba/calculator\n */\nexport default class CbaCalculatorEngine {\n\n  constructor(taskPath, runtime) {\n    this.taskPath = taskPath;\n    this.runtime = runtime;\n\n    this.settings = {\n      angle: EvaluatorHelper.ANGLE_DEGREE,\n      // used only to calculate bigger flag which is used by algorithm toPrecision the result\n      displayWidth: 10,\n      // displays each digit in history or only the whole number when an operator is hit\n      includeOperandInHistory: true,\n      withThousandSeparator: true,\n      // not used - library does its scaling\n      scale: 0,\n      format: ValueFormatter.FORMATS.EN,\n      // don't log error messages in production\n      silentOnErrors: true,\n    };\n\n    this.evaluator = new Evaluator(this.settings.displayWidth, this.settings.angle);\n    this.historyRenderer = new HistoryRenderer(this.settings.displayWidth, this.settings.withThousandSeparator, this.settings.format);\n\n\n    this.displayingValue = '0'; // maybe evalKey 0 should be called\n    this.historyDisplayingValue = undefined;\n  }\n\n  getFullState = () => {\n    const state = {}\n    state.evaluator = StateManagerHelper.deepCopy(this.evaluator.getFullState());\n    state.historyRenderer = StateManagerHelper.deepCopy(this.historyRenderer.getFullState());\n    state.settings = StateManagerHelper.deepCopy(this.settings);\n\n    state.displayingValue = this.displayingValue;\n    state.historyDisplayingValue = this.historyDisplayingValue;\n    return state;\n  }\n\n  restoreState = (state) => {\n    this.evaluator.restoreState(state.evaluator);\n    this.historyRenderer.restoreState(state.historyRenderer);\n    this.settings = state.settings;\n\n    this.displayingValue = state.displayingValue;\n    this.historyDisplayingValue = state.historyDisplayingValue;\n  }\n\n  calcGetMem = memIdx => this.evaluator.getMem(memIdx);\n\n  calcOp = (operation, baseOrExponentOrMemIdx) => {\n    const key = KeyboardHelper.fromStatemachineToCalculatorSupportedOperation(operation);\n    if (key) {\n      this.evalKey(key, baseOrExponentOrMemIdx);\n    }\n  }\n\n  calcOpnd = (operation, digits) => {\n    switch (operation) {\n      case \"add\":\n        digits = `${digits}`;\n        for (let i = 0, iMax = digits.length; i < iMax; i += 1) {\n          this.evalKey(digits.charAt(i));\n        }\n        break;\n      case \"decimal\":\n        this.evalKey(\".\");\n        break;\n      case \"back\":\n        this.evalKey(\"back\");\n        break;\n      case \"invadd\":\n        this.evalKey(\"+/–\");\n        break;\n      default:\n        // ignore operation\n        break;\n    }\n  }\n\n  calcSettings = (calcEngineParams) => {\n    this.settings = Object.assign(this.settings, calcEngineParams);\n    this.historyRenderer.calcSettings(this.settings.displayWidth, this.settings.withThousandSeparator, this.settings.format);\n    this.evaluator.setConfiguration(this.settings.displayWidth, this.settings.angle, this.settings.silentOnErrors);\n  }\n\n  // the key pressed events (and paste events) are not going through the statemachine (RAP is doing the same thing) \n  keypress = (pressedKey) => {\n    const key = KeyboardHelper.fromKeyStrokeToCalculatorSupportedOperation(pressedKey);\n    if (key) {\n      this.evalKey(key);\n    }\n  }\n\n  paste = (text) => {\n    const renderCommands = this.evaluator.paste(text);\n    this.triggerRendering(renderCommands);\n  }\n\n  evalKey = (key, operand) => {\n    const renderCommands = this.evaluator.evalKey(key, operand);\n    this.triggerRendering(renderCommands);\n  }\n\n  triggerRendering = (renderCommands) => {\n    renderCommands.render.forEach(command => this.render(command));\n    renderCommands.history.forEach(command => this.renderHistory(command));\n  }\n\n  render = (value) => {\n    this.displayingValue = value === undefined ? undefined : Renderer.render(value, this.settings.displayWidth, this.settings.withThousandSeparator, this.settings.format);\n    const inputs = this.runtime.componentDirectory.findByComponentType(CbaCalculatorInput);\n    inputs.forEach((input) => {\n      CbaCalculatorInput.setDisplayValueInState(input, this.displayingValue);\n      RenderingHelper.triggerRendering(input);\n    });\n  }\n\n  renderHistory = ({ key, value, operand }) => {\n    this.historyDisplayingValue = this.historyRenderer.render(key, value, operand);\n    // trigger rendering when includeOperandInHistory should display the operand when typing\n    if (!KeyboardHelper.isDigitKey(key) || (KeyboardHelper.isDigitKey(key) && this.settings.includeOperandInHistory)) {\n      this.triggerHistoryRendering(this.historyDisplayingValue);\n    }\n  }\n\n  /**\n   * rerenders only calculator history components\n   */\n  triggerHistoryRendering = (value) => {\n    const histories = this.runtime.componentDirectory.findByComponentType(CbaCalculatorHistory);\n    histories.forEach((history) => {\n      CbaCalculatorHistory.setDisplayValueInState(history, value);\n      RenderingHelper.triggerRendering(history);\n    });\n  }\n\n  getTaskPath = () => this.taskPath;\n\n\n}\n","import CbaCalculatorEngine from '../components/calculator/CbaCalculatorEngine';\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\n\r\n/**\r\n * Manager for all calculators.\r\n * \r\n * We keep one calculator per task. \r\n * We need to be informed about the currently running task to switch our 'currently active' \r\n * calculator accordingly.\r\n */\r\nexport default class CalculatorsManager {\r\n\r\n  constructor() {\r\n    this.calculatorsStateList = {};\r\n    this.currentCalculator = undefined;\r\n    this.runtime = undefined;\r\n  }\r\n\r\n  /**\r\n   * Inform the manager about a task switch. \r\n   * \r\n   * @param taskPath The path of the new task to switch to.\r\n   * @param runtime The common runtime context structure. \r\n   */\r\n  setOrInitializeCurrentCalculator = (taskPath, runtime) => {\r\n    this.currentCalculator = new CbaCalculatorEngine(taskPath, runtime);\r\n    this.runtime = runtime;\r\n    this.restoreState(this.calculatorsStateList[taskPath]);\r\n  }\r\n\r\n  /** \r\n  * @returns string to be displayed by calculator history components\r\n  */\r\n  getHistoryDisplayingValue = () => this.safeCall(() => this.currentCalculator.historyDisplayingValue);\r\n\r\n  /**\r\n   * @returns string value to be display by the calculator input\r\n   */\r\n  getDisplayingValue = () => this.safeCall(() => this.currentCalculator.displayingValue);\r\n\r\n  /**\r\n   * @param memIdx - memory index from where to fetch data\r\n   */\r\n  calcGetMem = memIdx => this.safeCall(() => this.currentCalculator.calcGetMem(memIdx));\r\n\r\n  /**\r\n   * Calls an operation on the calculator engine.\r\n   * @param operation - what operation to call (e.g. clear, sin, multiply etc.)\r\n   * @param  baseOrExponentOrMemIdx - some operation need a second parameter (e.g. msave needs a memory index, log needs the base)\r\n   * \r\n   * @see CBA-TutorialReference.docx for more information.\r\n   */\r\n  calcOp = (operation, baseOrExponentOrMemIdx) => this.safeCall(() => this.currentCalculator.calcOp(operation, baseOrExponentOrMemIdx))\r\n\r\n  /**\r\n   * Modifies the current operand of the calculator engine.\r\n   * @param operation - what operation to be performed on current operand (e.g. 'add' – append Digits to the current operand)\r\n   * @param  digits - what digits to append (may be optional e.g. invadd operation just reverts the sign)\r\n   * \r\n   * @see CBA-TutorialReference.docx for more information.\r\n   */\r\n  calcOpnd = (operation, digits) => this.safeCall(() => this.currentCalculator.calcOpnd(operation, digits))\r\n\r\n  /**\r\n   * Initializes the CalculationEngine and sets parameters.  \r\n   * \r\n   * @see CBA-TutorialReference.docx for more information.\r\n   */\r\n  calcSettings = calcEngineParams => this.safeCall(() => this.currentCalculator.calcSettings(calcEngineParams))\r\n\r\n  /** \r\n   * @param pressedKey - KeyboardEvent.key representation as described here https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n  */\r\n  keypress = pressedKey => this.safeCall(() => this.currentCalculator.keypress(pressedKey))\r\n\r\n  /**\r\n   * @param text - text representation of clipboard data\r\n   */\r\n  paste = text => this.safeCall(() => this.currentCalculator.paste(text));\r\n\r\n  getStateForTask = taskPath => this.calculatorsStateList[taskPath]\r\n\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.calculatorsStateList);\r\n\r\n  /**\r\n   * Drop all state.\r\n   */\r\n  clearTasksState = () => {\r\n    this.calculatorsStateList = {};\r\n    this.currentCalculator = undefined;\r\n  };\r\n\r\n  /**\r\n   * Preload the tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.calculatorsStateList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change for a calculator triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, state) => {\r\n    this.calculatorsStateList[taskPath] = state;\r\n    if (this.currentCalculator !== undefined && this.currentCalculator.getTaskPath() === taskPath) {\r\n      this.currentCalculator.restoreState(state);\r\n    }\r\n  }\r\n\r\n  // private \r\n\r\n  safeCall = (func) => {\r\n    if (this.currentCalculator !== undefined) {\r\n      const value = func();\r\n      this.saveState();\r\n      return value;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n\r\n  saveState = () => {\r\n    // cannot use ComponentStateManager\r\n    if (this.currentCalculator !== undefined) {\r\n      const calculatorTaskPath = this.currentCalculator.taskPath;\r\n      const newCalculatorState = this.currentCalculator.getFullState();\r\n      this.calculatorsStateList[calculatorTaskPath] = newCalculatorState;\r\n      TraceLogHelper.dumpStateChangeToTrace(\r\n        'CalculatorState',\r\n        {\r\n          taskPath: calculatorTaskPath,\r\n          state: newCalculatorState\r\n        },\r\n        this.runtime.traceLogBuffer\r\n      );\r\n    }\r\n  }\r\n\r\n  restoreState = (state) => {\r\n    if (this.currentCalculator !== undefined) {\r\n      if (state !== undefined) {\r\n        this.currentCalculator.restoreState(state);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * Utility class meant to store actions that need to be applied over components that were not rendered yet.\r\n * We store the wanted actions in map where the component indexPath is the key \r\n * and the list of actions to be applied once the component was render is the value.  \r\n */\r\nexport default class ActionRegister {\r\n\r\n  constructor() {\r\n    this.actionsMap = new Map();\r\n  }\r\n\r\n  registerAction = (indexPath, action) => {\r\n    let actions = [];\r\n    if (this.actionsMap.has(indexPath)) {\r\n      actions = this.actionsMap.get(indexPath);\r\n    }\r\n\r\n    actions.push(action);\r\n    this.actionsMap.set(indexPath, actions);\r\n  }\r\n\r\n  hasActionsRegisteredForPath = indexPath => this.actionsMap.has(indexPath) && this.actionsMap.get(indexPath).length !== 0;\r\n\r\n  getRegisteredActionsForPath = indexPath => this.actionsMap.get(indexPath);\r\n\r\n  clearRegisteredActionsForPath = indexPath => this.actionsMap.delete(indexPath);\r\n\r\n}\r\n","/**\r\n * Utility class meant to store focus registration per page.\r\n * We store the focus in a map where the page indexPath is the key \r\n * and the value is a boolean.  \r\n */\r\nexport default class ActionRegister {\r\n\r\n  constructor() {\r\n    this.focusMap = new Map();\r\n  }\r\n\r\n  registerFocus = (indexPath) => {\r\n    this.focusMap.set(indexPath, true);\r\n  }\r\n\r\n  hasActionsRegisteredForPath = indexPath => this.focusMap.has(indexPath) && this.focusMap.get(indexPath);\r\n\r\n}\r\n","import React from 'react'\r\nimport { useDragLayer } from 'react-dnd'\r\nimport PropTypes from 'prop-types';\r\nimport { DndItemTypes } from './DragAndDropHelper'\r\nimport Utils from '../utils/Utils';\r\n\r\n/**\r\n * A component to use as custom made drag layer for the drag&drop library.\r\n * \r\n * We use this for the touch screen scenario since the touch backend of the dnd library\r\n * does not show feedback during the drag operation out of the box (as the HTML5 backend does).\r\n */\r\n\r\nconst layerStyles = {\r\n  position: 'fixed',\r\n  pointerEvents: 'none',\r\n  zIndex: 100,\r\n  left: 0,\r\n  top: 0,\r\n  width: '100%',\r\n  height: '100%',\r\n}\r\n\r\nfunction getItemStyles(initialOffset, currentOffset) {\r\n  if (!initialOffset || !currentOffset) {\r\n    return {\r\n      display: 'none',\r\n    }\r\n  }\r\n  const { x, y } = currentOffset\r\n  const transform = `translate(${x}px, ${y}px)`\r\n  return {\r\n    transform,\r\n    WebkitTransform: transform,\r\n  }\r\n}\r\n\r\nconst CustomDragLayer = (props) => {\r\n  const { runtime } = props;\r\n  const {\r\n    itemType,\r\n    isDragging,\r\n    item,\r\n    initialOffset,\r\n    currentOffset,\r\n  } = useDragLayer(monitor => ({\r\n    item: monitor.getItem(),\r\n    itemType: monitor.getItemType(),\r\n    initialOffset: monitor.getInitialSourceClientOffset(),\r\n    currentOffset: monitor.getSourceClientOffset(),\r\n    isDragging: monitor.isDragging(),\r\n  }))\r\n  function renderItem() {\r\n    switch (itemType) {\r\n      case DndItemTypes.VALUE_DISPLAY:\r\n      {\r\n        // The drag source (a SimpleTextField in the value display case) \r\n        // fills the 'previewData' field in the item structure\r\n        // so that we can show a similar textarea as the SimpleTextField does\r\n        // during the drag operation.\r\n        // The left/top coordinates should be zero since the div used\r\n        // for all drag&drop item types follows the \r\n        // mouse pointer via the 'translate' technique already.\r\n        const scaleValue = runtime.app ? runtime.app.state.scaleValue : 1;\r\n        const clippedStyle = Utils.safeDeepCopy(item.previewData.style);\r\n        const augmentedWidth = parseFloat(item.previewData.style.width) * scaleValue;\r\n        const augmentedHeight = parseFloat(item.previewData.style.height) * scaleValue;\r\n        const augmentedFontSize = parseFloat(item.previewData.style.fontSize) * scaleValue;\r\n        const augmentedStyle = Object.assign(clippedStyle, {\r\n          width: augmentedWidth,\r\n          height: augmentedHeight,\r\n          fontSize: augmentedFontSize,\r\n          left: 0,\r\n          top: 0\r\n        })\r\n        return (\r\n          <textarea\r\n            readOnly\r\n            title={item.previewData.title}\r\n            style={augmentedStyle}\r\n            value={item.previewData.value}\r\n            className=\"hide-selection\"\r\n          />\r\n        )\r\n      }\r\n      default:\r\n        // We drag some item type that is not supported by the drag layer yet.\r\n        // (Should never happen.)\r\n        return <div>Dragging...</div>\r\n    }\r\n  }\r\n  if (!isDragging) {\r\n    return null\r\n  }\r\n  return (\r\n    <div style={layerStyles}>\r\n      <div\r\n        style={getItemStyles(initialOffset, currentOffset)}\r\n      >\r\n        {renderItem()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nCustomDragLayer.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default CustomDragLayer\r\n","import axios from 'axios';\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\n\r\nexport default class RecordingBuffer {\r\n\r\n  constructor() {\r\n    this.recordingList = [];\r\n    this.newEntryListener = undefined;\r\n  }\r\n\r\n  // public API for components ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Report recording.\r\n   * \r\n   * The method expects these parameters:\r\n   * - userDefId: A String representing the userDefinedId of the media component.\r\n   * - timestamp: A Date representing the timestamp for the recording ending.\r\n   * - recordingNumber: A Number representing the number of the created recording.\r\n   * - blobUrl: The recording blob URL.\r\n   * \r\n   * The method will retrieve the blob content as base64 data and store it internally.\r\n   * \r\n   */\r\n  reportRecording = (userDefId, timestamp, recordingNumber, blobUrl, taskInfo, userDefinedIDPath) => new Promise((resolve, reject) => {\r\n    axios.get(blobUrl, {\r\n      responseType: 'blob'\r\n    }).then((response) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(response.data);\r\n      reader.onloadend = () => {\r\n        const data = reader.result;\r\n        const { test, item, task } = taskInfo;\r\n        const recordingInfo = {\r\n          sourceComponent: userDefId,\r\n          userDefinedIDPath,\r\n          nbOfRecordingOnComponentInstance: recordingNumber,\r\n          recordingStartTime: timestamp,\r\n          test,\r\n          item,\r\n          task\r\n        }\r\n        const newEntry = {\r\n          recordingInfo,\r\n          data\r\n        }\r\n        this.recordingList.push(newEntry);\r\n        if (this.newEntryListener !== undefined) {\r\n          this.newEntryListener();\r\n        }\r\n        resolve();\r\n      }\r\n    })\r\n  })\r\n\r\n\r\n  // public API for recording consumers --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the next bunch of recording entries for delivery to the server and drop them from our queue.\r\n   * \r\n   * Note: This method must be called from the GUI thread to avoid multithreading issues!\r\n   * \r\n   * The method returns a list of recording entry objects. I returns an empty list of no recording entries are pending.\r\n   */\r\n  popEntries = () => {\r\n    const deliveredEntries = this.recordingList;\r\n    this.recordingList = [];\r\n    return deliveredEntries;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the list of current recording entries (without dropping them).\r\n   * \r\n   * The method returns a list of recording entry objects. It returns an empty list of no recording entries are pending.\r\n   */\r\n  peekEntries = () => StateManagerHelper.deepCopy(this.recordingList);\r\n\r\n  /**\r\n   * Set a function to call each time we receive a new entry.\r\n   * \r\n   * We support a single entry listener only. The entry listener is called after the new recording entry is put into our buffer.\r\n   * \r\n   * @param callback The function to call each time a new entry is put into our buffer.\r\n   */\r\n  setNewEntryListener = (callback) => {\r\n    this.newEntryListener = callback;\r\n  }\r\n\r\n}\r\n","import Utils from '../utils/Utils';\r\nimport UserDataUploader from './UserDataUploader';\r\n\r\n/**\r\n * Manage the transfer of the media stream recordings to the server. \r\n * \r\n * We support transmission of recording entries \r\n *  - via HTTP PUT calls or\r\n *  - window.postMessage events sent to the given target domain origin or\r\n *  - writing the trace logs to the console.\r\n */\r\nexport default class RecordingUploader extends UserDataUploader {\r\n\r\n  constructor(recordingBuffer) {\r\n    super(recordingBuffer, RecordingUploader.buildRecordingPostContent, \"recording\");\r\n    this.transmitInterval = undefined;\r\n    this.startAutomaticTransmissions();\r\n  }\r\n\r\n  // ------- public API -----------------------------------------------------------------------------\r\n\r\n  // See the base class UserDataUploader for our public API.\r\n\r\n  // ------- private stuff --------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build the content of a recording transmission to the server. \r\n   * \r\n   * This consists of a meta data structure and the list of recording entries to transmit.\r\n   * We take the list of recording entries from our internal recording entries list but\r\n   * we do not drop the entries from this list yet.\r\n   * \r\n   * @param {String} sendTimestamp The time of send operation.\r\n   * @param {*} runtime \r\n   */\r\n   static buildRecordingPostContent = (sendTimestamp, sessionContext, recordingEntriesList) => {\r\n     const { sessionId, username, loginTimestamp } = sessionContext;\r\n     if (sessionId === undefined) {\r\n       console.warn(\"Sending recording with dummy session id!\");\r\n     }\r\n     const metaData = {\r\n       userId: username,\r\n       sessionId: sessionId === undefined ? 'dummySessionId' : sessionId,\r\n       loginTimestamp,\r\n       sendTimestamp,\r\n       cbaVers: Utils.getCbaVersion()\r\n     };\r\n\r\n     const recordingPostContent = {\r\n       metaData,\r\n       recordingEntriesList\r\n     };\r\n\r\n     return recordingPostContent;\r\n   }\r\n\r\n}\r\n","\r\nexport default class LibraryManager {\r\n\r\n  constructor() {\r\n    this.librariesUsedMap = {}\r\n  }\r\n\r\n  // ----- public API --------------------------------------------------------------------------\r\n\r\n  addLibrariesForItem(itemLibraries, libraryPathsMap) {\r\n    if (!itemLibraries || (itemLibraries && !itemLibraries.length > 0)) return;\r\n    if (!libraryPathsMap || (libraryPathsMap && !Object.keys(libraryPathsMap).length > 0)) return;\r\n    if (!LibraryManager.checkLibraryPaths(itemLibraries, libraryPathsMap)) return;\r\n\r\n    itemLibraries.forEach((library) => {\r\n      switch (library.name) {\r\n        case \"MathJax\": this.addMathJax(libraryPathsMap[library.name]); break;\r\n        default: console.error(\"Unexpected library provied\", library.name); break;\r\n      }\r\n    })\r\n\r\n\r\n  }\r\n\r\n  // ----- private stuff -----------------------------------------------------------------------\r\n\r\n  static checkLibraryPaths(itemLibraries, libraryPathsMap) {\r\n    const checker = itemLibraries.map(library => !!libraryPathsMap[library.name]);\r\n\r\n    return checker.every(c => c === true);\r\n  }\r\n\r\n  addMathJax(libraryPath) {\r\n    // check if MathJax is already in use\r\n    if (this.librariesUsedMap.MathJax) {\r\n      return;\r\n    }\r\n\r\n    this.librariesUsedMap.MathJax = libraryPath;\r\n\r\n    const scriptTag = document.createElement('script');\r\n    scriptTag.setAttribute('src', libraryPath);\r\n    scriptTag.setAttribute('async', true);\r\n    scriptTag.setAttribute('id', \"MathJax-script\")\r\n\r\n    document.head.appendChild(scriptTag);\r\n\r\n  }\r\n\r\n}\r\n","import RenderingHelper from \"../components/RenderingHelper\";\r\nimport Utils from \"../utils/Utils\";\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\nexport default class VariableManager {\r\n\r\n  constructor() {\r\n    this.variableMap = {};\r\n    this.variableObservers = [];\r\n    this.tracing = false;\r\n  }\r\n\r\n  /**\r\n   * Initialize all variables when starting a task\r\n   * \r\n   * @param {String} taskPath the task path for which to init variables\r\n   * @param {*} variablesConfig the configuration object\r\n   * @param {*} runtime runtime object\r\n   */\r\n  initializeVariablesForTask(taskPath, variablesConfig, withTrace, runtime) {\r\n    // do not initialize for existing taskPath or no variable config\r\n    if (variablesConfig && !this.variableMap[taskPath]) {\r\n      variablesConfig.forEach((variableConfig) => {\r\n        const { name, value, type } = variableConfig;\r\n        this.setVariable(taskPath, name, value, type, runtime)\r\n      });\r\n    }\r\n    this.tracing = withTrace;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * Get the variable value from a specific task\r\n   * Flag could be provided to get all data (type, name, value)\r\n   * \r\n   * @param {String} taskPath the task path where the variable is located\r\n   * @param {String} variableName the variable name \r\n   * @param {Boolean} getFullData flag to specify whether to provide the full object or not\r\n   * @returns {Object | String | Number | Boolean} Variable object or value\r\n   */\r\n  getVariable(taskPath, variableName, getFullData) {\r\n\r\n    const taskEntry = this.variableMap[taskPath];\r\n    if (taskEntry === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const variableEntry = taskEntry[variableName];\r\n    if (variableEntry === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    return getFullData ? variableEntry : variableEntry.value;\r\n  }\r\n\r\n  /**\r\n   * Set the variable value from a specific task\r\n   * \r\n   * - check whether var exists already\r\n   * - if variable exists:\r\n   *   + type of value is compatible with type of variable\r\n   *   + if type is given it must match the existing type\r\n   * - if variable does not exist:\r\n   *   + type must be specified\r\n   *   + type of value is compatible with type of variable\r\n   * \r\n   * @param {String} taskPath the task path where the variable is located\r\n   * @param {String} name the variable name \r\n   * @param {*} value value to set\r\n   * @param {String} type variable type \r\n   * @param {*} runtime runtime object\r\n   */\r\n  setVariable(taskPath, name, value, type, runtime) {\r\n    if (!this.variableMap[taskPath]) {\r\n      this.variableMap[taskPath] = {};\r\n    }\r\n\r\n    const oldVariable = this.variableMap[taskPath][name];\r\n\r\n    if (oldVariable) {\r\n\r\n      if (!Utils.checkType(value, oldVariable.type)) {\r\n        console.error(`Provided variable value is of the wrong type. Expected ${oldVariable.type}`);\r\n        this.traceVariableChangeAttempt(name, oldVariable.type, type, oldVariable.value, value, 'valueWrongType', runtime);\r\n        return;\r\n      }\r\n\r\n      if (type && type !== oldVariable.type) {\r\n        console.error(`Provided type is wrong. Expected ${oldVariable.type}`);\r\n        this.traceVariableChangeAttempt(name, oldVariable.type, type, oldVariable.value, value, 'givenTypeNoMatch', runtime);\r\n        return;\r\n      }\r\n\r\n      // all checks passed, set variable value\r\n      const oldValue = oldVariable.value;\r\n      this.variableMap[taskPath][name].value = value;\r\n      this.traceVariableChangeAttempt(name, oldVariable.type, type, oldValue, value, 'ok', runtime);\r\n\r\n    } else {\r\n\r\n      if (!type) {\r\n        console.error('Provided variable must have a type');\r\n        this.traceVariableChangeAttempt(name, undefined, undefined, undefined, value, 'typeMissing', runtime);\r\n        return;\r\n      }\r\n\r\n      if (!Utils.checkType(value, type)) {\r\n        console.error(`Provided variable value has inconsistent type. Expected ${type}`);\r\n        this.traceVariableChangeAttempt(name, undefined, type, undefined, value, 'typeInconsistent', runtime);\r\n        return;\r\n      }\r\n\r\n      // all checks passed, set variable value\r\n      const newValue = {\r\n        name,\r\n        value,\r\n        type\r\n      }\r\n      this.variableMap[taskPath][name] = newValue;\r\n    }\r\n\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'VariableManagerState',\r\n      {\r\n        taskPath,\r\n        name,\r\n        value: this.variableMap[taskPath][name]\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n\r\n    this.variableObservers\r\n      .filter(entry => entry.variableName === name)\r\n      .forEach((entry) => {\r\n        RenderingHelper.triggerRenderingViaPath(entry.indexPath, runtime);\r\n      })\r\n  }\r\n\r\n  traceVariableChangeAttempt(variableName, variableType, newValueType, oldValue, newValue, operationStatus, runtime) {\r\n    if (this.tracing) {\r\n      runtime.traceLogBuffer.reportEvent(\r\n        'SetVariableValue',\r\n        new Date(),\r\n        {\r\n          variableName,\r\n          variableType,\r\n          newValueType,\r\n          oldValue: `${oldValue}`,\r\n          newValue: `${newValue}`,\r\n          operationStatus\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} taskPath the task path where the variables are located\r\n   * @returns {Object} a copy of the variableMap for that task VariableValuesMap\r\n   */\r\n  getVariableValuesMapForTask(taskPath, getFullData) {\r\n    const variableMap = this.variableMap[taskPath];\r\n    const variableValuesMap = {};\r\n\r\n    if (variableMap) {\r\n      Object.keys(variableMap).forEach((name) => {\r\n        variableValuesMap[name] = getFullData ? variableMap[name] : variableMap[name].value;\r\n      })\r\n    }\r\n\r\n    return Utils.safeDeepCopy(variableValuesMap);\r\n  }\r\n\r\n  /**\r\n  * Build an array of variable/value pairs describing variables for a task\r\n  * @param {String} taskPath the task path where the variable is located\r\n  */\r\n  buildVariablesInfoArrayForTask = (taskPath) => {\r\n    const variableMap = this.variableMap[taskPath];\r\n    const variablesArray = [];\r\n\r\n    if (variableMap) {\r\n      Object.keys(variableMap).forEach((variable) => {\r\n        variablesArray.push(variableMap[variable]);\r\n      });\r\n    }\r\n\r\n    return variablesArray;\r\n  }\r\n\r\n  /**\r\n   * Add a display component instance as observer on variable changes. \r\n   * \r\n   * The variable manager will trigger a rerendering on the component \r\n   * each time the given variable changes its value.\r\n   * \r\n   * @param {String} indexPath The index path of the observing component.\r\n   * @param {String} variableName The name of the variable to be observed.\r\n   */\r\n  addVariableChangeObserver = (indexPath, variableName) => {\r\n    if (this.variableObservers.find(entry => entry.indexPath === indexPath && entry.variableName === variableName) === undefined) {\r\n      this.variableObservers.push({\r\n        indexPath,\r\n        variableName\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop a display component instance from the list of observers. \r\n   * \r\n   * @param {String} indexPath The index path of the observing component.\r\n   * @param {String} variableName The name of the variable to be observed.\r\n   */\r\n  dropVariableChangeObserver = (indexPath, variableName) => {\r\n    const entryIndex = this.variableObservers.findIndex(entry => entry.indexPath === indexPath && entry.variableName === variableName);\r\n    if (entryIndex !== undefined) {\r\n      this.variableObservers.splice(entryIndex, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop all change observers from a path\r\n   * \r\n   * @param {String} indexPath The index path of the observing component.\r\n   */\r\n  dropChangeObserverForPath = (indexPath) => {\r\n    const entryList = this.variableObservers.filter(entry => entry.indexPath === indexPath);\r\n    if (entryList !== undefined && entryList.length > 0) {\r\n      entryList.forEach((entry) => {\r\n        this.dropVariableChangeObserver(indexPath, entry.variableName);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggers rerendering for all change observers\r\n   * \r\n   * @param {*} runtime our runtime object\r\n   */\r\n  triggerRerenderForAllChangeObservers = (runtime) => {\r\n    this.variableObservers\r\n      .forEach((entry) => {\r\n        RenderingHelper.triggerRenderingViaPath(entry.indexPath, runtime);\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Remove all change observers\r\n   */\r\n  clearAllChangeObservers = () => {\r\n    this.variableObservers = [];\r\n  }\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n   getAllTasksState = () => StateManagerHelper.deepCopy(this.variableMap);\r\n\r\n   /**\r\n    * Drop all tasks.\r\n    */\r\n   clearTasksState = () => {\r\n     this.variableMap = {};\r\n     this.clearAllChangeObservers();\r\n   };\r\n\r\n   /**\r\n    * Preload the tasks state returned by a call to getAllTasksState.\r\n    */\r\n   preloadTasksState = (allTasksState) => {\r\n     this.variableMap = StateManagerHelper.deepCopy(allTasksState);\r\n   }\r\n\r\n  /**\r\n   * Inject a change for a variable value triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, name, value) => {\r\n    if (!this.variableMap[taskPath]) {\r\n      this.variableMap[taskPath] = {}\r\n    }\r\n    this.variableMap[taskPath][name] = value;\r\n  }\r\n\r\n\r\n}\r\n","import MenuItemTree from '../components/MenuItemTree';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport Utils from '../utils/Utils';\r\n\r\n/**\r\n * Helper to run a story of trace log events as replay.\r\n */\r\nexport default class ReplayRunner {\r\n\r\n  // ---------- public API ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build a replay runner. \r\n   */\r\n  constructor() {\r\n    this.nowProvider = () => Date.now();\r\n    this.delayProcessor = (delayMillis, action) => {\r\n      console.info(`Replay step with delay: ${delayMillis}`);\r\n      setTimeout(action, delayMillis);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set a non-standard \"now\" timestamp provider.\r\n   * \r\n   * Test code might wish control the value used for \"now\".\r\n   * Production code should not use this method but rely on the default standard implementation\r\n   * that we provide implicitly. \r\n   */\r\n  setNowProvider = (nowProvider) => {\r\n    this.nowProvider = nowProvider;\r\n  }\r\n\r\n  /**\r\n   * Set a non-standard delay processor.\r\n   * \r\n   * Test code might wish to shortcut delays and collect delay intervals explicitly instead.\r\n   * Production code should not use this method but rely on the default standard implementation\r\n   * that we provide implicitly. \r\n   */\r\n  setDelayProcessor = (processor) => {\r\n    this.delayProcessor = processor;\r\n  }\r\n\r\n\r\n  /**\r\n   * Run a replay of the given replay steps.\r\n   */\r\n  replay = (story, finishedAction, settings, headerButtons, courseForNavigator, testsForNavigator, runtime) => {\r\n\r\n    this.replayFromTaskStartingPoint(\r\n      story,\r\n      0,\r\n      {\r\n        settings, headerButtons, courseForNavigator, testsForNavigator\r\n      },\r\n      finishedAction,\r\n      runtime\r\n    );\r\n  }\r\n\r\n\r\n  // ---------- private stuff ---------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Run a replay of the given replay steps starting with the step at the given from index.\r\n   */\r\n  replayFromTaskStartingPoint = (story, fromIndex, appSettings, finishedAction, runtime) => {\r\n    // Get the initializing sequence for the next task:\r\n    const initializingTriple = ReplayRunner.grabInitializingTriple(story, fromIndex);\r\n    if (initializingTriple === undefined) {\r\n      console.info(`Could not find task start for replay -> replay command aborted.`);\r\n      return;\r\n    }\r\n\r\n    const { taskSwitchEntry, fullStateEntry, tasksViewVisibleEntry, stateChangeEntries, nextIndex } = initializingTriple;\r\n\r\n    const { taskManager, app } = runtime;\r\n\r\n    // Initialize the state before showing the initial task:\r\n    taskManager.preloadTasksState(fullStateEntry.details);\r\n    stateChangeEntries.forEach((step) => {\r\n      const { stateType, stateDelta } = step.details;\r\n      ReplayRunner.processStateChangeStep(stateType, stateDelta, runtime);\r\n    })\r\n\r\n    // Show the initial task:\r\n    const { newTest, newItem, newTask } = taskSwitchEntry.details;\r\n    // The execution environment might want to use different global settings than the original assessment.\r\n    // --> Ignore settings specified in TasksViewVisible entry and use current settings in TaskPlayer instead.\r\n    const { settings, headerButtons, courseForNavigator, testsForNavigator } = appSettings;\r\n    app.showReplay(newTest, newItem, newTask, settings, headerButtons, courseForNavigator, testsForNavigator);\r\n\r\n    // Replay the remaining steps:\r\n    const initialReplayTick = tasksViewVisibleEntry.details.replayTick === undefined ? 0 : tasksViewVisibleEntry.details.replayTick;\r\n    const initialTimestamp = this.nowProvider();\r\n\r\n    this.continueStoryExecution(\r\n      story,\r\n      nextIndex,\r\n      initialReplayTick,\r\n      initialTimestamp,\r\n      nextStepIndex => this.executeNextReplayStep(story, nextStepIndex, appSettings, finishedAction, runtime),\r\n      finishedAction\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * Continue to replay the given story of replay step entries. \r\n   * \r\n   * We run further steps in the story starting from the nextStepIndex. \r\n   *\r\n   * As long as \r\n   *  - the steps don't contain a replayTick value or \r\n   *  - their replayTick time is almost reached already\r\n   * we execute steps at once, i.e. we call the stepAction for them.\r\n   * \r\n   * At the first step that requires postponement due to its replayTick value,\r\n   * we schedule another call to ourself with an updated nextStepIndex.\r\n   * \r\n   * If we reach the end of the story we trigger the doneAction.\r\n   * \r\n   * @param {*} story The complete story of replay steps.\r\n   * @param {*} nextStepIndex The index of the next replay step to be executed.\r\n   * @param {*} initialReplayTick The replayTick of the initial TasksViewVisible step.\r\n   * @param {*} initialTimestamp The time when the replay of the complete story started.\r\n   * @param {*} appSettings The settings to use for starting the App for a task.\r\n   * @param {*} stepAction The action to perform on each replay step. This should return true if it takes over processing of all remaining steps, false otherwise.\r\n   * @param {*} doneAction The action to perform when the story ends.\r\n   */\r\n  continueStoryExecution = (story, nextStepIndex, initialReplayTick, initialTimestamp, stepAction, doneAction) => {\r\n    let currentStepIndex = nextStepIndex;\r\n    let currentStep = story[currentStepIndex];\r\n    let delayMillis = ReplayRunner.calculateDelayMillisByNow(initialReplayTick, initialTimestamp, currentStep, this.nowProvider);\r\n    while (currentStep !== undefined && delayMillis < 100) {\r\n      if (stepAction(currentStepIndex)) {\r\n        return;\r\n      }\r\n      currentStepIndex += 1;\r\n      currentStep = story[currentStepIndex]\r\n      delayMillis = ReplayRunner.calculateDelayMillisByNow(initialReplayTick, initialTimestamp, currentStep, this.nowProvider);\r\n    }\r\n\r\n    if (currentStep !== undefined) {\r\n      this.delayProcessor(delayMillis, () => {\r\n        this.continueStoryExecution(story, currentStepIndex, initialReplayTick, initialTimestamp, stepAction, doneAction);\r\n      })\r\n    } else {\r\n      doneAction();\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Execute the given replay step immediately.\r\n   * \r\n   * If it takes over all remaining steps the method returns true, otherwise false.\r\n   */\r\n  executeNextReplayStep(story, nextStepIndex, appSettings, doneAction, runtime) {\r\n    const currentStep = story[nextStepIndex];\r\n    let dummyEvent;\r\n\r\n    switch (currentStep.type) {\r\n      case 'StateChange':\r\n        {\r\n          const { stateType, stateDelta } = currentStep.details;\r\n          ReplayRunner.processStateChangeStep(stateType, stateDelta, runtime);\r\n        }\r\n        return false;\r\n      case 'FullState':\r\n        // TODO: ignore for now but we should validate this later on\r\n        return false;\r\n      case 'RenderTriggered':\r\n        {\r\n          const component = runtime.componentDirectory.findComponent(currentStep.details.indexPath);\r\n          if (component !== undefined) {\r\n            RenderingHelper.triggerRendering(component);\r\n          } else {\r\n            console.log(`Component missing for rendering -> trigger render from top`);\r\n            runtime.taskManager.handleTopLevelPageChange()\r\n          }\r\n        }\r\n        return false;\r\n      case 'TaskSwitch':\r\n        if (currentStep.details.newTask === undefined) {\r\n          // stop task entry \r\n          runtime.app.showWaiting();\r\n          return false;\r\n        } else {\r\n          // start task entry \r\n          this.replayFromTaskStartingPoint(story, nextStepIndex, appSettings, doneAction, runtime);\r\n          return true;\r\n        }\r\n      case 'ContextMenu':\r\n        if (currentStep.details.shouldOpen) {\r\n          dummyEvent = new Event(currentStep.details.event.type);\r\n          dummyEvent.clientX = currentStep.details.event.clientX;\r\n          dummyEvent.clientY = currentStep.details.event.clientY;\r\n\r\n          runtime.contextMenu.openMenuItemTree({\r\n            entries: currentStep.details.entries,\r\n            event: dummyEvent\r\n          });\r\n        } else {\r\n          MenuItemTree.closeMenuItemTree();\r\n        }\r\n\r\n        return false;\r\n      case 'ScrollTriggered': {\r\n        const component = runtime.componentDirectory.findComponent(currentStep.details.path);\r\n        const { scrollTop, scrollLeft } = currentStep.details;\r\n\r\n        if (!component && !component.containerRendererRef) {\r\n          return false;\r\n        }\r\n\r\n        let htmlElement = component.containerRendererRef.current;\r\n\r\n        while (getComputedStyle(htmlElement).overflow === 'hidden') {\r\n          htmlElement = htmlElement.parentElement;\r\n\r\n          if (htmlElement === document.body) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        Utils.doScroll(scrollTop, scrollLeft, htmlElement)\r\n        return false;\r\n      }\r\n      default:\r\n        // just ignore irrelevant story events\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the state managers due to a 'StateChange' step.\r\n   */\r\n  static processStateChangeStep(stateType, stateDelta, runtime) {\r\n    switch (stateType) {\r\n      case 'ComponentState':\r\n        {\r\n          const { pathId, state } = stateDelta;\r\n          runtime.componentStateManager.registerStateChangeFromSnapshot(pathId, state);\r\n        }\r\n        break;\r\n      case 'PresenterStateManagerState':\r\n        {\r\n          const { taskPath, state } = stateDelta;\r\n          runtime.presenterStateManager.injectStateChangeAtReplay(taskPath, state);\r\n        }\r\n        break;\r\n      case 'TaskNavigatorStateManagerState':\r\n        {\r\n          const { name, value } = stateDelta;\r\n          runtime.taskNavigatorStateManager.injectStateChangeAtReplay(name, value);\r\n        }\r\n        break;\r\n      case 'IncidentsAccumulatorState':\r\n        {\r\n          const { taskPath, state } = stateDelta;\r\n          runtime.incidentsAccumulator.injectStateChangeAtReplay(taskPath, state);\r\n        }\r\n        break;\r\n      case 'VariableManagerState':\r\n        {\r\n          const { taskPath, name, value } = stateDelta;\r\n          runtime.variableManager.injectStateChangeAtReplay(taskPath, name, value);\r\n        }\r\n        break;\r\n      case 'CalculatorState':\r\n        {\r\n          const { taskPath, state } = stateDelta;\r\n          runtime.calculatorsManager.injectStateChangeAtReplay(taskPath, state);\r\n        }\r\n        break;\r\n      case 'ClipboardState':\r\n        {\r\n          const { state } = stateDelta;\r\n          runtime.clipboardManager.injectStateChangeAtReplay(state);\r\n        }\r\n        break;\r\n      default:\r\n      {\r\n        console.warn(`Unknown StateChange replay step type ignored!`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the delay required before executing the given step.\r\n   * \r\n   * If the step does not specify a replay tick value, the delay is zero.\r\n   */\r\n  static calculateDelayMillisByNow(initialReplayTick, initialTimestamp, step, nowProvider) {\r\n    if (step === undefined || step.replayTick === undefined) return 0;\r\n    return ReplayRunner.calculateDelayMillis(initialReplayTick, initialTimestamp, step.replayTick, nowProvider());\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the delay required before executing a step with the given replay tick value.\r\n   * \r\n   * The delay is never negative. \r\n   */\r\n  static calculateDelayMillis(initialReplayTick, initialTimestamp, stepReplayTick, nowTimestamp) {\r\n    return Math.max(0, (stepReplayTick - initialReplayTick) - (nowTimestamp - initialTimestamp));\r\n  }\r\n\r\n  /**\r\n   * Helper method that extracts the initializing triple of log entries TaskSwitch+FullState+TasksViewVisible \r\n   * from the given replay trace file.\r\n   * \r\n   * The method returns undefined if it cannot detect a proper triple. \r\n   * Besides the initializing triple it returns all StateChange events \r\n   * appearing between the FullState and the TasksViewVisible log entries.\r\n   */\r\n  static grabInitializingTriple(story, nextIndex) {\r\n    let entryIndex;\r\n\r\n    // scroll down until we see the first TaskSwitch entry that starts a task:\r\n    let tripleStartFound = false;\r\n    for (entryIndex = nextIndex; entryIndex < story.length && !tripleStartFound;) {\r\n      const currentStep = story[entryIndex];\r\n      if (currentStep.type === 'TaskSwitch' && currentStep.details.newTask !== undefined) {\r\n        tripleStartFound = true;\r\n      } else {\r\n        entryIndex += 1;\r\n      }\r\n    }\r\n    if (!tripleStartFound) return undefined;\r\n    const taskSwitchEntry = story[entryIndex];\r\n\r\n    // scroll down through StateChange entries until we find the FullState entry:\r\n    entryIndex += 1;\r\n    let nextEntry = story[entryIndex];\r\n    while (nextEntry !== undefined && nextEntry.type === 'StateChange') {\r\n      entryIndex += 1;\r\n      nextEntry = story[entryIndex];\r\n    }\r\n    if (nextEntry === undefined || nextEntry.type !== 'FullState') return undefined;\r\n    const fullStateEntry = nextEntry;\r\n\r\n    // scroll down through StateChange entries and remember them until we find the TasksViewVisible entry:\r\n    entryIndex += 1;\r\n    const stateChangeEntries = [];\r\n    nextEntry = story[entryIndex];\r\n    while (nextEntry !== undefined && nextEntry.type === 'StateChange') {\r\n      stateChangeEntries.push(nextEntry);\r\n      entryIndex += 1;\r\n      nextEntry = story[entryIndex];\r\n    }\r\n    if (nextEntry === undefined || nextEntry.type !== 'TasksViewVisible') return undefined;\r\n    const tasksViewVisibleEntry = nextEntry;\r\n\r\n    return {\r\n      taskSwitchEntry,\r\n      fullStateEntry,\r\n      tasksViewVisibleEntry,\r\n      stateChangeEntries,\r\n      nextIndex: entryIndex + 1\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","/**\r\n * Keep the currently active 'replay step'.\r\n */\r\nexport default class ReplayStepMonitor {\r\n\r\n  constructor() {\r\n    this.currentReplayStepId = 0;\r\n  }\r\n\r\n  // public API ------------------------------------------------------------------\r\n\r\n  incrementReplayStep = () => {\r\n    this.currentReplayStepId += 1;\r\n\r\n  }\r\n\r\n  getCurrentReplayStepId = () => this.currentReplayStepId;\r\n\r\n  // private stuff ------------------------------------------------------------------\r\n\r\n\r\n}\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\ni18n\r\n  .use(initReactI18next)\r\n  .init({\r\n    resources: {},\r\n    lng: 'en', // default language\r\n    fallbackLng: 'en',\r\n    interpolation: {\r\n      escapeValue: false, // react already safes from xss\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import i18n from \"../i18n\";\r\nimport StateAttributeAccess from './StateAttributeAccess';\r\nimport ComponentStateHelper from './ComponentStateHelper';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\nimport IndexPathHelper from \"./IndexPathHelper\";\r\nimport TreeUtils from \"../components/CbaTree/TreeUtils\";\r\nimport TableHelper from \"../components/table/TableHelper\";\r\n\r\nexport default class TranslationManager {\r\n\r\n  constructor() {\r\n    const { t } = i18n;\r\n    this.t = t;\r\n\r\n    this.setupLanguageValues('', '', '', false);\r\n    this.excludedComponentTypes = this.initializeComponentTypesToExclude();\r\n    this.renderAfterTranslationComponentTypes = this.initializeRenderAfterTranslationComponentTypes();\r\n  }\r\n\r\n  changeLanguage = (language, runtime) => {\r\n    i18n.changeLanguage(language);\r\n\r\n    if (this.currentLanguage !== language || this.currentLanguage === '') {\r\n      this.translationLanguage = language;\r\n      this.translate(runtime);\r\n    }\r\n    this.currentLanguage = language;\r\n  };\r\n\r\n  setupTranslation = (itemConfig) => {\r\n    if (itemConfig.translations) {\r\n      Object.keys(itemConfig.translations).forEach((lng) => {\r\n        i18n.addResources(lng, 'translation', itemConfig.translations[lng].translation);\r\n        if (itemConfig.translations[lng].defaultLanguage) {\r\n          this.setupLanguageValues(lng, '', '', true);\r\n        }\r\n      });\r\n    } else {\r\n      this.setupLanguageValues('', '', '', false);\r\n    }\r\n  }\r\n\r\n  setupLanguageValues(defaultLanguage, currentLanguage, translationLanguage, useTranslation) {\r\n    this.defaultLanguage = defaultLanguage;\r\n    this.currentLanguage = currentLanguage;\r\n    this.translationLanguage = translationLanguage;\r\n    this.useTranslation = useTranslation;\r\n\r\n    if (useTranslation) {\r\n      i18n.changeLanguage(this.defaultLanguage);\r\n    }\r\n  }\r\n\r\n  getTranslatedTextWithFallback = (key, defaultValue) => {\r\n    const translatedText = this.getTranslatedText(key);\r\n    if (translatedText === null) return defaultValue;\r\n    return translatedText;\r\n  }\r\n\r\n  getTranslatedText = (key) => {\r\n    if (!this.useTranslation) return null;\r\n    const exists = i18n.exists(`${key}_Text`);\r\n    return exists ? i18n.t(`${key}_Text`) : null;\r\n  }\r\n\r\n  getTranslatedText4GivenLanguage = (key, language) => {\r\n    if (!this.useTranslation) return null;\r\n    const exists = i18n.exists(`${key}_Text`, {\r\n      lng: language\r\n    });\r\n    return exists? i18n.t(`${key}_Text`, {\r\n      lng: language\r\n    }) : null;\r\n  }\r\n\r\n  getTranslatedMouseOverWithFallback = (key, defaultValue) => {\r\n    const translatedMouseOver = this.getTranslatedMouseOver(key);\r\n    if (translatedMouseOver === null) return defaultValue;\r\n    return translatedMouseOver;\r\n  }\r\n\r\n  getTranslatedMouseOver = (key) => {\r\n    if (!this.useTranslation) return null;\r\n    const exists = i18n.exists(`${key}_MouseOver`);\r\n    return exists ? i18n.t(`${key}_MouseOver`) : null;\r\n  }\r\n\r\n  getTranslatedImageWithFallback = (key, defaultValue) => {\r\n    const translatedImage = this.getTranslatedImage(key);\r\n    if (translatedImage === null) return defaultValue;\r\n    return translatedImage;\r\n  }\r\n\r\n  getTranslatedImage = (key) => {\r\n    if (!this.useTranslation) return null;\r\n    const exists = i18n.exists(`${key}_Image`);\r\n    return exists ? i18n.t(`${key}_Image`) : null;\r\n  }\r\n\r\n  addTranslationChangedListener = (instance) => {\r\n    const { runtime, config } = instance.props;\r\n    const { userDefinedId } = config;\r\n\r\n    const translation = (this.getTranslatedText(userDefinedId));\r\n    if (translation !== null) {\r\n      runtime.eventEmitter.addListener('translationUpdate', this.onTranslationUpdate.bind(this, instance));\r\n    }\r\n  }\r\n\r\n  onTranslationUpdate = (instance) => {\r\n    const { runtime, path, config } = instance.props;\r\n    const { userDefinedId } = config;\r\n    const pathState = ComponentStateHelper.getState(instance);\r\n    StateAttributeAccess.setTextValue(pathState, runtime.translationManager.getTranslatedText(userDefinedId));\r\n    ComponentStateHelper.registerState(instance, pathState);\r\n    RenderingHelper.triggerRenderingViaPath(path, runtime);\r\n  }\r\n\r\n  initializeComponentTypesToExclude = () => {\r\n    const excludedComponentTypes = [];\r\n    // managed by the table translation\r\n    excludedComponentTypes.push('CbaTableCell');\r\n\r\n    // not implemented yet\r\n    excludedComponentTypes.push('CbaTree');\r\n    excludedComponentTypes.push('CbaTreeChildArea');\r\n    excludedComponentTypes.push('CbaTreeView');\r\n    excludedComponentTypes.push('CbaTreeCell');\r\n    excludedComponentTypes.push('CbaTreeHeader');\r\n    excludedComponentTypes.push('CbaTreeRow');\r\n\r\n    excludedComponentTypes.push('CbaRichTextField');\r\n\r\n    return excludedComponentTypes;\r\n  }\r\n\r\n  initializeRenderAfterTranslationComponentTypes = () => {\r\n    const renderAfterTranslationComponentTypes = [];\r\n    renderAfterTranslationComponentTypes.push('CbaComboBox');\r\n    renderAfterTranslationComponentTypes.push('CbaList');\r\n    renderAfterTranslationComponentTypes.push('CbaTableCellEditor');\r\n    return renderAfterTranslationComponentTypes;\r\n  }\r\n\r\n  translate = (runtime) => {\r\n    try {\r\n      const itemName = runtime.taskManager.getCurrentTestTaskItemNames().item;\r\n      const itemInfo = runtime.taskManager.getItemInfo(itemName);\r\n      const { itemConfiguration } = itemInfo;\r\n\r\n      const pagesUdis = [];\r\n      itemConfiguration.pages.forEach((page) => {\r\n        pagesUdis.push(page.content.config.userDefinedId);\r\n      })\r\n\r\n      const componentsToRenderAfterTranslation = [];\r\n      const containersPathList = ComponentStateHelper.findIndexPathsInCurrentTaskOfComponentWithType('CbaContainer', runtime);\r\n      containersPathList.forEach((path) => {\r\n        const containerAbsoluteUserDefId = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime);\r\n        const containerUserDefId = UserDefPathHelper.getLastUserDefIdFromPath(containerAbsoluteUserDefId);\r\n        if (containerUserDefId !== undefined && pagesUdis.includes(containerUserDefId)) {\r\n          const memberPaths = ComponentStateHelper.findIndexPathsOfDescendants(path, runtime);\r\n          memberPaths.forEach((memberPath) => {\r\n            const componentType = ComponentStateHelper.getComponentTypeForIndexPath(memberPath, runtime);\r\n            const translationData = this.getTranslationData(memberPath, runtime);\r\n\r\n            switch (componentType) {\r\n              case 'CbaTable':\r\n                this.translateTable(memberPath, runtime);\r\n                break;\r\n              // Image Map: references the userDefinedId in the RegionMap but the image is managed by the container  \r\n              case 'CbaContainer': {\r\n                const imageMapUserDefinedId = this.getImageMapUserDefinedId(memberPath, runtime);\r\n                if (imageMapUserDefinedId !== undefined) {\r\n                  translationData.image = runtime.translationManager.getTranslatedImage(imageMapUserDefinedId);\r\n                  translationData.hasImageTranslation = (translationData.image !== null);\r\n                }\r\n                this.translateGenericComponent(memberPath, translationData, runtime);\r\n                break;\r\n              }\r\n              default:\r\n                if (!this.excludedComponentTypes.includes(componentType)) {\r\n                  this.translateGenericComponent(memberPath, translationData, runtime);\r\n                }\r\n            }\r\n\r\n            // specific rendering after translation\r\n            const receiverComponent = runtime.componentDirectory.findComponent(memberPath);\r\n            const renderComponent = (receiverComponent !== undefined);\r\n            if (renderComponent && this.renderAfterTranslationComponentTypes.includes(componentType)) {\r\n              componentsToRenderAfterTranslation.push(memberPath);\r\n            }\r\n          });\r\n        }\r\n      })\r\n\r\n      // specific rendering after translation\r\n      componentsToRenderAfterTranslation.forEach((memberPath) => {\r\n        RenderingHelper.triggerRenderingViaPath(memberPath, runtime);\r\n      })\r\n\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  translateGenericComponent = (memberPath, translationData, runtime) => {\r\n    const memberAbsoluteUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(memberPath, runtime);\r\n    const memberUserDefinedId = UserDefPathHelper.getLastUserDefIdFromPath(memberAbsoluteUserDefPath);\r\n    const receiverComponent = runtime.componentDirectory.findComponent(memberPath);\r\n    const renderComponent = (receiverComponent !== undefined);\r\n\r\n    if (translationData.hasTextTranslation) {\r\n      const safeToTranslate = this.shouldUpdateComponentText(memberPath, memberUserDefinedId, runtime);\r\n      if (safeToTranslate) {\r\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractTextValue, StateAttributeAccess.setTextValue, translationData.text, memberPath, runtime, renderComponent);\r\n        // update language in state\r\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractLanguageValue, StateAttributeAccess.setLanguageValue, this.translationLanguage, memberPath, runtime, false);\r\n      }\r\n    }\r\n\r\n    if (translationData.hasMouseOverTranslation) {\r\n      ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractMouseOverValue, StateAttributeAccess.setMouseOverValue, translationData.mouseOver, memberPath, runtime, renderComponent);\r\n    }\r\n\r\n    if (translationData.hasImageTranslation) {\r\n      ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractDefaultImage, StateAttributeAccess.setDefaultImage, translationData.image, memberPath, runtime, renderComponent);\r\n    }\r\n  }\r\n\r\n  getTranslationData = (indexPath, runtime) => {\r\n    const absoluteUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\r\n    const userDefinedId = UserDefPathHelper.getLastUserDefIdFromPath(absoluteUserDefPath);\r\n    const translatedText = runtime.translationManager.getTranslatedText(userDefinedId);\r\n    const translatedMouseOver = runtime.translationManager.getTranslatedMouseOver(userDefinedId);\r\n    const translatedImage = runtime.translationManager.getTranslatedImage(userDefinedId);\r\n    return {\r\n      hasTextTranslation: (translatedText !== null),\r\n      hasMouseOverTranslation: (translatedMouseOver !== null),\r\n      hasImageTranslation: (translatedImage !== null),\r\n      text: translatedText,\r\n      mouseOver: translatedMouseOver,\r\n      image: translatedImage\r\n    }\r\n  }\r\n\r\n  retrieveComponentLanguage = (pathId, runtime) => {\r\n    let componentLanguage = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractLanguageValue, pathId, runtime);\r\n    if (componentLanguage === undefined) {\r\n      componentLanguage = this.defaultLanguage;\r\n    }\r\n    return componentLanguage;\r\n  }\r\n\r\n  shouldUpdateComponentText = (pathId, userDefId, runtime) => {\r\n    const componentType = ComponentStateHelper.getComponentTypeForIndexPath(pathId, runtime);\r\n    // dynamic edit component (table cell)\r\n    if (componentType === 'CbaSingleLineInputField' && userDefId === undefined) return true;\r\n\r\n    const componentLanguage = this.retrieveComponentLanguage(pathId, runtime);\r\n    const textFromState = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTextValue, pathId, runtime);\r\n    const referenceTextTranslation = this.getTranslatedText4GivenLanguage(userDefId, componentLanguage);\r\n    if (textFromState === undefined) return true;\r\n    return (this.normalizeString(textFromState) === this.normalizeString(referenceTextTranslation));\r\n  }\r\n\r\n  normalizeString = (str) => {\r\n    if (str === undefined) return undefined;\r\n    return str.replace(/\\r\\n|\\r/g, '\\n');\r\n  }\r\n\r\n  getImageMapUserDefinedId = (memberPath, runtime) => {\r\n    const containerComponent = runtime.pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(memberPath));\r\n    if (containerComponent !== undefined) {\r\n      const { imageMapUserDefinedId } = containerComponent.config;\r\n      return imageMapUserDefinedId;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  translateTable = (tablePath, runtime) => {\r\n    if (this.shouldUpdateTableTexts(tablePath, runtime)) {\r\n      const tableTranslationData = this.getTranslationData(tablePath, runtime);\r\n      this.translateGenericComponent(tablePath, tableTranslationData, runtime);\r\n\r\n      const tableAbsoluteUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(tablePath, runtime);\r\n      const tableData = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTableData, tableAbsoluteUserDefPath, runtime);\r\n      const receiverComponent = runtime.componentDirectory.findComponent(tablePath);\r\n      const renderedComponent = (receiverComponent !== undefined);\r\n      let filteredTableCells = this.findRelevantTableCells(tablePath, runtime);\r\n      // process first cell at the end, so that the focus is set to this one\r\n      if (filteredTableCells.length > 0) {\r\n        filteredTableCells = filteredTableCells.slice(1).concat(filteredTableCells[0]);\r\n      }\r\n\r\n      filteredTableCells.forEach((memberPath) => {\r\n        // translate cell\r\n        const cellTranslationData = this.getTranslationData(memberPath, runtime);\r\n        this.translateGenericComponent(memberPath, cellTranslationData, runtime);\r\n\r\n        // update table\r\n        const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(memberPath));\r\n        const { row, column, readOnly } = config;\r\n\r\n        const updatedValue = (cellTranslationData.text === null) ? '' : cellTranslationData.text;\r\n        if (tableData !== undefined) {\r\n          tableData[row][column] = updatedValue;\r\n        }\r\n        if (renderedComponent) {\r\n          runtime.eventEmitter.emit(`${tablePath}-contentUpdate`, updatedValue, row, column, readOnly);\r\n        }\r\n\r\n        // update text edit widgets\r\n        const editMemberPath = IndexPathHelper.appendIndexToPageSegment(memberPath, 0);\r\n        const editComponentType = ComponentStateHelper.getComponentTypeForIndexPath(editMemberPath, runtime);\r\n        if (editComponentType === 'CbaSingleLineInputField') {\r\n          const formula = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractFormula, memberPath, runtime);\r\n          const updateEditWidgetValue = (formula !== undefined && TableHelper.isFormula(formula)) ? formula : cellTranslationData.text;\r\n          cellTranslationData.text = updateEditWidgetValue;\r\n          cellTranslationData.hasTextTranslation = (updateEditWidgetValue !== undefined);\r\n          this.translateGenericComponent(editMemberPath, cellTranslationData, runtime);\r\n        }\r\n      })\r\n\r\n      if (tableData !== undefined) {\r\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractTableData, StateAttributeAccess.setTableData, tableData, tablePath, runtime, false);\r\n      }\r\n    }\r\n  }\r\n\r\n  shouldUpdateTableTexts = (memberPath, runtime) => {\r\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(memberPath));\r\n    if (!config.isSpreadsheet) return false;\r\n\r\n    const filteredCells = this.findRelevantTableCells(memberPath, runtime);\r\n    const shouldUpdate = filteredCells.every((cellPath) => {\r\n      const absoluteUserDefId = PathTranslationHelper.getUserDefPathForIndexPath(cellPath, runtime);\r\n      const componentLanguage = this.retrieveComponentLanguage(cellPath, runtime);\r\n      const userDefId = UserDefPathHelper.getLastUserDefIdFromPath(absoluteUserDefId);\r\n      let textFromState = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTextValue, cellPath, runtime);\r\n      const formula = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractFormula, cellPath, runtime);\r\n      if (formula !== undefined && TableHelper.isFormula(formula)) textFromState = formula;\r\n      if (textFromState === undefined) return true;\r\n      const referenceTextTranslation = this.getTranslatedText4GivenLanguage(userDefId, componentLanguage);\r\n      return (textFromState === referenceTextTranslation);\r\n    });\r\n    return shouldUpdate;\r\n  }\r\n\r\n  findRelevantTableCells = (tablePath, runtime) => {\r\n    const memberPaths = ComponentStateHelper.findIndexPathsOfDescendants(tablePath, runtime);\r\n    return memberPaths.filter((tableMemberPath) => {\r\n      const componentType = ComponentStateHelper.getComponentTypeForIndexPath(tableMemberPath, runtime);\r\n      if (componentType === 'CbaTableCell') {\r\n        const cellConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(tableMemberPath)).config;\r\n        const { row, column } = cellConfig;\r\n        if (row > 0 && column > 0) return true;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n\r\n  translateTree = (treeAbsoluteUserDefPath, runtime) => {\r\n    const treeIndexPath = PathTranslationHelper.getIndexPathForUserDefPath(treeAbsoluteUserDefPath, runtime);\r\n    const { treeNodes, treeColumns } = TreeUtils.getTreeDataByPath(treeIndexPath, runtime);\r\n\r\n    TreeUtils.parseNodes(treeNodes, (node) => {\r\n      node.cells = node.cells.map((cell, index) => {\r\n        const translatedText = runtime.translationManager.getTranslatedText(node.userDefinedId);\r\n        if (translatedText !== null) {\r\n          cell.label = translatedText;\r\n        }\r\n        return cell;\r\n      });\r\n      const translatedMouseOver = runtime.translationManager.getTranslatedMouseOver(node.userDefinedId);\r\n      if (translatedMouseOver !== null) {\r\n        node.tooltip = translatedMouseOver;\r\n      }\r\n      return true;\r\n    })\r\n\r\n    treeColumns.map((column, index) => {\r\n      const translatedText = runtime.translationManager.getTranslatedText(column.userDefinedId);\r\n      if (translatedText !== null) {\r\n        column.label = translatedText;\r\n      }\r\n      const translatedMouseOver = runtime.translationManager.getTranslatedMouseOver(column.userDefinedId);\r\n      if (translatedMouseOver !== null) {\r\n        column.mouseOver = translatedMouseOver;\r\n      }\r\n      return column;\r\n    })\r\n\r\n    TreeUtils.setTreeDataByPath(treeIndexPath, runtime, treeNodes, null, treeColumns, null);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treeIndexPath, runtime.replayStepMonitor);\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index.css';\r\nimport { EventEmitter } from 'fbemitter';\r\nimport moment from 'moment';\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\nimport TouchBackend from 'react-dnd-touch-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport App from './App';\r\nimport ComponentStateManager from '../state/ComponentStateManager';\r\nimport ComponentDirectory from '../state/ComponentDirectory';\r\nimport IncidentsAccumulator from '../state/IncidentsAccumulator';\r\nimport TaskManager from '../state/TaskManager';\r\nimport TaskResultsManager from '../state/TaskResultsManager';\r\nimport StatemachinesManager from '../state/StatemachinesManager';\r\nimport PresenterStateManager from '../state/PresenterStateManager';\r\nimport TaskNavigatorStateManager from '../state/TaskNavigatorStateManager';\r\nimport TraceLogBuffer from '../state/TraceLogBuffer';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\nimport ClipboardManager from '../state/ClipboardManager';\r\nimport TraceLogUploader from '../transmit/TraceLogUploader';\r\nimport PostMessageReceiver from '../transmit/PostMessageReceiver';\r\nimport RecommendationsManager from '../state/RecommendationsManager';\r\nimport CalculatorsManager from '../state/CalculatorsManager';\r\nimport Utils from '../utils/Utils';\r\nimport '../utils/polyfills';\r\nimport ActionRegister from '../state/ActionRegister';\r\nimport FocusRegister from '../state/FocusRegister';\r\nimport CustomDragLayer from '../config/CustomDragLayer';\r\nimport RecordingBuffer from '../state/RecordingBuffer';\r\nimport RecordingUploader from '../transmit/RecordingUploader';\r\nimport ServerCalls from '../controller/ServerCalls';\r\nimport LibraryManager from '../state/LibraryManager';\r\nimport VariableManager from '../state/VariableManager';\r\nimport ReplayRunner from './ReplayRunner';\r\nimport ReplayStepMonitor from '../state/ReplayStepMonitor';\r\nimport TranslationManager from '../state/TranslationManager';\r\n\r\n/**\r\n * Entry point of task player layer.\r\n */\r\nexport default class TaskPlayer {\r\n\r\n  // ---------- public API ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build a task player. \r\n   * \r\n   * The new task player will start to listen for postMessage events. \r\n   * You may configure and start the player via postMessage events or \r\n   * via the public API instance methods.\r\n   */\r\n  constructor(eventTargetWindow, eventDomainUri) {\r\n    this.runtime = TaskPlayer.buildRuntime();\r\n    this.runtime.postMessageReceiver.startReceiving(this.runtime, this);\r\n    this.eventTargetWindow = eventTargetWindow === undefined ? 'self' : eventTargetWindow;\r\n    this.eventDomainUri = eventDomainUri === undefined ? Utils.getCallingUrlWithoutPath() : eventDomainUri;\r\n\r\n    this.apiState = 'appNotRunning';\r\n\r\n    this.settings = {\r\n      debugScoreHotKey: undefined,\r\n      debugTraceHotKey: undefined,\r\n      debugStatemachineHotKey: undefined,\r\n      ShowTaskNavigationBars: false\r\n    };\r\n\r\n    this.headerButtons = [];\r\n    this.courseForNavigator = [];\r\n    this.testsForNavigator = [];\r\n  }\r\n\r\n  /**\r\n   * Run the task player, i.e. make it display the App component.\r\n   */\r\n  runPlayer = () => {\r\n    Utils.printCbaVersion();\r\n    this.apiState = 'notLoggedIn';\r\n    const runtimer = this.runtime;\r\n\r\n    // Use drag&drop technique adapted to screen type of the target device:\r\n    // - use specific touch backend for DnD library to capture touch events\r\n    // - use custom made drag layer for touch backend (html5 backend uses drag layer provided by browser)\r\n    const isTouchDevice = Utils.isTouchDevice()\r\n    const waitingMessageTexts = Utils.getWaitingMessageTexts();\r\n    ReactDOM.render(\r\n      <DndProvider\r\n        backend={isTouchDevice ? TouchBackend : HTML5Backend}\r\n        options={isTouchDevice ? {\r\n          enableMouseEvents: true\r\n        } : {}}\r\n      >\r\n        <App\r\n          runtime={runtimer}\r\n          waitingMessageTexts={waitingMessageTexts}\r\n        />\r\n        <CustomDragLayer runtime={runtimer} />\r\n      </DndProvider>,\r\n      document.getElementById('root')\r\n    );\r\n  }\r\n\r\n  // ------- Initialization ------------------------------------------------------------------------\r\n  sendPlayerReady = () => {\r\n    if (this.checkNotRunning) {\r\n      this.runtime.postMessageReceiver.sendTaskPlayerReadyEvent(this.eventDomainUri, this.eventTargetWindow);\r\n    }\r\n  }\r\n\r\n\r\n  // ------- Configuration Control -----------------------------------------------------------------------\r\n  setWaitMessages = (primary, secondary) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('waitMessages')) {\r\n      this.runtime.app.setWaitingMessageTexts({\r\n        primary,\r\n        secondary\r\n      })\r\n    }\r\n  }\r\n\r\n  addItem = (itemConfig, resourcePath, externalResourcePath, libraryPathsMap) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('addItem')) {\r\n      const itemConfigVersion = itemConfig.runtimeCompatibilityVersion;\r\n      if (TaskPlayer.isCompatibleVersion(itemConfigVersion)) {\r\n        this.runtime.taskManager.addItem(itemConfig, resourcePath, externalResourcePath);\r\n        this.runtime.libraryManager.addLibrariesForItem(itemConfig.dependencies, libraryPathsMap);\r\n      } else {\r\n        console.info(`Ignored item ${itemConfig.name} with incompatible version: ${itemConfigVersion}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearItems = () => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('clearItems')) {\r\n      this.runtime.taskManager.clearItems();\r\n    }\r\n  }\r\n\r\n  setScalingConfiguration = (config) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('scalingConfiguration')) {\r\n      let { scalingMode, alignmentHorizontal, alignmentVertical } = config;\r\n      const scalingModes = ['no-scaling', 'scale-up', 'scale-down', 'scale-up-down'];\r\n      const alignmentHorizontalModes = ['left', 'right', 'center'];\r\n      const alignmentVerticalModes = ['top', 'bottom', 'center'];\r\n\r\n      if (!scalingModes.includes(scalingMode)) {\r\n        console.log(\"scalingConfiguration not correct, scalingMode must be one of: \", scalingModes);\r\n        [scalingMode] = scalingModes\r\n      }\r\n\r\n      if (!alignmentHorizontalModes.includes(alignmentHorizontal)) {\r\n        console.log(\"scalingConfiguration not correct, alignmentHorizontal must be one of: \", alignmentHorizontalModes);\r\n        [alignmentHorizontal] = alignmentHorizontalModes;\r\n      }\r\n\r\n      if (!alignmentVerticalModes.includes(alignmentVertical)) {\r\n        console.log(\"scalingConfiguration not correct, alignmentVertical must be one of: \", alignmentVerticalModes);\r\n        [alignmentVertical] = alignmentVerticalModes;\r\n      }\r\n\r\n      this.runtime.app.setScalingConfig({\r\n        scalingMode, alignmentHorizontal, alignmentVertical\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * We return a Promise that can execute the preload and wait for the results.\r\n   * \r\n   * The caller must trigger the Promise and provide the success/failure handlers.\r\n   * \r\n   * @param {String} itemName \r\n   */\r\n  setPreload = itemName => (\r\n    this.checkNotLoggedInOrNoTaskRunning('setPreload')\r\n      ? this.preloadItemResources(itemName)\r\n      : undefined\r\n  );\r\n\r\n  // ------- Trace Control -----------------------------------------------------------------------\r\n\r\n  insertMessageInTrace = (message) => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('insertMessageInTrace')) {\r\n      TaskPlayer.dumpMessageToTraceLog(message, this.runtime.traceLogBuffer);\r\n    }\r\n  }\r\n\r\n  logStateToTrace = () => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('logStateToTrace')) {\r\n      TraceLogHelper.dumpSnapshotToTrace(this.runtime);\r\n    }\r\n  }\r\n\r\n  flushTrace = () => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('flushTrace')) {\r\n      this.runtime.traceLogUploader.collectEntriesAndTriggerTransmission();\r\n    }\r\n  }\r\n\r\n  setCallbackTraceTransmission = (callback, interval) => {\r\n    if (this.checkNotLoggedIn('setCallbackTraceTransmission')) {\r\n      this.runtime.traceLogUploader.setCallbackTransmissionChannel(callback, interval)\r\n    }\r\n  }\r\n\r\n  setHttpTraceTransmission = (transmitUrl, interval, httpTimeout) => {\r\n    if (this.checkNotLoggedIn('setHttpTraceTransmission')) {\r\n      this.runtime.traceLogUploader.setHttpTransmissionChannel(transmitUrl, interval, httpTimeout);\r\n    }\r\n  }\r\n\r\n  setConsoleTraceTransmission = (interval) => {\r\n    if (this.checkNotLoggedIn('setConsoleTraceTransmission')) {\r\n      this.runtime.traceLogUploader.setConsoleTransmissionChannel(interval);\r\n    }\r\n  }\r\n\r\n  setTraceContextId = (contextId) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setTraceContextId')) {\r\n      const { traceLogUploader, traceLogBuffer } = this.runtime;\r\n      const { username, loginTimestamp } = traceLogUploader.getSessionContext();\r\n      traceLogUploader.setSessionContext(contextId, username, loginTimestamp);\r\n      traceLogBuffer.setTraceContextId(contextId);\r\n    }\r\n  }\r\n\r\n  setTraceContentFilter = (replaySupport, withExtendedMetaData, withoutItemConfiguration, withoutSnapshot, withoutScoring) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setTraceContentFilter')) {\r\n      const { traceLogBuffer } = this.runtime;\r\n      traceLogBuffer.setWithReplaySupport(replaySupport);\r\n      traceLogBuffer.setWithExtendedMetaData(withExtendedMetaData);\r\n      traceLogBuffer.setWithoutItemConfiguration(withoutItemConfiguration);\r\n      traceLogBuffer.setWithoutSnapshot(withoutSnapshot);\r\n      traceLogBuffer.setWithoutScoring(withoutScoring);\r\n    }\r\n  }\r\n\r\n  // ------- Recordings Control -----------------------------------------------------------------------\r\n\r\n  setCallbackRecordingTransmission = (callback) => {\r\n    if (this.checkNotLoggedIn('setCallbackRecordingTransmission')) {\r\n      this.runtime.recordingUploader.setCallbackTransmissionChannel(callback, undefined);\r\n    }\r\n  }\r\n\r\n  setHttpRecordingTransmission = (transmitUrl, httpTimeout) => {\r\n    if (this.checkNotLoggedIn('setHttpRecordingTransmission')) {\r\n      this.runtime.recordingUploader.setHttpTransmissionChannel(transmitUrl, undefined, httpTimeout);\r\n    }\r\n  }\r\n\r\n  setConsoleRecordingTransmission = () => {\r\n    if (this.checkNotLoggedIn('setConsoleRecordingTransmission')) {\r\n      this.runtime.recordingUploader.setConsoleTransmissionChannel(undefined);\r\n    }\r\n  }\r\n\r\n  setRecordingContextId = (contextId) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setRecordingContextId')) {\r\n      const { recordingUploader } = this.runtime;\r\n      const { username, loginTimestamp } = recordingUploader.getSessionContext();\r\n      recordingUploader.setSessionContext(contextId, username, loginTimestamp);\r\n    }\r\n  }\r\n\r\n  // ------- User Control -----------------------------------------------------------------------\r\n  setUserId = (id) => {\r\n    if (this.checkNotLoggedIn('setUserId')) {\r\n      const timestamp = moment().format();\r\n      const { traceLogUploader, recordingUploader, traceLogBuffer } = this.runtime;\r\n      const { sessionId: traceSessionId } = traceLogUploader.getSessionContext();\r\n      traceLogUploader.setSessionContext(traceSessionId, id, timestamp);\r\n      const { sessionId: recordingSessionId } = recordingUploader.getSessionContext();\r\n      recordingUploader.setSessionContext(recordingSessionId, id, timestamp);\r\n      TaskPlayer.dumpLoginToTraceLog(id, timestamp, traceLogBuffer);\r\n      this.apiState = 'noTaskRunning';\r\n    }\r\n  }\r\n\r\n  logout = () => {\r\n    if (this.checkNoTaskRunning('logout')) {\r\n      const { traceLogUploader, componentStateManager } = this.runtime;\r\n\r\n      // Flush all pending trace messages before we drop the user id:\r\n      traceLogUploader.collectEntriesAndTriggerTransmission();\r\n\r\n      const { sessionId } = traceLogUploader.getSessionContext();\r\n      traceLogUploader.setSessionContext(sessionId, undefined, undefined);\r\n      componentStateManager.clear();\r\n      this.apiState = 'notLoggedIn';\r\n    }\r\n  }\r\n\r\n  getUserId = () => (this.apiState === 'notLoggedIn'\r\n    ? undefined\r\n    : this.runtime.traceLogUploader.getSessionContext().username\r\n  );\r\n\r\n  showLogin = (titleLabel, fieldLabel, buttonLabel, fieldValueCallback) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('showLogin')) {\r\n      const { app } = this.runtime;\r\n      app.showLogin(titleLabel, fieldLabel, buttonLabel, fieldValueCallback);\r\n    }\r\n  }\r\n\r\n  // ------- Task Control -----------------------------------------------------------------------\r\n  startTask = (scope, item, task) => {\r\n    if (this.checkNoTaskRunning('startTask')) {\r\n      const { app } = this.runtime;\r\n      app.showTask(scope, item, task, this.settings, this.headerButtons, this.courseForNavigator, this.testsForNavigator);\r\n      this.apiState = 'taskRunning';\r\n    }\r\n  }\r\n\r\n  stopTask = () => {\r\n    if (this.checkTaskRunning('stopTask')) {\r\n      const { app } = this.runtime;\r\n      app.showWaiting();\r\n      this.apiState = 'noTaskRunning';\r\n    }\r\n  }\r\n\r\n  pauseTask = () => {\r\n    if (this.checkTaskRunning('pauseTask')) {\r\n      TaskPlayer.pauseOrResume(true, this.runtime);\r\n    }\r\n  }\r\n\r\n  resumeTask = () => {\r\n    if (this.checkTaskRunning('resumeTask')) {\r\n      TaskPlayer.pauseOrResume(false, this.runtime);\r\n    }\r\n  }\r\n\r\n  getTask = () => {\r\n    if (this.apiState === 'taskRunning') {\r\n      const { taskManager } = this.runtime;\r\n      const { test, item, task } = taskManager.getCurrentTestTaskItemNames();\r\n      return {\r\n        scope: test,\r\n        item,\r\n        task\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  setTaskSequencer = (switchCallback, availabilityCallback) => {\r\n    if (this.checkNoTaskRunning('setTaskSequencer')) {\r\n      const { taskManager } = this.runtime;\r\n      taskManager.setSwitchCallback(switchCallback);\r\n      taskManager.setAvailabilityCallback(availabilityCallback);\r\n    }\r\n  }\r\n\r\n  // ------- Task State Control ----------------------------------------------------------------\r\n\r\n  getTasksState = () => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('getTasksState')) {\r\n      return this.runtime.taskManager.getAllTasksState();\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  clearTasksState = () => {\r\n    if (this.checkNoTaskRunning('clearTasksState')) {\r\n      this.runtime.taskManager.clearTasksState();\r\n    }\r\n  }\r\n\r\n  preloadTasksState = (state) => {\r\n    if (this.checkNoTaskRunning('preloadTasksState')) {\r\n      this.runtime.taskManager.preloadTasksState(state);\r\n      TraceLogHelper.dumpSnapshotToTrace(this.runtime);\r\n    }\r\n  }\r\n\r\n  replay = (story) => {\r\n    if (this.checkNoTaskRunning('replay')) {\r\n      this.apiState = 'taskRunning';\r\n      const replayRunner = new ReplayRunner();\r\n      replayRunner.replay(story, () => {\r\n        this.apiState = this.runtime.taskManager.getCurrentTestTaskItemNames().task === undefined ? 'noTaskRunning' : 'taskRunning';\r\n        // TODO: return a \"finished\" signal to the TaskPlayer client\r\n        console.info(`Replay finished. API state now is ${this.apiState}`);\r\n      },\r\n      this.settings, this.headerButtons, this.courseForNavigator, this.testsForNavigator,\r\n      this.runtime);\r\n    }\r\n  }\r\n\r\n\r\n  // ------- Scoring Control ----------------------------------------------------------------\r\n\r\n  getScoringResult = () => {\r\n    if (this.checkTaskRunning('getScoringResult')) {\r\n      const { taskManager } = this.runtime;\r\n      return taskManager.getCurrentTaskResults();\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  getOldScoringResult = (scope, item, task) => {\r\n    if (this.checkNoTaskRunning('getOldScoringResult')) {\r\n      const { taskManager } = this.runtime;\r\n      return taskManager.getOldTaskResults(task, item, scope);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  // ------- Statemachine Control --------------------------------------------------------------\r\n  sendStatemachineEvent = (event) => {\r\n    if (this.checkTaskRunning('sendStatemachineEvent')) {\r\n      const { statemachinesManager, traceLogBuffer } = this.runtime;\r\n      TaskPlayer.dumpStatemachineEventToTraceLog(event, traceLogBuffer);\r\n      statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n\r\n  // ------- Header Control --------------------------------------------------------------------\r\n  setHeaderButtons = (headerButtons) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setHeaderButtons')) {\r\n      this.headerButtons = headerButtons;\r\n    }\r\n  }\r\n\r\n  setMenuCarousels = (course, scopes) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setMenuCarousels')) {\r\n      this.settings.ShowTaskNavigationBars = course.length > 0;\r\n      this.courseForNavigator = course;\r\n      this.testsForNavigator = scopes.map(scope => ({\r\n        name: scope.name,\r\n        taskCourse: scope.tasks\r\n      }));\r\n    }\r\n  }\r\n\r\n  // ------- Developer Mode Control ------------------------------------------------------------\r\n  activateDebuggingWindows = (score, trace, statemachine) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('activateDebuggingWindows')) {\r\n      this.settings.debugScoreHotKey = TaskPlayer.normalizeHotKeySpecification(score, 'scoring');\r\n      this.settings.debugTraceHotKey = TaskPlayer.normalizeHotKeySpecification(trace, 'trace');\r\n      this.settings.debugStatemachineHotKey = TaskPlayer.normalizeHotKeySpecification(statemachine, 'state machine');\r\n    }\r\n  }\r\n\r\n  // ---------- private stuff ------------------------------------------------------------------\r\n\r\n\r\n  static buildRuntime() {\r\n    const traceLogBuffer = new TraceLogBuffer();\r\n    const recordingBuffer = new RecordingBuffer();\r\n    const result = {\r\n      componentStateManager: new ComponentStateManager(),\r\n      componentDirectory: new ComponentDirectory(),\r\n      incidentsAccumulator: new IncidentsAccumulator(),\r\n      taskResultsManager: new TaskResultsManager(),\r\n      statemachinesManager: new StatemachinesManager(),\r\n      presenterStateManager: new PresenterStateManager(),\r\n      taskNavigatorStateManager: new TaskNavigatorStateManager(),\r\n      traceLogBuffer,\r\n      traceLogUploader: new TraceLogUploader(traceLogBuffer),\r\n      recordingBuffer,\r\n      recordingUploader: new RecordingUploader(recordingBuffer),\r\n      eventEmitter: new EventEmitter(),\r\n      clipboardManager: new ClipboardManager(traceLogBuffer),\r\n      postMessageReceiver: new PostMessageReceiver(),\r\n      calculatorsManager: new CalculatorsManager(),\r\n      actionRegister: new ActionRegister(),\r\n      focusRegister: new FocusRegister(),\r\n      libraryManager: new LibraryManager(),\r\n      variableManager: new VariableManager(),\r\n      replayStepMonitor: new ReplayStepMonitor(),\r\n      translationManager: new TranslationManager()\r\n    }\r\n    result.recommendationsManager = new RecommendationsManager(result);\r\n    result.taskManager = new TaskManager(result);\r\n\r\n    return result;\r\n  }\r\n\r\n  checkNotRunning = action => this.checkApiState(['appNotRunning'], action);\r\n\r\n  checkNotLoggedIn = action => this.checkApiState(['notLoggedIn'], action);\r\n\r\n  checkNoTaskRunning = action => this.checkApiState(['noTaskRunning'], action);\r\n\r\n  checkTaskRunning = action => this.checkApiState(['taskRunning'], action);\r\n\r\n  checkNotLoggedInOrNoTaskRunning = action => this.checkApiState(['notLoggedIn', 'noTaskRunning'], action);\r\n\r\n  checkNoTaskRunningOrTaskRunning = action => this.checkApiState(['noTaskRunning', 'taskRunning'], action);\r\n\r\n  checkApiState = (acceptedList, action) => {\r\n    const result = acceptedList.includes(this.apiState);\r\n    if (!result) {\r\n      console.info(`TaskPlayer API call ${action} denied in state ${this.apiState}`);\r\n    }\r\n    return result\r\n  }\r\n\r\n  static normalizeHotKeySpecification(hotKeySpecification, windowNameForErrorMessage) {\r\n    if (hotKeySpecification === undefined || hotKeySpecification === \"\") {\r\n      return undefined;\r\n    }\r\n    const withoutCtrl = hotKeySpecification.startsWith('ctrl+') ? hotKeySpecification.substring(5) : hotKeySpecification;\r\n    const withoutShift = withoutCtrl.startsWith('shift+') ? withoutCtrl.substring(6) : withoutCtrl;\r\n    if (withoutShift.length !== 1) {\r\n      console.error(`Invalid hot key for ${windowNameForErrorMessage} debugging window ignored: ${hotKeySpecification}`);\r\n      return undefined;\r\n    }\r\n    return hotKeySpecification;\r\n  }\r\n\r\n\r\n  /**\r\n   * Dump the login configuration to the trace log.\r\n   * \r\n   * @param {*} login The data obtained in login phase.\r\n   * @param {*} traceLogBuffer The trace log buffer to dump to.\r\n   */\r\n  static dumpLoginToTraceLog(username, timestamp, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('UserLogin', new Date(), {\r\n      user: username,\r\n      loginTimestamp: timestamp,\r\n      runtimeVersion: Utils.getCbaVersion(),\r\n      webClientUserAgent: window.navigator.userAgent\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Write a message from the runtime controller to the trace log buffer.\r\n   * \r\n   * @param {*} message The message to be written to the trace log\r\n   * @param {*} traceLogBuffer The trace log buffer to write to.\r\n   */\r\n  static dumpMessageToTraceLog(message, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('RuntimeController', new Date(), {\r\n      actionType: 'insertMessageInTrace',\r\n      details: message\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Write a statemachine event to the trace log buffer.\r\n   * \r\n   * @param {*} event The statemachine event to write to the trace log.\r\n   * @param {*} traceLogBuffer The trace log buffer to write to\r\n   */\r\n  static dumpStatemachineEventToTraceLog(event, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('RuntimeController', new Date(), {\r\n      actionType: 'sendStatemachineEvent',\r\n      details: event\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Write a pause/resume event to the trace log buffer.\r\n   * \r\n   * @param {boolean} enter Do we enter or leave the paused state?\r\n   * @param {*} traceLogBuffer The trace log buffer to write to.\r\n   */\r\n  static dumpPauseResumeToTraceLog(enter, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('PauseResume', new Date(), {\r\n      type: enter === true ? 'pause' : 'resume',\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Check that the given version number is compatible with our internal version.\r\n   */\r\n  static isCompatibleVersion(versionNumber) {\r\n    return versionNumber === Utils.getCbaVersionNumber();\r\n  }\r\n\r\n  /**\r\n   * Pause or resume the currently running task.\r\n   * \r\n   * @param {boolean} enterPause Should we pause (or resume)?\r\n   * @param {*} runtime The common runtime context structure. \r\n   */\r\n  static pauseOrResume(enterPause, runtime) {\r\n    const { testPresenter, traceLogBuffer, incidentsAccumulator, statemachinesManager, taskManager } = runtime;\r\n    TaskPlayer.dumpPauseResumeToTraceLog(enterPause, traceLogBuffer);\r\n    if (testPresenter !== null) {\r\n      if (enterPause) {\r\n        testPresenter.pause();\r\n      } else {\r\n        testPresenter.resume();\r\n      }\r\n    }\r\n    const atTime = new Date().getTime();\r\n    if (enterPause) {\r\n      incidentsAccumulator.pauseTask(atTime);\r\n      statemachinesManager.pauseCurrentStatemachine();\r\n    } else {\r\n      incidentsAccumulator.resumeTask(atTime);\r\n      statemachinesManager.resumeCurrentStatemachine();\r\n    }\r\n\r\n    // handle custom pausing for components that implement a \"handleTaskPauseOrResume\" method\r\n    const { standardPage, xPage } = taskManager.getCurrentPageNames();\r\n\r\n    [\r\n      ...runtime.componentDirectory.findComponentsByPageName(standardPage),\r\n      ...runtime.componentDirectory.findComponentsByPageName(xPage)\r\n    ].forEach((component) => {\r\n      if (component.handleTaskPauseOrResume) {\r\n        component.handleTaskPauseOrResume(enterPause);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {String} itemName Name of the item \r\n   * @param {Object} config Configuration object\r\n   * @param {Boolean} config.image \r\n   * @param {Boolean} config.video \r\n   * @param {Boolean} config.audio\r\n   *  \r\n   * @returns {Promise} Promise object that completes when all resources are preloaded. Of the form [ [images], [videos], [audios] ]\r\n   */\r\n  preloadItemResources = (itemName, config = {}) => new Promise((resolve, reject) => {\r\n    console.log(\"Starting preload for item\", itemName);\r\n\r\n    const defaultConfig = {\r\n      image: true,\r\n      video: true,\r\n      audio: true\r\n    }\r\n    const invalidConfigError = \"Wrong config? If no preload is required, a call to this function is not required.\";\r\n    const invalidItemError = \"No resources to preload\";\r\n\r\n    config = Object.assign(defaultConfig, config);\r\n\r\n    if (!config.image && !config.video && !config.audio) {\r\n      return reject(invalidConfigError);\r\n    }\r\n\r\n    const resources = this.runtime.taskManager.getItemResources(itemName);\r\n\r\n    if (!resources || resources.length === 0) {\r\n      return reject(invalidItemError);\r\n    }\r\n    const imageType = \"image\";\r\n    const videoType = \"video\";\r\n    const audioType = \"audio\";\r\n\r\n    let imagesPromise;\r\n    let videoPromise;\r\n    let audioPromise;\r\n\r\n    if (config.image) {\r\n      const assets = resources.filter(res => res.type === imageType);\r\n      imagesPromise = ServerCalls.preloadResources(assets, imageType);\r\n    }\r\n\r\n    if (config.video) {\r\n      const assets = resources.filter(res => res.type === videoType);\r\n      videoPromise = ServerCalls.preloadResources(assets, videoType);\r\n    }\r\n\r\n    if (config.audio) {\r\n      const assets = resources.filter(res => res.type === audioType);\r\n      audioPromise = ServerCalls.preloadResources(assets, audioType);\r\n    }\r\n\r\n    return resolve(Promise.all([imagesPromise, videoPromise, audioPromise]))\r\n  });\r\n\r\n\r\n}\r\n","import Controller from './controller/Controller';\nimport TaskPlayer from './preamble/TaskPlayer';\nimport Utils from './utils/Utils';\n\n\n/**\n * Determine whether we should use the internal controller to control the task player\n * or wait for an extenral controller to take over.\n * \n * The method checks settings given via the cba_runtime_config attribute\n * of the global window. \n */\nfunction shouldActivateInternalController() {\n  const controllerMode = Utils.getControllerMode();\n  const useExternalController = controllerMode === 'external-controller';\n  if (useExternalController) {\n    console.log('Wait for external controller to take over...');\n  }\n  return !useExternalController;\n}\n\n/**\n * Start the task player and send the ready signal.\n */\nfunction startTaskPlayer(taskPlayer) {\n  taskPlayer.sendPlayerReady();\n  taskPlayer.runPlayer();\n}\n\n/**\n * Start up the CBA runtime.\n */\nfunction startUp() {\n  const eventReceiverConfiguration = Utils.getEventReceiverConfiguration();\n  const taskPlayer = new TaskPlayer(eventReceiverConfiguration.eventTargetWindow, eventReceiverConfiguration.eventDomainUri);\n  if (shouldActivateInternalController()) {\n    // Activate the internal controller which will control the task player.\n    const internalController = new Controller();\n    internalController.runController(taskPlayer);\n  } else if (eventReceiverConfiguration.startTaskPlayerEvent) {\n    // Wait for the configured 'start' event and start the task player once the event arrives.\n    // The task player will wait for commands from an external controller.\n    window.addEventListener(eventReceiverConfiguration.startTaskPlayerEvent, (startEvent) => {\n      startTaskPlayer(taskPlayer);\n    });\n  } else {\n    // Start the task player immediately. The task player will wait for commands from an external controller.\n    startTaskPlayer(taskPlayer);\n  }\n}\n\nstartUp();\n"],"sourceRoot":""}